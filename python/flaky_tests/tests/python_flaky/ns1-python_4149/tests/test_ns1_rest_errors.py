# Automatically generated by Pynguin.
import pytest
import re as module_0
import ns1.rest.errors as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.purge()
    bytes_0 = b'\xd2\xfbwkM|vn\xa9\x84\x99l1g\xc14'
    resource_exception_0 = module_1.ResourceException(var_0, bytes_0, bytes_0)
    assert f'{type(resource_exception_0).__module__}.{type(resource_exception_0).__qualname__}' == 'ns1.rest.errors.ResourceException'
    assert resource_exception_0.message is None
    assert resource_exception_0.response == b'\xd2\xfbwkM|vn\xa9\x84\x99l1g\xc14'
    assert resource_exception_0.body == b'\xd2\xfbwkM|vn\xa9\x84\x99l1g\xc14'
    var_1 = resource_exception_0.__repr__()
    assert var_1 == "<ResourceException message=empty message, response=b'\\xd2\\xfbwkM|vn\\xa9\\x84\\x99l1g\\xc14', body=b'\\xd2\\xfbwkM|vn\\xa9\\x84\\x99l1g\\xc14'>"
    var_2 = resource_exception_0.__repr__()
    assert var_2 == "<ResourceException message=empty message, response=b'\\xd2\\xfbwkM|vn\\xa9\\x84\\x99l1g\\xc14', body=b'\\xd2\\xfbwkM|vn\\xa9\\x84\\x99l1g\\xc14'>"
    var_1.__reduce__()

def test_case_1():
    none_type_0 = None
    resource_exception_0 = module_1.ResourceException(none_type_0)
    assert f'{type(resource_exception_0).__module__}.{type(resource_exception_0).__qualname__}' == 'ns1.rest.errors.ResourceException'
    assert resource_exception_0.message is None
    assert resource_exception_0.response is None
    assert resource_exception_0.body is None
    var_0 = resource_exception_0.__repr__()
    assert var_0 == '<ResourceException message=empty message, response=empty response, body=empty body>'

def test_case_2():
    var_0 = module_0.purge()
    var_1 = var_0.__str__()

def test_case_3():
    str_0 = '!IQ.wb\nJHbjCa tERi\x0cq'
    none_type_0 = None
    resource_exception_0 = module_1.ResourceException(none_type_0, none_type_0, str_0)
    assert f'{type(resource_exception_0).__module__}.{type(resource_exception_0).__qualname__}' == 'ns1.rest.errors.ResourceException'
    assert resource_exception_0.message is None
    assert resource_exception_0.response is None
    assert resource_exception_0.body == '!IQ.wb\nJHbjCa tERi\x0cq'
    var_0 = resource_exception_0.__str__()
    var_1 = str_0.__str__()
    rate_limit_exception_0 = module_1.RateLimitException(str_0, limit=resource_exception_0, remaining=var_1, period=var_0)
    assert f'{type(rate_limit_exception_0).__module__}.{type(rate_limit_exception_0).__qualname__}' == 'ns1.rest.errors.RateLimitException'
    assert rate_limit_exception_0.message == '!IQ.wb\nJHbjCa tERi\x0cq'
    assert rate_limit_exception_0.response is None
    assert rate_limit_exception_0.body is None
    assert rate_limit_exception_0.by is None
    assert f'{type(rate_limit_exception_0.limit).__module__}.{type(rate_limit_exception_0.limit).__qualname__}' == 'ns1.rest.errors.ResourceException'
    assert rate_limit_exception_0.period is None
    assert rate_limit_exception_0.remaining == '!IQ.wb\nJHbjCa tERi\x0cq'
    var_2 = resource_exception_0.__repr__()
    assert var_2 == '<ResourceException message=empty message, response=empty response, body=!IQ.wb\nJHbjCa tERi\x0cq>'

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '!IQ.wb\nJHbjCa tERi\x0cq'
    none_type_0 = None
    resource_exception_0 = module_1.ResourceException(none_type_0, none_type_0, str_0)
    assert f'{type(resource_exception_0).__module__}.{type(resource_exception_0).__qualname__}' == 'ns1.rest.errors.ResourceException'
    assert resource_exception_0.message is None
    assert resource_exception_0.response is None
    assert resource_exception_0.body == '!IQ.wb\nJHbjCa tERi\x0cq'
    auth_exception_0 = module_1.AuthException(none_type_0)
    assert auth_exception_0.message is None
    assert auth_exception_0.response is None
    assert auth_exception_0.body is None
    var_0 = resource_exception_0.__str__()
    var_1 = resource_exception_0.__repr__()
    assert var_1 == '<ResourceException message=empty message, response=empty response, body=!IQ.wb\nJHbjCa tERi\x0cq>'
    var_2 = auth_exception_0.__repr__()
    assert var_2 == '<AuthException>'
    var_3 = var_2.__str__()
    assert var_3 == '<AuthException>'
    module_0.template(auth_exception_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '!IQ.wb\nJHbjCa tEq'
    none_type_0 = None
    resource_exception_0 = module_1.ResourceException(none_type_0, none_type_0, str_0)
    assert f'{type(resource_exception_0).__module__}.{type(resource_exception_0).__qualname__}' == 'ns1.rest.errors.ResourceException'
    assert resource_exception_0.message is None
    assert resource_exception_0.response is None
    assert resource_exception_0.body == '!IQ.wb\nJHbjCa tEq'
    none_type_1 = None
    auth_exception_0 = module_1.AuthException(none_type_1)
    assert auth_exception_0.message is None
    assert auth_exception_0.response is None
    assert auth_exception_0.body is None
    auth_exception_1 = module_1.AuthException(none_type_1)
    assert auth_exception_1.message is None
    assert auth_exception_1.response is None
    assert auth_exception_1.body is None
    var_0 = resource_exception_0.__repr__()
    assert var_0 == '<ResourceException message=empty message, response=empty response, body=!IQ.wb\nJHbjCa tEq>'
    var_1 = auth_exception_1.__str__()
    assert var_1 == 'unauthorized'
    module_0.template(str_0, str_0)

def test_case_6():
    set_0 = set()
    none_type_0 = None
    rate_limit_exception_0 = module_1.RateLimitException(none_type_0)
    assert f'{type(rate_limit_exception_0).__module__}.{type(rate_limit_exception_0).__qualname__}' == 'ns1.rest.errors.RateLimitException'
    assert rate_limit_exception_0.message is None
    assert rate_limit_exception_0.response is None
    assert rate_limit_exception_0.body is None
    assert rate_limit_exception_0.by is None
    assert rate_limit_exception_0.limit is None
    assert rate_limit_exception_0.period is None
    assert rate_limit_exception_0.remaining is None
    resource_exception_0 = module_1.ResourceException(set_0, body=set_0)
    assert f'{type(resource_exception_0).__module__}.{type(resource_exception_0).__qualname__}' == 'ns1.rest.errors.ResourceException'
    assert resource_exception_0.message == {*()}
    assert resource_exception_0.response is None
    assert resource_exception_0.body == {*()}
    rate_limit_exception_1 = module_1.RateLimitException(set_0, set_0, none_type_0, none_type_0, remaining=none_type_0)
    assert f'{type(rate_limit_exception_1).__module__}.{type(rate_limit_exception_1).__qualname__}' == 'ns1.rest.errors.RateLimitException'
    assert rate_limit_exception_1.message == {*()}
    assert rate_limit_exception_1.response == {*()}
    assert rate_limit_exception_1.body is None
    assert rate_limit_exception_1.by is None
    assert rate_limit_exception_1.limit is None
    assert rate_limit_exception_1.period is None
    assert rate_limit_exception_1.remaining is None
    rate_limit_exception_2 = module_1.RateLimitException(set_0, set_0, set_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    rate_limit_exception_0 = module_1.RateLimitException(bool_0, body=bool_0)
    assert f'{type(rate_limit_exception_0).__module__}.{type(rate_limit_exception_0).__qualname__}' == 'ns1.rest.errors.RateLimitException'
    assert rate_limit_exception_0.message is True
    assert rate_limit_exception_0.response is None
    assert rate_limit_exception_0.body is True
    assert rate_limit_exception_0.by is None
    assert rate_limit_exception_0.limit is None
    assert rate_limit_exception_0.period is None
    assert rate_limit_exception_0.remaining is None
    var_0 = rate_limit_exception_0.__str__()
    assert var_0 is True
    var_1 = rate_limit_exception_0.__repr__()
    assert var_1 == '<RateLimitException by=None limit=None period=None remaining=None>'
    auth_exception_0 = module_1.AuthException(bool_0, bool_0)
    var_2 = auth_exception_0.__str__()
    assert var_2 == 'unauthorized'
    var_3 = auth_exception_0.__repr__()
    assert var_3 == '<AuthException>'
    var_4 = auth_exception_0.__str__()
    assert var_4 == 'unauthorized'
    var_1.write(auth_exception_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'u5PixRh^Wdm;btsZZC01'
    none_type_0 = None
    resource_exception_0 = module_1.ResourceException(str_0, none_type_0, str_0)
    assert f'{type(resource_exception_0).__module__}.{type(resource_exception_0).__qualname__}' == 'ns1.rest.errors.ResourceException'
    assert resource_exception_0.message == 'u5PixRh^Wdm;btsZZC01'
    assert resource_exception_0.response is None
    assert resource_exception_0.body == 'u5PixRh^Wdm;btsZZC01'
    none_type_1 = None
    var_0 = module_0.purge()
    auth_exception_0 = module_1.AuthException(none_type_1)
    assert auth_exception_0.message is None
    assert auth_exception_0.response is None
    assert auth_exception_0.body is None
    var_1 = resource_exception_0.__repr__()
    assert var_1 == '<ResourceException message=u5PixRh^Wdm;btsZZC01, response=empty response, body=u5PixRh^Wdm;btsZZC01>'
    module_0.template(str_0, resource_exception_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '\n        Create a new high level Scope object\n\n        :param ns1.config.Config config: config object\n        :param int scopegroup_id: id of the scope group\n        :param int address_id: id of the address the scope is associated with\n        :param int scope_id: id of the scope\n        :param DHCPOptions options: DHCPOptions object that contains the settings for the scope\n        :param dict tags: tags of the scope\n        '
    resource_exception_0 = module_1.ResourceException(str_0)
    assert f'{type(resource_exception_0).__module__}.{type(resource_exception_0).__qualname__}' == 'ns1.rest.errors.ResourceException'
    assert resource_exception_0.message == '\n        Create a new high level Scope object\n\n        :param ns1.config.Config config: config object\n        :param int scopegroup_id: id of the scope group\n        :param int address_id: id of the address the scope is associated with\n        :param int scope_id: id of the scope\n        :param DHCPOptions options: DHCPOptions object that contains the settings for the scope\n        :param dict tags: tags of the scope\n        '
    assert resource_exception_0.response is None
    assert resource_exception_0.body is None
    none_type_0 = None
    var_0 = resource_exception_0.__str__()
    assert var_0 == '\n        Create a new high level Scope object\n\n        :param ns1.config.Config config: config object\n        :param int scopegroup_id: id of the scope group\n        :param int address_id: id of the address the scope is associated with\n        :param int scope_id: id of the scope\n        :param DHCPOptions options: DHCPOptions object that contains the settings for the scope\n        :param dict tags: tags of the scope\n        '
    resource_exception_1 = module_1.ResourceException(none_type_0, none_type_0, str_0)
    assert f'{type(resource_exception_1).__module__}.{type(resource_exception_1).__qualname__}' == 'ns1.rest.errors.ResourceException'
    assert resource_exception_1.message is None
    assert resource_exception_1.response is None
    assert resource_exception_1.body == '\n        Create a new high level Scope object\n\n        :param ns1.config.Config config: config object\n        :param int scopegroup_id: id of the scope group\n        :param int address_id: id of the address the scope is associated with\n        :param int scope_id: id of the scope\n        :param DHCPOptions options: DHCPOptions object that contains the settings for the scope\n        :param dict tags: tags of the scope\n        '
    none_type_1 = None
    auth_exception_0 = module_1.AuthException(none_type_1)
    var_1 = resource_exception_1.__str__()
    var_2 = resource_exception_1.__repr__()
    assert var_2 == '<ResourceException message=empty message, response=empty response, body=\n        Create a new high lev...>'
    var_1.encode(none_type_0)