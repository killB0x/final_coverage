# Automatically generated by Pynguin.
import pytest
import ns1.ipam as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '9(X+'
    module_0.DHCPOptions(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    scope_exception_0 = module_0.ScopeException()
    d_h_c_p_option_value_0 = module_0.DHCPOptionValue(none_type_0, none_type_0)
    d_h_c_p_options_exception_0 = module_0.DHCPOptionsException()
    var_0 = d_h_c_p_option_value_0.generate_option(d_h_c_p_option_value_0)
    var_0.reload(errback=d_h_c_p_option_value_0)

def test_case_2():
    reservation_exception_0 = module_0.ReservationException()

@pytest.mark.xfail(strict=True)
def test_case_3():
    optiondef_exception_0 = module_0.OptiondefException()
    module_0.Network(optiondef_exception_0, optiondef_exception_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    scopegroup_exception_0 = module_0.ScopegroupException()
    module_0.Address(scopegroup_exception_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    lease_exception_0 = module_0.LeaseException()
    module_0.Scopegroup(lease_exception_0, id=lease_exception_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.Optiondef(none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    module_0.Lease(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    d_h_c_p_option_value_0 = module_0.DHCPOptionValue(list_0, list_0, list_0)
    var_0 = d_h_c_p_option_value_0.generate_option(d_h_c_p_option_value_0)
    str_0 = '9X+'
    module_0.DHCPOptions(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = ''
    d_h_c_p_options_0 = module_0.DHCPOptions(str_0, str_0)
    assert f'{type(d_h_c_p_options_0).__module__}.{type(d_h_c_p_options_0).__qualname__}' == 'ns1.ipam.DHCPOptions'
    assert d_h_c_p_options_0.option_list == {'options': []}
    assert d_h_c_p_options_0.address_family == ''
    assert d_h_c_p_options_0.options == ''
    assert d_h_c_p_options_0.server_options == {}
    assert module_0.DHCPOptions.AF == ['dhcpv4', 'dhcpv6']
    assert module_0.DHCPOptions.OPTIONS == {'dhcpv4': ['bootfile-name', 'domain-name', 'domain-name-servers', 'host-name', 'routers', 'tftp-server-name', 'time-servers', 'vendor-class-identifier'], 'dhcpv6': ['dns-servers']}
    var_0 = d_h_c_p_options_0.__repr__()
    assert var_0 == '<DHCPOptions address_family=>'
    module_0.Reservation(str_0, str_0, d_h_c_p_options_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    tuple_0 = ()
    d_h_c_p_options_0 = module_0.DHCPOptions(tuple_0, tuple_0, tuple_0)
    assert d_h_c_p_options_0.option_list == {'options': []}
    assert d_h_c_p_options_0.server_options == ()
    assert module_0.DHCPOptions.AF == ['dhcpv4', 'dhcpv6']
    assert module_0.DHCPOptions.OPTIONS == {'dhcpv4': ['bootfile-name', 'domain-name', 'domain-name-servers', 'host-name', 'routers', 'tftp-server-name', 'time-servers', 'vendor-class-identifier'], 'dhcpv6': ['dns-servers']}
    d_h_c_p_options_0.__repr__()

@pytest.mark.xfail(strict=True)
def test_case_11():
    tuple_0 = ()
    d_h_c_p_options_0 = module_0.DHCPOptions(tuple_0, tuple_0, tuple_0)
    assert d_h_c_p_options_0.option_list == {'options': []}
    assert d_h_c_p_options_0.server_options == ()
    assert module_0.DHCPOptions.AF == ['dhcpv4', 'dhcpv6']
    assert module_0.DHCPOptions.OPTIONS == {'dhcpv4': ['bootfile-name', 'domain-name', 'domain-name-servers', 'host-name', 'routers', 'tftp-server-name', 'time-servers', 'vendor-class-identifier'], 'dhcpv6': ['dns-servers']}
    none_type_0 = None
    d_h_c_p_options_0.update(d_h_c_p_options_0, none_type_0)