# Automatically generated by Pynguin.
import pytest
import growler.aio.protocol as module_0

def test_case_0():
    bool_0 = True
    list_0 = []
    growler_protocol_0 = module_0.GrowlerProtocol(list_0, list_0)
    assert f'{type(growler_protocol_0).__module__}.{type(growler_protocol_0).__qualname__}' == 'growler.aio.protocol.GrowlerProtocol'
    assert growler_protocol_0.make_responder == []
    assert f'{type(growler_protocol_0.log).__module__}.{type(growler_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert growler_protocol_0.responders == []
    assert growler_protocol_0.is_done_transmitting is False
    assert f'{type(module_0.GrowlerProtocol.factory).__module__}.{type(module_0.GrowlerProtocol.factory).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.GrowlerProtocol.get_factory).__module__}.{type(module_0.GrowlerProtocol.get_factory).__qualname__}' == 'builtins.method'
    var_0 = growler_protocol_0.connection_lost(bool_0)

def test_case_1():
    bool_0 = False
    list_0 = []
    growler_protocol_0 = module_0.GrowlerProtocol(list_0, list_0)
    assert f'{type(growler_protocol_0).__module__}.{type(growler_protocol_0).__qualname__}' == 'growler.aio.protocol.GrowlerProtocol'
    assert growler_protocol_0.make_responder == []
    assert f'{type(growler_protocol_0.log).__module__}.{type(growler_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert growler_protocol_0.responders == []
    assert growler_protocol_0.is_done_transmitting is False
    assert f'{type(module_0.GrowlerProtocol.factory).__module__}.{type(module_0.GrowlerProtocol.factory).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.GrowlerProtocol.get_factory).__module__}.{type(module_0.GrowlerProtocol.get_factory).__qualname__}' == 'builtins.method'
    var_0 = growler_protocol_0.connection_lost(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    growler_protocol_0 = module_0.GrowlerProtocol(list_0, list_0)
    assert f'{type(growler_protocol_0).__module__}.{type(growler_protocol_0).__qualname__}' == 'growler.aio.protocol.GrowlerProtocol'
    assert growler_protocol_0.make_responder == []
    assert f'{type(growler_protocol_0.log).__module__}.{type(growler_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert growler_protocol_0.responders == []
    assert growler_protocol_0.is_done_transmitting is False
    assert f'{type(module_0.GrowlerProtocol.factory).__module__}.{type(module_0.GrowlerProtocol.factory).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.GrowlerProtocol.get_factory).__module__}.{type(module_0.GrowlerProtocol.get_factory).__qualname__}' == 'builtins.method'
    growler_protocol_0.data_received(list_0)

def test_case_3():
    list_0 = []
    growler_protocol_0 = module_0.GrowlerProtocol(list_0, list_0)
    assert f'{type(growler_protocol_0).__module__}.{type(growler_protocol_0).__qualname__}' == 'growler.aio.protocol.GrowlerProtocol'
    assert growler_protocol_0.make_responder == []
    assert f'{type(growler_protocol_0.log).__module__}.{type(growler_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert growler_protocol_0.responders == []
    assert growler_protocol_0.is_done_transmitting is False
    assert f'{type(module_0.GrowlerProtocol.factory).__module__}.{type(module_0.GrowlerProtocol.factory).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.GrowlerProtocol.get_factory).__module__}.{type(module_0.GrowlerProtocol.get_factory).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 405
    growler_protocol_0 = module_0.GrowlerProtocol(int_0, int_0)
    assert f'{type(growler_protocol_0).__module__}.{type(growler_protocol_0).__qualname__}' == 'growler.aio.protocol.GrowlerProtocol'
    assert growler_protocol_0.make_responder == 405
    assert f'{type(growler_protocol_0.log).__module__}.{type(growler_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert growler_protocol_0.responders == []
    assert growler_protocol_0.is_done_transmitting is False
    assert f'{type(module_0.GrowlerProtocol.factory).__module__}.{type(module_0.GrowlerProtocol.factory).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.GrowlerProtocol.get_factory).__module__}.{type(module_0.GrowlerProtocol.get_factory).__qualname__}' == 'builtins.method'
    var_0 = growler_protocol_0.eof_received()
    assert growler_protocol_0.is_done_transmitting is True
    growler_protocol_0.data_received(int_0)