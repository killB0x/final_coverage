# Automatically generated by Pynguin.
import pytest
import growler.http.responder as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    growler_h_t_t_p_responder_0 = module_0.GrowlerHTTPResponder(none_type_0)
    assert f'{type(growler_h_t_t_p_responder_0).__module__}.{type(growler_h_t_t_p_responder_0).__qualname__}' == 'growler.http.responder.GrowlerHTTPResponder'
    assert f'{type(growler_h_t_t_p_responder_0.parser).__module__}.{type(growler_h_t_t_p_responder_0.parser).__qualname__}' == 'growler.http.parser.Parser'
    assert f'{type(module_0.GrowlerHTTPResponder.method).__module__}.{type(module_0.GrowlerHTTPResponder.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.method_str).__module__}.{type(module_0.GrowlerHTTPResponder.method_str).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.parsed_query).__module__}.{type(module_0.GrowlerHTTPResponder.parsed_query).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.headers).__module__}.{type(module_0.GrowlerHTTPResponder.headers).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.loop).__module__}.{type(module_0.GrowlerHTTPResponder.loop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.app).__module__}.{type(module_0.GrowlerHTTPResponder.app).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.ip).__module__}.{type(module_0.GrowlerHTTPResponder.ip).__qualname__}' == 'builtins.property'
    growler_h_t_t_p_responder_0.on_data(growler_h_t_t_p_responder_0)

def test_case_1():
    none_type_0 = None
    growler_h_t_t_p_responder_0 = module_0.GrowlerHTTPResponder(none_type_0, response_factory=none_type_0)
    assert f'{type(growler_h_t_t_p_responder_0).__module__}.{type(growler_h_t_t_p_responder_0).__qualname__}' == 'growler.http.responder.GrowlerHTTPResponder'
    assert f'{type(growler_h_t_t_p_responder_0.parser).__module__}.{type(growler_h_t_t_p_responder_0.parser).__qualname__}' == 'growler.http.parser.Parser'
    assert growler_h_t_t_p_responder_0.build_res is None
    assert f'{type(module_0.GrowlerHTTPResponder.method).__module__}.{type(module_0.GrowlerHTTPResponder.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.method_str).__module__}.{type(module_0.GrowlerHTTPResponder.method_str).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.parsed_query).__module__}.{type(module_0.GrowlerHTTPResponder.parsed_query).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.headers).__module__}.{type(module_0.GrowlerHTTPResponder.headers).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.loop).__module__}.{type(module_0.GrowlerHTTPResponder.loop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.app).__module__}.{type(module_0.GrowlerHTTPResponder.app).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.ip).__module__}.{type(module_0.GrowlerHTTPResponder.ip).__qualname__}' == 'builtins.property'
    with pytest.raises(AssertionError):
        growler_h_t_t_p_responder_0.validate_and_store_body_data(growler_h_t_t_p_responder_0)

def test_case_2():
    int_0 = -1434
    growler_h_t_t_p_responder_0 = module_0.GrowlerHTTPResponder(int_0, response_factory=int_0)
    assert f'{type(growler_h_t_t_p_responder_0).__module__}.{type(growler_h_t_t_p_responder_0).__qualname__}' == 'growler.http.responder.GrowlerHTTPResponder'
    assert f'{type(growler_h_t_t_p_responder_0.parser).__module__}.{type(growler_h_t_t_p_responder_0.parser).__qualname__}' == 'growler.http.parser.Parser'
    assert growler_h_t_t_p_responder_0.build_res == -1434
    assert f'{type(module_0.GrowlerHTTPResponder.method).__module__}.{type(module_0.GrowlerHTTPResponder.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.method_str).__module__}.{type(module_0.GrowlerHTTPResponder.method_str).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.parsed_query).__module__}.{type(module_0.GrowlerHTTPResponder.parsed_query).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.headers).__module__}.{type(module_0.GrowlerHTTPResponder.headers).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.loop).__module__}.{type(module_0.GrowlerHTTPResponder.loop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.app).__module__}.{type(module_0.GrowlerHTTPResponder.app).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.ip).__module__}.{type(module_0.GrowlerHTTPResponder.ip).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    growler_h_t_t_p_responder_0 = module_0.GrowlerHTTPResponder(none_type_0, response_factory=none_type_0)
    assert f'{type(growler_h_t_t_p_responder_0).__module__}.{type(growler_h_t_t_p_responder_0).__qualname__}' == 'growler.http.responder.GrowlerHTTPResponder'
    assert f'{type(growler_h_t_t_p_responder_0.parser).__module__}.{type(growler_h_t_t_p_responder_0.parser).__qualname__}' == 'growler.http.parser.Parser'
    assert growler_h_t_t_p_responder_0.build_res is None
    assert f'{type(module_0.GrowlerHTTPResponder.method).__module__}.{type(module_0.GrowlerHTTPResponder.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.method_str).__module__}.{type(module_0.GrowlerHTTPResponder.method_str).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.parsed_query).__module__}.{type(module_0.GrowlerHTTPResponder.parsed_query).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.headers).__module__}.{type(module_0.GrowlerHTTPResponder.headers).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.loop).__module__}.{type(module_0.GrowlerHTTPResponder.loop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.app).__module__}.{type(module_0.GrowlerHTTPResponder.app).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.ip).__module__}.{type(module_0.GrowlerHTTPResponder.ip).__qualname__}' == 'builtins.property'
    bytes_0 = b'Y\x98j\xa5q\xce\x96\x91 \xd3\xe8\xfer\x13\x01_'
    var_0 = growler_h_t_t_p_responder_0.on_data(bytes_0)
    growler_h_t_t_p_responder_0.begin_application(bytes_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '\nj{Wj4'
    growler_h_t_t_p_responder_0 = module_0.GrowlerHTTPResponder(str_0)
    assert f'{type(growler_h_t_t_p_responder_0).__module__}.{type(growler_h_t_t_p_responder_0).__qualname__}' == 'growler.http.responder.GrowlerHTTPResponder'
    assert f'{type(growler_h_t_t_p_responder_0.parser).__module__}.{type(growler_h_t_t_p_responder_0.parser).__qualname__}' == 'growler.http.parser.Parser'
    assert f'{type(module_0.GrowlerHTTPResponder.method).__module__}.{type(module_0.GrowlerHTTPResponder.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.method_str).__module__}.{type(module_0.GrowlerHTTPResponder.method_str).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.parsed_query).__module__}.{type(module_0.GrowlerHTTPResponder.parsed_query).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.headers).__module__}.{type(module_0.GrowlerHTTPResponder.headers).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.loop).__module__}.{type(module_0.GrowlerHTTPResponder.loop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.app).__module__}.{type(module_0.GrowlerHTTPResponder.app).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.ip).__module__}.{type(module_0.GrowlerHTTPResponder.ip).__qualname__}' == 'builtins.property'
    growler_h_t_t_p_responder_0.set_body_data(growler_h_t_t_p_responder_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    growler_h_t_t_p_responder_0 = module_0.GrowlerHTTPResponder(none_type_0)
    assert f'{type(growler_h_t_t_p_responder_0).__module__}.{type(growler_h_t_t_p_responder_0).__qualname__}' == 'growler.http.responder.GrowlerHTTPResponder'
    assert f'{type(growler_h_t_t_p_responder_0.parser).__module__}.{type(growler_h_t_t_p_responder_0.parser).__qualname__}' == 'growler.http.parser.Parser'
    assert f'{type(module_0.GrowlerHTTPResponder.method).__module__}.{type(module_0.GrowlerHTTPResponder.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.method_str).__module__}.{type(module_0.GrowlerHTTPResponder.method_str).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.parsed_query).__module__}.{type(module_0.GrowlerHTTPResponder.parsed_query).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.headers).__module__}.{type(module_0.GrowlerHTTPResponder.headers).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.loop).__module__}.{type(module_0.GrowlerHTTPResponder.loop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.app).__module__}.{type(module_0.GrowlerHTTPResponder.app).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.ip).__module__}.{type(module_0.GrowlerHTTPResponder.ip).__qualname__}' == 'builtins.property'
    var_0 = growler_h_t_t_p_responder_0.set_request_line(growler_h_t_t_p_responder_0, growler_h_t_t_p_responder_0, growler_h_t_t_p_responder_0)
    growler_h_t_t_p_responder_0.on_data(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    growler_h_t_t_p_responder_0 = module_0.GrowlerHTTPResponder(bool_0, response_factory=bool_0)
    assert f'{type(growler_h_t_t_p_responder_0).__module__}.{type(growler_h_t_t_p_responder_0).__qualname__}' == 'growler.http.responder.GrowlerHTTPResponder'
    assert f'{type(growler_h_t_t_p_responder_0.parser).__module__}.{type(growler_h_t_t_p_responder_0.parser).__qualname__}' == 'growler.http.parser.Parser'
    assert growler_h_t_t_p_responder_0.build_res is True
    assert f'{type(module_0.GrowlerHTTPResponder.method).__module__}.{type(module_0.GrowlerHTTPResponder.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.method_str).__module__}.{type(module_0.GrowlerHTTPResponder.method_str).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.parsed_query).__module__}.{type(module_0.GrowlerHTTPResponder.parsed_query).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.headers).__module__}.{type(module_0.GrowlerHTTPResponder.headers).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.loop).__module__}.{type(module_0.GrowlerHTTPResponder.loop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.app).__module__}.{type(module_0.GrowlerHTTPResponder.app).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.ip).__module__}.{type(module_0.GrowlerHTTPResponder.ip).__qualname__}' == 'builtins.property'
    growler_h_t_t_p_responder_0.build_req_and_res()

@pytest.mark.xfail(strict=True)
def test_case_7():
    float_0 = -122.433418
    growler_h_t_t_p_responder_0 = module_0.GrowlerHTTPResponder(float_0, request_factory=float_0, response_factory=float_0)
    assert f'{type(growler_h_t_t_p_responder_0).__module__}.{type(growler_h_t_t_p_responder_0).__qualname__}' == 'growler.http.responder.GrowlerHTTPResponder'
    assert f'{type(growler_h_t_t_p_responder_0.parser).__module__}.{type(growler_h_t_t_p_responder_0.parser).__qualname__}' == 'growler.http.parser.Parser'
    assert growler_h_t_t_p_responder_0.build_req == pytest.approx(-122.433418, abs=0.01, rel=0.01)
    assert growler_h_t_t_p_responder_0.build_res == pytest.approx(-122.433418, abs=0.01, rel=0.01)
    assert f'{type(module_0.GrowlerHTTPResponder.method).__module__}.{type(module_0.GrowlerHTTPResponder.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.method_str).__module__}.{type(module_0.GrowlerHTTPResponder.method_str).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.parsed_query).__module__}.{type(module_0.GrowlerHTTPResponder.parsed_query).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.headers).__module__}.{type(module_0.GrowlerHTTPResponder.headers).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.loop).__module__}.{type(module_0.GrowlerHTTPResponder.loop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.app).__module__}.{type(module_0.GrowlerHTTPResponder.app).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.ip).__module__}.{type(module_0.GrowlerHTTPResponder.ip).__qualname__}' == 'builtins.property'
    growler_h_t_t_p_responder_0.body_storage_pair()

def test_case_8():
    bytes_0 = b'Y\xb4\xd4'
    growler_h_t_t_p_responder_0 = module_0.GrowlerHTTPResponder(bytes_0)
    assert f'{type(growler_h_t_t_p_responder_0).__module__}.{type(growler_h_t_t_p_responder_0).__qualname__}' == 'growler.http.responder.GrowlerHTTPResponder'
    assert f'{type(growler_h_t_t_p_responder_0.parser).__module__}.{type(growler_h_t_t_p_responder_0.parser).__qualname__}' == 'growler.http.parser.Parser'
    assert f'{type(module_0.GrowlerHTTPResponder.method).__module__}.{type(module_0.GrowlerHTTPResponder.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.method_str).__module__}.{type(module_0.GrowlerHTTPResponder.method_str).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.parsed_query).__module__}.{type(module_0.GrowlerHTTPResponder.parsed_query).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.headers).__module__}.{type(module_0.GrowlerHTTPResponder.headers).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.loop).__module__}.{type(module_0.GrowlerHTTPResponder.loop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.app).__module__}.{type(module_0.GrowlerHTTPResponder.app).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.ip).__module__}.{type(module_0.GrowlerHTTPResponder.ip).__qualname__}' == 'builtins.property'
    var_0 = growler_h_t_t_p_responder_0.on_data(bytes_0)

def test_case_9():
    none_type_0 = None
    growler_h_t_t_p_responder_0 = module_0.GrowlerHTTPResponder(none_type_0, response_factory=none_type_0)
    assert f'{type(growler_h_t_t_p_responder_0).__module__}.{type(growler_h_t_t_p_responder_0).__qualname__}' == 'growler.http.responder.GrowlerHTTPResponder'
    assert f'{type(growler_h_t_t_p_responder_0.parser).__module__}.{type(growler_h_t_t_p_responder_0.parser).__qualname__}' == 'growler.http.parser.Parser'
    assert growler_h_t_t_p_responder_0.build_res is None
    assert f'{type(module_0.GrowlerHTTPResponder.method).__module__}.{type(module_0.GrowlerHTTPResponder.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.method_str).__module__}.{type(module_0.GrowlerHTTPResponder.method_str).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.parsed_query).__module__}.{type(module_0.GrowlerHTTPResponder.parsed_query).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.headers).__module__}.{type(module_0.GrowlerHTTPResponder.headers).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.loop).__module__}.{type(module_0.GrowlerHTTPResponder.loop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.app).__module__}.{type(module_0.GrowlerHTTPResponder.app).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.GrowlerHTTPResponder.ip).__module__}.{type(module_0.GrowlerHTTPResponder.ip).__qualname__}' == 'builtins.property'
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0, growler_h_t_t_p_responder_0: growler_h_t_t_p_responder_0}
    var_0 = growler_h_t_t_p_responder_0.init_body_buffer(none_type_0, dict_0)