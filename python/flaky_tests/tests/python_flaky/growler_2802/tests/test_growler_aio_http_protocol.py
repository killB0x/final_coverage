# Automatically generated by Pynguin.
import pytest
import growler.aio.http_protocol as module_0
import asyncio.protocols as module_1
import growler.http.errors as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 508
    growler_h_t_t_p_protocol_0 = module_0.GrowlerHTTPProtocol(int_0)
    assert f'{type(growler_h_t_t_p_protocol_0).__module__}.{type(growler_h_t_t_p_protocol_0).__qualname__}' == 'growler.aio.http_protocol.GrowlerHTTPProtocol'
    assert growler_h_t_t_p_protocol_0.http_application == 508
    assert growler_h_t_t_p_protocol_0.client_method is None
    assert growler_h_t_t_p_protocol_0.client_query is None
    assert growler_h_t_t_p_protocol_0.client_headers is None
    assert f'{type(growler_h_t_t_p_protocol_0.log).__module__}.{type(growler_h_t_t_p_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert growler_h_t_t_p_protocol_0.responders == []
    assert growler_h_t_t_p_protocol_0.is_done_transmitting is False
    growler_h_t_t_p_protocol_0.handle_error(growler_h_t_t_p_protocol_0)

def test_case_1():
    none_type_0 = None
    growler_h_t_t_p_protocol_0 = module_0.GrowlerHTTPProtocol(none_type_0, none_type_0)
    assert growler_h_t_t_p_protocol_0.http_application is None
    assert growler_h_t_t_p_protocol_0.client_method is None
    assert growler_h_t_t_p_protocol_0.client_query is None
    assert growler_h_t_t_p_protocol_0.client_headers is None
    assert f'{type(growler_h_t_t_p_protocol_0.log).__module__}.{type(growler_h_t_t_p_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert growler_h_t_t_p_protocol_0.responders == []
    assert growler_h_t_t_p_protocol_0.is_done_transmitting is False

@pytest.mark.xfail(strict=True)
def test_case_2():
    protocol_0 = module_1.Protocol()
    growler_h_t_t_p_protocol_0 = module_0.GrowlerHTTPProtocol(protocol_0)
    assert f'{type(growler_h_t_t_p_protocol_0).__module__}.{type(growler_h_t_t_p_protocol_0).__qualname__}' == 'growler.aio.http_protocol.GrowlerHTTPProtocol'
    assert f'{type(growler_h_t_t_p_protocol_0.http_application).__module__}.{type(growler_h_t_t_p_protocol_0.http_application).__qualname__}' == 'asyncio.protocols.Protocol'
    assert growler_h_t_t_p_protocol_0.client_method is None
    assert growler_h_t_t_p_protocol_0.client_query is None
    assert growler_h_t_t_p_protocol_0.client_headers is None
    assert f'{type(growler_h_t_t_p_protocol_0.log).__module__}.{type(growler_h_t_t_p_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert growler_h_t_t_p_protocol_0.responders == []
    assert growler_h_t_t_p_protocol_0.is_done_transmitting is False
    bool_0 = False
    growler_h_t_t_p_protocol_1 = module_0.GrowlerHTTPProtocol(bool_0)
    assert f'{type(growler_h_t_t_p_protocol_1.log).__module__}.{type(growler_h_t_t_p_protocol_1.log).__qualname__}' == 'logging.Logger'
    assert growler_h_t_t_p_protocol_1.responders == []
    assert growler_h_t_t_p_protocol_1.is_done_transmitting is False
    var_0 = growler_h_t_t_p_protocol_1.eof_received()
    growler_h_t_t_p_protocol_1.http_responder_factory(var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    growler_h_t_t_p_protocol_0 = module_0.GrowlerHTTPProtocol(bool_0, bool_0)
    assert growler_h_t_t_p_protocol_0.http_application is True
    assert growler_h_t_t_p_protocol_0.client_method is None
    assert growler_h_t_t_p_protocol_0.client_query is None
    assert growler_h_t_t_p_protocol_0.client_headers is None
    assert f'{type(growler_h_t_t_p_protocol_0.log).__module__}.{type(growler_h_t_t_p_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert growler_h_t_t_p_protocol_0.responders == []
    assert growler_h_t_t_p_protocol_0.is_done_transmitting is False
    none_type_0 = None
    growler_h_t_t_p_protocol_0.begin_application(growler_h_t_t_p_protocol_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'M'
    growler_h_t_t_p_protocol_0 = module_0.GrowlerHTTPProtocol(str_0)
    assert f'{type(growler_h_t_t_p_protocol_0).__module__}.{type(growler_h_t_t_p_protocol_0).__qualname__}' == 'growler.aio.http_protocol.GrowlerHTTPProtocol'
    assert growler_h_t_t_p_protocol_0.http_application == 'M'
    assert growler_h_t_t_p_protocol_0.client_method is None
    assert growler_h_t_t_p_protocol_0.client_query is None
    assert growler_h_t_t_p_protocol_0.client_headers is None
    assert f'{type(growler_h_t_t_p_protocol_0.log).__module__}.{type(growler_h_t_t_p_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert growler_h_t_t_p_protocol_0.responders == []
    assert growler_h_t_t_p_protocol_0.is_done_transmitting is False
    growler_h_t_t_p_protocol_0.body_storage_pair()

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 485
    growler_h_t_t_p_protocol_0 = module_0.GrowlerHTTPProtocol(int_0)
    assert f'{type(growler_h_t_t_p_protocol_0).__module__}.{type(growler_h_t_t_p_protocol_0).__qualname__}' == 'growler.aio.http_protocol.GrowlerHTTPProtocol'
    assert growler_h_t_t_p_protocol_0.http_application == 485
    assert growler_h_t_t_p_protocol_0.client_method is None
    assert growler_h_t_t_p_protocol_0.client_query is None
    assert growler_h_t_t_p_protocol_0.client_headers is None
    assert f'{type(growler_h_t_t_p_protocol_0.log).__module__}.{type(growler_h_t_t_p_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert growler_h_t_t_p_protocol_0.responders == []
    assert growler_h_t_t_p_protocol_0.is_done_transmitting is False
    none_type_0 = None
    h_t_t_p_error_0 = module_2.HTTPError(code=growler_h_t_t_p_protocol_0, msg=int_0, ex=none_type_0)
    growler_h_t_t_p_protocol_0.handle_error(h_t_t_p_error_0)