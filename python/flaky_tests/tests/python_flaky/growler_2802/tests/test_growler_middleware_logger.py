# Automatically generated by Pynguin.
import pytest
import growler.middleware.logger as module_0

def test_case_0():
    logger_0 = module_0.Logger()
    assert module_0.Logger.DEFAULT == '/033[30m'
    assert module_0.Logger.RED == '/033[31m'
    assert module_0.Logger.GREEN == '/033[32m'
    assert module_0.Logger.YELLOW == '/033[33m'
    assert module_0.Logger.BLUE == '/033[34m'
    assert module_0.Logger.MAGENTA == '/033[35m'
    assert module_0.Logger.CYAN == '/033[36m'
    assert module_0.Logger.WHITE == '/033[37m'
    assert f'{type(module_0.Logger.c).__module__}.{type(module_0.Logger.c).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    logger_0 = module_0.Logger()
    assert module_0.Logger.DEFAULT == '/033[30m'
    assert module_0.Logger.RED == '/033[31m'
    assert module_0.Logger.GREEN == '/033[32m'
    assert module_0.Logger.YELLOW == '/033[33m'
    assert module_0.Logger.BLUE == '/033[34m'
    assert module_0.Logger.MAGENTA == '/033[35m'
    assert module_0.Logger.CYAN == '/033[36m'
    assert module_0.Logger.WHITE == '/033[37m'
    assert f'{type(module_0.Logger.c).__module__}.{type(module_0.Logger.c).__qualname__}' == 'builtins.method'
    logger_0.info(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    logger_0 = module_0.Logger()
    assert module_0.Logger.DEFAULT == '/033[30m'
    assert module_0.Logger.RED == '/033[31m'
    assert module_0.Logger.GREEN == '/033[32m'
    assert module_0.Logger.YELLOW == '/033[33m'
    assert module_0.Logger.BLUE == '/033[34m'
    assert module_0.Logger.MAGENTA == '/033[35m'
    assert module_0.Logger.CYAN == '/033[36m'
    assert module_0.Logger.WHITE == '/033[37m'
    assert f'{type(module_0.Logger.c).__module__}.{type(module_0.Logger.c).__qualname__}' == 'builtins.method'
    int_0 = -839
    logger_1 = module_0.Logger()
    logger_1.warn(int_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '\rVR]I"a6rj_{z'
    logger_0 = module_0.Logger()
    assert module_0.Logger.DEFAULT == '/033[30m'
    assert module_0.Logger.RED == '/033[31m'
    assert module_0.Logger.GREEN == '/033[32m'
    assert module_0.Logger.YELLOW == '/033[33m'
    assert module_0.Logger.BLUE == '/033[34m'
    assert module_0.Logger.MAGENTA == '/033[35m'
    assert module_0.Logger.CYAN == '/033[36m'
    assert module_0.Logger.WHITE == '/033[37m'
    assert f'{type(module_0.Logger.c).__module__}.{type(module_0.Logger.c).__qualname__}' == 'builtins.method'
    logger_0.error(str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    logger_0 = module_0.Logger()
    assert module_0.Logger.DEFAULT == '/033[30m'
    assert module_0.Logger.RED == '/033[31m'
    assert module_0.Logger.GREEN == '/033[32m'
    assert module_0.Logger.YELLOW == '/033[33m'
    assert module_0.Logger.BLUE == '/033[34m'
    assert module_0.Logger.MAGENTA == '/033[35m'
    assert module_0.Logger.CYAN == '/033[36m'
    assert module_0.Logger.WHITE == '/033[37m'
    assert f'{type(module_0.Logger.c).__module__}.{type(module_0.Logger.c).__qualname__}' == 'builtins.method'
    logger_0.critical_error(logger_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    logger_0 = module_0.Logger()
    assert module_0.Logger.DEFAULT == '/033[30m'
    assert module_0.Logger.RED == '/033[31m'
    assert module_0.Logger.GREEN == '/033[32m'
    assert module_0.Logger.YELLOW == '/033[33m'
    assert module_0.Logger.BLUE == '/033[34m'
    assert module_0.Logger.MAGENTA == '/033[35m'
    assert module_0.Logger.CYAN == '/033[36m'
    assert module_0.Logger.WHITE == '/033[37m'
    assert f'{type(module_0.Logger.c).__module__}.{type(module_0.Logger.c).__qualname__}' == 'builtins.method'
    logger_0.__call__(logger_0, logger_0)