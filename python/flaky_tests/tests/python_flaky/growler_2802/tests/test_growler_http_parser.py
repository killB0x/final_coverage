# Automatically generated by Pynguin.
import pytest
import growler.http.parser as module_0
import growler.http.errors as module_1
import re as module_2

def test_case_0():
    int_0 = -871
    parser_0 = module_0.Parser(int_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'growler.http.parser.Parser'
    assert parser_0.parent == -871
    assert parser_0.encoding == 'utf-8'
    assert parser_0.headers == {}
    assert module_0.MAX_REQUEST_LENGTH == 1048576
    assert module_0.MAX_REQUEST_LINE_LENGTH == 8192

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    parser_0 = module_0.Parser(none_type_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'growler.http.parser.Parser'
    assert parser_0.parent is None
    assert parser_0.encoding == 'utf-8'
    assert parser_0.headers == {}
    assert module_0.MAX_REQUEST_LENGTH == 1048576
    assert module_0.MAX_REQUEST_LINE_LENGTH == 8192
    parser_0.is_invalid_header_name(none_type_0)

def test_case_2():
    int_0 = -609
    parser_0 = module_0.Parser(int_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'growler.http.parser.Parser'
    assert parser_0.parent == -609
    assert parser_0.encoding == 'utf-8'
    assert parser_0.headers == {}
    assert module_0.MAX_REQUEST_LENGTH == 1048576
    assert module_0.MAX_REQUEST_LINE_LENGTH == 8192
    var_0 = parser_0.process_post_headers(int_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -871
    parser_0 = module_0.Parser(int_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'growler.http.parser.Parser'
    assert parser_0.parent == -871
    assert parser_0.encoding == 'utf-8'
    assert parser_0.headers == {}
    assert module_0.MAX_REQUEST_LENGTH == 1048576
    assert module_0.MAX_REQUEST_LINE_LENGTH == 8192
    parser_0.consume(parser_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    parser_0 = module_0.Parser(none_type_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'growler.http.parser.Parser'
    assert parser_0.parent is None
    assert parser_0.encoding == 'utf-8'
    assert parser_0.headers == {}
    assert module_0.MAX_REQUEST_LENGTH == 1048576
    assert module_0.MAX_REQUEST_LINE_LENGTH == 8192
    parser_0.split_header_key_value(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    parser_0 = module_0.Parser(none_type_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'growler.http.parser.Parser'
    assert parser_0.parent is None
    assert parser_0.encoding == 'utf-8'
    assert parser_0.headers == {}
    assert module_0.MAX_REQUEST_LENGTH == 1048576
    assert module_0.MAX_REQUEST_LINE_LENGTH == 8192
    var_0 = parser_0.process_get_headers(none_type_0)
    parser_0.is_invalid_header_name(var_0)

def test_case_6():
    none_type_0 = None
    parser_0 = module_0.Parser(none_type_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'growler.http.parser.Parser'
    assert parser_0.parent is None
    assert parser_0.encoding == 'utf-8'
    assert parser_0.headers == {}
    assert module_0.MAX_REQUEST_LENGTH == 1048576
    assert module_0.MAX_REQUEST_LINE_LENGTH == 8192
    var_0 = parser_0.process_post_headers(none_type_0)
    bytes_0 = b'HTTP/1.1 100 Continue\r\n\r\n'
    with pytest.raises(module_1.HTTPErrorInvalidHeader):
        parser_0.split_header_key_value(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ''
    parser_0 = module_0.Parser(str_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'growler.http.parser.Parser'
    assert parser_0.parent == ''
    assert parser_0.encoding == 'utf-8'
    assert parser_0.headers == {}
    assert module_0.MAX_REQUEST_LENGTH == 1048576
    assert module_0.MAX_REQUEST_LINE_LENGTH == 8192
    regex_flag_0 = module_2.RegexFlag.IGNORECASE
    var_0 = parser_0.is_invalid_header_name(str_0)
    assert var_0 is True
    var_1 = var_0.__repr__()
    assert var_1 == 'True'
    var_2 = module_1.HTTPErrorInvalidHeader(ex=regex_flag_0)
    regex_flag_0.close()

def test_case_8():
    bytes_0 = b"~\x9aLA\xd92\xa5\x87\xcd\xf1\xba\xcd\xc8\xc1\xd2\xb4'Mh"
    parser_0 = module_0.Parser(bytes_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'growler.http.parser.Parser'
    assert parser_0.parent == b"~\x9aLA\xd92\xa5\x87\xcd\xf1\xba\xcd\xc8\xc1\xd2\xb4'Mh"
    assert parser_0.encoding == 'utf-8'
    assert parser_0.headers == {}
    assert module_0.MAX_REQUEST_LENGTH == 1048576
    assert module_0.MAX_REQUEST_LINE_LENGTH == 8192
    var_0 = parser_0.consume(bytes_0)
    assert parser_0.EOL_TOKEN is None
    var_1 = parser_0.consume(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b'HTTP/1.1 100 Continue\r\n\r\n'
    parser_0 = module_0.Parser(bytes_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'growler.http.parser.Parser'
    assert parser_0.parent == b'HTTP/1.1 100 Continue\r\n\r\n'
    assert parser_0.encoding == 'utf-8'
    assert parser_0.headers == {}
    assert module_0.MAX_REQUEST_LENGTH == 1048576
    assert module_0.MAX_REQUEST_LINE_LENGTH == 8192
    parser_0.consume(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b'TTP/1.1 100 Cotinue\n\n'
    parser_0 = module_0.Parser(bytes_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'growler.http.parser.Parser'
    assert parser_0.parent == b'TTP/1.1 100 Cotinue\n\n'
    assert parser_0.encoding == 'utf-8'
    assert parser_0.headers == {}
    assert module_0.MAX_REQUEST_LENGTH == 1048576
    assert module_0.MAX_REQUEST_LINE_LENGTH == 8192
    parser_0.consume(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b'HTTP/1.1 1*0Conti>u{\r\n\r\n'
    parser_0 = module_0.Parser(bytes_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'growler.http.parser.Parser'
    assert parser_0.parent == b'HTTP/1.1 1*0Conti>u{\r\n\r\n'
    assert parser_0.encoding == 'utf-8'
    assert parser_0.headers == {}
    assert module_0.MAX_REQUEST_LENGTH == 1048576
    assert module_0.MAX_REQUEST_LINE_LENGTH == 8192
    parser_0.consume(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b'HTTP/\xa6.1 100 Continue\r\n\r\n'
    parser_0 = module_0.Parser(bytes_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'growler.http.parser.Parser'
    assert parser_0.parent == b'HTTP/\xa6.1 100 Continue\r\n\r\n'
    assert parser_0.encoding == 'utf-8'
    assert parser_0.headers == {}
    assert module_0.MAX_REQUEST_LENGTH == 1048576
    assert module_0.MAX_REQUEST_LINE_LENGTH == 8192
    parser_0.consume(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b'\n'
    parser_0 = module_0.Parser(bytes_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'growler.http.parser.Parser'
    assert parser_0.parent == b'\n'
    assert parser_0.encoding == 'utf-8'
    assert parser_0.headers == {}
    assert module_0.MAX_REQUEST_LENGTH == 1048576
    assert module_0.MAX_REQUEST_LINE_LENGTH == 8192
    parser_0.consume(bytes_0)