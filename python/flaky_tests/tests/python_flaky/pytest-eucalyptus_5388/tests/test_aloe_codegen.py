# Automatically generated by Pynguin.
import pytest
import ast as module_0
import aloe.codegen as module_1

def test_case_0():
    expr_0 = module_0.expr()
    with pytest.raises(ValueError):
        module_1.make_function(expr_0, name=expr_0)

def test_case_1():
    var_0 = module_1.multi_manager()
    assert len(module_1.FUNCTION_DEF_SAMPLE.body) == 1

@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_1.multi_manager()
    assert len(module_1.FUNCTION_DEF_SAMPLE.body) == 1
    none_type_0 = None
    var_1 = module_1.multi_manager()
    list_0 = [none_type_0]
    var_2 = module_1.multi_manager(*list_0)
    var_3 = module_1.multi_manager()
    module_1.make_function(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '\ndef run_example(self):\n    outline(self)\n                '
    module_1.make_function(str_0, str_0, str_0)

def test_case_4():
    str_0 = 'OuwE<ZM{K'
    str_1 = '_'
    var_0 = module_1.multi_manager()
    assert len(module_1.FUNCTION_DEF_SAMPLE.body) == 1
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_1: str_0}
    yield_0 = module_0.Yield(**dict_0)
    none_type_0 = None
    var_1 = module_1.multi_manager()
    with pytest.raises(ValueError):
        module_1.make_function(str_1, dict_0, var_0, none_type_0)

def test_case_5():
    list_0 = []
    var_0 = module_0.unparse(list_0)
    with pytest.raises(ValueError):
        module_1.make_function(var_0, name=list_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '\ndef run_example(self):\n    outline(self)\n                '
    var_0 = module_1.make_function(str_0, name=str_0)
    assert len(module_1.FUNCTION_DEF_SAMPLE.body) == 1
    var_1 = module_1.multi_manager()
    var_2 = module_1.multi_manager()
    module_1.multi_manager(*var_1)