# Automatically generated by Pynguin.
import pytest
import tests.callbacks_app.features.steps as module_0

def test_case_0():
    var_0 = module_0.before_all()
    assert module_0.world.all == ['{']
    assert module_0.world.types == ['before all']

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_0.after_example(bool_0, bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.after_example(bool_0, bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.before_feature(set_0)

def test_case_4():
    var_0 = module_0.after_all()
    assert module_0.world.types == ['after all']
    assert module_0.world.all == ['}']

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    var_0 = module_0.reset_failures_successes_count(bool_0, bool_0, bool_0)
    assert module_0.world.passing_steps == 0
    assert module_0.world.failed_steps == 0
    module_0.after_example(bool_0, var_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    module_0.before_example(bool_0, bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_0.after_all()
    assert module_0.world.types == ['after all']
    assert module_0.world.all == ['}']
    module_0.after_feature(var_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -2094
    module_0.after_feature(int_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    callback_test_case_0 = module_0.CallbackTestCase()
    var_0 = callback_test_case_0.setUp()
    assert module_0.world.testclass == ['[']
    var_0.tearDown()

def test_case_10():
    var_0 = module_0.CallbackTestCase()
    var_1 = module_0.after_all()
    assert module_0.world.types == ['after all']
    assert module_0.world.all == ['}']
    var_2 = var_0.tearDown()
    assert module_0.world.testclass == [']']