# Automatically generated by Pynguin.
import pytest
import tests.factoryboy_app.features.steps as module_0
import platform as module_1

def test_case_0():
    my_weird_object_0 = module_0.MyWeirdObject()

def test_case_1():
    secret_agency_factory_0 = module_0.SecretAgencyFactory()
    assert f'{type(secret_agency_factory_0).__module__}.{type(secret_agency_factory_0).__qualname__}' == 'tests.factoryboy_app.features.steps.Agency'
    assert secret_agency_factory_0.name == "agency<Resolver for <BuildStep for <StepBuilder(<FactoryOptions for SecretAgencyFactory>, strategy='create')>>>"

def test_case_2():
    user_factory_0 = module_0.UserFactory()
    assert f'{type(user_factory_0).__module__}.{type(user_factory_0).__qualname__}' == 'tests.factoryboy_app.features.steps.User'
    assert len(module_0.User.users) == 2

@pytest.mark.xfail(strict=True)
def test_case_3():
    weird_object_factory_0 = module_0.WeirdObjectFactory()
    boring_agency_factory_0 = module_0.BoringAgencyFactory()
    assert f'{type(boring_agency_factory_0).__module__}.{type(boring_agency_factory_0).__qualname__}' == 'tests.factoryboy_app.features.steps.Agency'
    assert boring_agency_factory_0.name == "agency<Resolver for <BuildStep for <StepBuilder(<FactoryOptions for BoringAgencyFactory>, strategy='create')>>>"
    var_0 = module_0.clear_user_list(weird_object_factory_0, boring_agency_factory_0, weird_object_factory_0)
    user_0 = module_0.User(boring_agency_factory_0, boring_agency_factory_0)
    var_1 = user_0.__str__()
    boring_agency_factory_0.__new__(var_1, **var_1)

def test_case_4():
    none_type_0 = None
    agency_0 = module_0.Agency(none_type_0)
    var_0 = module_0.clear_user_list(none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    var_0 = module_0.clear_agency_list(none_type_0, none_type_0, none_type_0)
    var_1 = module_1.win32_ver()
    var_1.rstrip()

@pytest.mark.xfail(strict=True)
def test_case_6():
    my_weird_object_0 = module_0.MyWeirdObject()
    str_0 = 'K.ARj\t'
    dict_0 = {str_0: my_weird_object_0}
    my_weird_object_1 = module_0.MyWeirdObject(**dict_0)
    assert f'{type(my_weird_object_1.K.ARj	).__module__}.{type(my_weird_object_1.K.ARj	).__qualname__}' == 'tests.factoryboy_app.features.steps.MyWeirdObject'
    assert f'{type(module_0.MyWeirdObject.ref.K.ARj	).__module__}.{type(module_0.MyWeirdObject.ref.K.ARj	).__qualname__}' == 'tests.factoryboy_app.features.steps.MyWeirdObject'
    module_0.check_types()