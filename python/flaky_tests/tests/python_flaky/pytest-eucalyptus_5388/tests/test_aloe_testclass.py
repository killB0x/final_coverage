# Automatically generated by Pynguin.
import pytest
import aloe.testclass as module_0

def test_case_0():
    test_case_0 = module_0.TestCase()
    assert f'{type(module_0.TestCase.before_feature).__module__}.{type(module_0.TestCase.before_feature).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.after_feature).__module__}.{type(module_0.TestCase.after_feature).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.setUpClass).__module__}.{type(module_0.TestCase.setUpClass).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.tearDownClass).__module__}.{type(module_0.TestCase.tearDownClass).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.from_file).__module__}.{type(module_0.TestCase.from_file).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.make_background).__module__}.{type(module_0.TestCase.make_background).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.make_examples).__module__}.{type(module_0.TestCase.make_examples).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.make_example).__module__}.{type(module_0.TestCase.make_example).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.prepare_step).__module__}.{type(module_0.TestCase.prepare_step).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.make_steps).__module__}.{type(module_0.TestCase.make_steps).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.scenarios).__module__}.{type(module_0.TestCase.scenarios).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.getFunctionRequest).__module__}.{type(module_0.TestCase.getFunctionRequest).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.TestStep()

@pytest.mark.xfail(strict=True)
def test_case_2():
    test_case_0 = module_0.TestCase()
    assert f'{type(module_0.TestCase.before_feature).__module__}.{type(module_0.TestCase.before_feature).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.after_feature).__module__}.{type(module_0.TestCase.after_feature).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.setUpClass).__module__}.{type(module_0.TestCase.setUpClass).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.tearDownClass).__module__}.{type(module_0.TestCase.tearDownClass).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.from_file).__module__}.{type(module_0.TestCase.from_file).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.make_background).__module__}.{type(module_0.TestCase.make_background).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.make_examples).__module__}.{type(module_0.TestCase.make_examples).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.make_example).__module__}.{type(module_0.TestCase.make_example).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.prepare_step).__module__}.{type(module_0.TestCase.prepare_step).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.make_steps).__module__}.{type(module_0.TestCase.make_steps).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.scenarios).__module__}.{type(module_0.TestCase.scenarios).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TestCase.getFunctionRequest).__module__}.{type(module_0.TestCase.getFunctionRequest).__qualname__}' == 'builtins.method'
    test_case_0.shortDescription()

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.set_passed_failed(none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_0.gen).__module__}.{type(var_0.gen).__qualname__}' == 'builtins.generator'
    assert var_0.args == (None,)
    assert var_0.kwds == {}
    var_0.__exit__(none_type_0, none_type_0, var_0)