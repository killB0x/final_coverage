# Automatically generated by Pynguin.
import pytest
import aloe.registry as module_0
import aloe.codegen as module_1

def test_case_0():
    priority_class_0 = module_0.PriorityClass()
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    assert module_0.PriorityClass.DISPLAY == -20
    assert module_0.PriorityClass.SYSTEM_OUTER == -10
    assert module_0.PriorityClass.USER == 0
    assert module_0.PriorityClass.SYSTEM_INNER == 10

def test_case_1():
    step_dict_0 = module_0.StepDict()
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = step_dict_0.load_func(step_dict_0)
    assert len(step_dict_0) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_0) == 1

@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    callback_dict_0 = module_0.CallbackDict()
    assert len(callback_dict_0) == 4
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    callback_dict_0.hook_list(list_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    step_dict_0 = module_0.StepDict()
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = step_dict_0.load_func(step_dict_0)
    assert len(step_dict_0) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_0) == 1
    var_1 = step_dict_0.step(step_dict_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_1) == 1
    var_2 = step_dict_0.load_steps(step_dict_0)
    assert len(step_dict_0) == 10
    assert len(var_0) == 10
    assert len(var_1) == 10
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_2) == 10
    bytes_0 = b''
    var_3 = step_dict_0.extract_sentence(bytes_0)
    var_4 = step_dict_0.match_step(var_0)
    str_0 = 'RpXP\\[#Yt2+)o&'
    dict_0 = var_2.__len__()
    assert dict_0 == 10
    var_5 = step_dict_0.unload(step_dict_0)
    var_5.load(str_0, var_2)

def test_case_4():
    step_dict_0 = module_0.StepDict()
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = step_dict_0.load_steps(step_dict_0)
    assert len(step_dict_0) == 9
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_0) == 9

@pytest.mark.xfail(strict=True)
def test_case_5():
    step_dict_0 = module_0.StepDict()
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = step_dict_0.step(step_dict_0)
    assert len(step_dict_0) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_0) == 1
    var_1 = step_dict_0.load_steps(step_dict_0)
    assert len(step_dict_0) == 10
    assert len(var_0) == 10
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_1) == 10
    var_2 = step_dict_0.extract_sentence(var_0)
    assert var_2 == '\n    A mapping of step sentences to their definitions.\n    '
    var_3 = step_dict_0.unload_func(step_dict_0)
    assert len(step_dict_0) == 9
    assert len(var_0) == 9
    assert len(var_1) == 9
    var_4 = step_dict_0.match_step(var_1)
    str_0 = 'RpXP\\[#Yt2+)o&'
    var_0.load(str_0, step_dict_0)

def test_case_6():
    step_dict_0 = module_0.StepDict()
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = step_dict_0.unload(step_dict_0)
    var_1 = step_dict_0.load_steps(step_dict_0)
    assert len(step_dict_0) == 9
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_1) == 9

@pytest.mark.xfail(strict=True)
def test_case_7():
    step_dict_0 = module_0.StepDict()
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = step_dict_0.load_func(step_dict_0)
    assert len(step_dict_0) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_0) == 1
    var_1 = step_dict_0.load_steps(step_dict_0)
    assert len(step_dict_0) == 10
    assert len(var_0) == 10
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_1) == 10
    var_2 = step_dict_0.unload_func(step_dict_0)
    assert len(step_dict_0) == 9
    assert len(var_0) == 9
    assert len(var_1) == 9
    var_3 = step_dict_0.match_step(var_0)
    str_0 = 'RpXP\\[#Yt2+)o&'
    var_3.__call__(str_0, var_0, var_0, type=var_0, start=var_2)

def test_case_8():
    callback_dict_0 = module_0.CallbackDict()
    assert len(callback_dict_0) == 4
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    step_dict_0 = module_0.StepDict()
    var_0 = step_dict_0.load_func(callback_dict_0)
    assert len(step_dict_0) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.CallbackDict'
    assert len(var_0) == 4
    var_1 = step_dict_0.unload_func(step_dict_0)
    var_2 = step_dict_0.match_step(var_0)

def test_case_9():
    step_dict_0 = module_0.StepDict()
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = step_dict_0.step(step_dict_0)
    assert len(step_dict_0) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_0) == 1

def test_case_10():
    callback_dict_0 = module_0.CallbackDict()
    assert len(callback_dict_0) == 4
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    step_dict_0 = module_0.StepDict()
    var_0 = step_dict_0.load_func(callback_dict_0)
    assert len(step_dict_0) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.CallbackDict'
    assert len(var_0) == 4
    var_1 = step_dict_0.step(step_dict_0)
    assert len(step_dict_0) == 2
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_1) == 2
    var_2 = callback_dict_0.clear(var_1, var_0)
    var_3 = step_dict_0.load_steps(step_dict_0)
    assert len(step_dict_0) == 11
    assert len(var_1) == 11
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_3) == 11
    var_4 = step_dict_0.unload_func(step_dict_0)
    assert len(step_dict_0) == 10
    assert len(var_1) == 10
    assert len(var_3) == 10
    var_5 = step_dict_0.match_step(var_0)
    var_6 = step_dict_0.unload(step_dict_0)
    var_7 = var_3.clear()
    assert len(var_1) == 0

@pytest.mark.xfail(strict=True)
def test_case_11():
    callback_dict_0 = module_0.CallbackDict()
    assert len(callback_dict_0) == 4
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    step_dict_0 = module_0.StepDict()
    var_0 = step_dict_0.load_func(callback_dict_0)
    assert len(step_dict_0) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.CallbackDict'
    assert len(var_0) == 4
    var_1 = step_dict_0.unload_func(step_dict_0)
    var_2 = step_dict_0.match_step(var_0)
    step_dict_0.load(var_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_12():
    step_dict_0 = module_0.StepDict()
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    list_0 = [step_dict_0]
    callback_dict_0 = module_0.CallbackDict()
    assert len(callback_dict_0) == 4
    callback_dict_0.wrap(step_dict_0, step_dict_0, *list_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    callback_dict_0 = module_0.CallbackDict()
    assert len(callback_dict_0) == 4
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = callback_dict_0.clear()
    callback_dict_0.append_to(callback_dict_0, callback_dict_0, callback_dict_0, priority=callback_dict_0)

def test_case_14():
    step_dict_0 = module_0.StepDict()
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = step_dict_0.step(step_dict_0)
    assert len(step_dict_0) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_0) == 1
    var_1 = step_dict_0.match_step(var_0)

def test_case_15():
    step_dict_0 = module_0.StepDict()
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = step_dict_0.load_func(step_dict_0)
    assert len(step_dict_0) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_0) == 1
    var_1 = step_dict_0.load_steps(step_dict_0)
    assert len(step_dict_0) == 10
    assert len(var_0) == 10
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_1) == 10
    var_2 = step_dict_0.match_step(var_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    step_dict_0 = module_0.StepDict()
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = step_dict_0.step(step_dict_0)
    assert len(step_dict_0) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_0) == 1
    var_1 = step_dict_0.load_steps(step_dict_0)
    assert len(step_dict_0) == 10
    assert len(var_0) == 10
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_1) == 10
    var_2 = step_dict_0.extract_sentence(var_0)
    assert var_2 == '\n    A mapping of step sentences to their definitions.\n    '
    var_3 = step_dict_0.match_step(var_1)
    str_0 = 'RpXP\\[#Yt2+)o&'
    dict_0 = {str_0: step_dict_0, str_0: str_0}
    step_dict_0.unload(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    step_dict_0 = module_0.StepDict()
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = step_dict_0.load_func(step_dict_0)
    assert len(step_dict_0) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_0) == 1
    var_1 = var_0.extract_sentence(var_0)
    var_2 = step_dict_0.unload_func(step_dict_0)
    assert len(step_dict_0) == 0
    assert len(var_0) == 0
    var_3 = step_dict_0.step(var_1)
    str_0 = "/rv6.'\\"
    float_0 = 3443.7292
    var_0.load(float_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    step_dict_0 = module_0.StepDict()
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = step_dict_0.load_func(step_dict_0)
    assert len(step_dict_0) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_0) == 1
    var_1 = step_dict_0.unload_func(step_dict_0)
    assert len(step_dict_0) == 0
    assert len(var_0) == 0
    step_dict_0.step(var_1)

def test_case_19():
    callback_dict_0 = module_0.CallbackDict()
    assert len(callback_dict_0) == 4
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = callback_dict_0.clear(callback_dict_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    step_dict_0 = module_0.StepDict()
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = step_dict_0.load_func(step_dict_0)
    assert len(step_dict_0) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_0) == 1
    var_1 = step_dict_0.step(step_dict_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_1) == 1
    var_2 = step_dict_0.load_steps(step_dict_0)
    assert len(step_dict_0) == 10
    assert len(var_0) == 10
    assert len(var_1) == 10
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_2) == 10
    var_3 = var_1.match_step(var_2)
    bytes_0 = b''
    var_4 = var_2.extract_sentence(bytes_0)
    var_5 = step_dict_0.unload_func(step_dict_0)
    assert len(step_dict_0) == 9
    assert len(var_0) == 9
    assert len(var_1) == 9
    assert len(var_2) == 9
    var_6 = var_2.step(bytes_0)
    str_0 = 'RpXP\\[#Yt2+)o&'
    var_7 = step_dict_0.unload(step_dict_0)
    var_5.load(str_0, var_2)

@pytest.mark.xfail(strict=True)
def test_case_21():
    callback_dict_0 = module_0.CallbackDict()
    assert len(callback_dict_0) == 4
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    step_dict_0 = module_0.StepDict()
    none_type_0 = None
    var_0 = callback_dict_0.clear(priority_class=none_type_0)
    var_1 = step_dict_0.load_func(callback_dict_0)
    assert len(step_dict_0) == 1
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aloe.registry.CallbackDict'
    assert len(var_1) == 4
    var_2 = step_dict_0.step(step_dict_0)
    assert len(step_dict_0) == 2
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_2) == 2
    var_3 = callback_dict_0.clear(var_2, var_1)
    var_4 = step_dict_0.__len__()
    assert var_4 == 2
    var_5 = step_dict_0.load_steps(step_dict_0)
    assert len(step_dict_0) == 11
    assert len(var_2) == 11
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'aloe.registry.StepDict'
    assert len(var_5) == 11
    var_6 = step_dict_0.load_steps(step_dict_0)
    assert len(var_6) == 11
    var_7 = var_2.match_step(var_6)
    var_8 = step_dict_0.unload_func(step_dict_0)
    assert len(step_dict_0) == 10
    assert len(var_2) == 10
    assert len(var_5) == 10
    assert len(var_6) == 10
    var_9 = step_dict_0.match_step(var_1)
    callback_dict_0.before_after(var_3)

def test_case_22():
    callback_dict_0 = module_0.CallbackDict()
    assert len(callback_dict_0) == 4
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = callback_dict_0.clear(priority_class=callback_dict_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    callback_dict_0 = module_0.CallbackDict()
    assert len(callback_dict_0) == 4
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    callback_decorator_0 = module_0.CallbackDecorator(callback_dict_0, callback_dict_0)
    assert len(callback_decorator_0.registry) == 4
    assert len(callback_decorator_0.when) == 4
    assert callback_decorator_0.priority_class == 0
    callback_dict_1 = module_0.CallbackDict()
    assert len(callback_dict_1) == 4
    none_type_0 = None
    var_0 = callback_dict_1.clear()
    callback_dict_1.append_to(none_type_0, none_type_0, none_type_0, callback_dict_0, callback_dict_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    callback_dict_0 = module_0.CallbackDict()
    assert len(callback_dict_0) == 4
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    var_0 = module_1.multi_manager()
    var_1 = callback_dict_0.clear()
    callback_dict_0.append_to(callback_dict_0, callback_dict_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    callback_dict_0 = module_0.CallbackDict()
    assert len(callback_dict_0) == 4
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    step_dict_0 = module_0.StepDict()
    var_0 = callback_dict_0.__setitem__(step_dict_0, callback_dict_0)
    assert len(callback_dict_0) == 5
    callback_dict_0.clear(var_0, callback_dict_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    callback_dict_0 = module_0.CallbackDict()
    assert len(callback_dict_0) == 4
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    step_dict_0 = module_0.StepDict()
    var_0 = step_dict_0.load_steps(callback_dict_0)
    assert len(step_dict_0) == 5
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.CallbackDict'
    assert len(var_0) == 4
    var_1 = var_0.__setitem__(step_dict_0, var_0)
    assert len(callback_dict_0) == 5
    assert len(var_0) == 5
    callback_dict_0.clear(var_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_27():
    callback_dict_0 = module_0.CallbackDict()
    assert len(callback_dict_0) == 4
    assert module_0.HOOK_WHAT == ('all', 'feature', 'example', 'step')
    assert module_0.HOOK_WHEN == ('before', 'after', 'around')
    assert len(module_0.CALLBACK_REGISTRY) == 4
    assert len(module_0.after.registry) == 4
    assert module_0.after.when == 'after'
    assert module_0.after.priority_class == 0
    assert len(module_0.around.registry) == 4
    assert module_0.around.when == 'around'
    assert module_0.around.priority_class == 0
    assert len(module_0.before.registry) == 4
    assert module_0.before.when == 'before'
    assert module_0.before.priority_class == 0
    step_dict_0 = module_0.StepDict()
    var_0 = step_dict_0.load_steps(callback_dict_0)
    assert len(step_dict_0) == 5
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aloe.registry.CallbackDict'
    assert len(var_0) == 4
    none_type_0 = None
    var_1 = var_0.__setitem__(step_dict_0, var_0)
    assert len(callback_dict_0) == 5
    assert len(var_0) == 5
    callback_dict_0.clear(none_type_0, var_1)