# Automatically generated by Pynguin.
import pytest
import kafkian.serde.avroserdebase as module_0
import confluent_kafka.avro.serializer as module_1

def test_case_0():
    bytes_0 = b'\x01IT\x88SB'
    none_type_0 = None
    avro_ser_de_base_0 = module_0.AvroSerDeBase(bytes_0, none_type_0)
    assert module_0.MAGIC_BYTE == 0
    var_0 = avro_ser_de_base_0.decode_message(none_type_0)
    with pytest.raises(module_1.SerializerError):
        avro_ser_de_base_0.decode_message(bytes_0)

def test_case_1():
    bytes_0 = b'\x1e\xda\xd5\x1a\xc3\x16C\x1c\xa1\xb5\x0e'
    avro_ser_de_base_0 = module_0.AvroSerDeBase(bytes_0)
    assert module_0.MAGIC_BYTE == 0
    with pytest.raises(module_1.SerializerError):
        avro_ser_de_base_0.decode_message(bytes_0)

def test_case_2():
    avro_record_0 = module_0.AvroRecord()
    assert module_0.MAGIC_BYTE == 0

def test_case_3():
    str_0 = 'acks'
    avro_ser_de_base_0 = module_0.AvroSerDeBase(str_0)
    assert module_0.MAGIC_BYTE == 0
    with pytest.raises(module_1.SerializerError):
        avro_ser_de_base_0.decode_message(str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'\x00\xce\x85\xd5\x8a\xd3\x11\x82eR\x82\xde'
    avro_ser_de_base_0 = module_0.AvroSerDeBase(bytes_0)
    assert module_0.MAGIC_BYTE == 0
    avro_ser_de_base_0.decode_message(bytes_0)