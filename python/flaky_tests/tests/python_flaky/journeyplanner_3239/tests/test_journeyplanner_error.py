# Automatically generated by Pynguin.
import pytest
import journeyplanner.error as module_0

def test_case_0():
    bytes_0 = b'\xe1\xf0'
    with pytest.raises(module_0.JourneyPlannerError):
        module_0.fromstring(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'R0002'
    rest_error_0 = module_0.fromstring(str_0)
    assert f'{type(rest_error_0).__module__}.{type(rest_error_0).__qualname__}' == 'journeyplanner.error.RestError'
    assert module_0.ERRORS == {'R0001': 'Unknown service', 'R0002': 'Invalid or missing request parameters', 'R0007': 'Internal communication error', 'S1': 'The desired connection to the server could not be established or was not stable.', 'H9380': 'Dep./Arr./Intermed defined more than once', 'H9360': 'Error in date field', 'H9320': 'The input is incorrect or incomplete', 'H9300': 'Unknown arrival station', 'H9280': 'Unknown intermediate station', 'H9260': 'Unknown departure station', 'H9240': 'Unsuccessful search', 'H9230': 'An internal error occurred', 'H9220': 'Nearby to the given address stations could not be found', 'H900': 'Unsuccessful or incomplete search (timetable change)', 'H892': 'Inquiry too complex (try entering less intermediate stations)', 'H891': 'No route found (try entering an intermediate station)', 'H890': 'No connections found', 'H895': 'Departure/Arrival are too near'}
    module_0.fromstring(rest_error_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    journey_planner_error_0 = module_0.JourneyPlannerError()
    assert module_0.ERRORS == {'R0001': 'Unknown service', 'R0002': 'Invalid or missing request parameters', 'R0007': 'Internal communication error', 'S1': 'The desired connection to the server could not be established or was not stable.', 'H9380': 'Dep./Arr./Intermed defined more than once', 'H9360': 'Error in date field', 'H9320': 'The input is incorrect or incomplete', 'H9300': 'Unknown arrival station', 'H9280': 'Unknown intermediate station', 'H9260': 'Unknown departure station', 'H9240': 'Unsuccessful search', 'H9230': 'An internal error occurred', 'H9220': 'Nearby to the given address stations could not be found', 'H900': 'Unsuccessful or incomplete search (timetable change)', 'H892': 'Inquiry too complex (try entering less intermediate stations)', 'H891': 'No route found (try entering an intermediate station)', 'H890': 'No connections found', 'H895': 'Departure/Arrival are too near'}
    str_0 = 'StnQ#M'
    trip_service_error_0 = module_0.TripServiceError()
    var_0 = module_0.fromstring(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'journeyplanner.error.ServerError'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.JourneyPlannerError(**dict_0)

def test_case_3():
    str_0 = 'destination'
    authentication_error_0 = module_0.AuthenticationError()
    assert module_0.ERRORS == {'R0001': 'Unknown service', 'R0002': 'Invalid or missing request parameters', 'R0007': 'Internal communication error', 'S1': 'The desired connection to the server could not be established or was not stable.', 'H9380': 'Dep./Arr./Intermed defined more than once', 'H9360': 'Error in date field', 'H9320': 'The input is incorrect or incomplete', 'H9300': 'Unknown arrival station', 'H9280': 'Unknown intermediate station', 'H9260': 'Unknown departure station', 'H9240': 'Unsuccessful search', 'H9230': 'An internal error occurred', 'H9220': 'Nearby to the given address stations could not be found', 'H900': 'Unsuccessful or incomplete search (timetable change)', 'H892': 'Inquiry too complex (try entering less intermediate stations)', 'H891': 'No route found (try entering an intermediate station)', 'H890': 'No connections found', 'H895': 'Departure/Arrival are too near'}
    journey_planner_error_0 = module_0.JourneyPlannerError()
    str_1 = 'H9300'
    journey_planner_error_1 = module_0.JourneyPlannerError()
    authentication_error_1 = module_0.fromstring(str_1)
    assert f'{type(authentication_error_1).__module__}.{type(authentication_error_1).__qualname__}' == 'journeyplanner.error.TripServiceError'
    with pytest.raises(module_0.JourneyPlannerError):
        module_0.fromstring(str_0)