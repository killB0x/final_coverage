# Automatically generated by Pynguin.
import pytest
import multiindex.view as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    hashed_non_unique_0 = module_0.HashedNonUnique()
    var_0 = hashed_non_unique_0.remove(hashed_non_unique_0)
    var_1 = hashed_non_unique_0.modify(var_0, var_0, var_0)
    var_1.insert(var_1, var_1)

def test_case_1():
    hashed_non_unique_0 = module_0.HashedNonUnique()
    var_0 = hashed_non_unique_0.remove(hashed_non_unique_0)
    var_1 = module_0.HashedUnique()

def test_case_2():
    hashed_non_unique_0 = module_0.HashedNonUnique()

@pytest.mark.xfail(strict=True)
def test_case_3():
    hashed_non_unique_0 = module_0.HashedNonUnique()
    var_0 = hashed_non_unique_0.remove(hashed_non_unique_0)
    var_1 = hashed_non_unique_0.__iter__()
    var_2 = hashed_non_unique_0.modify(var_1, var_1, var_1)
    unique_0 = module_0.Unique()
    var_3 = hashed_non_unique_0.modify(var_2, unique_0, var_2)
    var_2.insert(unique_0, var_2)

@pytest.mark.xfail(strict=True)
def test_case_4():
    hashed_non_unique_0 = module_0.HashedNonUnique()
    view_iterator_0 = module_0.ViewIterator(hashed_non_unique_0)
    assert f'{type(view_iterator_0).__module__}.{type(view_iterator_0).__qualname__}' == 'multiindex.view.ViewIterator'
    assert f'{type(view_iterator_0.iterator).__module__}.{type(view_iterator_0.iterator).__qualname__}' == 'multiindex.view.ViewIterator'
    var_0 = hashed_non_unique_0.__iter__()
    var_1 = hashed_non_unique_0.modify(hashed_non_unique_0, view_iterator_0, hashed_non_unique_0)
    view_iterator_0.__next__()

@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = 4236.50114
    str_0 = 'Jx'
    hashed_unique_0 = module_0.HashedUnique()
    var_0 = hashed_unique_0.get(float_0)
    str_1 = 'get_by_'
    list_0 = []
    view_0 = module_0.View(*list_0)
    view_1 = module_0.View()
    dict_0 = {str_0: str_0, str_1: float_0}
    var_1 = view_1.get(dict_0)
    unique_0 = module_0.Unique()
    unique_0.remove(str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'Index provided does not exists in Container'
    dict_0 = {}
    unique_0 = module_0.Unique(**dict_0)
    none_type_0 = None
    view_0 = module_0.View()
    var_0 = view_0.modify(none_type_0, str_0, none_type_0)
    module_0.ViewIterator(unique_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'ZD+A6(06frL'
    set_0 = {str_0, str_0}
    list_0 = []
    view_0 = module_0.View(*list_0)
    var_0 = view_0.remove(set_0)
    var_0.__next__()

@pytest.mark.xfail(strict=True)
def test_case_8():
    hashed_non_unique_0 = module_0.HashedNonUnique()
    hashed_unique_0 = module_0.HashedUnique()
    var_0 = hashed_non_unique_0.modify(hashed_unique_0, hashed_unique_0, hashed_unique_0)
    unique_0 = module_0.Unique()
    unique_0.insert(hashed_unique_0, unique_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    hashed_non_unique_0 = module_0.HashedNonUnique()
    ordered_unique_0 = module_0.OrderedUnique()
    var_0 = ordered_unique_0.get(ordered_unique_0)
    none_type_0 = None
    ordered_unique_0.modify(none_type_0, ordered_unique_0, ordered_unique_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    hashed_unique_0 = module_0.HashedUnique()
    hashed_unique_0.modify(hashed_unique_0, hashed_unique_0, hashed_unique_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    hashed_unique_0 = module_0.HashedUnique()
    hashed_unique_0.remove(hashed_unique_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    hashed_non_unique_0 = module_0.HashedNonUnique()
    var_0 = hashed_non_unique_0.remove(hashed_non_unique_0)
    var_1 = hashed_non_unique_0.insert(hashed_non_unique_0, hashed_non_unique_0)
    var_1.remove(var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = -744
    str_0 = '4wx^Z3\tB'
    view_iterator_0 = module_0.ViewIterator(str_0)
    var_0 = view_iterator_0.__iter__()
    var_1 = var_0.__iter__()
    var_1.modify(int_0, int_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    hashed_non_unique_0 = module_0.HashedNonUnique()
    hashed_non_unique_1 = hashed_non_unique_0.remove(hashed_non_unique_0)
    var_0 = hashed_non_unique_0.remove(hashed_non_unique_0)
    var_1 = module_0.HashedNonUnique()
    var_2 = var_1.get(var_1)
    var_3 = var_1.__iter__()
    hashed_non_unique_1.insert(hashed_non_unique_1, hashed_non_unique_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    view_0 = module_0.View()
    hashed_non_unique_0 = view_0.insert(view_0, view_0)
    module_0.ViewIterator(hashed_non_unique_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    hashed_non_unique_0 = module_0.HashedNonUnique()
    var_0 = hashed_non_unique_0.modify(hashed_non_unique_0, hashed_non_unique_0, hashed_non_unique_0)
    var_1 = hashed_non_unique_0.modify(hashed_non_unique_0, var_0, hashed_non_unique_0)
    hashed_non_unique_1 = module_0.HashedNonUnique()
    var_2 = hashed_non_unique_1.remove(var_1)
    var_3 = hashed_non_unique_0.insert(var_2, var_2)
    var_4 = hashed_non_unique_1.get(hashed_non_unique_1)
    var_5 = hashed_non_unique_1.__iter__()
    view_0 = module_0.View()
    hashed_unique_0 = module_0.HashedUnique()
    var_6 = hashed_non_unique_0.get(var_5)
    var_7 = hashed_non_unique_0.modify(var_2, var_4, var_6)
    var_7.insert(hashed_unique_0, var_6)

@pytest.mark.xfail(strict=True)
def test_case_17():
    hashed_non_unique_0 = module_0.HashedNonUnique()
    var_0 = hashed_non_unique_0.insert(hashed_non_unique_0, hashed_non_unique_0)
    var_1 = hashed_non_unique_0.remove(hashed_non_unique_0)
    var_0.insert(var_1, var_1)