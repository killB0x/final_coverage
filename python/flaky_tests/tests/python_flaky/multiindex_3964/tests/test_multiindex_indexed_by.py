# Automatically generated by Pynguin.
import pytest
import multiindex.indexed_by as module_0
import multiindex.view as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    hashed_non_unique_0 = module_0.HashedNonUnique(none_type_0)
    assert f'{type(hashed_non_unique_0).__module__}.{type(hashed_non_unique_0).__qualname__}' == 'multiindex.indexed_by.HashedNonUnique'
    assert hashed_non_unique_0.index_name is None
    assert f'{type(hashed_non_unique_0.view).__module__}.{type(hashed_non_unique_0.view).__qualname__}' == 'multiindex.view.HashedNonUnique'
    hashed_non_unique_0.can_be_modified(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    hashed_unique_0 = module_0.HashedUnique(none_type_0)
    assert f'{type(hashed_unique_0).__module__}.{type(hashed_unique_0).__qualname__}' == 'multiindex.indexed_by.HashedUnique'
    assert hashed_unique_0.index_name is None
    assert f'{type(hashed_unique_0.view).__module__}.{type(hashed_unique_0.view).__qualname__}' == 'multiindex.view.HashedUnique'
    hashed_unique_1 = module_0.HashedUnique(none_type_0)
    view_iterator_0 = module_1.ViewIterator(hashed_unique_1)
    tuple_0 = (view_iterator_0,)
    var_0 = hashed_unique_0.get(tuple_0)
    hashed_unique_1.modify(none_type_0, hashed_unique_1)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "xFwFeJGh'\\S}@<5`\\N"
    indexed_by_0 = module_0.IndexedBy()
    hashed_unique_0 = module_0.HashedUnique(str_0)
    assert f'{type(hashed_unique_0).__module__}.{type(hashed_unique_0).__qualname__}' == 'multiindex.indexed_by.HashedUnique'
    assert hashed_unique_0.index_name == "xFwFeJGh'\\S}@<5`\\N"
    assert f'{type(hashed_unique_0.view).__module__}.{type(hashed_unique_0.view).__qualname__}' == 'multiindex.view.HashedUnique'
    ordered_unique_0 = module_0.OrderedUnique(hashed_unique_0)
    assert f'{type(ordered_unique_0).__module__}.{type(ordered_unique_0).__qualname__}' == 'multiindex.indexed_by.OrderedUnique'
    assert f'{type(ordered_unique_0.index_name).__module__}.{type(ordered_unique_0.index_name).__qualname__}' == 'multiindex.indexed_by.HashedUnique'
    assert f'{type(ordered_unique_0.view).__module__}.{type(ordered_unique_0.view).__qualname__}' == 'multiindex.view.OrderedUnique'
    index_iterator_0 = module_0.IndexIterator(str_0)
    var_0 = index_iterator_0.__next__()
    index_iterator_1 = module_0.IndexIterator(index_iterator_0)
    var_0.remove(index_iterator_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    none_type_1 = None
    hashed_non_unique_0 = module_0.HashedNonUnique(none_type_1)
    assert f'{type(hashed_non_unique_0).__module__}.{type(hashed_non_unique_0).__qualname__}' == 'multiindex.indexed_by.HashedNonUnique'
    assert hashed_non_unique_0.index_name is None
    assert f'{type(hashed_non_unique_0.view).__module__}.{type(hashed_non_unique_0.view).__qualname__}' == 'multiindex.view.HashedNonUnique'
    hashed_non_unique_0.insert(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    hashed_unique_0 = module_0.HashedUnique(none_type_0)
    assert f'{type(hashed_unique_0).__module__}.{type(hashed_unique_0).__qualname__}' == 'multiindex.indexed_by.HashedUnique'
    assert hashed_unique_0.index_name is None
    assert f'{type(hashed_unique_0.view).__module__}.{type(hashed_unique_0.view).__qualname__}' == 'multiindex.view.HashedUnique'
    str_0 = 'Index provided does not exists in Container'
    float_0 = 1795.5787
    ordered_unique_0 = module_0.OrderedUnique(float_0)
    assert f'{type(ordered_unique_0).__module__}.{type(ordered_unique_0).__qualname__}' == 'multiindex.indexed_by.OrderedUnique'
    assert ordered_unique_0.index_name == pytest.approx(1795.5787, abs=0.01, rel=0.01)
    assert f'{type(ordered_unique_0.view).__module__}.{type(ordered_unique_0.view).__qualname__}' == 'multiindex.view.OrderedUnique'
    ordered_unique_0.remove(str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    set_0 = set()
    none_type_0 = None
    hashed_unique_0 = module_1.HashedUnique()
    hashed_non_unique_0 = module_0.HashedNonUnique(hashed_unique_0)
    assert f'{type(hashed_non_unique_0).__module__}.{type(hashed_non_unique_0).__qualname__}' == 'multiindex.indexed_by.HashedNonUnique'
    assert f'{type(hashed_non_unique_0.index_name).__module__}.{type(hashed_non_unique_0.index_name).__qualname__}' == 'multiindex.view.HashedUnique'
    assert f'{type(hashed_non_unique_0.view).__module__}.{type(hashed_non_unique_0.view).__qualname__}' == 'multiindex.view.HashedNonUnique'
    hashed_non_unique_0.can_be_inserted(set_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    indexed_by_0 = module_0.IndexedBy()
    indexed_by_0.can_be_removed(indexed_by_0, indexed_by_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b'\xa9S\x96\x8c!\xf2\xed\x90\xd2\xd5u7\x84\x82\xfa'
    ordered_unique_0 = module_0.OrderedUnique(bytes_0)
    assert f'{type(ordered_unique_0).__module__}.{type(ordered_unique_0).__qualname__}' == 'multiindex.indexed_by.OrderedUnique'
    assert ordered_unique_0.index_name == b'\xa9S\x96\x8c!\xf2\xed\x90\xd2\xd5u7\x84\x82\xfa'
    assert f'{type(ordered_unique_0.view).__module__}.{type(ordered_unique_0.view).__qualname__}' == 'multiindex.view.OrderedUnique'
    ordered_unique_0.can_be_modified(ordered_unique_0, bytes_0)