# Automatically generated by Pynguin.
import pytest
import redscope.features.schema_introspection.formatters.usergroups as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'v|AeRh.<zL\tJ]o'
    tuple_0 = (str_0,)
    usergroup_formatter_0 = module_0.UsergroupFormatter(tuple_0)
    assert f'{type(usergroup_formatter_0).__module__}.{type(usergroup_formatter_0).__qualname__}' == 'redscope.features.schema_introspection.formatters.usergroups.UsergroupFormatter'
    assert usergroup_formatter_0.raw_ddl == ('v|AeRh.<zL\tJ]o',)
    usergroup_formatter_1 = module_0.UsergroupFormatter()
    assert usergroup_formatter_1.raw_ddl == ()
    usergroup_formatter_0.sort_key(usergroup_formatter_1)

def test_case_1():
    usergroup_formatter_0 = module_0.UsergroupFormatter()
    assert f'{type(usergroup_formatter_0).__module__}.{type(usergroup_formatter_0).__qualname__}' == 'redscope.features.schema_introspection.formatters.usergroups.UsergroupFormatter'
    assert usergroup_formatter_0.raw_ddl == ()
    dict_0 = usergroup_formatter_0.perform_grouping()

def test_case_2():
    str_0 = 'env_file'
    str_1 = 'Fucr/8W2I(m.ao\r+l,'
    tuple_0 = (str_1,)
    usergroup_formatter_0 = module_0.UsergroupFormatter(str_0)
    assert f'{type(usergroup_formatter_0).__module__}.{type(usergroup_formatter_0).__qualname__}' == 'redscope.features.schema_introspection.formatters.usergroups.UsergroupFormatter'
    assert usergroup_formatter_0.raw_ddl == 'env_file'
    list_0 = usergroup_formatter_0.format(tuple_0)
    tuple_1 = (str_0,)
    usergroup_formatter_1 = module_0.UsergroupFormatter()
    assert usergroup_formatter_1.raw_ddl == ()
    str_2 = usergroup_formatter_1.sort_key(tuple_1)
    assert str_2 == 'env_file'

def test_case_3():
    str_0 = '3}so\toZaM&[`wCg'
    tuple_0 = (str_0,)
    usergroup_formatter_0 = module_0.UsergroupFormatter(tuple_0)
    assert f'{type(usergroup_formatter_0).__module__}.{type(usergroup_formatter_0).__qualname__}' == 'redscope.features.schema_introspection.formatters.usergroups.UsergroupFormatter'
    assert usergroup_formatter_0.raw_ddl == ('3}so\toZaM&[`wCg',)
    dict_0 = usergroup_formatter_0.perform_grouping()
    usergroup_formatter_1 = module_0.UsergroupFormatter()
    assert usergroup_formatter_1.raw_ddl == ()
    str_1 = usergroup_formatter_1.sort_key(tuple_0)
    assert str_1 == '3}so\toZaM&[`wCg'

def test_case_4():
    usergroup_formatter_0 = module_0.UsergroupFormatter()
    assert f'{type(usergroup_formatter_0).__module__}.{type(usergroup_formatter_0).__qualname__}' == 'redscope.features.schema_introspection.formatters.usergroups.UsergroupFormatter'
    assert usergroup_formatter_0.raw_ddl == ()
    dict_0 = usergroup_formatter_0.perform_grouping()
    str_0 = '%j!daIU.~=mb)"s%'
    tuple_0 = (str_0,)
    str_1 = usergroup_formatter_0.sort_key(tuple_0)
    assert str_1 == '%j!daIU.~=mb)"s%'