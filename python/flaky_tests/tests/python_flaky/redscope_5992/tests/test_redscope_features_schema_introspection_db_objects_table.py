# Automatically generated by Pynguin.
import pytest
import redscope.features.schema_introspection.db_objects.table as module_0
import redscope.features.schema_introspection.db_objects.constraint as module_1

def test_case_0():
    str_0 = 'e\n]3-B"k|/\tI\x0cwpr'
    table_0 = module_0.Table(str_0, str_0, str_0, str_0)
    assert f'{type(table_0).__module__}.{type(table_0).__qualname__}' == 'redscope.features.schema_introspection.db_objects.table.Table'
    assert table_0.name == 'e\n]3-B"k|/\tI\x0cwpr'
    assert table_0.schema == 'e\n]3-B"k|/\tI\x0cwpr'
    assert table_0.ddl == 'e\n]3-B"k|/\tI\x0cwpr'
    assert table_0.constraints == 'e\n]3-B"k|/\tI\x0cwpr'
    assert f'{type(module_0.Table.full_name).__module__}.{type(module_0.Table.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.file_name).__module__}.{type(module_0.Table.file_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.create).__module__}.{type(module_0.Table.create).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.create_if_not_exist).__module__}.{type(module_0.Table.create_if_not_exist).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.drop).__module__}.{type(module_0.Table.drop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.drop_if_exist).__module__}.{type(module_0.Table.drop_if_exist).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.constraint_ddl).__module__}.{type(module_0.Table.constraint_ddl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.simple_ddl).__module__}.{type(module_0.Table.simple_ddl).__qualname__}' == 'builtins.property'

def test_case_1():
    str_0 = 'foq]x'
    table_0 = module_0.Table(str_0, str_0, str_0)
    assert f'{type(table_0).__module__}.{type(table_0).__qualname__}' == 'redscope.features.schema_introspection.db_objects.table.Table'
    assert table_0.name == 'foq]x'
    assert table_0.schema == 'foq]x'
    assert table_0.ddl == 'foq]x'
    assert table_0.constraints == []
    assert f'{type(module_0.Table.full_name).__module__}.{type(module_0.Table.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.file_name).__module__}.{type(module_0.Table.file_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.create).__module__}.{type(module_0.Table.create).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.create_if_not_exist).__module__}.{type(module_0.Table.create_if_not_exist).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.drop).__module__}.{type(module_0.Table.drop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.drop_if_exist).__module__}.{type(module_0.Table.drop_if_exist).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.constraint_ddl).__module__}.{type(module_0.Table.constraint_ddl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.simple_ddl).__module__}.{type(module_0.Table.simple_ddl).__qualname__}' == 'builtins.property'

def test_case_2():
    float_0 = 48.32818
    str_0 = ' WITH TIME ZONE'
    str_1 = 'permissions'
    str_2 = 'kKE!Takbhm\\b'
    table_0 = module_0.Table(float_0, str_1, str_2)
    assert f'{type(table_0).__module__}.{type(table_0).__qualname__}' == 'redscope.features.schema_introspection.db_objects.table.Table'
    assert table_0.name == 'permissions'
    assert table_0.schema == pytest.approx(48.32818, abs=0.01, rel=0.01)
    assert table_0.ddl == 'kKE!Takbhm\\b'
    assert table_0.constraints == []
    assert f'{type(module_0.Table.full_name).__module__}.{type(module_0.Table.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.file_name).__module__}.{type(module_0.Table.file_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.create).__module__}.{type(module_0.Table.create).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.create_if_not_exist).__module__}.{type(module_0.Table.create_if_not_exist).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.drop).__module__}.{type(module_0.Table.drop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.drop_if_exist).__module__}.{type(module_0.Table.drop_if_exist).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.constraint_ddl).__module__}.{type(module_0.Table.constraint_ddl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.simple_ddl).__module__}.{type(module_0.Table.simple_ddl).__qualname__}' == 'builtins.property'
    str_3 = table_0.create_external_table()
    assert str_3 == 'CREATE EXTERNAL TABLE IF NOT EXISTS 48.32818.permissions \n(\nCREATE TABLE IF NOT EXISTS 48.32818.permissions\n(\nkKE!Takbhm\\b\n);\n);'
    str_4 = ' DROP USER '
    str_5 = ' INT'
    none_type_0 = None
    table_1 = module_0.Table(str_0, str_4, str_5, none_type_0)
    assert table_1.constraints == []
    str_6 = table_1.create_external_table(float_0)
    assert str_6 == 'CREATE EXTERNAL TABLE IF NOT EXISTS 48.32818. DROP USER  \n(\nCREATE TABLE IF NOT EXISTS  WITH TIME ZONE. DROP USER \n(\n INT\n);\n);'

def test_case_3():
    str_0 = '{'
    table_0 = module_0.Table(str_0, str_0, str_0)
    assert f'{type(table_0).__module__}.{type(table_0).__qualname__}' == 'redscope.features.schema_introspection.db_objects.table.Table'
    assert table_0.name == '{'
    assert table_0.schema == '{'
    assert table_0.ddl == '{'
    assert table_0.constraints == []
    assert f'{type(module_0.Table.full_name).__module__}.{type(module_0.Table.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.file_name).__module__}.{type(module_0.Table.file_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.create).__module__}.{type(module_0.Table.create).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.create_if_not_exist).__module__}.{type(module_0.Table.create_if_not_exist).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.drop).__module__}.{type(module_0.Table.drop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.drop_if_exist).__module__}.{type(module_0.Table.drop_if_exist).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.constraint_ddl).__module__}.{type(module_0.Table.constraint_ddl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.simple_ddl).__module__}.{type(module_0.Table.simple_ddl).__qualname__}' == 'builtins.property'
    str_1 = table_0.create_external_table()
    assert str_1 == 'CREATE EXTERNAL TABLE IF NOT EXISTS {.{ \n(\nCREATE TABLE IF NOT EXISTS {.{\n(\n{\n);\n);'

def test_case_4():
    str_0 = ''
    str_1 = '_X8G5r'
    list_0 = [str_0]
    table_0 = module_0.Table(str_0, str_1, list_0, list_0)
    assert f'{type(table_0).__module__}.{type(table_0).__qualname__}' == 'redscope.features.schema_introspection.db_objects.table.Table'
    assert table_0.name == '_X8G5r'
    assert table_0.schema == ''
    assert table_0.ddl == ['']
    assert table_0.constraints == ['']
    assert f'{type(module_0.Table.full_name).__module__}.{type(module_0.Table.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.file_name).__module__}.{type(module_0.Table.file_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.create).__module__}.{type(module_0.Table.create).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.create_if_not_exist).__module__}.{type(module_0.Table.create_if_not_exist).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.drop).__module__}.{type(module_0.Table.drop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.drop_if_exist).__module__}.{type(module_0.Table.drop_if_exist).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.constraint_ddl).__module__}.{type(module_0.Table.constraint_ddl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.simple_ddl).__module__}.{type(module_0.Table.simple_ddl).__qualname__}' == 'builtins.property'
    none_type_0 = table_0.add_constraint(table_0)
    assert len(table_0.ddl) == 2
    assert len(table_0.constraints) == 2
    str_2 = 'PuJkn0xOpI'
    table_1 = module_0.Table(str_0, str_1, str_2, list_0)
    assert table_1.name == '_X8G5r'
    assert len(table_1.constraints) == 2
    table_2 = module_0.Table(none_type_0, table_1, table_1)
    assert f'{type(table_2.name).__module__}.{type(table_2.name).__qualname__}' == 'redscope.features.schema_introspection.db_objects.table.Table'
    assert table_2.constraints == []

def test_case_5():
    str_0 = 'UC'
    str_1 = "2)j!~R\n'o2rQ,"
    table_0 = module_0.Table(str_0, str_1, str_1)
    assert f'{type(table_0).__module__}.{type(table_0).__qualname__}' == 'redscope.features.schema_introspection.db_objects.table.Table'
    assert table_0.name == "2)j!~R\n'o2rQ,"
    assert table_0.schema == 'UC'
    assert table_0.ddl == "2)j!~R\n'o2rQ,"
    assert table_0.constraints == []
    assert f'{type(module_0.Table.full_name).__module__}.{type(module_0.Table.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.file_name).__module__}.{type(module_0.Table.file_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.create).__module__}.{type(module_0.Table.create).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.create_if_not_exist).__module__}.{type(module_0.Table.create_if_not_exist).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.drop).__module__}.{type(module_0.Table.drop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.drop_if_exist).__module__}.{type(module_0.Table.drop_if_exist).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.constraint_ddl).__module__}.{type(module_0.Table.constraint_ddl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.simple_ddl).__module__}.{type(module_0.Table.simple_ddl).__qualname__}' == 'builtins.property'
    str_2 = table_0.create_external_table()
    assert str_2 == "CREATE EXTERNAL TABLE IF NOT EXISTS UC.2)j!~R\n'o2rQ, \n(\nCREATE TABLE IF NOT EXISTS UC.2)j!~R\n'o2rQ,\n(\n2)j!~R,\n'o2rQ\n);\n);"

def test_case_6():
    str_0 = ']@1c\\$5ui\r]Q>uc<GX'
    str_1 = '\nLTJK1\x0cq~\r\n2y9S\n"'
    none_type_0 = None
    table_0 = module_0.Table(str_0, str_0, str_1, none_type_0)
    assert f'{type(table_0).__module__}.{type(table_0).__qualname__}' == 'redscope.features.schema_introspection.db_objects.table.Table'
    assert table_0.name == ']@1c\\$5ui\r]Q>uc<GX'
    assert table_0.schema == ']@1c\\$5ui\r]Q>uc<GX'
    assert table_0.ddl == '\nLTJK1\x0cq~\r\n2y9S\n"'
    assert table_0.constraints == []
    assert f'{type(module_0.Table.full_name).__module__}.{type(module_0.Table.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.file_name).__module__}.{type(module_0.Table.file_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.create).__module__}.{type(module_0.Table.create).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.create_if_not_exist).__module__}.{type(module_0.Table.create_if_not_exist).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.drop).__module__}.{type(module_0.Table.drop).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.drop_if_exist).__module__}.{type(module_0.Table.drop_if_exist).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.constraint_ddl).__module__}.{type(module_0.Table.constraint_ddl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Table.simple_ddl).__module__}.{type(module_0.Table.simple_ddl).__qualname__}' == 'builtins.property'
    str_2 = '\n(\n'
    str_3 = 'D~$K^@H'
    str_4 = 'V>k'
    str_5 = table_0.create_external_table()
    assert str_5 == 'CREATE EXTERNAL TABLE IF NOT EXISTS ]@1c\\$5ui\r]Q>uc<GX.]@1c\\$5ui\r]Q>uc<GX \n(\nCREATE TABLE IF NOT EXISTS ]@1c\\$5ui\r]Q>uc<GX.]@1c\\$5ui\r]Q>uc<GX\n(\n,\nLTJK1\x0cq~,\n2y9S,\n"\n);\n);'
    str_6 = '$0'
    str_7 = 'uUQ\x0c'
    table_1 = module_0.Table(str_2, str_7, str_3)
    assert table_1.constraints == []
    str_8 = table_1.create_external_table(str_6)
    assert str_8 == 'CREATE EXTERNAL TABLE IF NOT EXISTS $0.uUQ\x0c \n(\nCREATE TABLE IF NOT EXISTS \n(\n.uUQ\x0c\n(\nD~$K^@H\n);\n);'
    str_9 = 'list'
    str_10 = 'optional list of table names to search for'
    constraint_0 = module_1.Constraint(str_6, str_2, str_9, str_10)
    str_11 = '#N).x'
    none_type_1 = table_1.add_constraint(constraint_0)
    assert f'{type(table_1.constraints).__module__}.{type(table_1.constraints).__qualname__}' == 'builtins.list'
    assert len(table_1.constraints) == 1
    str_12 = 'action'
    none_type_2 = None
    none_type_3 = table_1.add_constraint(constraint_0)
    table_2 = module_0.Table(str_11, str_4, str_12, none_type_2)
    none_type_4 = table_2.add_constraint(constraint_0)
    constraint_1 = module_1.Constraint(str_2, str_2, str_3, str_4)
    table_3 = module_0.Table(str_8, str_9, str_3)
    assert table_3.schema == 'CREATE EXTERNAL TABLE IF NOT EXISTS $0.uUQ\x0c \n(\nCREATE TABLE IF NOT EXISTS \n(\n.uUQ\x0c\n(\nD~$K^@H\n);\n);'
    str_13 = 'CONSTRAINT'
    table_4 = module_0.Table(table_3, str_2, str_13)
    table_5 = module_0.Table(str_13, str_13, str_11, none_type_2)
    str_14 = table_4.create_external_table()
    str_15 = table_4.create_external_table(str_2)