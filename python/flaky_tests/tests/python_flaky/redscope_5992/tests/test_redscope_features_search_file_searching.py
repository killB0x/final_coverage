# Automatically generated by Pynguin.
import pytest
import redscope.features.search.file_searching as module_0
import re as module_1

def test_case_0():
    search_result_0 = module_0.SearchResult()
    var_0 = search_result_0.__setitem__(search_result_0, search_result_0)
    search_result_1 = search_result_0.combine_results()
    list_0 = [search_result_1, search_result_1, search_result_0, search_result_0, search_result_0]
    search_result_2 = search_result_1.combine_results(*list_0)
    assert f'{type(search_result_2).__module__}.{type(search_result_2).__qualname__}' == 'redscope.features.search.file_searching.SearchResult'

def test_case_1():
    search_result_0 = module_0.SearchResult()

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'use to set the name of the new migration you wish to preform an action on.'
    module_0.search_directory(str_0, str_0)

def test_case_3():
    search_result_0 = module_0.SearchResult()
    var_0 = search_result_0.__setitem__(search_result_0, search_result_0)
    search_result_1 = search_result_0.combine_results()
    list_0 = [search_result_1, search_result_1, search_result_0, search_result_0, search_result_0]
    search_result_2 = search_result_1.combine_results(*list_0)
    assert f'{type(search_result_2).__module__}.{type(search_result_2).__qualname__}' == 'redscope.features.search.file_searching.SearchResult'
    var_1 = search_result_1.get_result(search_result_1)

@pytest.mark.xfail(strict=True)
def test_case_4():
    search_result_0 = module_0.SearchResult()
    list_0 = search_result_0.values()
    search_result_1 = module_0.SearchResult()
    var_0 = search_result_0.__setitem__(search_result_0, search_result_1)
    list_1 = search_result_1.results()
    search_result_2 = search_result_0.combine_results()
    list_2 = [search_result_2, search_result_2, search_result_0, search_result_0]
    search_result_3 = search_result_1.combine_results(*list_2)
    assert f'{type(search_result_3).__module__}.{type(search_result_3).__qualname__}' == 'redscope.features.search.file_searching.SearchResult'
    var_1 = search_result_1.add_result(search_result_2, var_0)
    search_result_2.combine_results(*search_result_1)

def test_case_5():
    search_result_0 = module_0.SearchResult()
    bool_0 = search_result_0.empty()
    assert bool_0 is True

def test_case_6():
    none_type_0 = None
    s_q_l_file_0 = module_0.SQLFile(none_type_0)
    assert f'{type(s_q_l_file_0).__module__}.{type(s_q_l_file_0).__qualname__}' == 'redscope.features.search.file_searching.SQLFile'
    assert s_q_l_file_0.path is None
    assert module_0.SQLFile.ext == '.sql'

def test_case_7():
    str_0 = '*r%88t>^R'
    python_file_0 = module_0.PythonFile(str_0)
    assert f'{type(python_file_0).__module__}.{type(python_file_0).__qualname__}' == 'redscope.features.search.file_searching.PythonFile'
    assert python_file_0.path == '*r%88t>^R'
    assert module_0.PythonFile.ext == '.py'

@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    python_file_0 = module_0.PythonFile(list_0)
    assert f'{type(python_file_0).__module__}.{type(python_file_0).__qualname__}' == 'redscope.features.search.file_searching.PythonFile'
    assert python_file_0.path == []
    assert module_0.PythonFile.ext == '.py'
    python_file_0.search(list_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    search_result_0 = module_0.SearchResult()
    set_0 = {search_result_0, search_result_0, search_result_0, search_result_0}
    var_0 = search_result_0.add_result(search_result_0, set_0)
    s_q_l_file_0 = module_0.SQLFile(var_0)
    assert f'{type(s_q_l_file_0).__module__}.{type(s_q_l_file_0).__qualname__}' == 'redscope.features.search.file_searching.SQLFile'
    assert s_q_l_file_0.path is None
    assert module_0.SQLFile.ext == '.sql'
    bool_0 = search_result_0.empty()
    assert bool_0 is False
    list_0 = [s_q_l_file_0, search_result_0, bool_0]
    search_result_0.combine_results(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    search_result_0 = module_0.SearchResult()
    search_result_1 = search_result_0.combine_results()
    module_1.sub(search_result_1, search_result_1, search_result_0)

def test_case_11():
    search_result_0 = module_0.SearchResult()
    search_result_1 = module_0.SearchResult()
    var_0 = search_result_0.__setitem__(search_result_0, search_result_1)
    list_0 = search_result_1.results()
    search_result_2 = search_result_0.combine_results()
    list_1 = [search_result_2, search_result_2, search_result_0, search_result_0, search_result_1]
    search_result_3 = search_result_1.combine_results(*list_1)
    assert f'{type(search_result_3).__module__}.{type(search_result_3).__qualname__}' == 'redscope.features.search.file_searching.SearchResult'
    bool_0 = search_result_1.empty()
    assert bool_0 is True