# Automatically generated by Pynguin.
import pytest
import compyle.config as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.get_config()
    config_0 = module_0.Config()
    assert f'{type(module_0.Config.suppress_warnings).__module__}.{type(module_0.Config.suppress_warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_openmp).__module__}.{type(module_0.Config.use_openmp).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.omp_schedule).__module__}.{type(module_0.Config.omp_schedule).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_opencl).__module__}.{type(module_0.Config.use_opencl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_cuda).__module__}.{type(module_0.Config.use_cuda).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_double).__module__}.{type(module_0.Config.use_double).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.profile).__module__}.{type(module_0.Config.profile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_local_memory).__module__}.{type(module_0.Config.use_local_memory).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.wgs).__module__}.{type(module_0.Config.wgs).__qualname__}' == 'builtins.property'
    config_0.set_omp_schedule(var_0)

def test_case_1():
    var_0 = module_0.get_config()

def test_case_2():
    var_0 = module_0.get_config()

def test_case_3():
    config_0 = module_0.Config()
    assert f'{type(config_0).__module__}.{type(config_0).__qualname__}' == 'compyle.config.Config'
    assert f'{type(module_0.Config.suppress_warnings).__module__}.{type(module_0.Config.suppress_warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_openmp).__module__}.{type(module_0.Config.use_openmp).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.omp_schedule).__module__}.{type(module_0.Config.omp_schedule).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_opencl).__module__}.{type(module_0.Config.use_opencl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_cuda).__module__}.{type(module_0.Config.use_cuda).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_double).__module__}.{type(module_0.Config.use_double).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.profile).__module__}.{type(module_0.Config.profile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_local_memory).__module__}.{type(module_0.Config.use_local_memory).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.wgs).__module__}.{type(module_0.Config.wgs).__qualname__}' == 'builtins.property'

def test_case_4():
    var_0 = module_0.get_config()
    var_1 = module_0.set_config(var_0)
    config_0 = module_0.Config()
    assert f'{type(module_0.Config.suppress_warnings).__module__}.{type(module_0.Config.suppress_warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_openmp).__module__}.{type(module_0.Config.use_openmp).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.omp_schedule).__module__}.{type(module_0.Config.omp_schedule).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_opencl).__module__}.{type(module_0.Config.use_opencl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_cuda).__module__}.{type(module_0.Config.use_cuda).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_double).__module__}.{type(module_0.Config.use_double).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.profile).__module__}.{type(module_0.Config.profile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_local_memory).__module__}.{type(module_0.Config.use_local_memory).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.wgs).__module__}.{type(module_0.Config.wgs).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '#E[\\\x0b9778D|"6,jR*8'
    config_0 = module_0.Config()
    assert f'{type(config_0).__module__}.{type(config_0).__qualname__}' == 'compyle.config.Config'
    assert f'{type(module_0.Config.suppress_warnings).__module__}.{type(module_0.Config.suppress_warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_openmp).__module__}.{type(module_0.Config.use_openmp).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.omp_schedule).__module__}.{type(module_0.Config.omp_schedule).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_opencl).__module__}.{type(module_0.Config.use_opencl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_cuda).__module__}.{type(module_0.Config.use_cuda).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_double).__module__}.{type(module_0.Config.use_double).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.profile).__module__}.{type(module_0.Config.profile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_local_memory).__module__}.{type(module_0.Config.use_local_memory).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.wgs).__module__}.{type(module_0.Config.wgs).__qualname__}' == 'builtins.property'
    config_0.set_omp_schedule(str_0)

def test_case_6():
    config_0 = module_0.Config()
    assert f'{type(config_0).__module__}.{type(config_0).__qualname__}' == 'compyle.config.Config'
    assert f'{type(module_0.Config.suppress_warnings).__module__}.{type(module_0.Config.suppress_warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_openmp).__module__}.{type(module_0.Config.use_openmp).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.omp_schedule).__module__}.{type(module_0.Config.omp_schedule).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_opencl).__module__}.{type(module_0.Config.use_opencl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_cuda).__module__}.{type(module_0.Config.use_cuda).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_double).__module__}.{type(module_0.Config.use_double).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.profile).__module__}.{type(module_0.Config.profile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.use_local_memory).__module__}.{type(module_0.Config.use_local_memory).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Config.wgs).__module__}.{type(module_0.Config.wgs).__qualname__}' == 'builtins.property'
    var_0 = module_0.get_config()
    var_1 = module_0.get_config()
    var_2 = module_0.use_config()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_2.gen).__module__}.{type(var_2.gen).__qualname__}' == 'builtins.generator'
    assert var_2.args == ()
    assert var_2.kwds == {}
    config_1 = module_0.Config()
    var_3 = module_0.set_config(var_1)
    config_2 = module_0.Config()
    config_3 = module_0.Config()
    str_0 = 'dynamic'
    var_4 = config_0.set_omp_schedule(str_0)