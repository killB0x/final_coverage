# Automatically generated by Pynguin.
import pytest
import compyle.capture_stream as module_0

def test_case_0():
    capture_multiple_streams_0 = module_0.CaptureMultipleStreams()
    capture_stream_0 = module_0.CaptureStream()
    assert capture_stream_0.fileno == 2
    assert capture_stream_0.tmp_path == ''

def test_case_1():
    capture_stream_0 = module_0.CaptureStream()
    assert capture_stream_0.fileno == 2
    assert capture_stream_0.tmp_path == ''

def test_case_2():
    capture_stream_0 = module_0.CaptureStream()
    assert capture_stream_0.fileno == 2
    assert capture_stream_0.tmp_path == ''
    var_0 = capture_stream_0.__enter__()
    assert f'{type(capture_stream_0.tmp_stream).__module__}.{type(capture_stream_0.tmp_stream).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'compyle.capture_stream.CaptureStream'
    assert f'{type(var_0.stream).__module__}.{type(var_0.stream).__qualname__}' == '_io.TextIOWrapper'
    assert var_0.fileno == 2
    assert f'{type(var_0.tmp_stream).__module__}.{type(var_0.tmp_stream).__qualname__}' == '_io.TextIOWrapper'

def test_case_3():
    capture_stream_0 = module_0.CaptureStream()
    assert capture_stream_0.fileno == 2
    assert capture_stream_0.tmp_path == ''
    var_0 = capture_stream_0.__exit__(capture_stream_0, capture_stream_0, capture_stream_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    capture_stream_0 = module_0.CaptureStream()
    assert capture_stream_0.fileno == 2
    assert capture_stream_0.tmp_path == ''
    var_0 = capture_stream_0.get_output()
    assert var_0 == ''
    var_0.get_output()

@pytest.mark.xfail(strict=True)
def test_case_5():
    capture_multiple_streams_0 = module_0.CaptureMultipleStreams()
    capture_multiple_streams_1 = module_0.CaptureMultipleStreams()
    var_0 = capture_multiple_streams_0.get_output()
    none_type_0 = None
    var_1 = capture_multiple_streams_0.get_output()
    var_2 = capture_multiple_streams_0.__exit__(none_type_0, capture_multiple_streams_1, capture_multiple_streams_1)
    var_0.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    module_0.CaptureMultipleStreams(bool_0)

def test_case_7():
    capture_multiple_streams_0 = module_0.CaptureMultipleStreams()
    capture_stream_0 = capture_multiple_streams_0.__enter__()
    assert f'{type(capture_stream_0).__module__}.{type(capture_stream_0).__qualname__}' == 'compyle.capture_stream.CaptureMultipleStreams'
    assert f'{type(capture_stream_0.streams).__module__}.{type(capture_stream_0.streams).__qualname__}' == 'builtins.tuple'
    assert len(capture_stream_0.streams) == 2
    assert f'{type(capture_stream_0.captures).__module__}.{type(capture_stream_0.captures).__qualname__}' == 'builtins.list'
    assert len(capture_stream_0.captures) == 2

def test_case_8():
    capture_multiple_streams_0 = module_0.CaptureMultipleStreams()
    capture_stream_0 = capture_multiple_streams_0.__exit__(capture_multiple_streams_0, capture_multiple_streams_0, capture_multiple_streams_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    capture_multiple_streams_0 = module_0.CaptureMultipleStreams()
    var_0 = capture_multiple_streams_0.get_output()
    var_0.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    capture_stream_0 = module_0.CaptureStream()
    assert capture_stream_0.fileno == 2
    assert capture_stream_0.tmp_path == ''
    var_0 = capture_stream_0.__enter__()
    assert f'{type(capture_stream_0.tmp_stream).__module__}.{type(capture_stream_0.tmp_stream).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'compyle.capture_stream.CaptureStream'
    assert f'{type(var_0.stream).__module__}.{type(var_0.stream).__qualname__}' == '_io.TextIOWrapper'
    assert var_0.fileno == 2
    assert f'{type(var_0.tmp_stream).__module__}.{type(var_0.tmp_stream).__qualname__}' == '_io.TextIOWrapper'
    var_1 = var_0.__exit__(bool_0, bool_0, bool_0)
    var_1.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    capture_multiple_streams_0 = module_0.CaptureMultipleStreams()
    var_0 = capture_multiple_streams_0.__exit__(capture_multiple_streams_0, none_type_0, none_type_0)
    var_1 = capture_multiple_streams_0.__enter__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'compyle.capture_stream.CaptureMultipleStreams'
    assert f'{type(var_1.streams).__module__}.{type(var_1.streams).__qualname__}' == 'builtins.tuple'
    assert len(var_1.streams) == 2
    assert f'{type(var_1.captures).__module__}.{type(var_1.captures).__qualname__}' == 'builtins.list'
    assert len(var_1.captures) == 2
    var_2 = var_1.get_output()
    var_2.__exit__(none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    none_type_0 = None
    complex_0 = (-1377.73+1104j)
    list_0 = [none_type_0, none_type_0, complex_0]
    capture_multiple_streams_0 = module_0.CaptureMultipleStreams()
    var_0 = capture_multiple_streams_0.__exit__(bool_0, none_type_0, list_0)
    capture_stream_0 = module_0.CaptureStream()
    assert capture_stream_0.fileno == 2
    assert capture_stream_0.tmp_path == ''
    var_1 = capture_stream_0.__enter__()
    assert f'{type(capture_stream_0.tmp_stream).__module__}.{type(capture_stream_0.tmp_stream).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'compyle.capture_stream.CaptureStream'
    assert f'{type(var_1.stream).__module__}.{type(var_1.stream).__qualname__}' == '_io.TextIOWrapper'
    assert var_1.fileno == 2
    assert f'{type(var_1.tmp_stream).__module__}.{type(var_1.tmp_stream).__qualname__}' == '_io.TextIOWrapper'
    var_2 = var_1.get_output()
    assert var_2 == ''
    capture_multiple_streams_1 = module_0.CaptureMultipleStreams()
    var_3 = capture_multiple_streams_1.__enter__()
    capture_stream_1 = var_1.__exit__(var_3, complex_0, bool_0)
    capture_stream_1.__exit__(var_2, capture_stream_0, var_1)