# Automatically generated by Pynguin.
import pytest
import compyle.cython_generator as module_0
import compyle.types as module_1
import ast as module_2
import inspect as module_3
import collections as module_4

@pytest.mark.xfail(strict=True)
def test_case_0():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    cython_class_helper_0 = module_0.CythonClassHelper(public_vars=cython_generator_0, methods=cython_generator_0)
    assert cython_class_helper_0.name == ''
    cython_generator_1 = module_0.CythonGenerator()
    assert cython_generator_1.code == ''
    assert cython_generator_1.ignore_methods == ['_cython_code_']
    cython_generator_1.parse(cython_generator_1, is_serial=cython_generator_1)

def test_case_1():
    cython_class_helper_0 = module_0.CythonClassHelper()
    assert cython_class_helper_0.name == ''

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    code_generation_error_0 = module_0.CodeGenerationError()
    cython_generator_0 = module_0.CythonGenerator(code_generation_error_0)
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    cython_generator_0.detect_type(none_type_0, code_generation_error_0)

def test_case_3():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']

def test_case_4():
    code_generation_error_0 = module_0.CodeGenerationError()

@pytest.mark.xfail(strict=True)
def test_case_5():
    code_generation_error_0 = module_0.CodeGenerationError()
    cython_class_helper_0 = module_0.CythonClassHelper()
    assert cython_class_helper_0.name == ''
    cython_class_helper_0.generate()

@pytest.mark.xfail(strict=True)
def test_case_6():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    var_0 = cython_generator_0.add_known(cython_generator_0)
    module_0.get_func_definition(cython_generator_0)

def test_case_7():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    var_0 = module_0.get_parallel_range(cython_generator_0)
    var_1 = cython_generator_0.get_code()
    assert var_1 == ''

@pytest.mark.xfail(strict=True)
def test_case_8():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    cython_generator_0.parse(cython_generator_0, cython_generator_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    module_0.all_numeric(cython_generator_0)

def test_case_10():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    var_0 = module_0.get_parallel_range(cython_generator_0)

def test_case_11():
    bytes_0 = b'4\xbf\xf1\x8f'
    var_0 = module_0.all_numeric(bytes_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_12():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    str_0 = '\x0c=nDN}{Q:es<9'
    var_0 = cython_generator_0.ctype_to_python(str_0)
    assert var_0 == '\x0c=nDN}{Q:es<9'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_1 = module_0.get_parallel_range(cython_generator_0, step=cython_generator_0, **dict_0)
    var_2 = cython_generator_0.set_make_python_methods(cython_generator_0)
    cython_class_helper_0 = module_0.CythonClassHelper()
    assert cython_class_helper_0.name == ''
    cython_generator_0.parse(cython_class_helper_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    var_0 = cython_generator_0.set_make_python_methods(cython_generator_0)
    cython_class_helper_0 = module_0.CythonClassHelper()
    assert cython_class_helper_0.name == ''
    cython_generator_0.parse(cython_class_helper_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    cython_class_helper_0 = module_0.CythonClassHelper(public_vars=cython_generator_0, methods=cython_generator_0)
    assert cython_class_helper_0.name == ''
    cython_generator_1 = module_0.CythonGenerator()
    assert cython_generator_1.code == ''
    assert cython_generator_1.ignore_methods == ['_cython_code_']
    var_0 = module_1.KnownType(cython_generator_1)
    cython_generator_0.detect_type(cython_generator_0, var_0)

def test_case_15():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    var_0 = module_0.get_parallel_range(cython_generator_0, cython_generator_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    var_0 = cython_generator_0.get_code()
    assert var_0 == ''
    var_1 = cython_generator_0.set_make_python_methods(cython_generator_0)
    var_2 = module_0.get_func_definition(var_0)
    cython_class_helper_0 = module_0.CythonClassHelper()
    assert cython_class_helper_0.name == ''
    cython_generator_0.parse(cython_class_helper_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    unparser_0 = module_2._Unparser()
    cython_generator_0.parse(unparser_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    cython_class_helper_0 = module_0.CythonClassHelper()
    assert cython_class_helper_0.name == ''
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    code_generation_error_0 = module_0.CodeGenerationError()
    cython_generator_0.parse(cython_class_helper_0, is_serial=code_generation_error_0)

def test_case_19():
    str_0 = '\nM+#$;l;Q3pm\x0b5'
    var_0 = module_3.indentsize(str_0)
    var_1 = module_0.get_parallel_range(var_0, var_0)
    assert var_1 == 'range(1, 1, 1)'
    with pytest.raises(module_0.CodeGenerationError):
        module_0.parse_declare(var_1)

@pytest.mark.xfail(strict=True)
def test_case_20():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    str_0 = ''
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.get_parallel_range(cython_generator_0, step=cython_generator_0, **dict_0)
    var_1 = cython_generator_0.set_make_python_methods(cython_generator_0)
    aug_load_0 = module_2.AugLoad()
    var_2 = module_0.get_parallel_range(aug_load_0, aug_load_0)
    cython_class_helper_0 = module_0.CythonClassHelper()
    assert cython_class_helper_0.name == ''
    var_3 = cython_generator_0.parse(aug_load_0, var_1)
    assert cython_generator_0.code == '\ncdef class AugLoad:\n    def __init__(self, **kwargs):\n        for key, value in kwargs.items():\n            setattr(self, key, value)\n\n'
    var_0.generate()

@pytest.mark.xfail(strict=True)
def test_case_21():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    var_0 = module_3.ismemberdescriptor(cython_generator_0)
    var_1 = cython_generator_0.set_make_python_methods(cython_generator_0)
    var_2 = module_1.Undefined()
    var_3 = module_3.ismethod(var_2)
    var_4 = module_0.get_parallel_range(var_3, var_3)
    assert var_4 == 'range(False, False, 1)'
    var_5 = cython_generator_0.set_make_python_methods(var_2)
    cython_class_helper_0 = module_0.CythonClassHelper()
    assert cython_class_helper_0.name == ''
    cython_generator_0.parse(cython_generator_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    var_0 = cython_generator_0.set_make_python_methods(cython_generator_0)
    unparser_0 = module_2._Unparser()
    cython_generator_0.parse(unparser_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    unparser_0 = module_3.formatannotationrelativeto(cython_generator_0)
    cython_generator_0.parse(unparser_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    var_0 = module_3.formatannotationrelativeto(cython_generator_0)
    cython_generator_0.get_func_signature(var_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    cython_generator_0 = module_0.CythonGenerator()
    assert cython_generator_0.code == ''
    assert cython_generator_0.ignore_methods == ['_cython_code_']
    var_0 = module_0.get_parallel_range(cython_generator_0)
    user_dict_0 = module_4.UserDict()
    var_1 = cython_generator_0.set_make_python_methods(cython_generator_0)
    cython_generator_0.parse(user_dict_0)