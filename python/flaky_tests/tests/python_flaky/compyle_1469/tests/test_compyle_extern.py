# Automatically generated by Pynguin.
import pytest
import compyle.extern as module_0

def test_case_0():
    printf_0 = module_0._printf()
    var_0 = printf_0.code(printf_0)
    assert var_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    var_0 = module_0.get_extern_code(list_0, list_0)
    module_0.get_extern_code(var_0, list_0)

def test_case_2():
    list_0 = []
    var_0 = module_0.get_extern_code(list_0, list_0)

def test_case_3():
    printf_0 = module_0._printf()
    var_0 = printf_0.link(printf_0)
    var_1 = module_0.get_extern_code(var_0, var_0)

def test_case_4():
    list_0 = []
    printf_0 = module_0._printf()
    var_0 = printf_0.code(list_0)
    assert var_0 == ''
    extern_0 = module_0.Extern()
    var_1 = printf_0.code(var_0)
    assert var_1 == ''
    with pytest.raises(NotImplementedError):
        extern_0.__call__()

@pytest.mark.xfail(strict=True)
def test_case_5():
    printf_0 = module_0._printf()
    str_0 = 'fhor'
    var_0 = printf_0.code(str_0)
    assert var_0 == ''
    printf_0.__call__()

def test_case_6():
    list_0 = []
    extern_0 = module_0.Extern()
    with pytest.raises(NotImplementedError):
        extern_0.code(list_0)

def test_case_7():
    printf_0 = module_0._printf()
    list_0 = [printf_0, printf_0, printf_0, printf_0]
    none_type_0 = None
    var_0 = module_0.get_extern_code(list_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    printf_0 = module_0._printf()
    var_0 = printf_0.code(list_0)
    assert var_0 == ''
    dict_0 = {printf_0: printf_0}
    var_1 = module_0.get_extern_code(dict_0, var_0)
    extern_0 = module_0.Extern(*var_0)
    assert f'{type(extern_0).__module__}.{type(extern_0).__qualname__}' == 'compyle.extern.Extern'
    str_0 = 'cython'
    var_2 = printf_0.code(str_0)
    assert var_2 == 'from libc.studio cimport printf'
    printf_0.__call__(**var_0)