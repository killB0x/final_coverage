# Automatically generated by Pynguin.
import pytest
import compyle.ast_utils as module_0
import ast as module_1

def test_case_0():
    symbol_parser_0 = module_0.SymbolParser()
    assert f'{type(symbol_parser_0).__module__}.{type(symbol_parser_0).__qualname__}' == 'compyle.ast_utils.SymbolParser'
    assert symbol_parser_0.names == {*()}
    assert symbol_parser_0.assign == {*()}
    assert symbol_parser_0.calls == {*()}
    assert symbol_parser_0.funcargs == {*()}
    assert symbol_parser_0.func_name == ''
    assert f'{type(symbol_parser_0.ctx).__module__}.{type(symbol_parser_0.ctx).__qualname__}' == 'builtins.tuple'
    assert len(symbol_parser_0.ctx) == 2

@pytest.mark.xfail(strict=True)
def test_case_1():
    name_lister_0 = module_0.NameLister()
    assert f'{type(name_lister_0).__module__}.{type(name_lister_0).__qualname__}' == 'compyle.ast_utils.NameLister'
    assert name_lister_0.names == {*()}
    assert f'{type(name_lister_0.ctx).__module__}.{type(name_lister_0.ctx).__qualname__}' == 'builtins.tuple'
    assert len(name_lister_0.ctx) == 2
    name_lister_1 = module_0.NameLister()
    assert name_lister_1.names == {*()}
    assert f'{type(name_lister_1.ctx).__module__}.{type(name_lister_1.ctx).__qualname__}' == 'builtins.tuple'
    assert len(name_lister_1.ctx) == 2
    name_lister_1.visit_Name(name_lister_1)

def test_case_2():
    str_0 = '37'
    var_0 = module_0.has_return(str_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.get_symbols(none_type_0)

def test_case_4():
    except_handler_0 = module_1.ExceptHandler()
    var_0 = module_0.get_unknown_names_and_calls(except_handler_0)

def test_case_5():
    name_lister_0 = module_0.NameLister()
    assert f'{type(name_lister_0).__module__}.{type(name_lister_0).__qualname__}' == 'compyle.ast_utils.NameLister'
    assert name_lister_0.names == {*()}
    assert f'{type(name_lister_0.ctx).__module__}.{type(name_lister_0.ctx).__qualname__}' == 'builtins.tuple'
    assert len(name_lister_0.ctx) == 2

def test_case_6():
    str_0 = 'H6tENgo,=Y'
    var_0 = module_0.get_assigned(str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    symbol_parser_0 = module_0.SymbolParser()
    assert f'{type(symbol_parser_0).__module__}.{type(symbol_parser_0).__qualname__}' == 'compyle.ast_utils.SymbolParser'
    assert symbol_parser_0.names == {*()}
    assert symbol_parser_0.assign == {*()}
    assert symbol_parser_0.calls == {*()}
    assert symbol_parser_0.funcargs == {*()}
    assert symbol_parser_0.func_name == ''
    assert f'{type(symbol_parser_0.ctx).__module__}.{type(symbol_parser_0.ctx).__qualname__}' == 'builtins.tuple'
    assert len(symbol_parser_0.ctx) == 2
    symbol_parser_0.visit_Name(symbol_parser_0)

def test_case_8():
    str_0 = 'is_jit'
    var_0 = module_0.get_unknown_names_and_calls(str_0)

def test_case_9():
    str_0 = 'H6tEN.o,=Y'
    var_0 = module_0.get_symbols(str_0)
    var_1 = module_0.get_unknown_names_and_calls(str_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '37'
    name_lister_0 = module_0.NameLister()
    assert f'{type(name_lister_0).__module__}.{type(name_lister_0).__qualname__}' == 'compyle.ast_utils.NameLister'
    assert name_lister_0.names == {*()}
    assert f'{type(name_lister_0.ctx).__module__}.{type(name_lister_0.ctx).__qualname__}' == 'builtins.tuple'
    assert len(name_lister_0.ctx) == 2
    var_0 = module_0.get_unknown_names_and_calls(str_0)
    var_1 = module_1.Return()
    var_2 = module_0.has_return(var_1)
    assert var_2 is True
    module_1.MatchSequence(**var_2)

def test_case_11():
    str_0 = 'wH6tENgoo=Y'
    var_0 = module_0.get_unknown_names_and_calls(str_0)

def test_case_12():
    str_0 = 'H6tENgo^=Y'
    var_0 = module_0.get_unknown_names_and_calls(str_0)

def test_case_13():
    str_0 = 'H6tEN.o,=Y'
    var_0 = module_0.get_unknown_names_and_calls(str_0)

def test_case_14():
    str_0 = 'H6tENgo,=Y'
    var_0 = module_0.get_unknown_names_and_calls(str_0)

def test_case_15():
    str_0 = 'H6tEN.o=Y'
    var_0 = module_0.get_unknown_names_and_calls(str_0)

def test_case_16():
    str_0 = 'H6tEN.go/=Y'
    var_0 = module_0.get_unknown_names_and_calls(str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = '-.\x0c(xkG$m\t}v&A3H0Uq'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    formatted_value_0 = module_1.FormattedValue(**dict_0)
    var_0 = module_1.dump(formatted_value_0)
    var_1 = module_0.get_assigned(var_0)
    var_0.__new__(str_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = '{func}({args})'
    var_0 = module_0.get_symbols(str_0)
    var_1 = module_0.get_unknown_names_and_calls(str_0)
    module_0.get_assigned(var_1)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'H6tEN.go/=Y'
    var_0 = module_0.get_unknown_names_and_calls(str_0)
    function_def_0 = module_1.FunctionDef(*var_0)
    assert function_def_0.name == {'H6tEN', 'Y'}
    module_0.get_unknown_names_and_calls(function_def_0)