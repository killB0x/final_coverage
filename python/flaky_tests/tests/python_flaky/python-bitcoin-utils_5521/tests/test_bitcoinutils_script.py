# Automatically generated by Pynguin.
import bitcoinutils.script as module_0
import _hashlib as module_1

def test_case_0():
    bytes_0 = b'Dx\x99\xf7\xfa'
    script_0 = module_0.Script(bytes_0)
    assert module_0.OP_CODES == {'OP_0': b'\x00', 'OP_FALSE': b'\x00', 'OP_PUSHDATA1': b'L', 'OP_PUSHDATA2': b'M', 'OP_PUSHDATA4': b'N', 'OP_1NEGATE': b'O', 'OP_1': b'Q', 'OP_TRUE': b'Q', 'OP_2': b'R', 'OP_3': b'S', 'OP_4': b'T', 'OP_5': b'U', 'OP_6': b'V', 'OP_7': b'W', 'OP_8': b'X', 'OP_9': b'Y', 'OP_10': b'Z', 'OP_11': b'[', 'OP_12': b'\\', 'OP_13': b']', 'OP_14': b'^', 'OP_15': b'_', 'OP_16': b'`', 'OP_NOP': b'a', 'OP_IF': b'c', 'OP_NOTIF': b'd', 'OP_ELSE': b'g', 'OP_ENDIF': b'h', 'OP_VERIFY': b'i', 'OP_RETURN': b'j', 'OP_TOALTSTACK': b'k', 'OP_FROMALTSTACK': b'l', 'OP_IFDUP': b's', 'OP_DEPTH': b't', 'OP_DROP': b'u', 'OP_DUP': b'v', 'OP_NIP': b'w', 'OP_OVER': b'x', 'OP_PICK': b'y', 'OP_ROLL': b'z', 'OP_ROT': b'{', 'OP_SWAP': b'|', 'OP_TUCK': b'}', 'OP_2DROP': b'm', 'OP_2DUP': b'n', 'OP_3DUP': b'o', 'OP_2OVER': b'p', 'OP_2ROT': b'q', 'OP_2SWAP': b'r', 'OP_SIZE': b'\x82', 'OP_EQUAL': b'\x87', 'OP_EQUALVERIFY': b'\x88', 'OP_1ADD': b'\x8b', 'OP_1SUB': b'\x8c', 'OP_NEGATE': b'\x8f', 'OP_ABS': b'\x90', 'OP_NOT': b'\x91', 'OP_0NOTEQUAL': b'\x92', 'OP_ADD': b'\x93', 'OP_SUB': b'\x94', 'OP_BOOLAND': b'\x9a', 'OP_BOOLOR': b'\x9b', 'OP_NUMEQUAL': b'\x9c', 'OP_NUMEQUALVERIFY': b'\x9d', 'OP_NUMNOTEQUAL': b'\x9e', 'OP_LESSTHAN': b'\x9f', 'OP_GREATERTHAN': b'\xa0', 'OP_LESSTHANOREQUAL': b'\xa1', 'OP_GREATERTHANOREQUAL': b'\xa2', 'OP_MIN': b'\xa3', 'OP_MAX': b'\xa4', 'OP_WITHIN': b'\xa5', 'OP_RIPEMD160': b'\xa6', 'OP_SHA1': b'\xa7', 'OP_SHA256': b'\xa8', 'OP_HASH160': b'\xa9', 'OP_HASH256': b'\xaa', 'OP_CODESEPARATOR': b'\xab', 'OP_CHECKSIG': b'\xac', 'OP_CHECKSIGVERIFY': b'\xad', 'OP_CHECKMULTISIG': b'\xae', 'OP_CHECKMULTISIGVERIFY': b'\xaf', 'OP_NOP2': b'\xb1', 'OP_CHECKLOCKTIMEVERIFY': b'\xb1', 'OP_NOP3': b'\xb2', 'OP_CHECKSEQUENCEVERIFY': b'\xb2'}
    assert f'{type(module_0.Script.copy).__module__}.{type(module_0.Script.copy).__qualname__}' == 'builtins.method'
    var_0 = script_0.to_p2sh_script_pub_key()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bitcoinutils.script.Script'
    assert var_0.script == ['OP_HASH160', '9728067da073881ef0001fc70ab43d462e252cba', 'OP_EQUAL']

def test_case_1():
    none_type_0 = None
    script_0 = module_0.Script(none_type_0)
    assert module_0.OP_CODES == {'OP_0': b'\x00', 'OP_FALSE': b'\x00', 'OP_PUSHDATA1': b'L', 'OP_PUSHDATA2': b'M', 'OP_PUSHDATA4': b'N', 'OP_1NEGATE': b'O', 'OP_1': b'Q', 'OP_TRUE': b'Q', 'OP_2': b'R', 'OP_3': b'S', 'OP_4': b'T', 'OP_5': b'U', 'OP_6': b'V', 'OP_7': b'W', 'OP_8': b'X', 'OP_9': b'Y', 'OP_10': b'Z', 'OP_11': b'[', 'OP_12': b'\\', 'OP_13': b']', 'OP_14': b'^', 'OP_15': b'_', 'OP_16': b'`', 'OP_NOP': b'a', 'OP_IF': b'c', 'OP_NOTIF': b'd', 'OP_ELSE': b'g', 'OP_ENDIF': b'h', 'OP_VERIFY': b'i', 'OP_RETURN': b'j', 'OP_TOALTSTACK': b'k', 'OP_FROMALTSTACK': b'l', 'OP_IFDUP': b's', 'OP_DEPTH': b't', 'OP_DROP': b'u', 'OP_DUP': b'v', 'OP_NIP': b'w', 'OP_OVER': b'x', 'OP_PICK': b'y', 'OP_ROLL': b'z', 'OP_ROT': b'{', 'OP_SWAP': b'|', 'OP_TUCK': b'}', 'OP_2DROP': b'm', 'OP_2DUP': b'n', 'OP_3DUP': b'o', 'OP_2OVER': b'p', 'OP_2ROT': b'q', 'OP_2SWAP': b'r', 'OP_SIZE': b'\x82', 'OP_EQUAL': b'\x87', 'OP_EQUALVERIFY': b'\x88', 'OP_1ADD': b'\x8b', 'OP_1SUB': b'\x8c', 'OP_NEGATE': b'\x8f', 'OP_ABS': b'\x90', 'OP_NOT': b'\x91', 'OP_0NOTEQUAL': b'\x92', 'OP_ADD': b'\x93', 'OP_SUB': b'\x94', 'OP_BOOLAND': b'\x9a', 'OP_BOOLOR': b'\x9b', 'OP_NUMEQUAL': b'\x9c', 'OP_NUMEQUALVERIFY': b'\x9d', 'OP_NUMNOTEQUAL': b'\x9e', 'OP_LESSTHAN': b'\x9f', 'OP_GREATERTHAN': b'\xa0', 'OP_LESSTHANOREQUAL': b'\xa1', 'OP_GREATERTHANOREQUAL': b'\xa2', 'OP_MIN': b'\xa3', 'OP_MAX': b'\xa4', 'OP_WITHIN': b'\xa5', 'OP_RIPEMD160': b'\xa6', 'OP_SHA1': b'\xa7', 'OP_SHA256': b'\xa8', 'OP_HASH160': b'\xa9', 'OP_HASH256': b'\xaa', 'OP_CODESEPARATOR': b'\xab', 'OP_CHECKSIG': b'\xac', 'OP_CHECKSIGVERIFY': b'\xad', 'OP_CHECKMULTISIG': b'\xae', 'OP_CHECKMULTISIGVERIFY': b'\xaf', 'OP_NOP2': b'\xb1', 'OP_CHECKLOCKTIMEVERIFY': b'\xb1', 'OP_NOP3': b'\xb2', 'OP_CHECKSEQUENCEVERIFY': b'\xb2'}
    assert f'{type(module_0.Script.copy).__module__}.{type(module_0.Script.copy).__qualname__}' == 'builtins.method'

def test_case_2():
    bytes_0 = b'Dx\x99\xf7\xfa'
    script_0 = module_0.Script(bytes_0)
    assert module_0.OP_CODES == {'OP_0': b'\x00', 'OP_FALSE': b'\x00', 'OP_PUSHDATA1': b'L', 'OP_PUSHDATA2': b'M', 'OP_PUSHDATA4': b'N', 'OP_1NEGATE': b'O', 'OP_1': b'Q', 'OP_TRUE': b'Q', 'OP_2': b'R', 'OP_3': b'S', 'OP_4': b'T', 'OP_5': b'U', 'OP_6': b'V', 'OP_7': b'W', 'OP_8': b'X', 'OP_9': b'Y', 'OP_10': b'Z', 'OP_11': b'[', 'OP_12': b'\\', 'OP_13': b']', 'OP_14': b'^', 'OP_15': b'_', 'OP_16': b'`', 'OP_NOP': b'a', 'OP_IF': b'c', 'OP_NOTIF': b'd', 'OP_ELSE': b'g', 'OP_ENDIF': b'h', 'OP_VERIFY': b'i', 'OP_RETURN': b'j', 'OP_TOALTSTACK': b'k', 'OP_FROMALTSTACK': b'l', 'OP_IFDUP': b's', 'OP_DEPTH': b't', 'OP_DROP': b'u', 'OP_DUP': b'v', 'OP_NIP': b'w', 'OP_OVER': b'x', 'OP_PICK': b'y', 'OP_ROLL': b'z', 'OP_ROT': b'{', 'OP_SWAP': b'|', 'OP_TUCK': b'}', 'OP_2DROP': b'm', 'OP_2DUP': b'n', 'OP_3DUP': b'o', 'OP_2OVER': b'p', 'OP_2ROT': b'q', 'OP_2SWAP': b'r', 'OP_SIZE': b'\x82', 'OP_EQUAL': b'\x87', 'OP_EQUALVERIFY': b'\x88', 'OP_1ADD': b'\x8b', 'OP_1SUB': b'\x8c', 'OP_NEGATE': b'\x8f', 'OP_ABS': b'\x90', 'OP_NOT': b'\x91', 'OP_0NOTEQUAL': b'\x92', 'OP_ADD': b'\x93', 'OP_SUB': b'\x94', 'OP_BOOLAND': b'\x9a', 'OP_BOOLOR': b'\x9b', 'OP_NUMEQUAL': b'\x9c', 'OP_NUMEQUALVERIFY': b'\x9d', 'OP_NUMNOTEQUAL': b'\x9e', 'OP_LESSTHAN': b'\x9f', 'OP_GREATERTHAN': b'\xa0', 'OP_LESSTHANOREQUAL': b'\xa1', 'OP_GREATERTHANOREQUAL': b'\xa2', 'OP_MIN': b'\xa3', 'OP_MAX': b'\xa4', 'OP_WITHIN': b'\xa5', 'OP_RIPEMD160': b'\xa6', 'OP_SHA1': b'\xa7', 'OP_SHA256': b'\xa8', 'OP_HASH160': b'\xa9', 'OP_HASH256': b'\xaa', 'OP_CODESEPARATOR': b'\xab', 'OP_CHECKSIG': b'\xac', 'OP_CHECKSIGVERIFY': b'\xad', 'OP_CHECKMULTISIG': b'\xae', 'OP_CHECKMULTISIGVERIFY': b'\xaf', 'OP_NOP2': b'\xb1', 'OP_CHECKLOCKTIMEVERIFY': b'\xb1', 'OP_NOP3': b'\xb2', 'OP_CHECKSEQUENCEVERIFY': b'\xb2'}
    assert f'{type(module_0.Script.copy).__module__}.{type(module_0.Script.copy).__qualname__}' == 'builtins.method'
    var_0 = script_0.to_p2wsh_script_pub_key()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bitcoinutils.script.Script'
    assert var_0.script == ['OP_0', '37eb20aeeba9f86430ee8c89d7ffe90343567e92775f7eea890939c7af3a5042']
    var_1 = var_0.to_hex()
    assert var_1 == '002037eb20aeeba9f86430ee8c89d7ffe90343567e92775f7eea890939c7af3a5042'

def test_case_3():
    bytes_0 = b'g\x89\xd8\xb9\x12A{\x1a`\xad\xbc7\xbc'
    script_0 = module_0.Script(bytes_0)
    assert module_0.OP_CODES == {'OP_0': b'\x00', 'OP_FALSE': b'\x00', 'OP_PUSHDATA1': b'L', 'OP_PUSHDATA2': b'M', 'OP_PUSHDATA4': b'N', 'OP_1NEGATE': b'O', 'OP_1': b'Q', 'OP_TRUE': b'Q', 'OP_2': b'R', 'OP_3': b'S', 'OP_4': b'T', 'OP_5': b'U', 'OP_6': b'V', 'OP_7': b'W', 'OP_8': b'X', 'OP_9': b'Y', 'OP_10': b'Z', 'OP_11': b'[', 'OP_12': b'\\', 'OP_13': b']', 'OP_14': b'^', 'OP_15': b'_', 'OP_16': b'`', 'OP_NOP': b'a', 'OP_IF': b'c', 'OP_NOTIF': b'd', 'OP_ELSE': b'g', 'OP_ENDIF': b'h', 'OP_VERIFY': b'i', 'OP_RETURN': b'j', 'OP_TOALTSTACK': b'k', 'OP_FROMALTSTACK': b'l', 'OP_IFDUP': b's', 'OP_DEPTH': b't', 'OP_DROP': b'u', 'OP_DUP': b'v', 'OP_NIP': b'w', 'OP_OVER': b'x', 'OP_PICK': b'y', 'OP_ROLL': b'z', 'OP_ROT': b'{', 'OP_SWAP': b'|', 'OP_TUCK': b'}', 'OP_2DROP': b'm', 'OP_2DUP': b'n', 'OP_3DUP': b'o', 'OP_2OVER': b'p', 'OP_2ROT': b'q', 'OP_2SWAP': b'r', 'OP_SIZE': b'\x82', 'OP_EQUAL': b'\x87', 'OP_EQUALVERIFY': b'\x88', 'OP_1ADD': b'\x8b', 'OP_1SUB': b'\x8c', 'OP_NEGATE': b'\x8f', 'OP_ABS': b'\x90', 'OP_NOT': b'\x91', 'OP_0NOTEQUAL': b'\x92', 'OP_ADD': b'\x93', 'OP_SUB': b'\x94', 'OP_BOOLAND': b'\x9a', 'OP_BOOLOR': b'\x9b', 'OP_NUMEQUAL': b'\x9c', 'OP_NUMEQUALVERIFY': b'\x9d', 'OP_NUMNOTEQUAL': b'\x9e', 'OP_LESSTHAN': b'\x9f', 'OP_GREATERTHAN': b'\xa0', 'OP_LESSTHANOREQUAL': b'\xa1', 'OP_GREATERTHANOREQUAL': b'\xa2', 'OP_MIN': b'\xa3', 'OP_MAX': b'\xa4', 'OP_WITHIN': b'\xa5', 'OP_RIPEMD160': b'\xa6', 'OP_SHA1': b'\xa7', 'OP_SHA256': b'\xa8', 'OP_HASH160': b'\xa9', 'OP_HASH256': b'\xaa', 'OP_CODESEPARATOR': b'\xab', 'OP_CHECKSIG': b'\xac', 'OP_CHECKSIGVERIFY': b'\xad', 'OP_CHECKMULTISIG': b'\xae', 'OP_CHECKMULTISIGVERIFY': b'\xaf', 'OP_NOP2': b'\xb1', 'OP_CHECKLOCKTIMEVERIFY': b'\xb1', 'OP_NOP3': b'\xb2', 'OP_CHECKSEQUENCEVERIFY': b'\xb2'}
    assert f'{type(module_0.Script.copy).__module__}.{type(module_0.Script.copy).__qualname__}' == 'builtins.method'
    var_0 = script_0.get_script()
    var_1 = script_0.to_p2wsh_script_pub_key()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'bitcoinutils.script.Script'
    assert var_1.script == ['OP_0', 'c0b7b6b27f104760db2ccc10ebb8ca70f12478e351571095cde7e883b0d37ce6']
    script_1 = module_0.Script(script_0)
    var_2 = script_0.to_hex()
    assert var_2 == '016702890002d80002b90001120141017b011a016002ad0002bc00013702bc00'
    var_3 = var_1.to_p2sh_script_pub_key()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'bitcoinutils.script.Script'
    assert var_3.script == ['OP_HASH160', '5bf8301c1f387ef23b1ea460c4d1dad88d96045e', 'OP_EQUAL']
    var_2.to_hash160()

def test_case_4():
    bytes_0 = b'Dx\x99\xf7\xfa'
    script_0 = module_0.Script(bytes_0)
    assert module_0.OP_CODES == {'OP_0': b'\x00', 'OP_FALSE': b'\x00', 'OP_PUSHDATA1': b'L', 'OP_PUSHDATA2': b'M', 'OP_PUSHDATA4': b'N', 'OP_1NEGATE': b'O', 'OP_1': b'Q', 'OP_TRUE': b'Q', 'OP_2': b'R', 'OP_3': b'S', 'OP_4': b'T', 'OP_5': b'U', 'OP_6': b'V', 'OP_7': b'W', 'OP_8': b'X', 'OP_9': b'Y', 'OP_10': b'Z', 'OP_11': b'[', 'OP_12': b'\\', 'OP_13': b']', 'OP_14': b'^', 'OP_15': b'_', 'OP_16': b'`', 'OP_NOP': b'a', 'OP_IF': b'c', 'OP_NOTIF': b'd', 'OP_ELSE': b'g', 'OP_ENDIF': b'h', 'OP_VERIFY': b'i', 'OP_RETURN': b'j', 'OP_TOALTSTACK': b'k', 'OP_FROMALTSTACK': b'l', 'OP_IFDUP': b's', 'OP_DEPTH': b't', 'OP_DROP': b'u', 'OP_DUP': b'v', 'OP_NIP': b'w', 'OP_OVER': b'x', 'OP_PICK': b'y', 'OP_ROLL': b'z', 'OP_ROT': b'{', 'OP_SWAP': b'|', 'OP_TUCK': b'}', 'OP_2DROP': b'm', 'OP_2DUP': b'n', 'OP_3DUP': b'o', 'OP_2OVER': b'p', 'OP_2ROT': b'q', 'OP_2SWAP': b'r', 'OP_SIZE': b'\x82', 'OP_EQUAL': b'\x87', 'OP_EQUALVERIFY': b'\x88', 'OP_1ADD': b'\x8b', 'OP_1SUB': b'\x8c', 'OP_NEGATE': b'\x8f', 'OP_ABS': b'\x90', 'OP_NOT': b'\x91', 'OP_0NOTEQUAL': b'\x92', 'OP_ADD': b'\x93', 'OP_SUB': b'\x94', 'OP_BOOLAND': b'\x9a', 'OP_BOOLOR': b'\x9b', 'OP_NUMEQUAL': b'\x9c', 'OP_NUMEQUALVERIFY': b'\x9d', 'OP_NUMNOTEQUAL': b'\x9e', 'OP_LESSTHAN': b'\x9f', 'OP_GREATERTHAN': b'\xa0', 'OP_LESSTHANOREQUAL': b'\xa1', 'OP_GREATERTHANOREQUAL': b'\xa2', 'OP_MIN': b'\xa3', 'OP_MAX': b'\xa4', 'OP_WITHIN': b'\xa5', 'OP_RIPEMD160': b'\xa6', 'OP_SHA1': b'\xa7', 'OP_SHA256': b'\xa8', 'OP_HASH160': b'\xa9', 'OP_HASH256': b'\xaa', 'OP_CODESEPARATOR': b'\xab', 'OP_CHECKSIG': b'\xac', 'OP_CHECKSIGVERIFY': b'\xad', 'OP_CHECKMULTISIG': b'\xae', 'OP_CHECKMULTISIGVERIFY': b'\xaf', 'OP_NOP2': b'\xb1', 'OP_CHECKLOCKTIMEVERIFY': b'\xb1', 'OP_NOP3': b'\xb2', 'OP_CHECKSEQUENCEVERIFY': b'\xb2'}
    assert f'{type(module_0.Script.copy).__module__}.{type(module_0.Script.copy).__qualname__}' == 'builtins.method'
    var_0 = script_0.to_p2wsh_script_pub_key()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bitcoinutils.script.Script'
    assert var_0.script == ['OP_0', '37eb20aeeba9f86430ee8c89d7ffe90343567e92775f7eea890939c7af3a5042']
    script_1 = module_0.Script(script_0)
    var_1 = script_0.to_hex()
    assert var_1 == '0144017802990002f70002fa00'
    var_2 = var_0.to_p2sh_script_pub_key()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'bitcoinutils.script.Script'
    assert var_2.script == ['OP_HASH160', '5dd81e712d11691becdfef406196e08a762f9a66', 'OP_EQUAL']
    var_3 = var_0.to_bytes(script_0)
    unsupported_digestmod_error_0 = module_1.UnsupportedDigestmodError()
    var_4 = var_2.to_p2wsh_script_pub_key()
    script_2 = module_0.Script(var_2)
    script_2.to_hex()

def test_case_5():
    bytes_0 = b'o\xe7\xf8\t~1\x93\xe8\xb6K0\x00\xb1\xdb\xbcM'
    script_0 = module_0.Script(bytes_0)
    assert module_0.OP_CODES == {'OP_0': b'\x00', 'OP_FALSE': b'\x00', 'OP_PUSHDATA1': b'L', 'OP_PUSHDATA2': b'M', 'OP_PUSHDATA4': b'N', 'OP_1NEGATE': b'O', 'OP_1': b'Q', 'OP_TRUE': b'Q', 'OP_2': b'R', 'OP_3': b'S', 'OP_4': b'T', 'OP_5': b'U', 'OP_6': b'V', 'OP_7': b'W', 'OP_8': b'X', 'OP_9': b'Y', 'OP_10': b'Z', 'OP_11': b'[', 'OP_12': b'\\', 'OP_13': b']', 'OP_14': b'^', 'OP_15': b'_', 'OP_16': b'`', 'OP_NOP': b'a', 'OP_IF': b'c', 'OP_NOTIF': b'd', 'OP_ELSE': b'g', 'OP_ENDIF': b'h', 'OP_VERIFY': b'i', 'OP_RETURN': b'j', 'OP_TOALTSTACK': b'k', 'OP_FROMALTSTACK': b'l', 'OP_IFDUP': b's', 'OP_DEPTH': b't', 'OP_DROP': b'u', 'OP_DUP': b'v', 'OP_NIP': b'w', 'OP_OVER': b'x', 'OP_PICK': b'y', 'OP_ROLL': b'z', 'OP_ROT': b'{', 'OP_SWAP': b'|', 'OP_TUCK': b'}', 'OP_2DROP': b'm', 'OP_2DUP': b'n', 'OP_3DUP': b'o', 'OP_2OVER': b'p', 'OP_2ROT': b'q', 'OP_2SWAP': b'r', 'OP_SIZE': b'\x82', 'OP_EQUAL': b'\x87', 'OP_EQUALVERIFY': b'\x88', 'OP_1ADD': b'\x8b', 'OP_1SUB': b'\x8c', 'OP_NEGATE': b'\x8f', 'OP_ABS': b'\x90', 'OP_NOT': b'\x91', 'OP_0NOTEQUAL': b'\x92', 'OP_ADD': b'\x93', 'OP_SUB': b'\x94', 'OP_BOOLAND': b'\x9a', 'OP_BOOLOR': b'\x9b', 'OP_NUMEQUAL': b'\x9c', 'OP_NUMEQUALVERIFY': b'\x9d', 'OP_NUMNOTEQUAL': b'\x9e', 'OP_LESSTHAN': b'\x9f', 'OP_GREATERTHAN': b'\xa0', 'OP_LESSTHANOREQUAL': b'\xa1', 'OP_GREATERTHANOREQUAL': b'\xa2', 'OP_MIN': b'\xa3', 'OP_MAX': b'\xa4', 'OP_WITHIN': b'\xa5', 'OP_RIPEMD160': b'\xa6', 'OP_SHA1': b'\xa7', 'OP_SHA256': b'\xa8', 'OP_HASH160': b'\xa9', 'OP_HASH256': b'\xaa', 'OP_CODESEPARATOR': b'\xab', 'OP_CHECKSIG': b'\xac', 'OP_CHECKSIGVERIFY': b'\xad', 'OP_CHECKMULTISIG': b'\xae', 'OP_CHECKMULTISIGVERIFY': b'\xaf', 'OP_NOP2': b'\xb1', 'OP_CHECKLOCKTIMEVERIFY': b'\xb1', 'OP_NOP3': b'\xb2', 'OP_CHECKSEQUENCEVERIFY': b'\xb2'}
    assert f'{type(module_0.Script.copy).__module__}.{type(module_0.Script.copy).__qualname__}' == 'builtins.method'
    var_0 = script_0.to_p2sh_script_pub_key()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bitcoinutils.script.Script'
    assert var_0.script == ['OP_HASH160', '5e671beab434bafa41bf98be91fa12c8e7f2e0f1', 'OP_EQUAL']