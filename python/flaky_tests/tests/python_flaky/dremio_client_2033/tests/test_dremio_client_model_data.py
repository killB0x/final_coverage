# Automatically generated by Pynguin.
import pytest
import dremio_client.model.data as module_0
import platform as module_1
import uuid as module_2
import attr._make as module_3
import dremio_client.model.endpoints as module_4
import attr._funcs as module_5

def test_case_0():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0

def test_case_1():
    folder_0 = module_0.Folder()
    assert f'{type(folder_0).__module__}.{type(folder_0).__qualname__}' == 'dremio_client.model.data.Folder'
    assert len(folder_0) == 0

def test_case_2():
    wiki_data_0 = module_0.WikiData()

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    tags_data_0 = module_0.TagsData(version=none_type_0)
    var_0 = tags_data_0.to_json()
    var_1 = module_1.mac_ver(versioninfo=none_type_0)
    var_2 = var_1.__ge__(none_type_0)
    var_3 = module_2.uuid1()
    var_3.__len__()

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    dataset_meta_data_0 = module_0.DatasetMetaData(sql=none_type_0, sqlContext=none_type_0, format=none_type_0)
    var_0 = dataset_meta_data_0.to_json()
    var_0.index(dataset_meta_data_0, end=none_type_0)

def test_case_5():
    catalog_0 = module_0.Catalog()
    assert len(catalog_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_6():
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'dremio_client.model.data.File'
    assert len(file_0) == 0
    file_0.wiki()

@pytest.mark.xfail(strict=True)
def test_case_7():
    wiki_data_0 = module_0.WikiData()
    file_0 = module_0.File(wiki_data_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'dremio_client.model.data.File'
    assert len(file_0) == 0
    file_0.remove()

def test_case_8():
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'dremio_client.model.data.File'
    assert len(file_0) == 0

def test_case_9():
    physical_dataset_0 = module_0.PhysicalDataset()
    assert f'{type(physical_dataset_0).__module__}.{type(physical_dataset_0).__qualname__}' == 'dremio_client.model.data.PhysicalDataset'
    assert len(physical_dataset_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 937
    dataset_0 = module_0.Dataset(base_url=int_0, dirty=int_0)
    assert f'{type(dataset_0).__module__}.{type(dataset_0).__qualname__}' == 'dremio_client.model.data.Dataset'
    assert len(dataset_0) == 0
    virtual_dataset_0 = module_0.VirtualDataset()
    assert len(virtual_dataset_0) == 0
    dataset_0.commit()

@pytest.mark.xfail(strict=True)
def test_case_11():
    folder_0 = module_0.Folder()
    assert f'{type(folder_0).__module__}.{type(folder_0).__qualname__}' == 'dremio_client.model.data.Folder'
    assert len(folder_0) == 0
    access_control_0 = module_0.AccessControl(permissions=folder_0)
    assert len(access_control_0.permissions) == 0
    module_0.make_tags(access_control_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    module_0.make_wiki(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_1.system()
    module_0.make_wlm_rule(var_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b''
    module_0.make_wlm_queue(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    none_type_0 = None
    var_0 = module_0.create_vds(space_0, space_0, none_type_0, space_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'dremio_client.model.data.VirtualDataset'
    assert len(var_0) == 0
    module_3.attrs(space_0, repr_ns=space_0, frozen=space_0, auto_exc=space_0)

def test_case_16():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    var_0 = module_0.create_folder(space_0, space_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'dremio_client.model.data.Folder'
    assert len(var_0) == 0
    with pytest.raises(NotImplementedError):
        var_0.insert(space_0, space_0, var_0)

def test_case_17():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    var_0 = space_0.refresh()

@pytest.mark.xfail(strict=True)
def test_case_18():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    var_0 = space_0.commit()
    module_3.attrs(space_0, cmp=var_0, kw_only=space_0, auto_exc=var_0, eq=space_0, order=space_0)

def test_case_19():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    var_0 = space_0.__repr__()
    assert var_0 == '{"entityType": "space", "id": null, "name": null, "tag": null, "path": null, "accessControlList": null}'

@pytest.mark.xfail(strict=True)
def test_case_20():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    module_2.uuid3(space_0, space_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    space_0.delete()

@pytest.mark.xfail(strict=True)
def test_case_22():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    module_0.make_vote(space_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    space_0.__getattr__(space_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    access_control_0 = module_0.AccessControl()
    var_0 = access_control_0.__eq__(access_control_0)
    source_state_0 = module_0.SourceState()
    var_1 = source_state_0.to_json()
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'dremio_client.model.data.File'
    assert len(file_0) == 0
    var_2 = var_1.__eq__(var_0)
    var_3 = var_1.__eq__(access_control_0)
    module_0.create_space(source_state_0, access_control_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    space_0.get()

@pytest.mark.xfail(strict=True)
def test_case_26():
    var_0 = module_1.python_version()
    module_0.create_space(var_0, var_0)

def test_case_27():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    with pytest.raises(NotImplementedError):
        space_0.insert(space_0, space_0, space_0)

def test_case_28():
    folder_0 = module_0.Folder()
    assert f'{type(folder_0).__module__}.{type(folder_0).__qualname__}' == 'dremio_client.model.data.Folder'
    assert len(folder_0) == 0
    with pytest.raises(NotImplementedError):
        folder_0.promote(folder_0)

def test_case_29():
    home_0 = module_0.Home()
    assert f'{type(home_0).__module__}.{type(home_0).__qualname__}' == 'dremio_client.model.data.Home'
    assert len(home_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_30():
    root_meta_data_0 = module_0.RootMetaData()
    none_type_0 = None
    var_0 = root_meta_data_0.__lt__(none_type_0)
    var_1 = root_meta_data_0.to_json()
    var_2 = root_meta_data_0.__repr__()
    var_3 = root_meta_data_0.__eq__(root_meta_data_0)
    var_2.__repr__(var_2)

def test_case_31():
    root_0 = module_0.Root()
    assert f'{type(root_0).__module__}.{type(root_0).__qualname__}' == 'dremio_client.model.data.Root'
    assert len(root_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_32():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    space_0.promote(**space_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    space_0 = module_1.version()
    module_0.make_reflection(space_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    space_0.tags()

@pytest.mark.xfail(strict=True)
def test_case_35():
    folder_0 = module_0.Folder()
    assert f'{type(folder_0).__module__}.{type(folder_0).__qualname__}' == 'dremio_client.model.data.Folder'
    assert len(folder_0) == 0
    physical_dataset_0 = module_0.PhysicalDataset(**folder_0)
    assert len(physical_dataset_0) == 0
    physical_dataset_0.refresh()

@pytest.mark.xfail(strict=True)
def test_case_36():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    space_0.__delitem__(space_0)

@pytest.mark.xfail(strict=True)
def test_case_37():
    wiki_data_0 = module_0.WikiData()
    file_0 = module_0.File(wiki_data_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'dremio_client.model.data.File'
    assert len(file_0) == 0
    var_0 = wiki_data_0.__ge__(file_0)
    var_1 = wiki_data_0.to_json()
    var_2 = var_1.__le__(wiki_data_0)
    var_3 = var_1.__le__(var_1)
    var_4 = var_1.__ge__(file_0)
    var_5 = wiki_data_0.__le__(wiki_data_0)
    var_4.decode(var_2, _PY3=file_0)

def test_case_38():
    source_0 = module_0.Source()
    assert f'{type(source_0).__module__}.{type(source_0).__qualname__}' == 'dremio_client.model.data.Source'
    assert len(source_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_39():
    var_0 = module_2.uuid4()
    reflection_summary_metadata_0 = module_0.ReflectionSummaryMetadata(id=var_0)
    reflection_summary_metadata_0.to_json()

def test_case_40():
    vote_metadata_0 = module_0.VoteMetadata()
    var_0 = vote_metadata_0.__eq__(vote_metadata_0)
    var_1 = vote_metadata_0.__repr__()
    var_2 = vote_metadata_0.to_json()
    var_3 = var_1.__le__(var_0)
    var_4 = var_0.__le__(var_1)
    with pytest.raises(TypeError):
        var_4.__setattr__(var_0, vote_metadata_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    access_control_list_0 = module_0.AccessControlList()
    physical_dataset_0 = module_0.PhysicalDataset(flight_endpoint=access_control_list_0)
    assert f'{type(physical_dataset_0).__module__}.{type(physical_dataset_0).__qualname__}' == 'dremio_client.model.data.PhysicalDataset'
    assert len(physical_dataset_0) == 0
    var_0 = access_control_list_0.to_json()
    var_1 = var_0.isnumeric()
    physical_dataset_0.get()

@pytest.mark.xfail(strict=True)
def test_case_42():
    int_0 = 937
    dataset_0 = module_0.Dataset(base_url=int_0, dirty=int_0)
    assert f'{type(dataset_0).__module__}.{type(dataset_0).__qualname__}' == 'dremio_client.model.data.Dataset'
    assert len(dataset_0) == 0
    dataset_0.commit()

def test_case_43():
    file_meta_data_0 = module_0.FileMetaData()
    vote_metadata_0 = module_0.VoteMetadata(datasetPath=file_meta_data_0, datasetReflectionCount=file_meta_data_0, entityType=file_meta_data_0)
    file_0 = module_0.File(flight_endpoint=vote_metadata_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'dremio_client.model.data.File'
    assert len(file_0) == 0
    tags_data_0 = module_0.TagsData(version=file_meta_data_0)
    var_0 = file_meta_data_0.to_json()

@pytest.mark.xfail(strict=True)
def test_case_44():
    space_0 = module_1.node()
    module_0.make_reflection(space_0, space_0)

def test_case_45():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    folder_0 = module_0.Folder(base_url=space_0, dirty=space_0)
    assert len(folder_0) == 0
    queue_metadata_0 = module_0.QueueMetadata(space_0, space_0, folder_0, maxAllowedRunningJobs=folder_0)
    assert len(queue_metadata_0.id) == 0
    assert len(queue_metadata_0.tag) == 0
    assert len(queue_metadata_0.name) == 0
    assert len(queue_metadata_0.maxAllowedRunningJobs) == 0
    var_0 = module_1.python_revision()
    var_1 = queue_metadata_0.to_json()
    assert var_1 == '{"id": {}, "tag": {}, "name": {}, "cpuTier": null, "maxAllowedRunningJobs": {}, "maxStartTimeoutMs": null}'
    with pytest.raises(NotImplementedError):
        space_0.insert(var_0, folder_0)

@pytest.mark.xfail(strict=True)
def test_case_46():
    rule_metadata_0 = module_0.RuleMetadata()
    var_0 = rule_metadata_0.to_json()
    var_1 = module_1.version()
    var_1.__int__()

@pytest.mark.xfail(strict=True)
def test_case_47():
    str_0 = ''
    dataset_0 = module_0.Dataset(flight_endpoint=str_0, ssl_verify=str_0)
    assert f'{type(dataset_0).__module__}.{type(dataset_0).__qualname__}' == 'dremio_client.model.data.Dataset'
    assert len(dataset_0) == 0
    source_0 = module_0.Source(flight_endpoint=str_0, ssl_verify=str_0)
    assert f'{type(source_0).__module__}.{type(source_0).__qualname__}' == 'dremio_client.model.data.Source'
    assert len(source_0) == 0
    none_type_0 = None
    var_0 = module_0.create_space(dataset_0, none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(var_0) == 0
    dataset_0.query()

@pytest.mark.xfail(strict=True)
def test_case_48():
    none_type_0 = None
    physical_dataset_0 = module_0.PhysicalDataset()
    assert f'{type(physical_dataset_0).__module__}.{type(physical_dataset_0).__qualname__}' == 'dremio_client.model.data.PhysicalDataset'
    assert len(physical_dataset_0) == 0
    queue_metadata_0 = module_0.QueueMetadata(tag=none_type_0)
    physical_dataset_0.metadata_refresh()

def test_case_49():
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'dremio_client.model.data.File'
    assert len(file_0) == 0
    var_0 = file_0.__dir__()

@pytest.mark.xfail(strict=True)
def test_case_50():
    space_0 = module_1.processor()
    var_0 = module_0.FolderMetaData(path=space_0)
    var_1 = var_0.to_json()
    var_2 = var_0.__eq__(var_0)
    var_1.__and__(var_1)

@pytest.mark.xfail(strict=True)
def test_case_51():
    virtual_dataset_0 = module_0.VirtualDataset()
    assert f'{type(virtual_dataset_0).__module__}.{type(virtual_dataset_0).__qualname__}' == 'dremio_client.model.data.VirtualDataset'
    assert len(virtual_dataset_0) == 0
    none_type_0 = None
    virtual_dataset_0.sql(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_52():
    metadata_policy_0 = module_0.MetadataPolicy()
    list_0 = [metadata_policy_0, metadata_policy_0, metadata_policy_0]
    reflection_metadata_0 = module_0.ReflectionMetadata(metadata_policy_0, updatedAt=metadata_policy_0, type=list_0, currentSizeBytes=list_0, measureFields=metadata_policy_0, sortFields=list_0, partitionDistributionStrategy=list_0)
    var_0 = reflection_metadata_0.to_json()
    var_1 = metadata_policy_0.to_json()
    module_4.set_catalog(metadata_policy_0, metadata_policy_0, metadata_policy_0)

@pytest.mark.xfail(strict=True)
def test_case_53():
    access_control_0 = module_0.AccessControl()
    var_0 = access_control_0.__repr__()
    var_1 = access_control_0.to_json()
    var_2 = access_control_0.to_json()
    var_3 = var_0.__ge__(var_1)
    var_4 = access_control_0.__gt__(access_control_0)
    var_4.__call__(var_0, access_control_0, var_4)

def test_case_54():
    root_0 = module_0.Root()
    assert f'{type(root_0).__module__}.{type(root_0).__qualname__}' == 'dremio_client.model.data.Root'
    assert len(root_0) == 0
    with pytest.raises(KeyError):
        root_0.add_by_path(root_0)

@pytest.mark.xfail(strict=True)
def test_case_55():
    bool_0 = False
    source_metadata_0 = module_0.SourceMetadata(bool_0, name=bool_0, description=bool_0, createdAt=bool_0, metadataPolicy=bool_0)
    var_0 = source_metadata_0.__lt__(source_metadata_0)
    var_1 = source_metadata_0.to_json()
    var_2 = source_metadata_0.__ge__(bool_0)
    none_type_0 = None
    var_3 = var_0.__ge__(none_type_0)
    module_0.create(source_metadata_0, bool_0, bool_0, source_metadata_0)

@pytest.mark.xfail(strict=True)
def test_case_56():
    dataset_0 = module_0.Dataset()
    assert f'{type(dataset_0).__module__}.{type(dataset_0).__qualname__}' == 'dremio_client.model.data.Dataset'
    assert len(dataset_0) == 0
    physical_dataset_0 = module_0.PhysicalDataset(dataset_0, **dataset_0)
    assert f'{type(physical_dataset_0).__module__}.{type(physical_dataset_0).__qualname__}' == 'dremio_client.model.data.PhysicalDataset'
    assert len(physical_dataset_0) == 0
    physical_dataset_0.get_graph()

def test_case_57():
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'dremio_client.model.data.File'
    assert len(file_0) == 0
    var_0 = file_0.refresh()

@pytest.mark.xfail(strict=True)
def test_case_58():
    space_meta_data_0 = module_0.SpaceMetaData()
    var_0 = space_meta_data_0.__gt__(space_meta_data_0)
    var_1 = space_meta_data_0.to_json()
    var_2 = var_0.__le__(var_0)
    var_3 = var_0.__gt__(space_meta_data_0)
    reflection_metadata_0 = module_0.ReflectionMetadata(id=var_0, tag=var_0, name=var_0, currentSizeBytes=space_meta_data_0, dimensionFields=space_meta_data_0, measureFields=space_meta_data_0, distributionFields=var_0)
    var_4 = var_0.__ge__(var_0)
    var_5 = var_0.__ge__(var_3)
    var_0.index(var_0, *space_meta_data_0)

@pytest.mark.xfail(strict=True)
def test_case_59():
    space_0 = module_1.freedesktop_os_release()
    module_0.create(space_0, space_0, space_0, space_0)

@pytest.mark.xfail(strict=True)
def test_case_60():
    root_0 = module_0.Root()
    assert f'{type(root_0).__module__}.{type(root_0).__qualname__}' == 'dremio_client.model.data.Root'
    assert len(root_0) == 0
    var_0 = root_0.refresh()
    root_0.add(root_0)

@pytest.mark.xfail(strict=True)
def test_case_61():
    space_0 = module_0.Space()
    assert f'{type(space_0).__module__}.{type(space_0).__qualname__}' == 'dremio_client.model.data.Space'
    assert len(space_0) == 0
    none_type_0 = None
    root_0 = module_0.Root(ssl_verify=none_type_0, dirty=none_type_0)
    assert len(root_0) == 0
    module_5.assoc(root_0)