# Automatically generated by Pynguin.
import pytest
import mcpartools.mcengine.mcengine as module_0

def test_case_0():
    str_0 = 'kEf@&:UHSk;w(^\rzf\x0cgK'
    engine_0 = module_0.Engine(str_0, str_0, str_0, str_0)
    assert f'{type(engine_0).__module__}.{type(engine_0).__qualname__}' == 'mcpartools.mcengine.mcengine.Engine'
    assert engine_0.input_path == 'kEf@&:UHSk;w(^\rzf\x0cgK'
    assert engine_0.run_script_path == 'kEf@&:UHSk;w(^\rzf\x0cgK'
    assert engine_0.collect_method == 'kEf@&:UHSk;w(^\rzf\x0cgK'
    assert engine_0.engine_options == 'Ef@&:UHSk;w(^\rzf\x0cg'
    assert module_0.Engine.collect_script == 'data/collect.sh'
    assert f'{type(module_0.Engine.output_wildcard).__module__}.{type(module_0.Engine.output_wildcard).__qualname__}' == 'builtins.property'

def test_case_1():
    list_0 = []
    engine_0 = module_0.Engine(list_0, list_0, list_0, list_0)
    assert f'{type(engine_0).__module__}.{type(engine_0).__qualname__}' == 'mcpartools.mcengine.mcengine.Engine'
    assert engine_0.input_path == []
    assert engine_0.run_script_path == []
    assert engine_0.collect_method == []
    assert engine_0.engine_options == ''
    assert module_0.Engine.collect_script == 'data/collect.sh'
    assert f'{type(module_0.Engine.output_wildcard).__module__}.{type(module_0.Engine.output_wildcard).__qualname__}' == 'builtins.property'

def test_case_2():
    str_0 = 'kEf@&:UHSk;w(^\rzf\x0cgK'
    engine_0 = module_0.Engine(str_0, str_0, str_0, str_0)
    assert f'{type(engine_0).__module__}.{type(engine_0).__qualname__}' == 'mcpartools.mcengine.mcengine.Engine'
    assert engine_0.input_path == 'kEf@&:UHSk;w(^\rzf\x0cgK'
    assert engine_0.run_script_path == 'kEf@&:UHSk;w(^\rzf\x0cgK'
    assert engine_0.collect_method == 'kEf@&:UHSk;w(^\rzf\x0cgK'
    assert engine_0.engine_options == 'Ef@&:UHSk;w(^\rzf\x0cg'
    assert module_0.Engine.collect_script == 'data/collect.sh'
    assert f'{type(module_0.Engine.output_wildcard).__module__}.{type(module_0.Engine.output_wildcard).__qualname__}' == 'builtins.property'
    with pytest.raises(NotImplementedError):
        engine_0.find_external_files(engine_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    engine_0 = module_0.Engine(list_0, list_0, list_0, list_0)
    assert f'{type(engine_0).__module__}.{type(engine_0).__qualname__}' == 'mcpartools.mcengine.mcengine.Engine'
    assert engine_0.input_path == []
    assert engine_0.run_script_path == []
    assert engine_0.collect_method == []
    assert engine_0.engine_options == ''
    assert module_0.Engine.collect_script == 'data/collect.sh'
    assert f'{type(module_0.Engine.output_wildcard).__module__}.{type(module_0.Engine.output_wildcard).__qualname__}' == 'builtins.property'
    bool_0 = True
    set_0 = {bool_0}
    module_0.Engine(bool_0, set_0, set_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'kEf@&:UHSk;w(^\rzf\x0cgK'
    engine_0 = module_0.Engine(str_0, str_0, str_0, str_0)
    assert f'{type(engine_0).__module__}.{type(engine_0).__qualname__}' == 'mcpartools.mcengine.mcengine.Engine'
    assert engine_0.input_path == 'kEf@&:UHSk;w(^\rzf\x0cgK'
    assert engine_0.run_script_path == 'kEf@&:UHSk;w(^\rzf\x0cgK'
    assert engine_0.collect_method == 'kEf@&:UHSk;w(^\rzf\x0cgK'
    assert engine_0.engine_options == 'Ef@&:UHSk;w(^\rzf\x0cg'
    assert module_0.Engine.collect_script == 'data/collect.sh'
    assert f'{type(module_0.Engine.output_wildcard).__module__}.{type(module_0.Engine.output_wildcard).__qualname__}' == 'builtins.property'
    engine_0.write_collect_script(str_0)

def test_case_5():
    str_0 = 'custom'
    var_0 = module_0.Engine(str_0, str_0, str_0, str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'mcpartools.mcengine.mcengine.Engine'
    assert var_0.input_path == 'custom'
    assert var_0.run_script_path == 'custom'
    assert var_0.collect_method == 'custom'
    assert var_0.engine_options == 'usto'
    assert module_0.Engine.collect_script == 'data/collect.sh'
    assert f'{type(module_0.Engine.output_wildcard).__module__}.{type(module_0.Engine.output_wildcard).__qualname__}' == 'builtins.property'
    var_1 = var_0.write_collect_script(str_0)