# Automatically generated by Pynguin.
import pytest
import mcpartools.mcengine.shieldhit as module_0

def test_case_0():
    none_type_0 = None
    shield_hit_0 = module_0.ShieldHit(none_type_0, none_type_0, none_type_0, none_type_0)
    assert f'{type(shield_hit_0).__module__}.{type(shield_hit_0).__qualname__}' == 'mcpartools.mcengine.shieldhit.ShieldHit'
    assert shield_hit_0.input_path is None
    assert shield_hit_0.run_script_path is None
    assert shield_hit_0.collect_method is None
    assert shield_hit_0.engine_options == ''
    assert shield_hit_0.run_script_content == '#!/usr/bin/env bash\n\n# Exit immediately if a simple command exits with a non-zero status.\nset -e\n\n# location of SHIELD-HIT12A binary file\nSHIELDHIT_BIN={shieldhit_bin:s}\n\n# working directory, output files will be saved here\nWORK_DIR={working_directory:s}\n\n# number of particles per job\nPARTICLE_NO={particle_no:d}\n\n# seed of RNG\nRNG_SEED={rnd_seed:d}\n\n# main SHIELD-HIT12A input files\nBEAM_FILE={beam_file:s}\nGEO_FILE={geo_file:s}\nMAT_FILE={mat_file:s}\nDETECT_FILE={detect_file:s}\n\n# go to working directory\ncd {working_directory:s}\n\n# execute simulation\n$SHIELDHIT_BIN --beamfile=$BEAM_FILE --geofile=$GEO_FILE --matfile=$MAT_FILE --detectfile=$DETECT_FILE -n $PARTICLE_NO -N $RNG_SEED {engine_options:s} $WORK_DIR\n\n'
    assert shield_hit_0.collect_script_content == '#!/usr/bin/env bash\n\n# Exit immediately if a simple command exits with a non-zero status.\nset -e\n\nINPUT_WILDCARD={output_dir:s}/workspace/job_*/{wildcard:s}\nOUTPUT_DIRECTORY={output_dir:s}/output\n\n# change working directory\ncd {output_dir:s}\n\n# make output folder\nmkdir -p $OUTPUT_DIRECTORY\n\n{collect_action:s}'
    assert shield_hit_0.particle_no == 1
    assert shield_hit_0.rng_seed == 1
    assert module_0.ShieldHit.default_run_script_path == 'data/run_shieldhit.sh'
    assert module_0.ShieldHit.output_wildcard == '*.bdo'
    assert f'{type(module_0.ShieldHit.input_files).__module__}.{type(module_0.ShieldHit.input_files).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '\x0bR^rtB\t:cb?N'
    module_0.ShieldHit(str_0, str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'K=Cjp{ZIc\nD*'
    none_type_0 = None
    shield_hit_0 = module_0.ShieldHit(str_0, none_type_0, str_0, none_type_0)
    assert f'{type(shield_hit_0).__module__}.{type(shield_hit_0).__qualname__}' == 'mcpartools.mcengine.shieldhit.ShieldHit'
    assert shield_hit_0.input_path == 'K=Cjp{ZIc\nD*'
    assert shield_hit_0.run_script_path is None
    assert shield_hit_0.collect_method == 'K=Cjp{ZIc\nD*'
    assert shield_hit_0.engine_options == ''
    assert shield_hit_0.run_script_content == '#!/usr/bin/env bash\n\n# Exit immediately if a simple command exits with a non-zero status.\nset -e\n\n# location of SHIELD-HIT12A binary file\nSHIELDHIT_BIN={shieldhit_bin:s}\n\n# working directory, output files will be saved here\nWORK_DIR={working_directory:s}\n\n# number of particles per job\nPARTICLE_NO={particle_no:d}\n\n# seed of RNG\nRNG_SEED={rnd_seed:d}\n\n# main SHIELD-HIT12A input files\nBEAM_FILE={beam_file:s}\nGEO_FILE={geo_file:s}\nMAT_FILE={mat_file:s}\nDETECT_FILE={detect_file:s}\n\n# go to working directory\ncd {working_directory:s}\n\n# execute simulation\n$SHIELDHIT_BIN --beamfile=$BEAM_FILE --geofile=$GEO_FILE --matfile=$MAT_FILE --detectfile=$DETECT_FILE -n $PARTICLE_NO -N $RNG_SEED {engine_options:s} $WORK_DIR\n\n'
    assert shield_hit_0.collect_script_content == '#!/usr/bin/env bash\n\n# Exit immediately if a simple command exits with a non-zero status.\nset -e\n\nINPUT_WILDCARD={output_dir:s}/workspace/job_*/{wildcard:s}\nOUTPUT_DIRECTORY={output_dir:s}/output\n\n# change working directory\ncd {output_dir:s}\n\n# make output folder\nmkdir -p $OUTPUT_DIRECTORY\n\n{collect_action:s}'
    assert shield_hit_0.particle_no == 1
    assert shield_hit_0.rng_seed == 1
    assert module_0.ShieldHit.default_run_script_path == 'data/run_shieldhit.sh'
    assert module_0.ShieldHit.output_wildcard == '*.bdo'
    assert f'{type(module_0.ShieldHit.input_files).__module__}.{type(module_0.ShieldHit.input_files).__qualname__}' == 'builtins.property'
    shield_hit_0.find_external_files(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    set_0 = set()
    none_type_1 = None
    shield_hit_0 = module_0.ShieldHit(none_type_1, none_type_1, none_type_1, none_type_1)
    assert f'{type(shield_hit_0).__module__}.{type(shield_hit_0).__qualname__}' == 'mcpartools.mcengine.shieldhit.ShieldHit'
    assert shield_hit_0.input_path is None
    assert shield_hit_0.run_script_path is None
    assert shield_hit_0.collect_method is None
    assert shield_hit_0.engine_options == ''
    assert shield_hit_0.run_script_content == '#!/usr/bin/env bash\n\n# Exit immediately if a simple command exits with a non-zero status.\nset -e\n\n# location of SHIELD-HIT12A binary file\nSHIELDHIT_BIN={shieldhit_bin:s}\n\n# working directory, output files will be saved here\nWORK_DIR={working_directory:s}\n\n# number of particles per job\nPARTICLE_NO={particle_no:d}\n\n# seed of RNG\nRNG_SEED={rnd_seed:d}\n\n# main SHIELD-HIT12A input files\nBEAM_FILE={beam_file:s}\nGEO_FILE={geo_file:s}\nMAT_FILE={mat_file:s}\nDETECT_FILE={detect_file:s}\n\n# go to working directory\ncd {working_directory:s}\n\n# execute simulation\n$SHIELDHIT_BIN --beamfile=$BEAM_FILE --geofile=$GEO_FILE --matfile=$MAT_FILE --detectfile=$DETECT_FILE -n $PARTICLE_NO -N $RNG_SEED {engine_options:s} $WORK_DIR\n\n'
    assert shield_hit_0.collect_script_content == '#!/usr/bin/env bash\n\n# Exit immediately if a simple command exits with a non-zero status.\nset -e\n\nINPUT_WILDCARD={output_dir:s}/workspace/job_*/{wildcard:s}\nOUTPUT_DIRECTORY={output_dir:s}/output\n\n# change working directory\ncd {output_dir:s}\n\n# make output folder\nmkdir -p $OUTPUT_DIRECTORY\n\n{collect_action:s}'
    assert shield_hit_0.particle_no == 1
    assert shield_hit_0.rng_seed == 1
    assert module_0.ShieldHit.default_run_script_path == 'data/run_shieldhit.sh'
    assert module_0.ShieldHit.output_wildcard == '*.bdo'
    assert f'{type(module_0.ShieldHit.input_files).__module__}.{type(module_0.ShieldHit.input_files).__qualname__}' == 'builtins.property'
    var_0 = shield_hit_0.randomize(set_0)
    var_0.set_particle_no(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    complex_0 = (4371.68762-544j)
    shield_hit_0 = module_0.ShieldHit(complex_0, none_type_0, complex_0, none_type_0)
    assert f'{type(shield_hit_0).__module__}.{type(shield_hit_0).__qualname__}' == 'mcpartools.mcengine.shieldhit.ShieldHit'
    assert shield_hit_0.input_path == (4371.68762-544j)
    assert shield_hit_0.run_script_path is None
    assert shield_hit_0.collect_method == (4371.68762-544j)
    assert shield_hit_0.engine_options == ''
    assert shield_hit_0.run_script_content == '#!/usr/bin/env bash\n\n# Exit immediately if a simple command exits with a non-zero status.\nset -e\n\n# location of SHIELD-HIT12A binary file\nSHIELDHIT_BIN={shieldhit_bin:s}\n\n# working directory, output files will be saved here\nWORK_DIR={working_directory:s}\n\n# number of particles per job\nPARTICLE_NO={particle_no:d}\n\n# seed of RNG\nRNG_SEED={rnd_seed:d}\n\n# main SHIELD-HIT12A input files\nBEAM_FILE={beam_file:s}\nGEO_FILE={geo_file:s}\nMAT_FILE={mat_file:s}\nDETECT_FILE={detect_file:s}\n\n# go to working directory\ncd {working_directory:s}\n\n# execute simulation\n$SHIELDHIT_BIN --beamfile=$BEAM_FILE --geofile=$GEO_FILE --matfile=$MAT_FILE --detectfile=$DETECT_FILE -n $PARTICLE_NO -N $RNG_SEED {engine_options:s} $WORK_DIR\n\n'
    assert shield_hit_0.collect_script_content == '#!/usr/bin/env bash\n\n# Exit immediately if a simple command exits with a non-zero status.\nset -e\n\nINPUT_WILDCARD={output_dir:s}/workspace/job_*/{wildcard:s}\nOUTPUT_DIRECTORY={output_dir:s}/output\n\n# change working directory\ncd {output_dir:s}\n\n# make output folder\nmkdir -p $OUTPUT_DIRECTORY\n\n{collect_action:s}'
    assert shield_hit_0.particle_no == 1
    assert shield_hit_0.rng_seed == 1
    assert module_0.ShieldHit.default_run_script_path == 'data/run_shieldhit.sh'
    assert module_0.ShieldHit.output_wildcard == '*.bdo'
    assert f'{type(module_0.ShieldHit.input_files).__module__}.{type(module_0.ShieldHit.input_files).__qualname__}' == 'builtins.property'
    var_0 = shield_hit_0.set_particle_no(complex_0)
    set_0 = {complex_0, complex_0, complex_0}
    module_0.ShieldHit(complex_0, none_type_0, none_type_0, set_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    shield_hit_0 = module_0.ShieldHit(none_type_0, none_type_0, none_type_0, none_type_0)
    assert f'{type(shield_hit_0).__module__}.{type(shield_hit_0).__qualname__}' == 'mcpartools.mcengine.shieldhit.ShieldHit'
    assert shield_hit_0.input_path is None
    assert shield_hit_0.run_script_path is None
    assert shield_hit_0.collect_method is None
    assert shield_hit_0.engine_options == ''
    assert shield_hit_0.run_script_content == '#!/usr/bin/env bash\n\n# Exit immediately if a simple command exits with a non-zero status.\nset -e\n\n# location of SHIELD-HIT12A binary file\nSHIELDHIT_BIN={shieldhit_bin:s}\n\n# working directory, output files will be saved here\nWORK_DIR={working_directory:s}\n\n# number of particles per job\nPARTICLE_NO={particle_no:d}\n\n# seed of RNG\nRNG_SEED={rnd_seed:d}\n\n# main SHIELD-HIT12A input files\nBEAM_FILE={beam_file:s}\nGEO_FILE={geo_file:s}\nMAT_FILE={mat_file:s}\nDETECT_FILE={detect_file:s}\n\n# go to working directory\ncd {working_directory:s}\n\n# execute simulation\n$SHIELDHIT_BIN --beamfile=$BEAM_FILE --geofile=$GEO_FILE --matfile=$MAT_FILE --detectfile=$DETECT_FILE -n $PARTICLE_NO -N $RNG_SEED {engine_options:s} $WORK_DIR\n\n'
    assert shield_hit_0.collect_script_content == '#!/usr/bin/env bash\n\n# Exit immediately if a simple command exits with a non-zero status.\nset -e\n\nINPUT_WILDCARD={output_dir:s}/workspace/job_*/{wildcard:s}\nOUTPUT_DIRECTORY={output_dir:s}/output\n\n# change working directory\ncd {output_dir:s}\n\n# make output folder\nmkdir -p $OUTPUT_DIRECTORY\n\n{collect_action:s}'
    assert shield_hit_0.particle_no == 1
    assert shield_hit_0.rng_seed == 1
    assert module_0.ShieldHit.default_run_script_path == 'data/run_shieldhit.sh'
    assert module_0.ShieldHit.output_wildcard == '*.bdo'
    assert f'{type(module_0.ShieldHit.input_files).__module__}.{type(module_0.ShieldHit.input_files).__qualname__}' == 'builtins.property'
    var_0 = shield_hit_0.save_input(none_type_0)
    var_0.find_external_files(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    shield_hit_0 = module_0.ShieldHit(none_type_0, none_type_0, none_type_0, none_type_0)
    assert f'{type(shield_hit_0).__module__}.{type(shield_hit_0).__qualname__}' == 'mcpartools.mcengine.shieldhit.ShieldHit'
    assert shield_hit_0.input_path is None
    assert shield_hit_0.run_script_path is None
    assert shield_hit_0.collect_method is None
    assert shield_hit_0.engine_options == ''
    assert shield_hit_0.run_script_content == '#!/usr/bin/env bash\n\n# Exit immediately if a simple command exits with a non-zero status.\nset -e\n\n# location of SHIELD-HIT12A binary file\nSHIELDHIT_BIN={shieldhit_bin:s}\n\n# working directory, output files will be saved here\nWORK_DIR={working_directory:s}\n\n# number of particles per job\nPARTICLE_NO={particle_no:d}\n\n# seed of RNG\nRNG_SEED={rnd_seed:d}\n\n# main SHIELD-HIT12A input files\nBEAM_FILE={beam_file:s}\nGEO_FILE={geo_file:s}\nMAT_FILE={mat_file:s}\nDETECT_FILE={detect_file:s}\n\n# go to working directory\ncd {working_directory:s}\n\n# execute simulation\n$SHIELDHIT_BIN --beamfile=$BEAM_FILE --geofile=$GEO_FILE --matfile=$MAT_FILE --detectfile=$DETECT_FILE -n $PARTICLE_NO -N $RNG_SEED {engine_options:s} $WORK_DIR\n\n'
    assert shield_hit_0.collect_script_content == '#!/usr/bin/env bash\n\n# Exit immediately if a simple command exits with a non-zero status.\nset -e\n\nINPUT_WILDCARD={output_dir:s}/workspace/job_*/{wildcard:s}\nOUTPUT_DIRECTORY={output_dir:s}/output\n\n# change working directory\ncd {output_dir:s}\n\n# make output folder\nmkdir -p $OUTPUT_DIRECTORY\n\n{collect_action:s}'
    assert shield_hit_0.particle_no == 1
    assert shield_hit_0.rng_seed == 1
    assert module_0.ShieldHit.default_run_script_path == 'data/run_shieldhit.sh'
    assert module_0.ShieldHit.output_wildcard == '*.bdo'
    assert f'{type(module_0.ShieldHit.input_files).__module__}.{type(module_0.ShieldHit.input_files).__qualname__}' == 'builtins.property'
    var_0 = shield_hit_0.randomize(none_type_0)
    shield_hit_0.save_run_script(var_0, shield_hit_0)