# Automatically generated by Pynguin.
import pytest
import npmenv as module_0
import appdirs as module_1

def test_case_0():
    list_0 = module_0.env_list()
    assert module_0.HELP == "\nnpmenv source\n\nenv-list            List all currently existing environments\nenv-location        Output path to env for current dir (may not exist yet)\nenv-modules [name]  List items in node_modules (recursive if package name given)\nenv-run cmd [args]  Run command with env's bin dir in start of PATH\nenv-rm [env_id]     Remove the env for current dir (or env with given id)\nenv-cleanup         Remove envs for projects that no longer exist\n*any npm command*\n"

def test_case_1():
    completed_process_0 = module_0.env_npm()
    assert f'{type(completed_process_0).__module__}.{type(completed_process_0).__qualname__}' == 'subprocess.CompletedProcess'
    assert completed_process_0.args == 'npm '
    assert completed_process_0.returncode == 127
    assert completed_process_0.stdout is None
    assert completed_process_0.stderr is None
    assert module_0.HELP == "\nnpmenv source\n\nenv-list            List all currently existing environments\nenv-location        Output path to env for current dir (may not exist yet)\nenv-modules [name]  List items in node_modules (recursive if package name given)\nenv-run cmd [args]  Run command with env's bin dir in start of PATH\nenv-rm [env_id]     Remove the env for current dir (or env with given id)\nenv-cleanup         Remove envs for projects that no longer exist\n*any npm command*\n"

def test_case_2():
    module_0.env_cleanup()
    assert module_0.HELP == "\nnpmenv source\n\nenv-list            List all currently existing environments\nenv-location        Output path to env for current dir (may not exist yet)\nenv-modules [name]  List items in node_modules (recursive if package name given)\nenv-run cmd [args]  Run command with env's bin dir in start of PATH\nenv-rm [env_id]     Remove the env for current dir (or env with given id)\nenv-cleanup         Remove envs for projects that no longer exist\n*any npm command*\n"
    str_0 = 'Jx*w'
    path_0 = module_0.env_location(str_0)

def test_case_3():
    completed_process_0 = module_0.env_npm()
    assert f'{type(completed_process_0).__module__}.{type(completed_process_0).__qualname__}' == 'subprocess.CompletedProcess'
    assert completed_process_0.args == 'npm '
    assert completed_process_0.returncode == 127
    assert completed_process_0.stdout is None
    assert completed_process_0.stderr is None
    assert module_0.HELP == "\nnpmenv source\n\nenv-list            List all currently existing environments\nenv-location        Output path to env for current dir (may not exist yet)\nenv-modules [name]  List items in node_modules (recursive if package name given)\nenv-run cmd [args]  Run command with env's bin dir in start of PATH\nenv-rm [env_id]     Remove the env for current dir (or env with given id)\nenv-cleanup         Remove envs for projects that no longer exist\n*any npm command*\n"

def test_case_4():
    module_0.env_rm()
    assert module_0.HELP == "\nnpmenv source\n\nenv-list            List all currently existing environments\nenv-location        Output path to env for current dir (may not exist yet)\nenv-modules [name]  List items in node_modules (recursive if package name given)\nenv-run cmd [args]  Run command with env's bin dir in start of PATH\nenv-rm [env_id]     Remove the env for current dir (or env with given id)\nenv-cleanup         Remove envs for projects that no longer exist\n*any npm command*\n"

def test_case_5():
    with pytest.raises(module_0.NpmenvException):
        module_0.env_rm()

def test_case_6():
    module_0.env_cleanup()
    assert module_0.HELP == "\nnpmenv source\n\nenv-list            List all currently existing environments\nenv-location        Output path to env for current dir (may not exist yet)\nenv-modules [name]  List items in node_modules (recursive if package name given)\nenv-run cmd [args]  Run command with env's bin dir in start of PATH\nenv-rm [env_id]     Remove the env for current dir (or env with given id)\nenv-cleanup         Remove envs for projects that no longer exist\n*any npm command*\n"

def test_case_7():
    module_0.env_cleanup()
    assert module_0.HELP == "\nnpmenv source\n\nenv-list            List all currently existing environments\nenv-location        Output path to env for current dir (may not exist yet)\nenv-modules [name]  List items in node_modules (recursive if package name given)\nenv-run cmd [args]  Run command with env's bin dir in start of PATH\nenv-rm [env_id]     Remove the env for current dir (or env with given id)\nenv-cleanup         Remove envs for projects that no longer exist\n*any npm command*\n"

def test_case_8():
    list_0 = module_0.env_list()
    assert module_0.HELP == "\nnpmenv source\n\nenv-list            List all currently existing environments\nenv-location        Output path to env for current dir (may not exist yet)\nenv-modules [name]  List items in node_modules (recursive if package name given)\nenv-run cmd [args]  Run command with env's bin dir in start of PATH\nenv-rm [env_id]     Remove the env for current dir (or env with given id)\nenv-cleanup         Remove envs for projects that no longer exist\n*any npm command*\n"

def test_case_9():
    completed_process_0 = module_0.env_npm()
    assert f'{type(completed_process_0).__module__}.{type(completed_process_0).__qualname__}' == 'subprocess.CompletedProcess'
    assert completed_process_0.args == 'npm '
    assert completed_process_0.returncode == 127
    assert completed_process_0.stdout is None
    assert completed_process_0.stderr is None
    assert module_0.HELP == "\nnpmenv source\n\nenv-list            List all currently existing environments\nenv-location        Output path to env for current dir (may not exist yet)\nenv-modules [name]  List items in node_modules (recursive if package name given)\nenv-run cmd [args]  Run command with env's bin dir in start of PATH\nenv-rm [env_id]     Remove the env for current dir (or env with given id)\nenv-cleanup         Remove envs for projects that no longer exist\n*any npm command*\n"
    with pytest.raises(module_0.NpmenvException):
        module_0.env_run(completed_process_0)

def test_case_10():
    str_0 = '"709{VyQZ|0Y&FSmNaH\x0b'
    with pytest.raises(module_0.NpmenvException):
        module_0.env_run(str_0)

def test_case_11():
    path_0 = module_0.env_location()
    assert f'{type(path_0).__module__}.{type(path_0).__qualname__}' == 'pathlib.PosixPath'
    assert module_0.HELP == "\nnpmenv source\n\nenv-list            List all currently existing environments\nenv-location        Output path to env for current dir (may not exist yet)\nenv-modules [name]  List items in node_modules (recursive if package name given)\nenv-run cmd [args]  Run command with env's bin dir in start of PATH\nenv-rm [env_id]     Remove the env for current dir (or env with given id)\nenv-cleanup         Remove envs for projects that no longer exist\n*any npm command*\n"

def test_case_12():
    str_0 = 'ON)&/4\t<ne\x0b8dg'
    module_0.env_cleanup()
    assert module_0.HELP == "\nnpmenv source\n\nenv-list            List all currently existing environments\nenv-location        Output path to env for current dir (may not exist yet)\nenv-modules [name]  List items in node_modules (recursive if package name given)\nenv-run cmd [args]  Run command with env's bin dir in start of PATH\nenv-rm [env_id]     Remove the env for current dir (or env with given id)\nenv-cleanup         Remove envs for projects that no longer exist\n*any npm command*\n"
    completed_process_0 = module_0.env_npm()
    assert f'{type(completed_process_0).__module__}.{type(completed_process_0).__qualname__}' == 'subprocess.CompletedProcess'
    assert completed_process_0.args == 'npm '
    assert completed_process_0.returncode == 127
    assert completed_process_0.stdout is None
    assert completed_process_0.stderr is None
    with pytest.raises(module_0.NpmenvException):
        path_0 = module_0.env_rm(str_0)

def test_case_13():
    module_0.env_cleanup()
    assert module_0.HELP == "\nnpmenv source\n\nenv-list            List all currently existing environments\nenv-location        Output path to env for current dir (may not exist yet)\nenv-modules [name]  List items in node_modules (recursive if package name given)\nenv-run cmd [args]  Run command with env's bin dir in start of PATH\nenv-rm [env_id]     Remove the env for current dir (or env with given id)\nenv-cleanup         Remove envs for projects that no longer exist\n*any npm command*\n"

def test_case_14():
    var_0 = module_1.user_data_dir()
    with pytest.raises(AssertionError):
        module_0.env_rm(var_0)