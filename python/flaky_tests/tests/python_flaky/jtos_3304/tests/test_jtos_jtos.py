# Automatically generated by Pynguin.
import pytest
import jtos.jtos as module_0

def test_case_0():
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}

def test_case_1():
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    var_0 = j_t_o_s_0.set_object()

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "n.Pn1'1'RL f(Cb-f}n"
    none_type_0 = None
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    var_0 = j_t_o_s_0.parse_object(str_0)
    assert var_0 == ';'
    j_t_o_s_0.build_join(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "n.Pn1'1'RL f(Cb-f}n"
    none_type_0 = None
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    var_0 = j_t_o_s_0.parse_object(str_0)
    assert var_0 == ';'
    j_t_o_s_0.build_delete(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '\x0cf[5d:j7 _OB<tCQyu,r'
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    var_0 = j_t_o_s_0.build_update(str_0)
    var_0.set_object()

def test_case_5():
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    var_0 = j_t_o_s_0.build_create(j_t_o_s_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "n.Pn1'1'RL f(Cb-f}n"
    none_type_0 = None
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    var_0 = j_t_o_s_0.parse_object(str_0)
    assert var_0 == ';'
    j_t_o_s_0.build_select(none_type_0)

def test_case_7():
    str_0 = "n.P5n1'1'RL f(Cb-f}n"
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    var_0 = j_t_o_s_0.parse_object(str_0)
    assert var_0 == ';'

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'hPyXP\r:'
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    j_t_o_s_0.build_where(str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b'\xf1=\xdf\xe5\xea\x13}\xffB\x8c\x90D '
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    j_t_o_s_0.build_group(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'select'
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    j_t_o_s_0.parse_object(str_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    tuple_0 = ()
    var_0 = j_t_o_s_0.build_where(tuple_0)
    assert var_0 == ' WHERE'
    j_t_o_s_0.build_where(var_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    dict_0 = {}
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    var_0 = j_t_o_s_0.build_order(dict_0)
    assert var_0 == ' ORDER BY '
    var_0.build_join(var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    var_0 = j_t_o_s_0.parse_object(dict_0)
    assert var_0 == ';'
    j_t_o_s_0.build_order(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'delete'
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    j_t_o_s_0.parse_object(str_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'offset'
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    tuple_0 = ()
    var_0 = j_t_o_s_0.build_where(tuple_0)
    assert var_0 == ' WHERE'
    var_1 = j_t_o_s_0.build_group(str_0)
    assert var_1 == ' GROUP BY o, f, f, s, e, t'
    j_t_o_s_1 = module_0.JTOS()
    var_2 = j_t_o_s_0.set_object()
    j_t_o_s_1.parse_object(str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = 'limit'
    j_t_o_s_0 = module_0.JTOS()
    assert module_0.JTOS.mappings == {'gt': '>', 'lt': '<', 'gte': '>=', 'lte': '<=', 'e': '=', 'ne': '!=', 'l': 'LIKE', 'nl': 'NOT LIKE', 'a': 'AND', 'o': 'OR', 'i': 'IN', 'ni': 'NOT IN'}
    tuple_0 = ()
    var_0 = j_t_o_s_0.build_where(tuple_0)
    assert var_0 == ' WHERE'
    var_1 = j_t_o_s_0.build_group(str_0)
    assert var_1 == ' GROUP BY l, i, m, i, t'
    j_t_o_s_0.parse_object(str_0)