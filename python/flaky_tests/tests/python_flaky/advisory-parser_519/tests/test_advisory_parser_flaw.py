# Automatically generated by Pynguin.
import pytest
import advisory_parser.flaw as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = (3402.3526+1197.9548j)
    flaw_0 = module_0.Flaw(cvss3=complex_0, advisory_id=complex_0)
    assert flaw_0.cves == []
    assert flaw_0.impact == 'unspecified'
    assert flaw_0.fixed_in == {}
    assert module_0.IMPACT_WEIGHT == {'critical': 0, 'important': 1, 'moderate': 2, 'low': 3, 'unspecified': 4}
    str_0 = '5WcHaw\t8D'
    str_1 = 'mb;[1\x0cUd='
    flaw_1 = module_0.Flaw(summary=str_1, cvss3=str_1, fixed_in=str_0, advisory_id=str_0)
    assert flaw_1.cves == []
    assert flaw_1.impact == 'unspecified'
    assert flaw_1.fixed_in == '5WcHaw\t8D'
    flaw_1.__gt__(str_1)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    float_0 = -448.9
    flaw_0 = module_0.Flaw(cves=float_0, public_date=float_0, cvss3=float_0, advisory_id=float_0)
    assert flaw_0.cves == pytest.approx(-448.9, abs=0.01, rel=0.01)
    assert flaw_0.impact == 'unspecified'
    assert flaw_0.fixed_in == {}
    assert module_0.IMPACT_WEIGHT == {'critical': 0, 'important': 1, 'moderate': 2, 'low': 3, 'unspecified': 4}
    flaw_0.__gt__(none_type_0)

def test_case_2():
    bytes_0 = b'\xc5W\x8b\xff\x0f\x96\x99\x88\xbe\xa1\xd3\x9a\x81L\xee'
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (set_0,)
    int_0 = 1203
    bytes_1 = b'\xa9\xa6Q\xf0\x8bPF'
    flaw_0 = module_0.Flaw(cves=bytes_0, cvss3=int_0, cvss2=bytes_1)
    assert flaw_0.cves == b'\xc5W\x8b\xff\x0f\x96\x99\x88\xbe\xa1\xd3\x9a\x81L\xee'
    assert flaw_0.impact == 'unspecified'
    assert flaw_0.fixed_in == {}
    assert module_0.IMPACT_WEIGHT == {'critical': 0, 'important': 1, 'moderate': 2, 'low': 3, 'unspecified': 4}
    flaw_1 = module_0.Flaw(summary=flaw_0, cvss2=bytes_1)
    assert flaw_1.cves == []
    assert flaw_1.impact == 'unspecified'
    assert flaw_1.fixed_in == {}
    flaw_2 = module_0.Flaw(public_date=tuple_0, cvss2=tuple_0, advisory_id=bytes_0)
    assert flaw_2.cves == []
    assert flaw_2.impact == 'unspecified'
    assert flaw_2.fixed_in == {}

@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 9
    bool_0 = False
    flaw_0 = module_0.Flaw(cves=bool_0, public_date=bool_0, impact=bool_0, description=bool_0, fixed_in=bool_0)
    assert flaw_0.cves == []
    assert flaw_0.fixed_in == {}
    assert module_0.IMPACT_WEIGHT == {'critical': 0, 'important': 1, 'moderate': 2, 'low': 3, 'unspecified': 4}
    flaw_0.__lt__(int_0)