# Automatically generated by Pynguin.
import pytest
import tukio.event as module_0
import builtins as module_1

def test_case_0():
    bool_0 = True
    event_source_0 = module_0.EventSource(bool_0, task_template_id=bool_0)
    assert f'{type(event_source_0).__module__}.{type(event_source_0).__qualname__}' == 'tukio.event.EventSource'
    var_0 = event_source_0.__repr__()
    assert var_0 == '<EventSource wflow_template_id=True, wflow_exec_id=None>'

def test_case_1():
    object_0 = module_1.object()
    event_source_0 = module_0.EventSource(workflow_exec_id=object_0, task_exec_id=object_0)
    assert f'{type(event_source_0).__module__}.{type(event_source_0).__qualname__}' == 'tukio.event.EventSource'
    event_0 = event_source_0.__repr__()
    with pytest.raises(ValueError):
        module_0.Event(event_source_0)

def test_case_2():
    bytes_0 = b'-'
    with pytest.raises(ValueError):
        module_0.Event(bytes_0, source=bytes_0)

def test_case_3():
    float_0 = 2144.69627
    with pytest.raises(ValueError):
        module_0.Event(float_0)

def test_case_4():
    event_source_0 = module_0.EventSource()
    assert f'{type(event_source_0).__module__}.{type(event_source_0).__qualname__}' == 'tukio.event.EventSource'

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 5238
    event_source_0 = module_0.EventSource(int_0, task_exec_id=int_0)
    assert f'{type(event_source_0).__module__}.{type(event_source_0).__qualname__}' == 'tukio.event.EventSource'
    var_0 = event_source_0.__copy__()
    var_1 = event_source_0.as_dict()
    var_2 = var_1.__repr__()
    assert var_2 == "{'workflow_template_id': 5238, 'workflow_exec_id': None, 'task_template_id': None, 'task_exec_id': 5238}"
    var_3 = var_0.__str__()
    assert var_3 == '<EventSource wflow_template_id=5238, wflow_exec_id=None>'
    var_3.__copy__()

def test_case_6():
    event_source_0 = module_0.EventSource()
    assert f'{type(event_source_0).__module__}.{type(event_source_0).__qualname__}' == 'tukio.event.EventSource'
    var_0 = event_source_0.__copy__()
    var_1 = event_source_0.as_dict()
    with pytest.raises(ValueError):
        module_0.Event(event_source_0, event_source_0, event_source_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -622
    event_source_0 = module_0.EventSource(workflow_exec_id=int_0)
    assert f'{type(event_source_0).__module__}.{type(event_source_0).__qualname__}' == 'tukio.event.EventSource'
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    event_0 = module_0.Event(dict_0)
    assert f'{type(event_0).__module__}.{type(event_0).__qualname__}' == 'tukio.event.Event'
    assert f'{type(module_0.Event.data).__module__}.{type(module_0.Event.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Event.topic).__module__}.{type(module_0.Event.topic).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Event.source).__module__}.{type(module_0.Event.source).__qualname__}' == 'builtins.property'
    var_0 = event_0.__repr__()
    var_1 = event_source_0.__repr__()
    assert var_1 == '<EventSource wflow_template_id=None, wflow_exec_id=-622>'
    var_2 = event_0.__repr__()
    var_0.__copy__()

def test_case_8():
    event_source_0 = module_0.EventSource()
    assert f'{type(event_source_0).__module__}.{type(event_source_0).__qualname__}' == 'tukio.event.EventSource'
    var_0 = event_source_0.as_dict()
    var_1 = event_source_0.__copy__()
    var_2 = event_source_0.__str__()
    assert var_2 == '<EventSource wflow_template_id=None, wflow_exec_id=None>'
    var_3 = var_1.as_dict()
    event_0 = module_0.Event(var_3, source=var_1)
    assert f'{type(event_0).__module__}.{type(event_0).__qualname__}' == 'tukio.event.Event'
    assert f'{type(module_0.Event.data).__module__}.{type(module_0.Event.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Event.topic).__module__}.{type(module_0.Event.topic).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Event.source).__module__}.{type(module_0.Event.source).__qualname__}' == 'builtins.property'
    var_4 = event_0.__copy__()
    var_5 = var_1.__repr__()
    assert var_5 == '<EventSource wflow_template_id=None, wflow_exec_id=None>'
    var_6 = var_2.__repr__()
    assert var_6 == "'<EventSource wflow_template_id=None, wflow_exec_id=None>'"
    var_7 = var_6.__repr__()
    assert var_7 == '"\'<EventSource wflow_template_id=None, wflow_exec_id=None>\'"'
    set_0 = set()
    with pytest.raises(ValueError):
        module_0.Event(set_0)

def test_case_9():
    event_source_0 = module_0.EventSource()
    assert f'{type(event_source_0).__module__}.{type(event_source_0).__qualname__}' == 'tukio.event.EventSource'
    var_0 = event_source_0.as_dict()
    var_1 = event_source_0.__copy__()
    var_2 = event_source_0.__str__()
    assert var_2 == '<EventSource wflow_template_id=None, wflow_exec_id=None>'
    var_3 = var_1.as_dict()
    event_0 = module_0.Event(var_3, source=var_1)
    assert f'{type(event_0).__module__}.{type(event_0).__qualname__}' == 'tukio.event.Event'
    assert f'{type(module_0.Event.data).__module__}.{type(module_0.Event.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Event.topic).__module__}.{type(module_0.Event.topic).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Event.source).__module__}.{type(module_0.Event.source).__qualname__}' == 'builtins.property'
    var_4 = event_0.__copy__()
    var_5 = event_0.__str__()
    assert var_5 == "<Event topic=None, data={'workflow_template_id': None, 'workflow_exec_id': None, 'task_template_id': None, 'task_exec_id': None}, source=<EventSource wflow_template_id=None, wflow_exec_id=None>>"
    var_6 = var_2.__repr__()
    assert var_6 == "'<EventSource wflow_template_id=None, wflow_exec_id=None>'"
    var_7 = var_6.__repr__()
    assert var_7 == '"\'<EventSource wflow_template_id=None, wflow_exec_id=None>\'"'
    set_0 = set()
    with pytest.raises(ValueError):
        module_0.Event(set_0)

def test_case_10():
    event_source_0 = module_0.EventSource()
    assert f'{type(event_source_0).__module__}.{type(event_source_0).__qualname__}' == 'tukio.event.EventSource'
    var_0 = module_0.EventSource(workflow_exec_id=event_source_0, task_template_id=event_source_0, task_exec_id=event_source_0)
    var_1 = var_0.__str__()
    assert var_1 == '<EventSource wflow_template_id=None, wflow_exec_id=<EventSource wflow_template_id=None, wflow_exec_id=None>, task_template_id=<EventSource wflow_template_id=None, wflow_exec_id=None>, task_exec_id=<EventSource wflow_template_id=None, wflow_exec_id=None>>'
    var_2 = event_source_0.__repr__()
    assert var_2 == '<EventSource wflow_template_id=None, wflow_exec_id=None>'
    var_3 = event_source_0.__copy__()
    event_source_1 = module_0.EventSource(workflow_exec_id=var_1, task_template_id=var_2)
    var_4 = event_source_1.__copy__()
    object_0 = module_1.object()
    var_5 = event_source_1.__repr__()
    assert var_5 == '<EventSource wflow_template_id=None, wflow_exec_id=<EventSource wflow_template_id=None, wflow_exec_id=<EventSource wflow_template_id=None, wflow_exec_id=None>, task_template_id=<EventSource wflow_template_id=None, wflow_exec_id=None>, task_exec_id=<EventSource wflow_template_id=None, wflow_exec_id=None>>>'
    with pytest.raises(ValueError):
        module_0.Event(var_3)

@pytest.mark.xfail(strict=True)
def test_case_11():
    event_source_0 = module_0.EventSource()
    assert f'{type(event_source_0).__module__}.{type(event_source_0).__qualname__}' == 'tukio.event.EventSource'
    var_0 = event_source_0.__copy__()
    var_1 = var_0.__repr__()
    assert var_1 == '<EventSource wflow_template_id=None, wflow_exec_id=None>'
    var_2 = event_source_0.__repr__()
    assert var_2 == '<EventSource wflow_template_id=None, wflow_exec_id=None>'
    var_3 = var_1.__repr__()
    assert var_3 == "'<EventSource wflow_template_id=None, wflow_exec_id=None>'"
    var_4 = event_source_0.__copy__()
    event_source_1 = module_0.EventSource(workflow_exec_id=var_0, task_template_id=var_0)
    var_5 = var_4.__str__()
    assert var_5 == '<EventSource wflow_template_id=None, wflow_exec_id=None>'
    object_0 = module_1.object()
    var_6 = event_source_0.as_dict()
    var_7 = event_source_1.__repr__()
    assert var_7 == '<EventSource wflow_template_id=None, wflow_exec_id=<EventSource wflow_template_id=None, wflow_exec_id=None>>'
    event_0 = module_0.Event(var_6)
    assert f'{type(event_0).__module__}.{type(event_0).__qualname__}' == 'tukio.event.Event'
    assert f'{type(module_0.Event.data).__module__}.{type(module_0.Event.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Event.topic).__module__}.{type(module_0.Event.topic).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Event.source).__module__}.{type(module_0.Event.source).__qualname__}' == 'builtins.property'
    var_8 = event_0.__copy__()
    event_source_2 = module_0.EventSource(task_template_id=var_3)
    var_9 = var_8.__repr__()
    assert var_9 == "{'workflow_template_id': None, 'workflow_exec_id': None, 'task_template_id': None, 'task_exec_id': None}"
    var_10 = module_0.Event(var_8, event_source_0)
    var_11 = var_4.__repr__()
    assert var_11 == '<EventSource wflow_template_id=None, wflow_exec_id=None>'
    event_1 = module_0.Event(var_10)
    assert f'{type(event_1).__module__}.{type(event_1).__qualname__}' == 'tukio.event.Event'
    var_12 = var_6.__repr__()
    assert var_12 == "{'workflow_template_id': None, 'workflow_exec_id': None, 'task_template_id': None, 'task_exec_id': None}"
    var_7.__copy__()