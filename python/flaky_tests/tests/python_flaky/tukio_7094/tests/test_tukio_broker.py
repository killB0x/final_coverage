# Automatically generated by Pynguin.
import pytest
import tukio.broker as module_0

def test_case_0():
    str_0 = 'gV{_'
    var_0 = module_0.get_broker(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tukio.broker.Broker'
    assert module_0.EXEC_TOPIC == '__exec_topic__'
    var_1 = var_0.dispatch(var_0, str_0)

def test_case_1():
    float_0 = -1471.322
    broker_0 = module_0.Broker(float_0)
    assert f'{type(broker_0).__module__}.{type(broker_0).__qualname__}' == 'tukio.broker.Broker'
    assert module_0.EXEC_TOPIC == '__exec_topic__'
    with pytest.raises(TypeError):
        broker_0.register(float_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.Broker(bool_0)

def test_case_3():
    str_0 = 'gV{u'
    var_0 = module_0.get_broker(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tukio.broker.Broker'
    assert module_0.EXEC_TOPIC == '__exec_topic__'
    var_1 = var_0.dispatch(var_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    module_0.get_broker()

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    topic_manager_0 = module_0.TopicManager(bool_0, loop=bool_0)
    assert f'{type(topic_manager_0).__module__}.{type(topic_manager_0).__qualname__}' == 'tukio.broker.TopicManager'
    assert module_0.EXEC_TOPIC == '__exec_topic__'
    assert f'{type(module_0.TopicManager.subscribe).__module__}.{type(module_0.TopicManager.subscribe).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TopicManager.unsubscribe).__module__}.{type(module_0.TopicManager.unsubscribe).__qualname__}' == 'builtins.method'
    topic_manager_0.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    module_0.TopicManager(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    topic_manager_0 = module_0.TopicManager(bool_0, loop=bool_0)
    assert f'{type(topic_manager_0).__module__}.{type(topic_manager_0).__qualname__}' == 'tukio.broker.TopicManager'
    assert module_0.EXEC_TOPIC == '__exec_topic__'
    assert f'{type(module_0.TopicManager.subscribe).__module__}.{type(module_0.TopicManager.subscribe).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TopicManager.unsubscribe).__module__}.{type(module_0.TopicManager.unsubscribe).__qualname__}' == 'builtins.method'
    topic_manager_0.__exit__()

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    broker_0 = module_0.workflow_exec_topics(bool_0)
    assert module_0.EXEC_TOPIC == '__exec_topic__'
    broker_0.unregister(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = -1482.0603783598503
    broker_0 = module_0.Broker(float_0)
    assert f'{type(broker_0).__module__}.{type(broker_0).__qualname__}' == 'tukio.broker.Broker'
    assert module_0.EXEC_TOPIC == '__exec_topic__'
    broker_0.unregister(float_0)

def test_case_10():
    float_0 = -1482.0603783598503
    broker_0 = module_0.Broker(float_0)
    assert f'{type(broker_0).__module__}.{type(broker_0).__qualname__}' == 'tukio.broker.Broker'
    assert module_0.EXEC_TOPIC == '__exec_topic__'
    var_0 = broker_0.dispatch(float_0, source=float_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    float_0 = -1482.0603783598503
    broker_0 = module_0.Broker(float_0)
    assert f'{type(broker_0).__module__}.{type(broker_0).__qualname__}' == 'tukio.broker.Broker'
    assert module_0.EXEC_TOPIC == '__exec_topic__'
    broker_0.unregister(broker_0, broker_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    complex_0 = (648.400837-1043.8j)
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.get_broker(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    broker_0 = module_0.Broker(bool_0)
    assert f'{type(broker_0).__module__}.{type(broker_0).__qualname__}' == 'tukio.broker.Broker'
    assert module_0.EXEC_TOPIC == '__exec_topic__'
    str_0 = '_loop'
    topic_manager_0 = module_0.TopicManager(bool_0, loop=str_0)
    assert f'{type(topic_manager_0).__module__}.{type(topic_manager_0).__qualname__}' == 'tukio.broker.TopicManager'
    assert f'{type(module_0.TopicManager.subscribe).__module__}.{type(module_0.TopicManager.subscribe).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.TopicManager.unsubscribe).__module__}.{type(module_0.TopicManager.unsubscribe).__qualname__}' == 'builtins.method'
    list_0 = [str_0, broker_0, topic_manager_0, broker_0]
    tuple_0 = (list_0,)
    broker_0.dispatch(str_0, tuple_0, str_0)