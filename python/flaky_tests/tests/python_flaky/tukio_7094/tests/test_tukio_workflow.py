# Automatically generated by Pynguin.
import pytest
import tukio.workflow as module_0
import inspect as module_1

def test_case_0():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'

@pytest.mark.xfail(strict=True)
def test_case_1():
    complex_0 = (-80.4907-2122.173577j)
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    workflow_template_0.unlink(complex_0, complex_0)

def test_case_2():
    pass

@pytest.mark.xfail(strict=True)
def test_case_3():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = workflow_template_0.as_dict()
    template_graph_error_0 = module_0.TemplateGraphError(var_0)
    module_0.new_workflow(workflow_template_0, var_0, var_0)

def test_case_4():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    rescue_error_0 = module_0.RescueError(workflow_template_0, workflow_template_0)
    workflow_error_0 = module_0.WorkflowError()
    with pytest.raises(TypeError):
        workflow_template_0.add(workflow_error_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    module_0.new_workflow(workflow_template_0, loop=workflow_template_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    workflow_template_0 = module_0.WorkflowTemplate(timeout=none_type_0, schema=none_type_0)
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    workflow_template_0.link(none_type_0, workflow_template_0)

def test_case_7():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    with pytest.raises(module_0.WorkflowRootTaskError):
        workflow_template_0.root()

@pytest.mark.xfail(strict=True)
def test_case_8():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = workflow_template_0.as_dict()
    var_1 = workflow_template_0.copy()
    var_2 = module_1.isroutine(var_0)
    rescue_error_0 = module_0.RescueError(workflow_template_0, var_0)
    var_3 = rescue_error_0.__str__()
    module_0.new_workflow(var_1)

@pytest.mark.xfail(strict=True)
def test_case_9():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    workflow_template_0.delete(workflow_template_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = workflow_template_0.__str__()
    module_0.new_workflow(workflow_template_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    complex_0 = (-469.2365-1818.02397j)
    module_0.WorkflowTemplate(complex_0, complex_0, schema=complex_0)

def test_case_12():
    overrun_policy_0 = module_0.OverrunPolicy.SKIP
    workflow_template_0 = module_0.WorkflowTemplate(overrun_policy_0)
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'

def test_case_13():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    with pytest.raises(module_0.WorkflowRootTaskError):
        workflow_template_0.validate()

@pytest.mark.xfail(strict=True)
def test_case_14():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = workflow_template_0.as_dict()
    module_0.new_workflow(workflow_template_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    workflow_template_1 = module_0.WorkflowTemplate(timeout=workflow_template_0, schema=workflow_template_0)
    var_0 = workflow_template_1.as_dict()
    module_0.new_workflow(workflow_template_0)

def test_case_16():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    with pytest.raises(TypeError):
        workflow_template_0.add(workflow_template_0)

def test_case_17():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = workflow_template_0.as_dict()

@pytest.mark.xfail(strict=True)
def test_case_18():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = workflow_template_0.as_dict()
    template_graph_error_0 = module_0.TemplateGraphError(var_0)
    var_1 = template_graph_error_0.__str__()
    module_0.new_workflow(workflow_template_0, var_0, var_0)

def test_case_19():
    workflow_template_0 = module_1.currentframe()
    workflow_root_task_error_0 = module_0.WorkflowRootTaskError(workflow_template_0)
    assert f'{type(workflow_root_task_error_0).__module__}.{type(workflow_root_task_error_0).__qualname__}' == 'tukio.workflow.WorkflowRootTaskError'
    var_0 = workflow_root_task_error_0.__str__()

def test_case_20():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = module_1.getmembers(workflow_template_0)
    with pytest.raises(TypeError):
        workflow_template_0.add(var_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = workflow_template_0.copy()
    var_1 = workflow_template_0.as_dict()
    module_0.new_workflow(var_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    overrun_policy_0 = module_0.OverrunPolicy.SKIP_UNTIL_UNLOCK
    workflow_template_1 = module_0.WorkflowTemplate(workflow_template_0, overrun_policy_0, workflow_template_0)
    none_type_0 = None
    none_type_0.as_dict()

@pytest.mark.xfail(strict=True)
def test_case_23():
    workflow_template_0 = module_0.WorkflowTemplate()
    assert f'{type(workflow_template_0).__module__}.{type(workflow_template_0).__qualname__}' == 'tukio.workflow.WorkflowTemplate'
    assert f'{type(module_0.WorkflowTemplate.tasks).__module__}.{type(module_0.WorkflowTemplate.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.listen).__module__}.{type(module_0.WorkflowTemplate.listen).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.WorkflowTemplate.from_dict).__module__}.{type(module_0.WorkflowTemplate.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.WorkflowTemplate.dag).__module__}.{type(module_0.WorkflowTemplate.dag).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.policy).__module__}.{type(module_0.WorkflowTemplate.policy).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.schema).__module__}.{type(module_0.WorkflowTemplate.schema).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.timeout).__module__}.{type(module_0.WorkflowTemplate.timeout).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.topics).__module__}.{type(module_0.WorkflowTemplate.topics).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.WorkflowTemplate.uid).__module__}.{type(module_0.WorkflowTemplate.uid).__qualname__}' == 'builtins.member_descriptor'
    overrun_policy_0 = module_0.OverrunPolicy.SKIP_UNTIL_UNLOCK
    var_0 = workflow_template_0.as_dict()
    workflow_template_0.unlink(var_0, overrun_policy_0)