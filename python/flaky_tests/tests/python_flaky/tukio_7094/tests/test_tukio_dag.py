# Automatically generated by Pynguin.
import pytest
import tukio.dag as module_0

def test_case_0():
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(d_a_g_0)
    var_1 = d_a_g_0.validate()
    assert var_1 == 'graph is a valid DAG'

def test_case_1():
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    with pytest.raises(KeyError):
        d_a_g_0.delete_node(d_a_g_0)

def test_case_2():
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.leaves()
    with pytest.raises(KeyError):
        d_a_g_0.add_edge(d_a_g_0, d_a_g_0)

def test_case_3():
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    with pytest.raises(KeyError):
        d_a_g_0.delete_edge(d_a_g_0, d_a_g_0)

def test_case_4():
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    with pytest.raises(KeyError):
        d_a_g_0.predecessors(d_a_g_0)

def test_case_5():
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.validate()
    assert var_0 == 'graph is a valid DAG'
    with pytest.raises(KeyError):
        d_a_g_0.successors(d_a_g_0)

def test_case_6():
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.leaves()
    var_1 = d_a_g_0.edges()
    var_2 = d_a_g_0.validate()
    assert var_2 == 'graph is a valid DAG'

def test_case_7():
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    d_a_g_1 = d_a_g_0.is_valid()
    assert d_a_g_1 is True

def test_case_8():
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.edges()

def test_case_9():
    d_a_g_validation_error_0 = module_0.DAGValidationError()

def test_case_10():
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'

@pytest.mark.xfail(strict=True)
def test_case_11():
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(d_a_g_0)
    var_1 = d_a_g_0.copy()
    var_2 = d_a_g_0.validate()
    assert var_2 == 'graph is a valid DAG'
    var_2.edges()

def test_case_12():
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(d_a_g_0)
    with pytest.raises(ValueError):
        d_a_g_0.add_node(d_a_g_0)

def test_case_13():
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(d_a_g_0)
    var_1 = d_a_g_0.edges()

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(none_type_0)
    var_1 = d_a_g_0.predecessors(var_0)
    var_2 = d_a_g_0.is_valid()
    assert var_2 is True
    var_3 = d_a_g_0.successors(none_type_0)
    var_4 = d_a_g_0.edges()
    var_5 = d_a_g_0.validate()
    assert var_5 == 'graph is a valid DAG'
    var_2.predecessors(var_0)

def test_case_15():
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(d_a_g_0)
    var_1 = d_a_g_0.leaves()
    with pytest.raises(KeyError):
        d_a_g_0.successors(var_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(none_type_0)
    var_1 = d_a_g_0.add_edge(none_type_0, none_type_0)
    var_2 = d_a_g_0.predecessors(var_0)
    var_3 = d_a_g_0.is_valid()
    assert var_3 is False
    var_0.add_node(var_2)

def test_case_17():
    none_type_0 = None
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(none_type_0)
    var_1 = d_a_g_0.add_edge(none_type_0, none_type_0)
    var_2 = d_a_g_0.is_valid()
    assert var_2 is False

def test_case_18():
    none_type_0 = None
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(none_type_0)
    var_1 = d_a_g_0.predecessors(var_0)
    with pytest.raises(KeyError):
        d_a_g_0.add_edge(var_0, d_a_g_0)

def test_case_19():
    none_type_0 = None
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(none_type_0)
    var_1 = d_a_g_0.add_edge(none_type_0, none_type_0)
    var_2 = d_a_g_0.predecessors(var_0)
    var_3 = d_a_g_0.add_node(d_a_g_0)
    var_4 = d_a_g_0.successors(none_type_0)
    var_5 = d_a_g_0.edges()
    var_6 = d_a_g_0.is_valid()
    assert var_6 is False

@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(none_type_0)
    var_1 = d_a_g_0.add_edge(var_0, var_0)
    var_2 = d_a_g_0.leaves()
    var_3 = d_a_g_0.successors(none_type_0)
    var_4 = d_a_g_0.edges()
    d_a_g_1 = module_0.DAG()
    var_5 = d_a_g_0.is_valid()
    assert var_5 is False
    d_a_g_1.successors(var_2)

@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(none_type_0)
    var_1 = d_a_g_0.add_edge(none_type_0, none_type_0)
    var_2 = d_a_g_0.predecessors(var_0)
    var_3 = d_a_g_0.add_node(d_a_g_0)
    var_4 = d_a_g_0.successors(none_type_0)
    var_5 = d_a_g_0.delete_node(d_a_g_0)
    var_5.add_node(none_type_0)

def test_case_22():
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    bool_0 = True
    var_0 = d_a_g_0.add_node(bool_0)
    var_1 = d_a_g_0.add_node(d_a_g_0)
    var_2 = d_a_g_0.validate()
    assert var_2 == 'graph is a valid DAG'

@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(none_type_0)
    var_1 = d_a_g_0.add_edge(none_type_0, none_type_0)
    var_2 = d_a_g_0.predecessors(var_0)
    var_3 = d_a_g_0.leaves()
    var_4 = d_a_g_0.successors(none_type_0)
    var_5 = d_a_g_0.edges()
    d_a_g_1 = d_a_g_0.delete_edge(var_0, none_type_0)
    var_6 = d_a_g_0.is_valid()
    assert var_6 is True
    var_7 = d_a_g_0.successors(none_type_0)
    d_a_g_1.delete_node(d_a_g_1)

@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(none_type_0)
    var_1 = d_a_g_0.add_edge(none_type_0, none_type_0)
    var_2 = d_a_g_0.predecessors(var_0)
    var_3 = d_a_g_0.add_node(d_a_g_0)
    var_4 = d_a_g_0.add_edge(d_a_g_0, var_1)
    var_5 = d_a_g_0.is_valid()
    assert var_5 is False
    var_6 = d_a_g_0.delete_node(d_a_g_0)
    var_6.add_node(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    none_type_0 = None
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(none_type_0)
    var_1 = d_a_g_0.predecessors(var_0)
    var_2 = d_a_g_0.add_node(d_a_g_0)
    var_3 = d_a_g_0.successors(none_type_0)
    var_4 = d_a_g_0.add_edge(d_a_g_0, var_0)
    var_5 = d_a_g_0.edges()
    var_6 = d_a_g_0.is_valid()
    assert var_6 is True
    var_7 = d_a_g_0.successors(none_type_0)
    var_8 = d_a_g_0.delete_node(d_a_g_0)
    var_6.is_valid()

@pytest.mark.xfail(strict=True)
def test_case_26():
    none_type_0 = None
    d_a_g_0 = module_0.DAG()
    assert f'{type(d_a_g_0).__module__}.{type(d_a_g_0).__qualname__}' == 'tukio.dag.DAG'
    assert f'{type(module_0.DAG.from_dict).__module__}.{type(module_0.DAG.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DAG.graph).__module__}.{type(module_0.DAG.graph).__qualname__}' == 'builtins.member_descriptor'
    var_0 = d_a_g_0.add_node(none_type_0)
    var_1 = d_a_g_0.add_edge(none_type_0, none_type_0)
    var_2 = d_a_g_0.predecessors(var_0)
    var_3 = d_a_g_0.add_node(d_a_g_0)
    var_4 = d_a_g_0.successors(var_3)
    var_5 = d_a_g_0.add_edge(d_a_g_0, var_1)
    var_6 = d_a_g_0.edges()
    var_7 = d_a_g_0.is_valid()
    assert var_7 is False
    var_8 = d_a_g_0.delete_node(var_3)
    var_8.add_node(none_type_0)