# Automatically generated by Pynguin.
import pytest
import tests.test_states as module_0
import inspect as module_1

def test_case_0():
    test_transitions_0 = module_0.TestTransitions()

@pytest.mark.xfail(strict=True)
def test_case_1():
    test_transitions_0 = module_0.TestTransitions()
    var_0 = test_transitions_0.test_tags()
    test_transitions_0.assertMultiLineEqual(test_transitions_0, test_transitions_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    test_transitions_0 = module_0.TestTransitions()
    var_0 = test_transitions_0.test_error_callback()
    var_0.visit_Break(test_transitions_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    test_transitions_0 = module_0.TestTransitions()
    test_transitions_0.test_timeout()

@pytest.mark.xfail(strict=True)
def test_case_4():
    test_transitions_0 = module_0.TestTransitions()
    var_0 = module_1.get_annotations(test_transitions_0, globals=test_transitions_0, eval_str=test_transitions_0)
    var_1 = test_transitions_0.test_error()
    var_2 = test_transitions_0.test_timeout_transitioning()
    var_0.test_string_callbacks()

@pytest.mark.xfail(strict=True)
def test_case_5():
    test_transitions_0 = module_0.TestTransitions()
    var_0 = test_transitions_0.test_volatile()
    var_1 = test_transitions_0.test_volatile()
    var_2 = test_transitions_0.test_error()
    var_3 = test_transitions_0.test_timeout_transitioning()
    var_4 = test_transitions_0.addTypeEqualityFunc(var_1, test_transitions_0)
    var_1.test_string_callbacks()

@pytest.mark.xfail(strict=True)
def test_case_6():
    test_states_diagrams_locked_nested_0 = module_0.TestStatesDiagramsLockedNested()
    var_0 = test_states_diagrams_locked_nested_0.setUp()
    assert f'{type(test_states_diagrams_locked_nested_0.stuff).__module__}.{type(test_states_diagrams_locked_nested_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    assert f'{type(test_states_diagrams_locked_nested_0.states).__module__}.{type(test_states_diagrams_locked_nested_0.states).__qualname__}' == 'builtins.list'
    assert len(test_states_diagrams_locked_nested_0.states) == 4
    assert test_states_diagrams_locked_nested_0.transitions == [{'trigger': 'walk', 'source': 'A', 'dest': 'B'}, {'trigger': 'run', 'source': 'B', 'dest': 'C'}, {'trigger': 'sprint', 'source': 'C', 'dest': 'D', 'conditions': 'is_fast'}, {'trigger': 'sprint', 'source': 'C', 'dest': 'B'}, {'trigger': 'reset', 'source': '*', 'dest': 'A'}]
    var_0.visit_alias(test_states_diagrams_locked_nested_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    test_transitions_0 = module_0.TestTransitions()
    test_states_diagrams_locked_nested_0 = module_0.TestStatesDiagramsLockedNested()
    var_0 = test_states_diagrams_locked_nested_0.test_nested_notebook()
    var_0.test_transition_custom_model()

@pytest.mark.xfail(strict=True)
def test_case_8():
    test_transitions_0 = module_0.TestTransitions()
    test_transitions_0.test_timeout_callbacks()

def test_case_9():
    test_transitions_0 = module_0.TestTransitions()
    var_0 = test_transitions_0.test_error()