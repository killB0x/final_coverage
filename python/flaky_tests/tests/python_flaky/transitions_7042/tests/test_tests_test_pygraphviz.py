# Automatically generated by Pynguin.
import pytest
import tests.test_pygraphviz as module_0

def test_case_0():
    pygraphviz_test_0 = module_0.PygraphvizTest()
    assert module_0.PygraphvizTest.use_pygraphviz is True

def test_case_1():
    pygraphviz_test_0 = module_0.PygraphvizTest()
    assert module_0.PygraphvizTest.use_pygraphviz is True
    var_0 = pygraphviz_test_0.test_if_multiple_edges_are_supported()

def test_case_2():
    test_pygraphviz_nested_0 = module_0.TestPygraphvizNested()
    var_0 = test_pygraphviz_nested_0.setUp()
    assert f'{type(test_pygraphviz_nested_0.stuff).__module__}.{type(test_pygraphviz_nested_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    assert f'{type(test_pygraphviz_nested_0.states).__module__}.{type(test_pygraphviz_nested_0.states).__qualname__}' == 'builtins.list'
    assert len(test_pygraphviz_nested_0.states) == 4
    assert test_pygraphviz_nested_0.transitions == [{'trigger': 'walk', 'source': 'A', 'dest': 'B'}, {'trigger': 'run', 'source': 'B', 'dest': 'C'}, {'trigger': 'sprint', 'source': 'C', 'dest': 'D', 'conditions': 'is_fast'}, {'trigger': 'sprint', 'source': 'C', 'dest': 'B'}, {'trigger': 'reset', 'source': '*', 'dest': 'A'}]

@pytest.mark.xfail(strict=True)
def test_case_3():
    pygraphviz_test_0 = module_0.PygraphvizTest()
    assert module_0.PygraphvizTest.use_pygraphviz is True
    var_0 = pygraphviz_test_0.setUp()
    assert f'{type(pygraphviz_test_0.stuff).__module__}.{type(pygraphviz_test_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    assert pygraphviz_test_0.states == ['A', 'B', 'C', 'D']
    assert pygraphviz_test_0.transitions == [{'trigger': 'walk', 'source': 'A', 'dest': 'B'}, {'trigger': 'run', 'source': 'B', 'dest': 'C'}, {'trigger': 'sprint', 'source': 'C', 'dest': 'D', 'conditions': 'is_fast'}, {'trigger': 'sprint', 'source': 'C', 'dest': 'B'}]
    pygraphviz_test_0.test_multi_model_state()

@pytest.mark.xfail(strict=True)
def test_case_4():
    pygraphviz_test_0 = module_0.PygraphvizTest()
    assert module_0.PygraphvizTest.use_pygraphviz is True
    test_pygraphviz_nested_0 = module_0.TestPygraphvizNested()
    pygraphviz_test_0.test_roi()

@pytest.mark.xfail(strict=True)
def test_case_5():
    pygraphviz_test_0 = module_0.PygraphvizTest()
    assert module_0.PygraphvizTest.use_pygraphviz is True
    var_0 = pygraphviz_test_0.test_before_after_callback_addition()
    pygraphviz_test_0.test_state_tags()