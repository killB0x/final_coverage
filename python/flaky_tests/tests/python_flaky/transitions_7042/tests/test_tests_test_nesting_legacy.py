# Automatically generated by Pynguin.
import pytest
import tests.test_nesting_legacy as module_0

def test_case_0():
    test_legacy_nested_enum_0 = module_0.TestLegacyNestedEnum()

def test_case_1():
    test_reuse_legacy_separator_default_0 = module_0.TestReuseLegacySeparatorDefault()
    assert module_0.TestReuseLegacySeparatorDefault.separator == '.'
    test_nested_legacy_separator_dot_0 = module_0.TestNestedLegacySeparatorDot()
    assert module_0.TestNestedLegacySeparatorDot.separator == '.'
    test_nested_legacy_separator_default_0 = module_0.TestNestedLegacySeparatorDefault()
    var_0 = test_nested_legacy_separator_dot_0.setUp()
    assert f'{type(test_nested_legacy_separator_dot_0.stuff).__module__}.{type(test_nested_legacy_separator_dot_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    test_legacy_nested_enum_0 = module_0.TestLegacyNestedEnum()

@pytest.mark.xfail(strict=True)
def test_case_2():
    test_nested_legacy_separator_default_0 = module_0.TestNestedLegacySeparatorDefault()
    list_0 = []
    var_0 = test_nested_legacy_separator_default_0.addCleanup(test_nested_legacy_separator_default_0, *list_0)
    var_1 = test_nested_legacy_separator_default_0.test_ordered_with_graph()
    test_nested_legacy_separator_slash_0 = module_0.TestNestedLegacySeparatorSlash()
    assert module_0.TestNestedLegacySeparatorSlash.separator == '/'
    var_1.test_transitioning()

@pytest.mark.xfail(strict=True)
def test_case_3():
    test_nested_legacy_0 = module_0.TestNestedLegacy()
    var_0 = test_nested_legacy_0.tearDown()
    list_0 = [test_nested_legacy_0]
    var_1 = test_nested_legacy_0.setUp()
    assert f'{type(test_nested_legacy_0.states).__module__}.{type(test_nested_legacy_0.states).__qualname__}' == 'builtins.list'
    assert len(test_nested_legacy_0.states) == 6
    assert f'{type(test_nested_legacy_0.stuff).__module__}.{type(test_nested_legacy_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    test_nested_legacy_0.deprecated_func(*list_0, **test_nested_legacy_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    test_reuse_legacy_separator_default_0 = module_0.TestReuseLegacySeparatorDefault()
    assert module_0.TestReuseLegacySeparatorDefault.separator == '.'
    var_0 = test_reuse_legacy_separator_default_0.setUp()
    assert f'{type(test_reuse_legacy_separator_default_0.stuff).__module__}.{type(test_reuse_legacy_separator_default_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    test_reuse_legacy_separator_default_0.deprecated_func()

@pytest.mark.xfail(strict=True)
def test_case_5():
    test_reuse_legacy_0 = module_0.TestReuseLegacy()
    var_0 = test_reuse_legacy_0.setUp()
    assert f'{type(test_reuse_legacy_0.states).__module__}.{type(test_reuse_legacy_0.states).__qualname__}' == 'builtins.list'
    assert len(test_reuse_legacy_0.states) == 6
    assert f'{type(test_reuse_legacy_0.stuff).__module__}.{type(test_reuse_legacy_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_reuse_legacy_0.test_reuse_self_reference()
    test_reuse_legacy_0.__call__()

@pytest.mark.xfail(strict=True)
def test_case_6():
    test_nested_legacy_0 = module_0.TestNestedLegacy()
    var_0 = test_nested_legacy_0.test_add_nested_state()
    module_0.TestNestedLegacySeparatorDot(test_nested_legacy_0)

def test_case_7():
    test_legacy_nested_enum_0 = module_0.TestLegacyNestedEnum()
    var_0 = test_legacy_nested_enum_0.setUp()
    var_1 = test_legacy_nested_enum_0.test_nested_enums()

def test_case_8():
    test_legacy_nested_enum_0 = module_0.TestLegacyNestedEnum()
    var_0 = test_legacy_nested_enum_0.test_add_enum_transition()
    var_1 = test_legacy_nested_enum_0.setUp()
    var_2 = test_legacy_nested_enum_0.test_nested_enums()

@pytest.mark.xfail(strict=True)
def test_case_9():
    test_nested_legacy_0 = module_0.TestNestedLegacy()
    test_nested_legacy_0.test_init_machine_with_nested_states()

@pytest.mark.xfail(strict=True)
def test_case_10():
    test_reuse_legacy_0 = module_0.TestReuseLegacy()
    test_nested_legacy_separator_slash_0 = module_0.TestNestedLegacySeparatorSlash()
    assert module_0.TestNestedLegacySeparatorSlash.separator == '/'
    var_0 = test_reuse_legacy_0.setUp()
    assert f'{type(test_reuse_legacy_0.states).__module__}.{type(test_reuse_legacy_0.states).__qualname__}' == 'builtins.list'
    assert len(test_reuse_legacy_0.states) == 6
    assert f'{type(test_reuse_legacy_0.stuff).__module__}.{type(test_reuse_legacy_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    test_reuse_legacy_separator_default_0 = module_0.TestReuseLegacySeparatorDefault()
    assert module_0.TestReuseLegacySeparatorDefault.separator == '.'
    test_reuse_legacy_separator_default_0.debug()

@pytest.mark.xfail(strict=True)
def test_case_11():
    test_nested_legacy_0 = module_0.TestNestedLegacy()
    var_0 = test_nested_legacy_0.test_repr()
    test_nested_legacy_0.test_transitioning()

@pytest.mark.xfail(strict=True)
def test_case_12():
    test_nested_legacy_0 = module_0.TestNestedLegacy()
    var_0 = test_nested_legacy_0.test_nested_definitions()
    test_nested_legacy_0.assertRegex(test_nested_legacy_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    test_nested_legacy_0 = module_0.TestNestedLegacy()
    var_0 = test_nested_legacy_0.test_child_condition_persistence()
    test_reuse_legacy_0 = module_0.TestReuseLegacy()
    test_nested_legacy_0.test___getattr___and_identify_callback()

@pytest.mark.xfail(strict=True)
def test_case_14():
    test_legacy_nested_enum_0 = module_0.TestLegacyNestedEnum()
    var_0 = test_legacy_nested_enum_0.test_add_nested_enums_as_nested_state()
    var_1 = test_legacy_nested_enum_0.setUp()
    var_2 = test_legacy_nested_enum_0.test_nested_enums()
    test_legacy_nested_enum_0.test_function_callbacks()

@pytest.mark.xfail(strict=True)
def test_case_15():
    test_nested_legacy_0 = module_0.TestNestedLegacy()
    test_nested_legacy_0.test_add_custom_state()

def test_case_16():
    test_legacy_nested_enum_0 = module_0.TestLegacyNestedEnum()
    var_0 = test_legacy_nested_enum_0.setUp()
    var_1 = test_legacy_nested_enum_0.test_nested_enums()
    var_2 = test_legacy_nested_enum_0.test_enum_initial()
    var_3 = test_legacy_nested_enum_0.test_nested_enums()