# Automatically generated by Pynguin.
import tests.test_reuse as module_0

def test_case_0():
    test_reuse_0 = module_0.TestReuse()

def test_case_1():
    test_reuse_separator_dot_0 = module_0.TestReuseSeparatorDot()
    assert module_0.TestReuseSeparatorDot.separator == '.'
    var_0 = test_reuse_separator_dot_0.setUp()
    assert f'{type(test_reuse_separator_dot_0.states).__module__}.{type(test_reuse_separator_dot_0.states).__qualname__}' == 'builtins.list'
    assert len(test_reuse_separator_dot_0.states) == 6
    assert f'{type(test_reuse_separator_dot_0.stuff).__module__}.{type(test_reuse_separator_dot_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_reuse_separator_dot_0.test_wrong_nesting()

def test_case_2():
    test_reuse_0 = module_0.TestReuse()
    var_0 = test_reuse_0.setUp()
    assert f'{type(test_reuse_0.states).__module__}.{type(test_reuse_0.states).__qualname__}' == 'builtins.list'
    assert len(test_reuse_0.states) == 6
    assert f'{type(test_reuse_0.stuff).__module__}.{type(test_reuse_0.stuff).__qualname__}' == 'tests.utils.Stuff'

def test_case_3():
    test_reuse_0 = module_0.TestReuse()
    var_0 = test_reuse_0.setUp()
    assert f'{type(test_reuse_0.states).__module__}.{type(test_reuse_0.states).__qualname__}' == 'builtins.list'
    assert len(test_reuse_0.states) == 6
    assert f'{type(test_reuse_0.stuff).__module__}.{type(test_reuse_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_reuse_0.test_blueprint_remap()
    var_2 = test_reuse_0.test_blueprint_reuse()
    var_3 = test_reuse_0.test_reuse_prepare()
    var_4 = test_reuse_0.test_example_reuse()

def test_case_4():
    test_reuse_0 = module_0.TestReuse()
    var_0 = test_reuse_0.setUp()
    assert f'{type(test_reuse_0.states).__module__}.{type(test_reuse_0.states).__qualname__}' == 'builtins.list'
    assert len(test_reuse_0.states) == 6
    assert f'{type(test_reuse_0.stuff).__module__}.{type(test_reuse_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_reuse_0.test_reuse_self_reference()
    var_2 = test_reuse_0.test_example_reuse()

def test_case_5():
    test_reuse_0 = module_0.TestReuse()
    var_0 = test_reuse_0.setUp()
    assert f'{type(test_reuse_0.states).__module__}.{type(test_reuse_0.states).__qualname__}' == 'builtins.list'
    assert len(test_reuse_0.states) == 6
    assert f'{type(test_reuse_0.stuff).__module__}.{type(test_reuse_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_reuse_0.test_blueprint_remap()
    var_2 = test_reuse_0.test_blueprint_reuse()
    var_3 = test_reuse_0.test_example_reuse()
    var_4 = test_reuse_0.test_blueprint_initial_false()

def test_case_6():
    test_reuse_0 = module_0.TestReuse()
    var_0 = test_reuse_0.setUp()
    assert f'{type(test_reuse_0.states).__module__}.{type(test_reuse_0.states).__qualname__}' == 'builtins.list'
    assert len(test_reuse_0.states) == 6
    assert f'{type(test_reuse_0.stuff).__module__}.{type(test_reuse_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_reuse_0.test_example_reuse()

def test_case_7():
    test_reuse_0 = module_0.TestReuse()
    var_0 = test_reuse_0.setUp()
    assert f'{type(test_reuse_0.states).__module__}.{type(test_reuse_0.states).__qualname__}' == 'builtins.list'
    assert len(test_reuse_0.states) == 6
    assert f'{type(test_reuse_0.stuff).__module__}.{type(test_reuse_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_reuse_0.test_blueprint_remap()

def test_case_8():
    test_reuse_0 = module_0.TestReuse()
    var_0 = test_reuse_0.setUp()
    assert f'{type(test_reuse_0.states).__module__}.{type(test_reuse_0.states).__qualname__}' == 'builtins.list'
    assert len(test_reuse_0.states) == 6
    assert f'{type(test_reuse_0.stuff).__module__}.{type(test_reuse_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_reuse_0.test_blueprint_reuse()

def test_case_9():
    test_reuse_separator_base_0 = module_0.TestReuseSeparatorBase()
    assert module_0.TestReuseSeparatorBase.separator == '_'
    var_0 = test_reuse_separator_base_0.setUp()
    assert f'{type(test_reuse_separator_base_0.states).__module__}.{type(test_reuse_separator_base_0.states).__qualname__}' == 'builtins.list'
    assert len(test_reuse_separator_base_0.states) == 6
    assert f'{type(test_reuse_separator_base_0.stuff).__module__}.{type(test_reuse_separator_base_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_reuse_separator_base_0.test_wrong_nesting()