# Automatically generated by Pynguin.
import pytest
import transitions.extensions.nesting_legacy as module_0
import transitions.core as module_1

def test_case_0():
    str_0 = '_'
    with pytest.raises(AttributeError):
        module_0.NestedState(str_0, str_0, parent=str_0)

def test_case_1():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'

def test_case_2():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.is_state(hierarchical_machine_0, hierarchical_machine_0, hierarchical_machine_0)
    assert var_0 is False

def test_case_3():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0 = module_0.NestedState(hierarchical_machine_0, var_0, parent=var_0)
    assert len(var_0.children) == 1
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert f'{type(nested_state_0.on_enter).__module__}.{type(nested_state_0.on_enter).__qualname__}' == 'builtins.list'
    assert len(nested_state_0.on_enter) == 1
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    var_1 = nested_state_0.is_substate_of(var_0)
    assert var_1 is False

def test_case_4():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0 = module_0.NestedState(hierarchical_machine_0, var_0, parent=var_0)
    assert len(var_0.children) == 1
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert f'{type(nested_state_0.on_enter).__module__}.{type(nested_state_0.on_enter).__qualname__}' == 'builtins.list'
    assert len(nested_state_0.on_enter) == 1
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    var_1 = var_0.exit_nested(hierarchical_machine_0, nested_state_0)
    assert var_1 == 1
    var_2 = nested_state_0.is_substate_of(hierarchical_machine_0)
    assert var_2 is True

@pytest.mark.xfail(strict=True)
def test_case_5():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0 = module_0.NestedState(hierarchical_machine_0, var_0, ignore_invalid_triggers=var_0, initial=hierarchical_machine_0)
    nested_state_0.exit_nested(nested_state_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    nested_state_0 = module_0.NestedState(dict_0, dict_0, ignore_invalid_triggers=dict_0)
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers == {}
    assert nested_state_0.on_enter == []
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.initial).__module__}.{type(module_0.NestedState.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.name).__module__}.{type(module_0.NestedState.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0.__deepcopy__(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    nested_transition_0 = module_0.NestedTransition(none_type_0, none_type_0, none_type_0)
    nested_transition_0.execute(nested_transition_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    nested_event_0 = module_0.NestedEvent(none_type_0, none_type_0)
    bytes_0 = b'\x14U\xd1\x85\xfa\x96\x9d['
    nested_transition_0 = module_0.NestedTransition(nested_event_0, bytes_0, before=none_type_0, prepare=nested_event_0)
    nested_transition_0.execute(none_type_0)

def test_case_9():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.is_state(hierarchical_machine_0, hierarchical_machine_0)
    assert var_0 is False
    var_1 = hierarchical_machine_0.get_nested_state_names()

@pytest.mark.xfail(strict=True)
def test_case_10():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    hierarchical_machine_0.add_states(hierarchical_machine_0, ignore_invalid_triggers=hierarchical_machine_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    hierarchical_machine_0.on_exit(hierarchical_machine_0, hierarchical_machine_0)

def test_case_12():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.add_model(hierarchical_machine_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    hierarchical_machine_0.add_states(hierarchical_machine_0)

def test_case_14():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_triggers()

@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    var_1 = var_0.is_substate_of(none_type_0)
    assert var_1 is False
    var_2 = hierarchical_machine_0.get_transitions()
    var_3 = hierarchical_machine_0.get_nested_state_names()
    nested_state_0 = module_0.NestedState(none_type_0)
    hierarchical_machine_1 = module_0.HierarchicalMachine(**var_3)
    assert f'{type(hierarchical_machine_1).__module__}.{type(hierarchical_machine_1).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_1.states).__module__}.{type(hierarchical_machine_1.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_1.states) == 1
    assert f'{type(hierarchical_machine_1.events).__module__}.{type(hierarchical_machine_1.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_1.events) == 1
    assert hierarchical_machine_1.send_event is False
    assert hierarchical_machine_1.auto_transitions is True
    assert hierarchical_machine_1.ignore_invalid_triggers is None
    assert hierarchical_machine_1.name == ''
    assert hierarchical_machine_1.model_attribute == 'state'
    assert f'{type(hierarchical_machine_1.models).__module__}.{type(hierarchical_machine_1.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_1.models) == 1
    assert hierarchical_machine_1.state == 'initial'
    var_4 = nested_state_0.enter_nested(nested_state_0)
    var_5 = nested_state_0.is_substate_of(nested_state_0)
    assert var_5 is False
    var_6 = hierarchical_machine_0.to_state(hierarchical_machine_0, none_type_0)
    hierarchical_machine_2 = module_0.HierarchicalMachine()
    hierarchical_machine_2.on_enter(var_5, nested_state_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    hierarchical_machine_1 = module_0.HierarchicalMachine()
    assert hierarchical_machine_1.state == 'initial'
    nested_state_0 = module_0.NestedState(none_type_0)
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.resolve_callable(none_type_0, none_type_0)
    var_1 = hierarchical_machine_0.to_state(hierarchical_machine_0, none_type_0)
    nested_state_0.exit_nested(none_type_0, nested_state_0)

def test_case_17():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0 = module_0.NestedState(hierarchical_machine_0, var_0, parent=var_0)
    assert len(var_0.children) == 1
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert f'{type(nested_state_0.on_enter).__module__}.{type(nested_state_0.on_enter).__qualname__}' == 'builtins.list'
    assert len(nested_state_0.on_enter) == 1
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    var_1 = var_0.exit_nested(hierarchical_machine_0, nested_state_0)
    assert var_1 == 1
    var_2 = var_1.__str__()
    assert var_2 == '1'
    var_3 = nested_state_0.is_substate_of(var_2)
    assert var_3 is False
    var_4 = var_0.enter_nested(hierarchical_machine_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = True
    none_type_0 = None
    nested_state_0 = module_0.NestedState(bool_0, bool_0, initial=none_type_0)
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert nested_state_0.on_enter == [True]
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.initial).__module__}.{type(module_0.NestedState.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.name).__module__}.{type(module_0.NestedState.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0.exit_nested(none_type_0, nested_state_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'D;\\!D>'
    list_0 = [str_0, str_0, str_0]
    module_0.HierarchicalMachine(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.add_model(hierarchical_machine_0)
    var_1 = hierarchical_machine_0.is_state(hierarchical_machine_0, hierarchical_machine_0, hierarchical_machine_0)
    assert var_1 is False
    hierarchical_machine_0.add_states(var_1, ignore_invalid_triggers=var_0)

def test_case_21():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_nested_state_names()
    var_1 = hierarchical_machine_0.get_triggers(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = False
    nested_state_0 = module_0.NestedState(bool_0, bool_0, ignore_invalid_triggers=bool_0)
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is False
    assert nested_state_0.on_enter == []
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.initial).__module__}.{type(module_0.NestedState.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.name).__module__}.{type(module_0.NestedState.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0.enter_nested(nested_state_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = True
    nested_state_0 = module_0.NestedState(bool_0, bool_0, ignore_invalid_triggers=bool_0)
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is True
    assert nested_state_0.on_enter == [True]
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.initial).__module__}.{type(module_0.NestedState.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.name).__module__}.{type(module_0.NestedState.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    var_0 = nested_state_0.enter_nested(nested_state_0, bool_0)
    nested_event_0 = module_0.NestedEvent(nested_state_0, nested_state_0)
    bool_0.callbacks(bool_0, nested_event_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    var_1 = var_0.is_substate_of(var_0)
    assert var_1 is False
    var_2 = hierarchical_machine_0.get_nested_state_names()
    nested_state_0 = module_0.NestedState(var_0)
    hierarchical_machine_1 = module_0.HierarchicalMachine(**var_2)
    assert f'{type(hierarchical_machine_1).__module__}.{type(hierarchical_machine_1).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_1.states).__module__}.{type(hierarchical_machine_1.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_1.states) == 1
    assert f'{type(hierarchical_machine_1.events).__module__}.{type(hierarchical_machine_1.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_1.events) == 1
    assert hierarchical_machine_1.send_event is False
    assert hierarchical_machine_1.auto_transitions is True
    assert hierarchical_machine_1.ignore_invalid_triggers is None
    assert hierarchical_machine_1.name == ''
    assert hierarchical_machine_1.model_attribute == 'state'
    assert f'{type(hierarchical_machine_1.models).__module__}.{type(hierarchical_machine_1.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_1.models) == 1
    assert hierarchical_machine_1.state == 'initial'
    var_3 = nested_state_0.enter_nested(nested_state_0)
    var_4 = hierarchical_machine_0.get_triggers(*var_2)
    hierarchical_machine_1.add_states(var_2, var_2, hierarchical_machine_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    none_type_0 = None
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    hierarchical_machine_1 = module_0.HierarchicalMachine()
    assert hierarchical_machine_1.state == 'initial'
    var_0 = hierarchical_machine_0.add_model(hierarchical_machine_1, none_type_0)
    nested_state_0 = module_0.NestedState(none_type_0)
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    var_1 = nested_state_0.is_substate_of(nested_state_0)
    assert var_1 is False
    var_2 = hierarchical_machine_0.to_state(hierarchical_machine_0, none_type_0)
    hierarchical_machine_2 = module_0.HierarchicalMachine()
    var_3 = nested_state_0.__repr__()
    hierarchical_machine_2.add_states(var_1)

def test_case_26():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    var_1 = var_0.__repr__()
    var_2 = hierarchical_machine_0.add_states(var_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    dict_0 = {}
    nested_transition_0 = module_0.NestedTransition(dict_0, dict_0)
    nested_transition_0.__deepcopy__(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_transitions()
    var_1 = hierarchical_machine_0.get_nested_state_names()
    hierarchical_machine_1 = module_0.HierarchicalMachine(**var_1)
    assert f'{type(hierarchical_machine_1).__module__}.{type(hierarchical_machine_1).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_1.states).__module__}.{type(hierarchical_machine_1.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_1.states) == 1
    assert f'{type(hierarchical_machine_1.events).__module__}.{type(hierarchical_machine_1.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_1.events) == 1
    assert hierarchical_machine_1.send_event is False
    assert hierarchical_machine_1.auto_transitions is True
    assert hierarchical_machine_1.ignore_invalid_triggers is None
    assert hierarchical_machine_1.name == ''
    assert hierarchical_machine_1.model_attribute == 'state'
    assert f'{type(hierarchical_machine_1.models).__module__}.{type(hierarchical_machine_1.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_1.models) == 1
    assert hierarchical_machine_1.state == 'initial'
    var_0.add_state(*var_1)

@pytest.mark.xfail(strict=True)
def test_case_29():
    none_type_0 = None
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_transitions()
    var_1 = hierarchical_machine_0.get_nested_state_names()
    nested_state_0 = module_0.NestedState(none_type_0)
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    hierarchical_machine_1 = module_0.HierarchicalMachine(**var_1)
    assert f'{type(hierarchical_machine_1).__module__}.{type(hierarchical_machine_1).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_1.states).__module__}.{type(hierarchical_machine_1.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_1.states) == 1
    assert f'{type(hierarchical_machine_1.events).__module__}.{type(hierarchical_machine_1.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_1.events) == 1
    assert hierarchical_machine_1.send_event is False
    assert hierarchical_machine_1.auto_transitions is True
    assert hierarchical_machine_1.ignore_invalid_triggers is None
    assert hierarchical_machine_1.name == ''
    assert hierarchical_machine_1.model_attribute == 'state'
    assert f'{type(hierarchical_machine_1.models).__module__}.{type(hierarchical_machine_1.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_1.models) == 1
    assert hierarchical_machine_1.state == 'initial'
    var_2 = nested_state_0.enter_nested(nested_state_0)
    var_3 = nested_state_0.is_substate_of(nested_state_0)
    assert var_3 is False
    var_4 = hierarchical_machine_0.to_state(hierarchical_machine_0, none_type_0)
    nested_transition_0 = module_0.NestedTransition(var_2, nested_state_0, none_type_0, var_4, hierarchical_machine_1, prepare=hierarchical_machine_0)
    hierarchical_machine_2 = module_0.HierarchicalMachine()
    var_5 = nested_state_0.__repr__()
    var_6 = hierarchical_machine_0.get_triggers(*var_1)
    var_7 = hierarchical_machine_0.add_model(var_2)
    hierarchical_machine_2.add_transition(var_5, var_5, var_6, unless=none_type_0, before=nested_transition_0, prepare=var_2, **var_1)

@pytest.mark.xfail(strict=True)
def test_case_30():
    none_type_0 = None
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    var_1 = var_0.is_substate_of(none_type_0)
    assert var_1 is False
    var_2 = hierarchical_machine_0.get_nested_state_names()
    nested_state_0 = module_0.NestedState(var_2, none_type_0)
    hierarchical_machine_1 = module_0.HierarchicalMachine()
    int_0 = -1766
    nested_state_0.enter_nested(hierarchical_machine_1, int_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    none_type_0 = None
    nested_state_0 = module_0.NestedState(none_type_0)
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert nested_state_0.on_enter == []
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.initial).__module__}.{type(module_0.NestedState.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.name).__module__}.{type(module_0.NestedState.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    var_0 = nested_state_0.enter_nested(none_type_0)
    float_0 = 2399.54
    nested_state_1 = module_0.NestedState(float_0, ignore_invalid_triggers=float_0)
    assert nested_state_1.children == []
    list_0 = [nested_state_1, nested_state_1, nested_state_1, nested_state_1]
    module_0.HierarchicalMachine(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_32():
    none_type_0 = None
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    var_1 = var_0.is_substate_of(none_type_0)
    assert var_1 is False
    var_2 = hierarchical_machine_0.get_transitions()
    var_3 = hierarchical_machine_0.get_nested_state_names()
    nested_state_0 = module_0.NestedState(none_type_0)
    hierarchical_machine_1 = module_0.HierarchicalMachine(**var_3)
    assert f'{type(hierarchical_machine_1).__module__}.{type(hierarchical_machine_1).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_1.states).__module__}.{type(hierarchical_machine_1.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_1.states) == 1
    assert f'{type(hierarchical_machine_1.events).__module__}.{type(hierarchical_machine_1.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_1.events) == 1
    assert hierarchical_machine_1.send_event is False
    assert hierarchical_machine_1.auto_transitions is True
    assert hierarchical_machine_1.ignore_invalid_triggers is None
    assert hierarchical_machine_1.name == ''
    assert hierarchical_machine_1.model_attribute == 'state'
    assert f'{type(hierarchical_machine_1.models).__module__}.{type(hierarchical_machine_1.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_1.models) == 1
    assert hierarchical_machine_1.state == 'initial'
    var_4 = nested_state_0.enter_nested(nested_state_0)
    var_5 = nested_state_0.is_substate_of(nested_state_0)
    assert var_5 is False
    var_6 = hierarchical_machine_0.to_state(hierarchical_machine_0, none_type_0)
    nested_transition_0 = module_0.NestedTransition(var_4, nested_state_0, none_type_0, var_6, hierarchical_machine_1, prepare=hierarchical_machine_0)
    hierarchical_machine_2 = module_0.HierarchicalMachine()
    var_7 = nested_transition_0.__deepcopy__(var_3)
    assert len(hierarchical_machine_0.states) == 6
    assert len(var_3) == 6
    assert var_7.source is None
    assert f'{type(var_7.dest).__module__}.{type(var_7.dest).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert f'{type(var_7.prepare).__module__}.{type(var_7.prepare).__qualname__}' == 'builtins.list'
    assert len(var_7.prepare) == 1
    assert f'{type(var_7.before).__module__}.{type(var_7.before).__qualname__}' == 'builtins.list'
    assert len(var_7.before) == 1
    assert var_7.after == []
    assert var_7.conditions == []
    hierarchical_machine_0.get_triggers(*var_3)

@pytest.mark.xfail(strict=True)
def test_case_33():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0 = module_0.NestedState(hierarchical_machine_0, var_0, var_0, parent=var_0)
    assert len(var_0.children) == 1
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert f'{type(nested_state_0.on_enter).__module__}.{type(nested_state_0.on_enter).__qualname__}' == 'builtins.list'
    assert len(nested_state_0.on_enter) == 1
    assert f'{type(nested_state_0.on_exit).__module__}.{type(nested_state_0.on_exit).__qualname__}' == 'builtins.list'
    assert len(nested_state_0.on_exit) == 1
    assert nested_state_0.children == []
    nested_state_0.exit_nested(hierarchical_machine_0, hierarchical_machine_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0 = module_0.NestedState(hierarchical_machine_0, var_0, var_0, parent=var_0)
    assert len(var_0.children) == 1
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert f'{type(nested_state_0.on_enter).__module__}.{type(nested_state_0.on_enter).__qualname__}' == 'builtins.list'
    assert len(nested_state_0.on_enter) == 1
    assert f'{type(nested_state_0.on_exit).__module__}.{type(nested_state_0.on_exit).__qualname__}' == 'builtins.list'
    assert len(nested_state_0.on_exit) == 1
    assert nested_state_0.children == []
    var_1 = module_1.listify(hierarchical_machine_0)
    nested_state_0.__repr__()

@pytest.mark.xfail(strict=True)
def test_case_35():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0 = module_0.NestedState(hierarchical_machine_0, var_0, parent=var_0)
    assert len(var_0.children) == 1
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert f'{type(nested_state_0.on_enter).__module__}.{type(nested_state_0.on_enter).__qualname__}' == 'builtins.list'
    assert len(nested_state_0.on_enter) == 1
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    var_1 = var_0.exit_nested(hierarchical_machine_0, nested_state_0)
    assert var_1 == 1
    hierarchical_machine_0.add_states(var_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0 = module_0.NestedState(hierarchical_machine_0, var_0, parent=var_0)
    assert len(var_0.children) == 1
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert f'{type(nested_state_0.on_enter).__module__}.{type(nested_state_0.on_enter).__qualname__}' == 'builtins.list'
    assert len(nested_state_0.on_enter) == 1
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    nested_state_0.exit_nested(nested_state_0, var_0)

def test_case_37():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0 = module_0.NestedState(hierarchical_machine_0, var_0, parent=var_0)
    assert len(var_0.children) == 1
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert f'{type(nested_state_0.on_enter).__module__}.{type(nested_state_0.on_enter).__qualname__}' == 'builtins.list'
    assert len(nested_state_0.on_enter) == 1
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    var_1 = var_0.exit_nested(hierarchical_machine_0, nested_state_0)
    assert var_1 == 1

def test_case_38():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0 = module_0.NestedState(hierarchical_machine_0, var_0, parent=var_0)
    assert len(var_0.children) == 1
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert f'{type(nested_state_0.on_enter).__module__}.{type(nested_state_0.on_enter).__qualname__}' == 'builtins.list'
    assert len(nested_state_0.on_enter) == 1
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    nested_state_1 = module_0.NestedState(var_0, parent=nested_state_0)
    assert len(nested_state_0.children) == 1
    var_1 = nested_state_0.exit_nested(hierarchical_machine_0, nested_state_1)
    assert var_1 == 2

@pytest.mark.xfail(strict=True)
def test_case_39():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0 = module_0.NestedState(hierarchical_machine_0, var_0, parent=var_0)
    assert len(var_0.children) == 1
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert f'{type(nested_state_0.on_enter).__module__}.{type(nested_state_0.on_enter).__qualname__}' == 'builtins.list'
    assert len(nested_state_0.on_enter) == 1
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    nested_state_1 = module_0.NestedState(var_0, parent=nested_state_0)
    assert len(nested_state_0.children) == 1
    var_1 = nested_state_0.exit_nested(hierarchical_machine_0, nested_state_1)
    assert var_1 == 2
    var_2 = var_0.is_substate_of(nested_state_0)
    assert var_2 is False
    var_3 = nested_state_1.is_substate_of(hierarchical_machine_0)
    assert var_3 is True
    var_1.to_state(var_3, nested_state_1)

@pytest.mark.xfail(strict=True)
def test_case_40():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert var_0.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0 = module_0.NestedState(hierarchical_machine_0, var_0, parent=var_0)
    assert len(var_0.children) == 1
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert f'{type(nested_state_0.on_enter).__module__}.{type(nested_state_0.on_enter).__qualname__}' == 'builtins.list'
    assert len(nested_state_0.on_enter) == 1
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    nested_state_1 = module_0.NestedState(var_0, parent=nested_state_0)
    assert len(nested_state_0.children) == 1
    var_1 = nested_state_0.exit_nested(hierarchical_machine_0, nested_state_1)
    assert var_1 == 2
    var_2 = var_0.exit_nested(var_0, nested_state_1)
    assert var_2 == 1
    complex_0 = (1837.4+1164.509088j)
    var_3 = nested_state_0.is_substate_of(complex_0)
    assert var_3 is False
    hierarchical_machine_0.add_state()

@pytest.mark.xfail(strict=True)
def test_case_41():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    var_0 = hierarchical_machine_0.get_triggers()
    var_1 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert var_1.ignore_invalid_triggers is None
    assert var_1.on_enter == []
    assert var_1.on_exit == []
    assert var_1.children == []
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.value).__module__}.{type(module_0.NestedState.value).__qualname__}' == 'builtins.property'
    nested_state_0 = module_0.NestedState(hierarchical_machine_0, var_1, parent=var_1)
    assert len(var_1.children) == 1
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert f'{type(nested_state_0.on_enter).__module__}.{type(nested_state_0.on_enter).__qualname__}' == 'builtins.list'
    assert len(nested_state_0.on_enter) == 1
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    nested_state_1 = module_0.NestedState(var_1, parent=nested_state_0)
    assert len(nested_state_0.children) == 1
    var_2 = nested_state_0.exit_nested(hierarchical_machine_0, nested_state_1)
    assert var_2 == 2
    complex_0 = (1837.4+1164.509088j)
    var_3 = nested_state_0.is_substate_of(complex_0)
    assert var_3 is False
    var_4 = var_3.__repr__()
    assert var_4 == 'False'
    var_5 = nested_state_1.is_substate_of(var_3)
    assert var_5 is False
    var_2.get_triggers()

@pytest.mark.xfail(strict=True)
def test_case_42():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    nested_event_0 = module_0.NestedEvent(hierarchical_machine_0, hierarchical_machine_0)
    nested_event_0.trigger(hierarchical_machine_0)

@pytest.mark.xfail(strict=True)
def test_case_43():
    hierarchical_machine_0 = module_0.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting_legacy.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    assert f'{type(module_0.HierarchicalMachine.initial).__module__}.{type(module_0.HierarchicalMachine.initial).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = hierarchical_machine_0.to_state(hierarchical_machine_0, none_type_0)
    var_1 = hierarchical_machine_0.get_triggers()
    var_2 = hierarchical_machine_0.get_model_state(hierarchical_machine_0)
    assert module_0.NestedState.separator == '_'
    assert f'{type(module_0.NestedState.parent).__module__}.{type(module_0.NestedState.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NestedState.level).__module__}.{type(module_0.NestedState.level).__qualname__}' == 'builtins.property'
    nested_state_0 = module_0.NestedState(hierarchical_machine_0, var_2, parent=var_2)
    assert len(var_2.children) == 1
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting_legacy.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert f'{type(nested_state_0.on_enter).__module__}.{type(nested_state_0.on_enter).__qualname__}' == 'builtins.list'
    assert len(nested_state_0.on_enter) == 1
    assert nested_state_0.on_exit == []
    assert nested_state_0.children == []
    nested_state_1 = module_0.NestedState(var_2, var_2, parent=var_2)
    assert len(var_2.children) == 2
    nested_state_2 = module_0.NestedState(var_0, ignore_invalid_triggers=none_type_0, parent=none_type_0)
    nested_state_3 = module_0.NestedState(var_0, none_type_0, parent=nested_state_2)
    assert len(nested_state_2.children) == 1
    nested_state_3.exit_nested(none_type_0, nested_state_1)