# Automatically generated by Pynguin.
import pytest
import tests.test_markup as module_0

def test_case_0():
    test_rep_0 = module_0.TestRep()

@pytest.mark.xfail(strict=True)
def test_case_1():
    simple_model_0 = module_0.SimpleModel()
    var_0 = simple_model_0.after_func()
    var_0.assertIn(simple_model_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    test_markup_hierarchical_machine_0 = module_0.TestMarkupHierarchicalMachine()
    test_rep_0 = module_0.TestRep()
    var_0 = test_rep_0.test_rep_string()
    str_0 = 'Returning graph of the first model. In future releases, this method will return a combined graph of all models.'
    str_1 = '\rN'
    dict_0 = {str_0: test_rep_0, str_0: test_rep_0, str_1: str_0, str_1: str_0}
    var_1 = test_rep_0.addCleanup(test_rep_0)
    test_rep_1 = module_0.TestRep()
    var_1.assert_called_with(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    test_rep_0 = module_0.TestRep()
    var_0 = test_rep_0.test_rep_partial_no_args_no_kwargs()
    var_0.attach_mock(var_0, test_rep_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    test_rep_0 = module_0.TestRep()
    var_0 = test_rep_0.test_rep_callable_class()
    var_0.__delattr__(test_rep_0, test_rep_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    test_markup_machine_0 = module_0.TestMarkupMachine()
    test_markup_machine_0.test_conditions_unless()

@pytest.mark.xfail(strict=True)
def test_case_6():
    test_markup_hierarchical_machine_0 = module_0.TestMarkupHierarchicalMachine()
    var_0 = test_markup_hierarchical_machine_0.setUp()
    assert len(test_markup_hierarchical_machine_0.states) == 3
    assert test_markup_hierarchical_machine_0.transitions == [{'trigger': 'walk', 'source': 'A', 'dest': 'C_1'}, {'trigger': 'run', 'source': 'C_1', 'dest': 'C_3_a'}, {'trigger': 'sprint', 'source': 'C', 'dest': 'B'}]
    assert test_markup_hierarchical_machine_0.num_auto == 27
    var_1 = test_markup_hierarchical_machine_0.test_auto_transitions()
    assert test_markup_hierarchical_machine_0.num_trans == 4
    list_0 = [test_markup_hierarchical_machine_0, test_markup_hierarchical_machine_0, test_markup_hierarchical_machine_0, test_markup_hierarchical_machine_0]
    test_markup_hierarchical_machine_0.deprecated_func(*list_0)

def test_case_7():
    test_markup_hierarchical_machine_0 = module_0.TestMarkupHierarchicalMachine()
    var_0 = test_markup_hierarchical_machine_0.setUp()
    assert len(test_markup_hierarchical_machine_0.states) == 3
    assert test_markup_hierarchical_machine_0.transitions == [{'trigger': 'walk', 'source': 'A', 'dest': 'C_1'}, {'trigger': 'run', 'source': 'C_1', 'dest': 'C_3_a'}, {'trigger': 'sprint', 'source': 'C', 'dest': 'B'}]
    assert test_markup_hierarchical_machine_0.num_auto == 27
    var_1 = test_markup_hierarchical_machine_0.test_markup_self()

@pytest.mark.xfail(strict=True)
def test_case_8():
    test_rep_0 = module_0.TestRep()
    var_0 = test_rep_0.test_rep_partial_with_args()
    var_0.add_transition(test_rep_0, var_0, test_rep_0, prepare=test_rep_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    test_rep_0 = module_0.TestRep()
    var_0 = test_rep_0.test_rep_partial_with_kwargs()
    test_markup_machine_enum_0 = module_0.TestMarkupMachineEnum()
    var_1 = test_rep_0.countTestCases()
    var_1.test_rep_string()

@pytest.mark.xfail(strict=True)
def test_case_10():
    test_rep_0 = module_0.TestRep()
    var_0 = test_rep_0.addTypeEqualityFunc(test_rep_0, test_rep_0)
    var_1 = test_rep_0.setUp()
    var_2 = test_rep_0.setUp()
    var_3 = test_rep_0.assertEqual(test_rep_0, test_rep_0)
    var_4 = test_rep_0.test_rep_partial_with_args_and_kwargs()
    var_4.after_func()

def test_case_11():
    test_markup_machine_0 = module_0.TestMarkupMachine()
    var_0 = test_markup_machine_0.setUp()
    assert test_markup_machine_0.states == ['A', 'B', 'C', 'D']
    assert test_markup_machine_0.transitions == [{'trigger': 'walk', 'source': 'A', 'dest': 'B'}, {'trigger': 'run', 'source': 'B', 'dest': 'C'}, {'trigger': 'sprint', 'source': 'C', 'dest': 'D'}]
    assert test_markup_machine_0.num_trans == 3
    assert test_markup_machine_0.num_auto == 16
    var_1 = test_markup_machine_0.test_markup_model()
    test_markup_machine_1 = module_0.TestMarkupMachine()
    test_markup_hierarchical_machine_0 = module_0.TestMarkupHierarchicalMachine()
    var_2 = test_markup_hierarchical_machine_0.setUp()
    test_markup_machine_enum_0 = module_0.TestMarkupMachineEnum()
    var_3 = test_markup_machine_enum_0.setUp()
    var_4 = test_markup_machine_enum_0.test_markup_self()

def test_case_12():
    test_markup_machine_0 = module_0.TestMarkupMachine()
    test_markup_hierarchical_machine_0 = module_0.TestMarkupHierarchicalMachine()
    var_0 = test_markup_hierarchical_machine_0.setUp()
    assert len(test_markup_hierarchical_machine_0.states) == 3
    assert test_markup_hierarchical_machine_0.transitions == [{'trigger': 'walk', 'source': 'A', 'dest': 'C_1'}, {'trigger': 'run', 'source': 'C_1', 'dest': 'C_3_a'}, {'trigger': 'sprint', 'source': 'C', 'dest': 'B'}]
    assert test_markup_hierarchical_machine_0.num_auto == 27
    var_1 = test_markup_hierarchical_machine_0.test_markup_self()
    var_2 = test_markup_hierarchical_machine_0.test_nested_definitions()

def test_case_13():
    test_markup_machine_0 = module_0.TestMarkupMachine()
    var_0 = test_markup_machine_0.setUp()
    assert test_markup_machine_0.states == ['A', 'B', 'C', 'D']
    assert test_markup_machine_0.transitions == [{'trigger': 'walk', 'source': 'A', 'dest': 'B'}, {'trigger': 'run', 'source': 'B', 'dest': 'C'}, {'trigger': 'sprint', 'source': 'C', 'dest': 'D'}]
    assert test_markup_machine_0.num_trans == 3
    assert test_markup_machine_0.num_auto == 16
    var_1 = test_markup_machine_0.test_markup_model()

@pytest.mark.xfail(strict=True)
def test_case_14():
    test_rep_0 = module_0.TestRep()
    var_0 = test_rep_0.test_rep_function()
    var_0.get_nested_state_names()

def test_case_15():
    test_markup_machine_enum_0 = module_0.TestMarkupMachineEnum()
    var_0 = test_markup_machine_enum_0.setUp()
    assert test_markup_machine_enum_0.num_auto == 16
    var_1 = test_markup_machine_enum_0.test_markup_model()
    var_1.get_nested_state_names()