# Automatically generated by Pynguin.
import pytest
import tests.utils as module_0

def test_case_0():
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    stuff_0 = module_0.Stuff(machine_cls=none_type_0)
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state is None
    assert stuff_0.message is None
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert stuff_0.machine_cls is None
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    var_0 = stuff_0.this_fails_by_default(stuff_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tests.utils.Stuff'
    assert var_0.state is None
    assert var_0.message is None
    assert var_0.level == 1
    assert var_0.transitions == 0
    assert var_0.machine_cls is None
    var_1 = var_0.this_passes()
    assert var_1 is True
    stuff_0.extract_message(var_1)

@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -2007.0
    module_0.Stuff(float_0, float_0, float_0)

def test_case_3():
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    var_0 = stuff_0.on_enter_E()
    assert stuff_0.message == 'I am E!'

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 2396
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    stuff_1 = module_0.Stuff()
    assert stuff_1.state == 'A'
    assert f'{type(stuff_1.machine).__module__}.{type(stuff_1.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_1.level == 1
    assert stuff_1.transitions == 0
    var_0 = stuff_1.on_enter_E(int_0)
    var_1 = stuff_1.this_passes()
    assert var_1 is True
    var_2 = stuff_0.this_passes()
    var_3 = stuff_1.this_fails_by_default()
    assert var_3 is False
    var_1.meet()

def test_case_5():
    dummy_model_0 = module_0.DummyModel()

@pytest.mark.xfail(strict=True)
def test_case_6():
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    var_0 = stuff_0.this_fails()
    assert var_0 is False
    var_0.greet()

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    var_0 = stuff_0.this_fails_by_default(none_type_0)
    var_0.this_passes()

@pytest.mark.xfail(strict=True)
def test_case_8():
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    var_0 = stuff_0.hello_world()
    assert stuff_0.message == 'Hello World!'
    stuff_0.extract_boolean(stuff_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    var_0 = stuff_0.goodbye()
    assert stuff_0.message == 'So long, suckers!'
    var_0.on_enter_E()

@pytest.mark.xfail(strict=True)
def test_case_10():
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    var_0 = stuff_0.hello_world()
    assert stuff_0.message == 'Hello World!'
    var_1 = stuff_0.hello_F()
    assert stuff_0.message == 'Hello World!Hello F!'
    dummy_model_0 = module_0.DummyModel()
    var_1.goodbye()

@pytest.mark.xfail(strict=True)
def test_case_11():
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    var_0 = stuff_0.greet()
    assert stuff_0.message == 'Hi'
    none_type_0 = None
    var_1 = stuff_0.greet()
    var_1.get_state(none_type_0)

def test_case_12():
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    var_0 = stuff_0.meet()
    assert stuff_0.message == 'Nice to meet you'

@pytest.mark.xfail(strict=True)
def test_case_13():
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    var_0 = stuff_0.this_passes()
    assert var_0 is True
    var_1 = stuff_0.decrease_level()
    assert stuff_0.level == 0
    assert stuff_0.transitions == 1
    var_2 = stuff_0.hello_world()
    assert stuff_0.message == 'Hello World!'
    var_2.greet()

@pytest.mark.xfail(strict=True)
def test_case_14():
    float_0 = 120.977888
    none_type_0 = None
    inherited_stuff_0 = module_0.InheritedStuff(none_type_0)
    assert inherited_stuff_0.state == 'A'
    assert len(inherited_stuff_0.models) == 1
    module_0.Stuff(extra_kwargs=float_0)

def test_case_15():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    some_context_0 = module_0.SomeContext(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    some_context_0 = module_0.SomeContext(bool_0)
    some_context_0.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_17():
    float_0 = 151.450399
    some_context_0 = module_0.SomeContext(float_0)
    some_context_0.__exit__(float_0, float_0, float_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    stuff_0.hello_F()

@pytest.mark.xfail(strict=True)
def test_case_19():
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    var_0 = stuff_0.increase_level()
    assert stuff_0.level == 2
    assert stuff_0.transitions == 1
    var_0.__exit__(stuff_0, stuff_0, stuff_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    var_0 = stuff_0.set_message()
    assert stuff_0.message == 'Hello World!'
    var_0.add_ordered_transitions(loop=var_0, unless=stuff_0, after=var_0, **var_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    var_0 = stuff_0.on_exit_E()
    assert stuff_0.exit_message == 'E go home...'
    stuff_0.hello_F()

@pytest.mark.xfail(strict=True)
def test_case_22():
    stuff_0 = module_0.Stuff()
    assert f'{type(stuff_0).__module__}.{type(stuff_0).__qualname__}' == 'tests.utils.Stuff'
    assert stuff_0.state == 'A'
    assert stuff_0.message is None
    assert f'{type(stuff_0.machine).__module__}.{type(stuff_0.machine).__qualname__}' == 'transitions.core.Machine'
    assert stuff_0.level == 1
    assert stuff_0.transitions == 0
    assert f'{type(module_0.Stuff.property_that_fails).__module__}.{type(module_0.Stuff.property_that_fails).__qualname__}' == 'builtins.property'
    var_0 = stuff_0.on_enter_F()
    assert stuff_0.message == 'I am F!'
    var_1 = stuff_0.hello_F()
    assert stuff_0.message == 'I am F!Hello F!'
    var_1.hello_world()

@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    inherited_stuff_0 = module_0.InheritedStuff(none_type_0)
    assert inherited_stuff_0.state == 'A'
    assert len(inherited_stuff_0.models) == 1
    var_0 = inherited_stuff_0.this_passes()
    assert var_0 is True
    var_0.extract_message(none_type_0)