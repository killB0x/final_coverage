# Automatically generated by Pynguin.
import pytest
import tokenize as module_0
import transitions.extensions.nesting as module_1
import inspect as module_2
import re as module_3

def test_case_0():
    var_0 = module_0.maybe()
    function_wrapper_0 = module_1.FunctionWrapper(var_0, var_0)
    assert f'{type(function_wrapper_0).__module__}.{type(function_wrapper_0).__qualname__}' == 'transitions.extensions.nesting.FunctionWrapper'

def test_case_1():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'

@pytest.mark.xfail(strict=True)
def test_case_2():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    dict_0 = {}
    hierarchical_machine_0.add_ordered_transitions(hierarchical_machine_0, conditions=hierarchical_machine_0, unless=hierarchical_machine_0, after=hierarchical_machine_0, prepare=hierarchical_machine_0, **dict_0)

def test_case_3():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_global_name()
    assert var_0 == ''
    with pytest.raises(ValueError):
        hierarchical_machine_0.add_states(hierarchical_machine_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    hierarchical_machine_0.get_transitions(source=hierarchical_machine_0)

def test_case_5():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_triggers()
    nested_event_0 = module_1.NestedEvent(var_0, hierarchical_machine_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    str_0 = '9|}-TE\r'
    function_wrapper_0 = module_1.FunctionWrapper(str_0, str_0)
    assert f'{type(function_wrapper_0).__module__}.{type(function_wrapper_0).__qualname__}' == 'transitions.extensions.nesting.FunctionWrapper'
    var_0 = hierarchical_machine_0.get_transitions(source=str_0)
    function_wrapper_0.__call__(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    nested_state_0 = module_1.NestedState(none_type_0, on_exit=none_type_0)
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting.NestedState'
    assert nested_state_0.ignore_invalid_triggers is None
    assert nested_state_0.on_enter == []
    assert nested_state_0.on_exit == []
    assert nested_state_0.initial is None
    assert nested_state_0.events == {}
    assert f'{type(nested_state_0.states).__module__}.{type(nested_state_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(nested_state_0.states) == 0
    assert module_1.NestedState.separator == '_'
    assert f'{type(module_1.NestedState.name).__module__}.{type(module_1.NestedState.name).__qualname__}' == 'builtins.property'
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    nested_state_0.scoped_exit(nested_state_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_nested_triggers()
    var_1 = module_2.getdoc(hierarchical_machine_0)
    var_2 = hierarchical_machine_0.get_nested_transitions(src_path=var_1, dest_path=var_0)
    var_3 = var_1.rstrip()
    hierarchical_machine_0.on_enter(var_3, var_3)

@pytest.mark.xfail(strict=True)
def test_case_9():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    none_type_0 = None
    var_0 = hierarchical_machine_0.get_global_name(none_type_0, none_type_0)
    hierarchical_machine_0.get_transitions(source=hierarchical_machine_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_triggers()
    hierarchical_machine_0.set_state(hierarchical_machine_0)

def test_case_11():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_nested_transitions()

@pytest.mark.xfail(strict=True)
def test_case_12():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    str_0 = '9|}-TE\r'
    function_wrapper_0 = module_1.FunctionWrapper(str_0, str_0)
    assert f'{type(function_wrapper_0).__module__}.{type(function_wrapper_0).__qualname__}' == 'transitions.extensions.nesting.FunctionWrapper'
    none_type_0 = None
    hierarchical_machine_0.on_exit(none_type_0, hierarchical_machine_0)

def test_case_13():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_global_name()
    assert var_0 == ''
    var_1 = hierarchical_machine_0.get_nested_triggers(var_0)
    var_2 = hierarchical_machine_0.get_nested_transitions(src_path=var_1)
    with pytest.raises(ValueError):
        hierarchical_machine_0.add_ordered_transitions(loop=var_0, loop_includes_initial=hierarchical_machine_0)

def test_case_14():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.is_state(hierarchical_machine_0, hierarchical_machine_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'af6"'
    nested_state_0 = module_1.NestedState(str_0, str_0, str_0, str_0)
    assert f'{type(nested_state_0).__module__}.{type(nested_state_0).__qualname__}' == 'transitions.extensions.nesting.NestedState'
    assert nested_state_0.ignore_invalid_triggers == 'af6"'
    assert nested_state_0.on_enter == ['af6"']
    assert nested_state_0.on_exit == ['af6"']
    assert nested_state_0.initial is None
    assert nested_state_0.events == {}
    assert f'{type(nested_state_0.states).__module__}.{type(nested_state_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(nested_state_0.states) == 0
    assert module_1.NestedState.separator == '_'
    assert f'{type(module_1.NestedState.name).__module__}.{type(module_1.NestedState.name).__qualname__}' == 'builtins.property'
    var_0 = nested_state_0.add_substate(nested_state_0)
    assert len(nested_state_0.states) == 1
    nested_state_0.scoped_enter(nested_state_0)

def test_case_16():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_nested_triggers()

def test_case_17():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_transitions()

@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    nested_event_0 = module_1.NestedEvent(none_type_0, none_type_0)
    nested_event_0.trigger(none_type_0, none_type_0)

def test_case_19():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    with pytest.raises(ValueError):
        hierarchical_machine_0.add_states(hierarchical_machine_0, ignore_invalid_triggers=hierarchical_machine_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    hierarchical_machine_0.trigger_event(hierarchical_machine_0, hierarchical_machine_0)

def test_case_21():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    with pytest.raises(ValueError):
        hierarchical_machine_0.get_global_name(hierarchical_machine_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    hierarchical_machine_0.add_transition(hierarchical_machine_0, hierarchical_machine_0, hierarchical_machine_0, hierarchical_machine_0, hierarchical_machine_0, hierarchical_machine_0)

def test_case_23():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_nested_triggers()
    var_1 = hierarchical_machine_0.add_states(var_0, on_exit=hierarchical_machine_0, ignore_invalid_triggers=hierarchical_machine_0)
    assert len(hierarchical_machine_0.states) == 2
    assert len(hierarchical_machine_0.events) == 3

def test_case_24():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_nested_triggers()
    var_1 = hierarchical_machine_0.get_nested_transitions(dest_path=var_0)

def test_case_25():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_transitions()
    with pytest.raises(ValueError):
        hierarchical_machine_0.add_states(var_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    hierarchical_machine_0.to_state(hierarchical_machine_0, hierarchical_machine_0)

def test_case_27():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = module_0.maybe()
    var_1 = hierarchical_machine_0.get_nested_triggers(var_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    hierarchical_machine_0.get_state(hierarchical_machine_0, hierarchical_machine_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_transitions(hierarchical_machine_0)
    hierarchical_machine_0.trigger_event(hierarchical_machine_0, var_0)

def test_case_30():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    list_0 = [hierarchical_machine_0, hierarchical_machine_0]
    hierarchical_machine_1 = module_1.HierarchicalMachine(*list_0)
    assert f'{type(hierarchical_machine_1).__module__}.{type(hierarchical_machine_1).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_1.states).__module__}.{type(hierarchical_machine_1.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_1.states) == 1
    assert f'{type(hierarchical_machine_1.events).__module__}.{type(hierarchical_machine_1.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_1.events) == 1
    assert hierarchical_machine_1.send_event is False
    assert hierarchical_machine_1.auto_transitions is True
    assert hierarchical_machine_1.ignore_invalid_triggers is None
    assert hierarchical_machine_1.name == ''
    assert hierarchical_machine_1.model_attribute == 'state'
    assert f'{type(hierarchical_machine_1.models).__module__}.{type(hierarchical_machine_1.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_1.models) == 1

@pytest.mark.xfail(strict=True)
def test_case_31():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    list_0 = [hierarchical_machine_0, hierarchical_machine_0]
    hierarchical_machine_1 = module_1.HierarchicalMachine(*list_0)
    assert f'{type(hierarchical_machine_1).__module__}.{type(hierarchical_machine_1).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_1.states).__module__}.{type(hierarchical_machine_1.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_1.states) == 1
    assert f'{type(hierarchical_machine_1.events).__module__}.{type(hierarchical_machine_1.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_1.events) == 1
    assert hierarchical_machine_1.send_event is False
    assert hierarchical_machine_1.auto_transitions is True
    assert hierarchical_machine_1.ignore_invalid_triggers is None
    assert hierarchical_machine_1.name == ''
    assert hierarchical_machine_1.model_attribute == 'state'
    assert f'{type(hierarchical_machine_1.models).__module__}.{type(hierarchical_machine_1.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_1.models) == 1
    hierarchical_machine_0.get_state(list_0)

def test_case_32():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = module_0.maybe()
    var_1 = hierarchical_machine_0.get_triggers(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_nested_triggers()
    hierarchical_machine_0.get_triggers(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    hierarchical_machine_0.get_transitions(dest=hierarchical_machine_0)

def test_case_35():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_global_name(join=hierarchical_machine_0)
    assert var_0 == ''
    var_1 = hierarchical_machine_0.get_states(var_0)
    var_2 = hierarchical_machine_0.get_transitions(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_nested_triggers()
    hierarchical_machine_0.get_states(var_0)

@pytest.mark.xfail(strict=True)
def test_case_37():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_nested_triggers()
    hierarchical_machine_0.set_state(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_38():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_nested_triggers()
    var_1 = hierarchical_machine_0.add_states(var_0, on_exit=hierarchical_machine_0, ignore_invalid_triggers=hierarchical_machine_0)
    assert len(hierarchical_machine_0.states) == 2
    assert len(hierarchical_machine_0.events) == 3
    hierarchical_machine_0.set_state(var_1, var_1)

def test_case_39():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_global_name()
    assert var_0 == ''
    var_1 = hierarchical_machine_0.add_states(var_0)
    assert len(hierarchical_machine_0.events) == 2

@pytest.mark.xfail(strict=True)
def test_case_40():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    hierarchical_machine_0.is_state(hierarchical_machine_0, hierarchical_machine_0, hierarchical_machine_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    hierarchical_machine_0.get_nested_transitions(src_path=hierarchical_machine_0)

def test_case_42():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_nested_triggers()
    var_1 = hierarchical_machine_0.get_nested_transitions(src_path=var_0)

def test_case_43():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_global_name()
    assert var_0 == ''
    var_1 = hierarchical_machine_0.get_nested_triggers(var_0)
    var_2 = hierarchical_machine_0.get_nested_triggers(var_1)

def test_case_44():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_global_name()
    assert var_0 == ''
    var_1 = hierarchical_machine_0.get_transitions(source=var_0, dest=var_0)

def test_case_45():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_nested_triggers()
    var_1 = hierarchical_machine_0.add_states(var_0, on_exit=hierarchical_machine_0, ignore_invalid_triggers=hierarchical_machine_0)
    assert len(hierarchical_machine_0.states) == 2
    assert len(hierarchical_machine_0.events) == 3
    with pytest.raises(ValueError):
        hierarchical_machine_0.add_states(var_0, ignore_invalid_triggers=var_0)

def test_case_46():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = module_0.maybe()
    var_1 = hierarchical_machine_0.get_nested_transitions(hierarchical_machine_0, dest_path=var_0)

def test_case_47():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    regex_flag_0 = module_3.RegexFlag.ASCII
    var_0 = hierarchical_machine_0.add_states(regex_flag_0, regex_flag_0, regex_flag_0)
    assert len(hierarchical_machine_0.states) == 2
    assert len(hierarchical_machine_0.events) == 2

def test_case_48():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = module_0.maybe()
    var_1 = hierarchical_machine_0.add_transition(var_0, hierarchical_machine_0, var_0, prepare=var_0)
    assert len(hierarchical_machine_0.events) == 2
    var_2 = hierarchical_machine_0.get_nested_triggers(var_0)

@pytest.mark.xfail(strict=True)
def test_case_49():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_1.HierarchicalMachine(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_50():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = module_0.maybe()
    hierarchical_machine_0.get_nested_transitions(src_path=var_0)

@pytest.mark.xfail(strict=True)
def test_case_51():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = module_2.getdoc(hierarchical_machine_0)
    hierarchical_machine_0.get_nested_transitions(src_path=var_0, dest_path=var_0)

def test_case_52():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_nested_triggers()
    var_1 = module_2.getdoc(hierarchical_machine_0)
    var_2 = hierarchical_machine_0.get_nested_transitions(src_path=var_1, dest_path=var_0)

def test_case_53():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = module_0.maybe()
    var_1 = hierarchical_machine_0.get_local_name(var_0)
    assert var_1 == '()?'

@pytest.mark.xfail(strict=True)
def test_case_54():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.__repr__()
    hierarchical_machine_0.to_state(hierarchical_machine_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_55():
    var_0 = module_3.RegexFlag.MULTILINE
    var_1 = var_0.__dir__()
    list_0 = [var_0, var_1]
    module_1.HierarchicalMachine(*list_0)
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    var_2 = hierarchical_machine_0.get_nested_triggers()
    var_3 = hierarchical_machine_1.trigger_event(hierarchical_machine_0, hierarchical_machine_0)

@pytest.mark.xfail(strict=True)
def test_case_56():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = module_2.getfullargspec(hierarchical_machine_0)
    hierarchical_machine_0.get_states(var_0)

@pytest.mark.xfail(strict=True)
def test_case_57():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = module_3.RegexFlag.IGNORECASE
    hierarchical_machine_0.set_state(var_0, var_0)

def test_case_58():
    str_0 = '9|}-TE\r'
    function_wrapper_0 = module_1.FunctionWrapper(str_0, str_0)
    assert f'{type(function_wrapper_0).__module__}.{type(function_wrapper_0).__qualname__}' == 'transitions.extensions.nesting.FunctionWrapper'

def test_case_59():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    str_0 = '9|}-TE\r'
    function_wrapper_0 = module_1.FunctionWrapper(str_0, str_0)
    assert f'{type(function_wrapper_0).__module__}.{type(function_wrapper_0).__qualname__}' == 'transitions.extensions.nesting.FunctionWrapper'
    none_type_0 = None
    var_0 = function_wrapper_0.add(function_wrapper_0, none_type_0)
    var_1 = hierarchical_machine_0.get_nested_transitions(src_path=none_type_0, dest_path=str_0)

def test_case_60():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_nested_triggers()
    var_1 = hierarchical_machine_0.add_state(*var_0)
    assert len(hierarchical_machine_0.states) == 2
    assert len(hierarchical_machine_0.events) == 3
    var_2 = module_2.getdoc(var_0)
    var_3 = hierarchical_machine_0.get_nested_transitions(src_path=var_1)
    var_4 = hierarchical_machine_0.get_triggers(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_61():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    str_0 = '9|}-TE\r'
    function_wrapper_0 = module_1.FunctionWrapper(str_0, str_0)
    assert f'{type(function_wrapper_0).__module__}.{type(function_wrapper_0).__qualname__}' == 'transitions.extensions.nesting.FunctionWrapper'
    var_0 = function_wrapper_0.add(hierarchical_machine_0, str_0)
    hierarchical_machine_0.get_nested_transitions(src_path=hierarchical_machine_0)

@pytest.mark.xfail(strict=True)
def test_case_62():
    hierarchical_machine_0 = module_1.HierarchicalMachine()
    assert f'{type(hierarchical_machine_0).__module__}.{type(hierarchical_machine_0).__qualname__}' == 'transitions.extensions.nesting.HierarchicalMachine'
    assert f'{type(hierarchical_machine_0.states).__module__}.{type(hierarchical_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(hierarchical_machine_0.states) == 1
    assert f'{type(hierarchical_machine_0.events).__module__}.{type(hierarchical_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(hierarchical_machine_0.events) == 1
    assert hierarchical_machine_0.send_event is False
    assert hierarchical_machine_0.auto_transitions is True
    assert hierarchical_machine_0.ignore_invalid_triggers is None
    assert hierarchical_machine_0.name == ''
    assert hierarchical_machine_0.model_attribute == 'state'
    assert f'{type(hierarchical_machine_0.models).__module__}.{type(hierarchical_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(hierarchical_machine_0.models) == 1
    assert hierarchical_machine_0.state == 'initial'
    var_0 = hierarchical_machine_0.get_nested_triggers()
    list_0 = [var_0, var_0]
    hierarchical_machine_0.set_state(list_0)