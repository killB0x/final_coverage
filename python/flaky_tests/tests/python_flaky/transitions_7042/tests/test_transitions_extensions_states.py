# Automatically generated by Pynguin.
import pytest
import transitions.extensions.states as module_0
import inspect as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.Error()

@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.Timeout()

@pytest.mark.xfail(strict=True)
def test_case_2():
    module_0.Volatile()

def test_case_3():
    var_0 = module_0.add_state_features()

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    timeout_0 = module_0.Timeout(*list_0)
    assert f'{type(timeout_0).__module__}.{type(timeout_0).__qualname__}' == 'transitions.extensions.states.Timeout'
    assert timeout_0.timeout == 0
    assert timeout_0.runner == {}
    assert timeout_0.ignore_invalid_triggers is None
    assert timeout_0.on_enter == []
    assert timeout_0.on_exit == []
    assert module_0.Timeout.dynamic_methods == ['on_timeout']
    assert f'{type(module_0.Timeout.on_timeout).__module__}.{type(module_0.Timeout.on_timeout).__qualname__}' == 'builtins.property'
    timeout_0.enter(list_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    timeout_0 = module_0.Timeout(*list_0)
    assert f'{type(timeout_0).__module__}.{type(timeout_0).__qualname__}' == 'transitions.extensions.states.Timeout'
    assert timeout_0.timeout == 0
    assert timeout_0.runner == {}
    assert timeout_0.ignore_invalid_triggers is None
    assert timeout_0.on_enter == []
    assert timeout_0.on_exit == []
    assert module_0.Timeout.dynamic_methods == ['on_timeout']
    assert f'{type(module_0.Timeout.on_timeout).__module__}.{type(module_0.Timeout.on_timeout).__qualname__}' == 'builtins.property'
    volatile_0 = module_0.Volatile(*list_0)
    assert volatile_0.volatile_hook == 'scope'
    assert volatile_0.ignore_invalid_triggers is None
    assert volatile_0.on_enter == []
    assert volatile_0.on_exit == []
    assert volatile_0.initialized is True
    timeout_1 = module_0.Timeout(*list_0)
    assert timeout_1.timeout == 0
    assert timeout_1.runner == {}
    assert timeout_1.ignore_invalid_triggers is None
    assert timeout_1.on_enter == []
    assert timeout_1.on_exit == []
    volatile_0.enter(timeout_1)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    error_0 = module_0.Error(*list_0)
    assert f'{type(error_0).__module__}.{type(error_0).__qualname__}' == 'transitions.extensions.states.Error'
    assert error_0.tags == []
    assert error_0.ignore_invalid_triggers is None
    assert error_0.on_enter == []
    assert error_0.on_exit == []
    error_0.exit(error_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_0.add_state_features()
    module_1.getmembers(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'accepted'
    dict_0 = {str_0: str_0}
    module_0.Error(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    error_0 = module_0.Error(*list_0)
    assert f'{type(error_0).__module__}.{type(error_0).__qualname__}' == 'transitions.extensions.states.Error'
    assert error_0.tags == []
    assert error_0.ignore_invalid_triggers is None
    assert error_0.on_enter == []
    assert error_0.on_exit == []
    list_1 = [none_type_0, none_type_0, none_type_0, none_type_0]
    timeout_0 = module_0.Timeout(*list_1)
    assert f'{type(timeout_0).__module__}.{type(timeout_0).__qualname__}' == 'transitions.extensions.states.Timeout'
    assert timeout_0.timeout == 0
    assert timeout_0.runner == {}
    assert timeout_0.ignore_invalid_triggers is None
    assert timeout_0.on_enter == []
    assert timeout_0.on_exit == []
    assert module_0.Timeout.dynamic_methods == ['on_timeout']
    assert f'{type(module_0.Timeout.on_timeout).__module__}.{type(module_0.Timeout.on_timeout).__qualname__}' == 'builtins.property'
    var_0 = module_1.getmembers(timeout_0)
    var_0.enter(var_0)