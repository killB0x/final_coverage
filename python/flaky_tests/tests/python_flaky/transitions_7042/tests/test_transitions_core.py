# Automatically generated by Pynguin.
import pytest
import transitions.core as module_0
import tokenize as module_1
import inspect as module_2
import re as module_3

def test_case_0():
    machine_0 = module_0.Machine()
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.any()
    event_data_0 = module_0.EventData(var_0, var_0, var_0, var_0, var_0, var_0)
    event_data_0.update(event_data_0)

def test_case_2():
    str_0 = 'ZgC2$Xrn'
    condition_0 = module_0.Condition(str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.get_transitions()
    none_type_0 = None
    str_0 = "lSn!iAuh\x0c('pC"
    dict_0 = {str_0: none_type_0, str_0: machine_0, str_0: str_0, str_0: str_0, str_0: str_0}
    transition_0 = module_0.Transition(parameter_kind_0, var_0, unless=parameter_kind_0, before=dict_0, after=none_type_0)
    assert len(transition_0.dest) == 6
    assert len(transition_0.conditions) == 1
    assert module_0.Transition.dynamic_methods == ['before', 'after', 'prepare']
    var_1 = var_0.__repr__()
    module_0.Machine(states=dict_0, transitions=dict_0, before_state_change=str_0, after_state_change=none_type_0, finalize_event=dict_0, model_attribute=none_type_0)

def test_case_4():
    str_0 = 'QZgC2$Xrn'
    event_data_0 = module_0.EventData(str_0, str_0, str_0, str_0, str_0, str_0)

def test_case_5():
    none_type_0 = None
    machine_error_0 = module_0.MachineError(none_type_0)
    assert machine_error_0.value is None

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    machine_error_0 = module_0.MachineError(none_type_0)
    assert machine_error_0.value is None
    event_0 = module_0.Event(none_type_0, machine_error_0)
    var_0 = event_0.add_callback(none_type_0, machine_error_0)
    var_1 = machine_error_0.__str__()
    assert var_1 == 'None'
    var_0.visit_MatchValue(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    event_0 = module_0.Event(machine_0, machine_0)
    event_0.trigger(parameter_kind_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    state_0 = module_0.State(none_type_0, on_exit=none_type_0, ignore_invalid_triggers=none_type_0)
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.name).__module__}.{type(module_0.State.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    var_0 = state_0.__repr__()
    var_1 = module_0.listify(none_type_0)
    transition_0 = module_0.Transition(state_0, none_type_0, before=var_1, after=none_type_0)
    assert module_0.Transition.dynamic_methods == ['before', 'after', 'prepare']
    state_0.add_callback(state_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    transition_0 = module_0.Transition(none_type_0, none_type_0, prepare=none_type_0)
    assert module_0.Transition.dynamic_methods == ['before', 'after', 'prepare']
    var_0 = transition_0.__repr__()
    transition_0.add_callback(var_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    machine_0 = module_0.Machine(auto_transitions=parameter_kind_0, after_state_change=parameter_kind_0, queued=parameter_kind_0, prepare_event=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions == module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    event_0 = module_0.Event(machine_0, machine_0)
    var_0 = event_0.__repr__()
    event_0.trigger(machine_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    parameter_kind_0 = module_2._ParameterKind.VAR_KEYWORD
    transition_0 = module_0.Transition(parameter_kind_0, parameter_kind_0, prepare=parameter_kind_0)
    assert transition_0.prepare == [module_2._ParameterKind.VAR_KEYWORD]
    assert module_0.Transition.dynamic_methods == ['before', 'after', 'prepare']
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    machine_0.callback(machine_0, machine_0)

def test_case_12():
    tuple_0 = ()
    machine_0 = module_0.Machine(ordered_transitions=tuple_0, ignore_invalid_triggers=tuple_0, queued=tuple_0, finalize_event=tuple_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers == ()
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    condition_0 = module_0.Condition(none_type_0)
    var_0 = condition_0.__repr__()
    machine_0 = module_0.Machine(states=none_type_0, before_state_change=none_type_0, after_state_change=none_type_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    transition_0 = module_0.Transition(none_type_0, condition_0, after=machine_0, prepare=condition_0)
    assert len(transition_0.prepare) == 1
    assert len(transition_0.after) == 1
    assert module_0.Transition.dynamic_methods == ['before', 'after', 'prepare']
    var_1 = machine_0.get_triggers()
    machine_0.callback(machine_0, machine_0)

def test_case_14():
    str_0 = '\tE$g^4jmcA,Yk'
    transition_0 = module_0.Transition(str_0, str_0, unless=str_0, before=str_0, after=str_0)
    assert transition_0.before == ['\tE$g^4jmcA,Yk']
    assert transition_0.after == ['\tE$g^4jmcA,Yk']
    assert len(transition_0.conditions) == 1
    assert module_0.Transition.dynamic_methods == ['before', 'after', 'prepare']

@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    state_0 = module_0.State(none_type_0, on_exit=none_type_0, ignore_invalid_triggers=none_type_0)
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.name).__module__}.{type(module_0.State.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    var_0 = state_0.__repr__()
    var_1 = module_0.listify(state_0)
    transition_0 = module_0.Transition(var_0, none_type_0, var_1)
    assert len(transition_0.conditions) == 1
    assert module_0.Transition.dynamic_methods == ['before', 'after', 'prepare']
    var_1.add_callback(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    state_0 = module_0.State(none_type_0, on_exit=none_type_0, ignore_invalid_triggers=none_type_0)
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.name).__module__}.{type(module_0.State.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    machine_0 = module_0.Machine(states=none_type_0, before_state_change=none_type_0, after_state_change=none_type_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    bool_0 = True
    transition_0 = module_0.Transition(state_0, machine_0, prepare=bool_0)
    assert transition_0.prepare == [True]
    assert module_0.Transition.dynamic_methods == ['before', 'after', 'prepare']
    state_0.enter(none_type_0)

def test_case_17():
    none_type_0 = None
    state_0 = module_0.State(none_type_0, on_exit=none_type_0, ignore_invalid_triggers=none_type_0)
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.name).__module__}.{type(module_0.State.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    var_0 = state_0.__repr__()

def test_case_18():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_ONLY
    machine_0 = module_0.Machine(parameter_kind_0, parameter_kind_0, auto_transitions=parameter_kind_0, finalize_event=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert machine_0.events == {}
    assert machine_0.send_event is False
    assert machine_0.auto_transitions == module_2._ParameterKind.POSITIONAL_ONLY
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert machine_0.models == []
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    state_0 = module_0.State(none_type_0, on_exit=none_type_0, ignore_invalid_triggers=none_type_0)
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.name).__module__}.{type(module_0.State.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    machine_0 = module_0.Machine(none_type_0, none_type_0, ignore_invalid_triggers=state_0, queued=state_0, model_attribute=none_type_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert f'{type(machine_0.ignore_invalid_triggers).__module__}.{type(machine_0.ignore_invalid_triggers).__qualname__}' == 'transitions.core.State'
    assert machine_0.name == ''
    assert machine_0.model_attribute is None
    assert machine_0.models == []
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    machine_0.remove_transition(state_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    state_0 = module_0.State(none_type_0, on_exit=none_type_0, ignore_invalid_triggers=none_type_0)
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.name).__module__}.{type(module_0.State.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    machine_0 = module_0.Machine(none_type_0, none_type_0, ignore_invalid_triggers=state_0, queued=state_0, model_attribute=none_type_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert f'{type(machine_0.ignore_invalid_triggers).__module__}.{type(machine_0.ignore_invalid_triggers).__qualname__}' == 'transitions.core.State'
    assert machine_0.name == ''
    assert machine_0.model_attribute is None
    assert machine_0.models == []
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = module_0.listify(none_type_0)
    var_1 = var_0.__repr__()
    assert var_1 == '[]'
    state_0.exit(var_1)

def test_case_21():
    parameter_kind_0 = module_2._ParameterKind.VAR_POSITIONAL
    str_0 = 'l;M4zq?xLd]Wt}('
    dict_0 = {str_0: parameter_kind_0}
    with pytest.raises(ValueError):
        module_0.Machine(parameter_kind_0, transitions=parameter_kind_0, send_event=parameter_kind_0, auto_transitions=parameter_kind_0, name=parameter_kind_0, **dict_0)

def test_case_22():
    parameter_kind_0 = module_2._ParameterKind.KEYWORD_ONLY
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.get_triggers()

@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    state_0 = module_0.State(none_type_0, on_exit=none_type_0, ignore_invalid_triggers=none_type_0)
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.name).__module__}.{type(module_0.State.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    machine_0 = module_0.Machine(none_type_0, none_type_0, ignore_invalid_triggers=state_0, queued=state_0, model_attribute=none_type_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert f'{type(machine_0.ignore_invalid_triggers).__module__}.{type(machine_0.ignore_invalid_triggers).__qualname__}' == 'transitions.core.State'
    assert machine_0.name == ''
    assert machine_0.model_attribute is None
    assert machine_0.models == []
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.dispatch(state_0)
    var_0.visit_DictComp(state_0)

def test_case_24():
    parameter_kind_0 = module_2._ParameterKind.KEYWORD_ONLY
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_25():
    dict_0 = {}
    module_0.Machine(states=dict_0, before_state_change=dict_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    parameter_kind_0 = module_2._ParameterKind.VAR_KEYWORD
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    module_0.Machine(initial=machine_0, auto_transitions=parameter_kind_0, prepare_event=machine_0)

def test_case_27():
    parameter_kind_0 = module_2._ParameterKind.VAR_KEYWORD
    with pytest.raises(ValueError):
        module_0.Machine(ordered_transitions=parameter_kind_0, before_state_change=parameter_kind_0, queued=parameter_kind_0, finalize_event=parameter_kind_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    module_0.Machine(transitions=parameter_kind_0, ignore_invalid_triggers=parameter_kind_0, queued=parameter_kind_0, finalize_event=parameter_kind_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    none_type_0 = None
    state_0 = module_0.State(none_type_0)
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.name).__module__}.{type(module_0.State.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    module_0.Machine(state_0, initial=none_type_0, transitions=state_0, ordered_transitions=state_0, ignore_invalid_triggers=state_0, queued=none_type_0, model_attribute=state_0)

def test_case_30():
    none_type_0 = None
    state_0 = module_0.State(none_type_0, on_exit=none_type_0, ignore_invalid_triggers=none_type_0)
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.name).__module__}.{type(module_0.State.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    with pytest.raises(ValueError):
        module_0.Machine(states=state_0, ordered_transitions=state_0, after_state_change=none_type_0)

def test_case_31():
    parameter_kind_0 = module_2._ParameterKind.KEYWORD_ONLY
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    state_0 = module_0.State(machine_0, parameter_kind_0)
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    with pytest.raises(ValueError):
        module_0.Machine(auto_transitions=parameter_kind_0, ordered_transitions=machine_0, ignore_invalid_triggers=machine_0, queued=machine_0, prepare_event=state_0, finalize_event=state_0)

@pytest.mark.xfail(strict=True)
def test_case_32():
    parameter_kind_0 = module_2._ParameterKind.KEYWORD_ONLY
    module_0.Machine(auto_transitions=parameter_kind_0, name=parameter_kind_0, queued=parameter_kind_0)

def test_case_33():
    parameter_kind_0 = module_2._ParameterKind.VAR_KEYWORD
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.get_model_state(parameter_kind_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.core.State'
    assert var_0.ignore_invalid_triggers is None
    assert var_0.on_enter == []
    assert var_0.on_exit == []
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    var_1 = machine_0.resolve_callable(machine_0, parameter_kind_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(var_1.states).__module__}.{type(var_1.states).__qualname__}' == 'collections.OrderedDict'
    assert len(var_1.states) == 2
    assert f'{type(var_1.events).__module__}.{type(var_1.events).__qualname__}' == 'builtins.dict'
    assert len(var_1.events) == 3
    assert var_1.send_event is False
    assert var_1.auto_transitions is True
    assert var_1.ignore_invalid_triggers is None
    assert var_1.name == ''
    assert var_1.model_attribute == 'state'
    assert f'{type(var_1.models).__module__}.{type(var_1.models).__qualname__}' == 'builtins.list'
    assert len(var_1.models) == 1
    assert var_1.state == 'initial'
    var_2 = machine_0.get_triggers()
    machine_1 = module_0.Machine(states=var_2, transitions=var_2, send_event=parameter_kind_0, queued=parameter_kind_0, finalize_event=var_2)
    assert f'{type(machine_1).__module__}.{type(machine_1).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_1.states).__module__}.{type(machine_1.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_1.states) == 1
    assert f'{type(machine_1.events).__module__}.{type(machine_1.events).__qualname__}' == 'builtins.dict'
    assert len(machine_1.events) == 1
    assert machine_1.send_event == module_2._ParameterKind.VAR_KEYWORD
    assert machine_1.auto_transitions is True
    assert machine_1.ignore_invalid_triggers is None
    assert machine_1.name == ''
    assert machine_1.model_attribute == 'state'
    assert f'{type(machine_1.models).__module__}.{type(machine_1.models).__qualname__}' == 'builtins.list'
    assert len(machine_1.models) == 1
    assert machine_1.state == 'initial'

@pytest.mark.xfail(strict=True)
def test_case_34():
    none_type_0 = None
    state_0 = module_2.currentframe()
    machine_0 = module_0.Machine(states=none_type_0, before_state_change=none_type_0, after_state_change=none_type_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    machine_0.dispatch(state_0)

def test_case_35():
    none_type_0 = None
    machine_0 = module_0.Machine(states=none_type_0, before_state_change=none_type_0, after_state_change=none_type_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.resolve_callable(none_type_0, machine_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    none_type_0 = None
    state_0 = module_0.State(none_type_0, on_exit=none_type_0, ignore_invalid_triggers=none_type_0)
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.name).__module__}.{type(module_0.State.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    machine_0 = module_0.Machine(none_type_0, none_type_0, ignore_invalid_triggers=state_0, queued=state_0, model_attribute=none_type_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert f'{type(machine_0.ignore_invalid_triggers).__module__}.{type(machine_0.ignore_invalid_triggers).__qualname__}' == 'transitions.core.State'
    assert machine_0.name == ''
    assert machine_0.model_attribute is None
    assert machine_0.models == []
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    machine_0.remove_transition(state_0)

@pytest.mark.xfail(strict=True)
def test_case_37():
    none_type_0 = None
    machine_0 = module_0.Machine(states=none_type_0, before_state_change=none_type_0, after_state_change=none_type_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    machine_0.callback(none_type_0, machine_0)

def test_case_38():
    none_type_0 = None
    machine_0 = module_0.Machine(states=none_type_0, auto_transitions=none_type_0, after_state_change=none_type_0, name=none_type_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert machine_0.events == {}
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is None
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'

def test_case_39():
    none_type_0 = None
    state_0 = module_0.State(none_type_0, none_type_0, ignore_invalid_triggers=none_type_0)
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.name).__module__}.{type(module_0.State.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    with pytest.raises(ValueError):
        module_0.Machine(states=state_0, initial=state_0, send_event=state_0, auto_transitions=none_type_0, ordered_transitions=none_type_0, ignore_invalid_triggers=none_type_0, after_state_change=state_0, prepare_event=state_0)

@pytest.mark.xfail(strict=True)
def test_case_40():
    parameter_kind_0 = module_2._ParameterKind.VAR_POSITIONAL
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    event_0 = module_0.Event(parameter_kind_0, machine_0)
    var_0 = machine_0.get_transitions()
    event_0.trigger(machine_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    machine_0 = module_0.Machine(auto_transitions=parameter_kind_0, after_state_change=parameter_kind_0, queued=parameter_kind_0, prepare_event=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions == module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.add_states(parameter_kind_0)
    assert len(machine_0.states) == 2
    assert len(machine_0.events) == 2
    event_0 = module_0.Event(parameter_kind_0, machine_0)
    event_0.trigger(event_0)

@pytest.mark.xfail(strict=True)
def test_case_42():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    event_0 = module_0.Event(parameter_kind_0, machine_0)
    var_0 = machine_0.get_transitions(dest=machine_0)
    event_0.trigger(machine_0)

def test_case_43():
    var_0 = module_3.purge()
    machine_0 = module_0.Machine(states=var_0, ordered_transitions=var_0, after_state_change=var_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    state_0 = module_0.State(var_0, on_exit=machine_0)
    assert len(state_0.on_exit) == 1
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    var_1 = module_2.formatannotation(state_0)
    machine_1 = module_0.Machine(states=var_1, ignore_invalid_triggers=var_0, queued=machine_0, model_attribute=var_1)
    assert f'{type(machine_1).__module__}.{type(machine_1).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_1.states).__module__}.{type(machine_1.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_1.states) == 2
    assert f'{type(machine_1.events).__module__}.{type(machine_1.events).__qualname__}' == 'builtins.dict'
    assert len(machine_1.events) == 2
    assert machine_1.send_event is False
    assert machine_1.auto_transitions is True
    assert machine_1.ignore_invalid_triggers is None
    assert machine_1.name == ''
    assert f'{type(machine_1.models).__module__}.{type(machine_1.models).__qualname__}' == 'builtins.list'
    assert len(machine_1.models) == 1

@pytest.mark.xfail(strict=True)
def test_case_44():
    parameter_kind_0 = module_2._ParameterKind.KEYWORD_ONLY
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.remove_model(machine_0)
    assert machine_0.models == []
    module_0.Machine(transitions=parameter_kind_0, auto_transitions=parameter_kind_0, ordered_transitions=machine_0, ignore_invalid_triggers=parameter_kind_0)

@pytest.mark.xfail(strict=True)
def test_case_45():
    none_type_0 = None
    state_0 = module_0.State(none_type_0, on_exit=none_type_0, ignore_invalid_triggers=none_type_0)
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.name).__module__}.{type(module_0.State.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    machine_0 = module_0.Machine(states=none_type_0, before_state_change=none_type_0, after_state_change=none_type_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.get_transitions(machine_0)
    module_3.escape(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_46():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    machine_0 = module_0.Machine(send_event=parameter_kind_0, before_state_change=parameter_kind_0, after_state_change=parameter_kind_0, queued=parameter_kind_0, finalize_event=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event == module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.resolve_callable(machine_0, parameter_kind_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(var_0.states).__module__}.{type(var_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(var_0.states) == 1
    assert f'{type(var_0.events).__module__}.{type(var_0.events).__qualname__}' == 'builtins.dict'
    assert len(var_0.events) == 1
    assert var_0.send_event == module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    assert var_0.auto_transitions is True
    assert var_0.ignore_invalid_triggers is None
    assert var_0.name == ''
    assert var_0.model_attribute == 'state'
    assert f'{type(var_0.models).__module__}.{type(var_0.models).__qualname__}' == 'builtins.list'
    assert len(var_0.models) == 1
    assert var_0.state == 'initial'
    event_0 = var_0.get_transitions(source=var_0, dest=var_0)
    event_1 = module_0.Event(parameter_kind_0, machine_0)
    event_1.trigger(var_0)

@pytest.mark.xfail(strict=True)
def test_case_47():
    parameter_kind_0 = module_2._ParameterKind.VAR_POSITIONAL
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.get_transitions()
    var_1 = machine_0.add_ordered_transitions(var_0, loop_includes_initial=machine_0, unless=var_0, after=parameter_kind_0)
    var_2 = machine_0.resolve_callable(var_0, parameter_kind_0)
    event_0 = module_0.Event(var_1, machine_0)
    event_0.trigger(parameter_kind_0)

def test_case_48():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    event_0 = module_0.Event(parameter_kind_0, parameter_kind_0)
    var_0 = event_0.add_callback(event_0, parameter_kind_0)

def test_case_49():
    none_type_0 = None
    event_data_0 = module_0.EventData(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)
    var_0 = event_data_0.__repr__()
    machine_0 = module_0.Machine(states=none_type_0, before_state_change=none_type_0, after_state_change=none_type_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'

def test_case_50():
    parameter_kind_0 = module_2._ParameterKind.KEYWORD_ONLY
    machine_0 = module_0.Machine(parameter_kind_0, initial=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert machine_0.models == [module_2._ParameterKind.KEYWORD_ONLY]
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'

def test_case_51():
    parameter_kind_0 = module_2._ParameterKind.KEYWORD_ONLY
    state_0 = module_0.State(parameter_kind_0)
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.name).__module__}.{type(module_0.State.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    none_type_0 = None
    dict_0 = {}
    machine_0 = module_0.Machine(initial=state_0, ignore_invalid_triggers=state_0, queued=none_type_0, **dict_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert f'{type(machine_0.ignore_invalid_triggers).__module__}.{type(machine_0.ignore_invalid_triggers).__qualname__}' == 'transitions.core.State'
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == module_2._ParameterKind.KEYWORD_ONLY
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    condition_0 = module_0.Condition(parameter_kind_0)
    var_0 = module_2.ismethod(parameter_kind_0)
    with pytest.raises(AttributeError):
        var_0.resolve_callable(none_type_0, machine_0)

def test_case_52():
    machine_0 = module_0.Machine()
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.is_state(machine_0, machine_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_53():
    none_type_0 = None
    machine_0 = module_0.Machine(none_type_0, transitions=none_type_0, send_event=none_type_0, ordered_transitions=none_type_0, before_state_change=none_type_0, queued=none_type_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is None
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert machine_0.models == []
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    list_0 = [machine_0]
    var_0 = machine_0.get_triggers(*list_0)
    module_2.walktree(list_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_54():
    parameter_kind_0 = module_2._ParameterKind.VAR_KEYWORD
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.add_model(machine_0)
    str_0 = '94kfVimS@.nY&`.e'
    dict_0 = {str_0: var_0, str_0: machine_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.Machine(states=dict_0, send_event=var_0, before_state_change=machine_0, finalize_event=str_0)

@pytest.mark.xfail(strict=True)
def test_case_55():
    parameter_kind_0 = module_2._ParameterKind.VAR_POSITIONAL
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.resolve_callable(machine_0, parameter_kind_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(var_0.states).__module__}.{type(var_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(var_0.states) == 2
    assert f'{type(var_0.events).__module__}.{type(var_0.events).__qualname__}' == 'builtins.dict'
    assert len(var_0.events) == 3
    assert var_0.send_event is False
    assert var_0.auto_transitions is True
    assert var_0.ignore_invalid_triggers is None
    assert var_0.name == ''
    assert var_0.model_attribute == 'state'
    assert f'{type(var_0.models).__module__}.{type(var_0.models).__qualname__}' == 'builtins.list'
    assert len(var_0.models) == 1
    assert var_0.state == 'initial'
    var_1 = var_0.__dir__()
    var_2 = var_0.get_triggers(*var_1)
    module_0.Machine(states=var_1, initial=var_0, transitions=parameter_kind_0, ordered_transitions=parameter_kind_0, queued=var_1)

def test_case_56():
    var_0 = module_3.purge()
    var_1 = var_0.__repr__()
    machine_0 = module_0.Machine(states=var_0, ordered_transitions=var_0, after_state_change=var_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    with pytest.raises(AttributeError):
        machine_0.resolve_callable(var_1, machine_0)

@pytest.mark.xfail(strict=True)
def test_case_57():
    none_type_0 = None
    machine_0 = module_0.Machine(states=none_type_0, before_state_change=none_type_0, after_state_change=none_type_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    str_0 = '|'
    machine_0.callbacks(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_58():
    none_type_0 = None
    state_0 = module_0.State(none_type_0, on_exit=none_type_0)
    assert module_0.State.dynamic_methods == ['on_enter', 'on_exit']
    assert f'{type(module_0.State.name).__module__}.{type(module_0.State.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.State.value).__module__}.{type(module_0.State.value).__qualname__}' == 'builtins.property'
    str_0 = 'initial'
    dict_0 = {str_0: none_type_0, str_0: str_0}
    machine_0 = module_0.Machine(none_type_0, send_event=none_type_0, before_state_change=none_type_0, after_state_change=none_type_0, queued=none_type_0, model_attribute=state_0, **dict_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is None
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert f'{type(machine_0.model_attribute).__module__}.{type(machine_0.model_attribute).__qualname__}' == 'transitions.core.State'
    assert machine_0.models == []
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    machine_0.get_transitions(dict_0, dest=str_0)

@pytest.mark.xfail(strict=True)
def test_case_59():
    var_0 = module_3.purge()
    machine_0 = module_0.Machine(states=var_0, before_state_change=var_0, after_state_change=var_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_1 = module_2.getmembers(machine_0, var_0)
    var_2 = machine_0.add_transitions(var_0)
    machine_0.callback(machine_0, machine_0)

@pytest.mark.xfail(strict=True)
def test_case_60():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    event_0 = module_0.Event(machine_0, machine_0)
    event_1 = module_0.Event(parameter_kind_0, event_0)
    event_1.trigger(event_0)

def test_case_61():
    none_type_0 = None
    machine_0 = module_0.Machine(states=none_type_0, before_state_change=none_type_0, after_state_change=none_type_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    str_0 = ''
    var_0 = machine_0.callbacks(str_0, str_0)

def test_case_62():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    event_0 = module_0.Event(parameter_kind_0, parameter_kind_0)
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.add_model(machine_0, event_0)
    event_1 = module_0.Event(parameter_kind_0, var_0)
    var_1 = event_0.add_callback(machine_0, parameter_kind_0)
    event_2 = module_0.Event(event_0, event_1)
    var_2 = machine_0.resolve_callable(var_1, var_1)

def test_case_63():
    parameter_kind_0 = module_2._ParameterKind.VAR_KEYWORD
    with pytest.raises(ValueError):
        module_0.Machine(states=parameter_kind_0, initial=parameter_kind_0, auto_transitions=parameter_kind_0, ordered_transitions=parameter_kind_0, ignore_invalid_triggers=parameter_kind_0)

@pytest.mark.xfail(strict=True)
def test_case_64():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_ONLY
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 2
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    event_0 = module_0.Event(machine_0, machine_0)
    event_0.trigger(parameter_kind_0)

@pytest.mark.xfail(strict=True)
def test_case_65():
    parameter_kind_0 = module_2._ParameterKind.VAR_KEYWORD
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.set_state(parameter_kind_0)
    assert machine_0.state == module_2._ParameterKind.VAR_KEYWORD
    module_0.Machine(initial=machine_0, before_state_change=var_0, name=var_0, model_attribute=machine_0)

@pytest.mark.xfail(strict=True)
def test_case_66():
    parameter_kind_0 = module_2._ParameterKind.VAR_POSITIONAL
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.resolve_callable(machine_0, parameter_kind_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(var_0.states).__module__}.{type(var_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(var_0.states) == 2
    assert f'{type(var_0.events).__module__}.{type(var_0.events).__qualname__}' == 'builtins.dict'
    assert len(var_0.events) == 3
    assert var_0.send_event is False
    assert var_0.auto_transitions is True
    assert var_0.ignore_invalid_triggers is None
    assert var_0.name == ''
    assert var_0.model_attribute == 'state'
    assert f'{type(var_0.models).__module__}.{type(var_0.models).__qualname__}' == 'builtins.list'
    assert len(var_0.models) == 1
    assert var_0.state == 'initial'
    var_0.trigger(var_0)

@pytest.mark.xfail(strict=True)
def test_case_67():
    parameter_kind_0 = module_2._ParameterKind.VAR_POSITIONAL
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.add_ordered_transitions(loop=machine_0, unless=parameter_kind_0)
    var_1 = machine_0.resolve_callable(machine_0, parameter_kind_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(var_1.states).__module__}.{type(var_1.states).__qualname__}' == 'collections.OrderedDict'
    assert len(var_1.states) == 2
    assert f'{type(var_1.events).__module__}.{type(var_1.events).__qualname__}' == 'builtins.dict'
    assert len(var_1.events) == 3
    assert var_1.send_event is False
    assert var_1.auto_transitions is True
    assert var_1.ignore_invalid_triggers is None
    assert var_1.name == ''
    assert var_1.model_attribute == 'state'
    assert f'{type(var_1.models).__module__}.{type(var_1.models).__qualname__}' == 'builtins.list'
    assert len(var_1.models) == 1
    assert var_1.state == 'initial'
    var_2 = var_1.__dir__()
    module_0.Machine(states=var_2, initial=var_1, transitions=parameter_kind_0, ordered_transitions=parameter_kind_0, queued=var_2)

def test_case_68():
    parameter_kind_0 = module_2._ParameterKind.VAR_KEYWORD
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.get_transitions()
    var_1 = var_0.__delitem__(parameter_kind_0)
    with pytest.raises(ValueError):
        machine_0.add_ordered_transitions(loop=var_1, before=var_0, prepare=var_0)

@pytest.mark.xfail(strict=True)
def test_case_69():
    parameter_kind_0 = module_2._ParameterKind.KEYWORD_ONLY
    machine_0 = module_0.Machine(states=parameter_kind_0, initial=parameter_kind_0, send_event=parameter_kind_0, ignore_invalid_triggers=parameter_kind_0, prepare_event=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event == module_2._ParameterKind.KEYWORD_ONLY
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers == module_2._ParameterKind.KEYWORD_ONLY
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == module_2._ParameterKind.KEYWORD_ONLY
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    machine_0.callback(parameter_kind_0, parameter_kind_0)

@pytest.mark.xfail(strict=True)
def test_case_70():
    parameter_kind_0 = module_2._ParameterKind.VAR_KEYWORD
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.resolve_callable(machine_0, parameter_kind_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(var_0.states).__module__}.{type(var_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(var_0.states) == 2
    assert f'{type(var_0.events).__module__}.{type(var_0.events).__qualname__}' == 'builtins.dict'
    assert len(var_0.events) == 3
    assert var_0.send_event is False
    assert var_0.auto_transitions is True
    assert var_0.ignore_invalid_triggers is None
    assert var_0.name == ''
    assert var_0.model_attribute == 'state'
    assert f'{type(var_0.models).__module__}.{type(var_0.models).__qualname__}' == 'builtins.list'
    assert len(var_0.models) == 1
    assert var_0.state == 'initial'
    var_0.add_states(machine_0, ignore_invalid_triggers=machine_0)

@pytest.mark.xfail(strict=True)
def test_case_71():
    parameter_kind_0 = module_2._ParameterKind.VAR_POSITIONAL
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.get_transitions()
    event_0 = module_0.Event(machine_0, machine_0)
    event_1 = module_0.Event(parameter_kind_0, event_0)
    none_type_0 = None
    var_1 = machine_0.add_transitions(none_type_0)
    var_2 = machine_0.add_ordered_transitions(loop=var_1, after=var_1)
    var_3 = event_1.add_callback(event_1, parameter_kind_0)
    event_1.trigger(var_1)

def test_case_72():
    parameter_kind_0 = module_2._ParameterKind.VAR_POSITIONAL
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, ignore_invalid_triggers=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers == module_2._ParameterKind.VAR_POSITIONAL
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_0 = machine_0.trigger(parameter_kind_0)
    assert var_0 is False

def test_case_73():
    parameter_kind_0 = module_2._ParameterKind.VAR_KEYWORD
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    str_0 = '\rEi"SS'
    var_0 = machine_0.resolve_callable(machine_0, str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(var_0.states).__module__}.{type(var_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(var_0.states) == 2
    assert f'{type(var_0.events).__module__}.{type(var_0.events).__qualname__}' == 'builtins.dict'
    assert len(var_0.events) == 3
    assert var_0.send_event is False
    assert var_0.auto_transitions is True
    assert var_0.ignore_invalid_triggers is None
    assert var_0.name == ''
    assert var_0.model_attribute == 'state'
    assert f'{type(var_0.models).__module__}.{type(var_0.models).__qualname__}' == 'builtins.list'
    assert len(var_0.models) == 1
    assert var_0.state == 'initial'
    var_1 = machine_0.remove_model(var_0)
    assert machine_0.models == []
    assert var_0.models == []
    with pytest.raises(AttributeError):
        machine_0.resolve_callable(str_0, machine_0)

@pytest.mark.xfail(strict=True)
def test_case_74():
    parameter_kind_0 = module_2._ParameterKind.VAR_POSITIONAL
    var_0 = module_0.listify(parameter_kind_0)
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    var_1 = machine_0.resolve_callable(machine_0, parameter_kind_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(var_1.states).__module__}.{type(var_1.states).__qualname__}' == 'collections.OrderedDict'
    assert len(var_1.states) == 2
    assert f'{type(var_1.events).__module__}.{type(var_1.events).__qualname__}' == 'builtins.dict'
    assert len(var_1.events) == 3
    assert var_1.send_event is False
    assert var_1.auto_transitions is True
    assert var_1.ignore_invalid_triggers is None
    assert var_1.name == ''
    assert var_1.model_attribute == 'state'
    assert f'{type(var_1.models).__module__}.{type(var_1.models).__qualname__}' == 'builtins.list'
    assert len(var_1.models) == 1
    assert var_1.state == 'initial'
    var_2 = machine_0.get_triggers()
    var_3 = var_1.resolve_callable(var_2, parameter_kind_0)
    var_1.trigger(var_2)

@pytest.mark.xfail(strict=True)
def test_case_75():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    event_0 = module_0.Event(parameter_kind_0, parameter_kind_0)
    machine_0 = module_0.Machine(states=parameter_kind_0, send_event=event_0, ordered_transitions=event_0, ignore_invalid_triggers=parameter_kind_0, after_state_change=parameter_kind_0, queued=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert f'{type(machine_0.send_event).__module__}.{type(machine_0.send_event).__qualname__}' == 'transitions.core.Event'
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers == module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    event_1 = module_0.Event(machine_0, machine_0)
    var_0 = event_1.trigger(parameter_kind_0)
    assert var_0 is True
    module_0.Machine(states=machine_0, initial=event_1, ordered_transitions=event_0, ignore_invalid_triggers=event_0, after_state_change=var_0)

@pytest.mark.xfail(strict=True)
def test_case_76():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    event_0 = module_0.Event(machine_0, machine_0)
    var_0 = module_2.isasyncgen(event_0)
    var_1 = machine_0.add_ordered_transitions(loop_includes_initial=var_0)
    var_1.trigger(event_0)

@pytest.mark.xfail(strict=True)
def test_case_77():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    machine_0 = module_0.Machine(auto_transitions=parameter_kind_0, after_state_change=parameter_kind_0, queued=parameter_kind_0, prepare_event=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 1
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 1
    assert machine_0.send_event is False
    assert machine_0.auto_transitions == module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    event_0 = module_0.Event(machine_0, machine_0)
    event_0.trigger(machine_0)

@pytest.mark.xfail(strict=True)
def test_case_78():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_ONLY
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 2
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    module_0.Machine(states=parameter_kind_0, initial=machine_0, auto_transitions=machine_0, ordered_transitions=machine_0, ignore_invalid_triggers=machine_0)

def test_case_79():
    parameter_kind_0 = module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    event_0 = module_0.Event(parameter_kind_0, parameter_kind_0)
    machine_0 = module_0.Machine(states=parameter_kind_0, send_event=event_0, ordered_transitions=event_0, ignore_invalid_triggers=parameter_kind_0, after_state_change=parameter_kind_0, queued=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert f'{type(machine_0.send_event).__module__}.{type(machine_0.send_event).__qualname__}' == 'transitions.core.Event'
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers == module_2._ParameterKind.POSITIONAL_OR_KEYWORD
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    event_1 = module_0.Event(machine_0, machine_0)
    var_0 = event_1.trigger(parameter_kind_0)
    assert var_0 is True

def test_case_80():
    parameter_kind_0 = module_2._ParameterKind.VAR_KEYWORD
    var_0 = module_2.ismethoddescriptor(parameter_kind_0)
    machine_0 = module_0.Machine(states=parameter_kind_0, ordered_transitions=parameter_kind_0, after_state_change=parameter_kind_0)
    assert f'{type(machine_0).__module__}.{type(machine_0).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_0.states).__module__}.{type(machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_0.states) == 2
    assert f'{type(machine_0.events).__module__}.{type(machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(machine_0.events) == 3
    assert machine_0.send_event is False
    assert machine_0.auto_transitions is True
    assert machine_0.ignore_invalid_triggers is None
    assert machine_0.name == ''
    assert machine_0.model_attribute == 'state'
    assert f'{type(machine_0.models).__module__}.{type(machine_0.models).__qualname__}' == 'builtins.list'
    assert len(machine_0.models) == 1
    assert machine_0.state == 'initial'
    assert module_0.Machine.separator == '_'
    assert module_0.Machine.wildcard_all == '*'
    assert module_0.Machine.wildcard_same == '='
    assert f'{type(module_0.Machine.initial).__module__}.{type(module_0.Machine.initial).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.has_queue).__module__}.{type(module_0.Machine.has_queue).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.model).__module__}.{type(module_0.Machine.model).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.before_state_change).__module__}.{type(module_0.Machine.before_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.after_state_change).__module__}.{type(module_0.Machine.after_state_change).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Machine.prepare_event).__module__}.{type(module_0.Machine.prepare_event).__qualname__}' == 'builtins.property'
    str_0 = ''
    var_1 = machine_0.resolve_callable(machine_0, machine_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(var_1.states).__module__}.{type(var_1.states).__qualname__}' == 'collections.OrderedDict'
    assert len(var_1.states) == 2
    assert f'{type(var_1.events).__module__}.{type(var_1.events).__qualname__}' == 'builtins.dict'
    assert len(var_1.events) == 3
    assert var_1.send_event is False
    assert var_1.auto_transitions is True
    assert var_1.ignore_invalid_triggers is None
    assert var_1.name == ''
    assert var_1.model_attribute == 'state'
    assert f'{type(var_1.models).__module__}.{type(var_1.models).__qualname__}' == 'builtins.list'
    assert len(var_1.models) == 1
    assert var_1.state == 'initial'
    none_type_0 = None
    machine_1 = module_0.Machine(initial=str_0, auto_transitions=parameter_kind_0, ignore_invalid_triggers=none_type_0, name=none_type_0, finalize_event=none_type_0)
    assert f'{type(machine_1).__module__}.{type(machine_1).__qualname__}' == 'transitions.core.Machine'
    assert f'{type(machine_1.states).__module__}.{type(machine_1.states).__qualname__}' == 'collections.OrderedDict'
    assert len(machine_1.states) == 1
    assert f'{type(machine_1.events).__module__}.{type(machine_1.events).__qualname__}' == 'builtins.dict'
    assert len(machine_1.events) == 1
    assert machine_1.send_event is False
    assert machine_1.auto_transitions == module_2._ParameterKind.VAR_KEYWORD
    assert machine_1.ignore_invalid_triggers is None
    assert machine_1.name == ''
    assert machine_1.model_attribute == 'state'
    assert f'{type(machine_1.models).__module__}.{type(machine_1.models).__qualname__}' == 'builtins.list'
    assert len(machine_1.models) == 1
    assert machine_1.state == ''
    with pytest.raises(AttributeError):
        machine_0.resolve_callable(str_0, var_1)