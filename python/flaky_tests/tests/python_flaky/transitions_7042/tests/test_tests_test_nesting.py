# Automatically generated by Pynguin.
import pytest
import tests.test_nesting as module_0
import platform as module_1
import ast as module_2

def test_case_0():
    test_separators_slash_0 = module_0.TestSeparatorsSlash()
    assert module_0.TestSeparatorsSlash.separator == '/'

@pytest.mark.xfail(strict=True)
def test_case_1():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    test_nested_transitions_0.test_get_triggers()

@pytest.mark.xfail(strict=True)
def test_case_2():
    test_separator_unicode_0 = module_0.TestSeparatorUnicode()
    assert module_0.TestSeparatorUnicode.separator == '↦'
    var_0 = test_separator_unicode_0.setUp()
    assert f'{type(test_separator_unicode_0.states).__module__}.{type(test_separator_unicode_0.states).__qualname__}' == 'builtins.list'
    assert len(test_separator_unicode_0.states) == 6
    assert f'{type(test_separator_unicode_0.stuff).__module__}.{type(test_separator_unicode_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_0.test_transition_definitions()

@pytest.mark.xfail(strict=True)
def test_case_3():
    test_separator_unicode_0 = module_0.TestSeparatorUnicode()
    assert module_0.TestSeparatorUnicode.separator == '↦'
    test_separator_unicode_0.test_ordered_with_graph()

@pytest.mark.xfail(strict=True)
def test_case_4():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    test_nested_transitions_0.test_multiple_add_transitions_from_state()

@pytest.mark.xfail(strict=True)
def test_case_5():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = module_1.win32_is_iot()
    var_1 = test_nested_transitions_0.test_inheritance()
    test_nested_transitions_0.test_conditions()

@pytest.mark.xfail(strict=True)
def test_case_6():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    test_nested_transitions_0.test_use_machine_as_model()

@pytest.mark.xfail(strict=True)
def test_case_7():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = test_nested_transitions_0.setUp()
    assert f'{type(test_nested_transitions_0.states).__module__}.{type(test_nested_transitions_0.states).__qualname__}' == 'builtins.list'
    assert len(test_nested_transitions_0.states) == 6
    assert f'{type(test_nested_transitions_0.stuff).__module__}.{type(test_nested_transitions_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_nested_transitions_0.test_intial_state()
    var_2 = test_nested_transitions_0.test_add_nested_state()
    var_3 = test_nested_transitions_0.test_transition_with_unknown_state()
    var_4 = test_nested_transitions_0.test_pickle()
    var_4.read(var_2)

@pytest.mark.xfail(strict=True)
def test_case_8():
    test_separator_unicode_0 = module_0.TestSeparatorUnicode()
    assert module_0.TestSeparatorUnicode.separator == '↦'
    test_separator_unicode_0.test_state_change_listeners()

def test_case_9():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = test_nested_transitions_0.setUp()
    assert f'{type(test_nested_transitions_0.states).__module__}.{type(test_nested_transitions_0.states).__qualname__}' == 'builtins.list'
    assert len(test_nested_transitions_0.states) == 6
    assert f'{type(test_nested_transitions_0.stuff).__module__}.{type(test_nested_transitions_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_nested_transitions_0.test_transition_with_unknown_state()

def test_case_10():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = test_nested_transitions_0.setUp()
    assert f'{type(test_nested_transitions_0.states).__module__}.{type(test_nested_transitions_0.states).__qualname__}' == 'builtins.list'
    assert len(test_nested_transitions_0.states) == 6
    assert f'{type(test_nested_transitions_0.stuff).__module__}.{type(test_nested_transitions_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = module_2.LtE()
    var_2 = test_nested_transitions_0.test_transition_definitions()
    var_3 = test_nested_transitions_0.test_property_initial()

@pytest.mark.xfail(strict=True)
def test_case_11():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    test_nested_transitions_0.test_multiple_models()

def test_case_12():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = test_nested_transitions_0.setUp()
    assert f'{type(test_nested_transitions_0.states).__module__}.{type(test_nested_transitions_0.states).__qualname__}' == 'builtins.list'
    assert len(test_nested_transitions_0.states) == 6
    assert f'{type(test_nested_transitions_0.stuff).__module__}.{type(test_nested_transitions_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_nested_transitions_0.test_add_model()
    var_2 = test_nested_transitions_0.test_pickle()

def test_case_13():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = test_nested_transitions_0.setUp()
    assert f'{type(test_nested_transitions_0.states).__module__}.{type(test_nested_transitions_0.states).__qualname__}' == 'builtins.list'
    assert len(test_nested_transitions_0.states) == 6
    assert f'{type(test_nested_transitions_0.stuff).__module__}.{type(test_nested_transitions_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    lt_e_0 = module_2.LtE()
    var_1 = test_nested_transitions_0.test_transition_definitions()
    var_2 = test_nested_transitions_0.test_property_initial()
    var_3 = test_nested_transitions_0.test_excessive_nesting()

@pytest.mark.xfail(strict=True)
def test_case_14():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    test_nested_transitions_0.test_add_custom_state()

@pytest.mark.xfail(strict=True)
def test_case_15():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    test_nested_transitions_0.test_init_machine_with_hella_arguments()

@pytest.mark.xfail(strict=True)
def test_case_16():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = test_nested_transitions_0.setUp()
    assert f'{type(test_nested_transitions_0.states).__module__}.{type(test_nested_transitions_0.states).__qualname__}' == 'builtins.list'
    assert len(test_nested_transitions_0.states) == 6
    assert f'{type(test_nested_transitions_0.stuff).__module__}.{type(test_nested_transitions_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_nested_transitions_0.test_callbacks_duplicate()
    lt_e_0 = module_2.LtE()
    var_2 = test_nested_transitions_0.test_transition_with_unknown_state()
    var_3 = test_nested_transitions_0.test_trigger_parent()
    var_4 = test_nested_transitions_0.test_add_model()
    var_5 = test_nested_transitions_0.test_pickle()
    module_0.Dummy(*var_5, **var_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    test_nested_transitions_0.test_ordered_transitions()

def test_case_18():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = test_nested_transitions_0.setUp()
    assert f'{type(test_nested_transitions_0.states).__module__}.{type(test_nested_transitions_0.states).__qualname__}' == 'builtins.list'
    assert len(test_nested_transitions_0.states) == 6
    assert f'{type(test_nested_transitions_0.stuff).__module__}.{type(test_nested_transitions_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    lt_e_0 = module_2.LtE()
    var_1 = test_nested_transitions_0.test_transition_definitions()
    var_2 = test_nested_transitions_0.test_property_initial()
    var_3 = test_nested_transitions_0.test_init_machine_with_nested_states()

@pytest.mark.xfail(strict=True)
def test_case_19():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = test_nested_transitions_0.setUp()
    assert f'{type(test_nested_transitions_0.states).__module__}.{type(test_nested_transitions_0.states).__qualname__}' == 'builtins.list'
    assert len(test_nested_transitions_0.states) == 6
    assert f'{type(test_nested_transitions_0.stuff).__module__}.{type(test_nested_transitions_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_nested_transitions_0.test_enter_exit_nested_state()
    var_2 = test_nested_transitions_0.test_add_nested_state()
    var_3 = test_nested_transitions_0.test_transition_with_unknown_state()
    var_0.test_add_model()

@pytest.mark.xfail(strict=True)
def test_case_20():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = test_nested_transitions_0.test_inheritance()
    test_nested_transitions_0.test_skip_to_override()

def test_case_21():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = test_nested_transitions_0.setUp()
    assert f'{type(test_nested_transitions_0.states).__module__}.{type(test_nested_transitions_0.states).__qualname__}' == 'builtins.list'
    assert len(test_nested_transitions_0.states) == 6
    assert f'{type(test_nested_transitions_0.stuff).__module__}.{type(test_nested_transitions_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    lt_e_0 = module_2.LtE()
    var_1 = test_nested_transitions_0.test_transition_definitions()
    var_2 = test_nested_transitions_0.test_property_initial()
    var_3 = test_nested_transitions_0.test_nested_definitions()

@pytest.mark.xfail(strict=True)
def test_case_22():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    test_nested_transitions_0.test_transitioning()

def test_case_23():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = test_nested_transitions_0.setUp()
    assert f'{type(test_nested_transitions_0.states).__module__}.{type(test_nested_transitions_0.states).__qualname__}' == 'builtins.list'
    assert len(test_nested_transitions_0.states) == 6
    assert f'{type(test_nested_transitions_0.stuff).__module__}.{type(test_nested_transitions_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_nested_transitions_0.test_pickle()

@pytest.mark.xfail(strict=True)
def test_case_24():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = test_nested_transitions_0.setUp()
    assert f'{type(test_nested_transitions_0.states).__module__}.{type(test_nested_transitions_0.states).__qualname__}' == 'builtins.list'
    assert len(test_nested_transitions_0.states) == 6
    assert f'{type(test_nested_transitions_0.stuff).__module__}.{type(test_nested_transitions_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    lt_e_0 = module_2.LtE()
    var_1 = test_nested_transitions_0.test_transition_definitions()
    var_2 = test_nested_transitions_0.test_child_condition_persistence()
    var_0.test_property_initial()

@pytest.mark.xfail(strict=True)
def test_case_25():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    test_nested_transitions_0.test_internal_transitions()

@pytest.mark.xfail(strict=True)
def test_case_26():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = test_nested_transitions_0.setUp()
    assert f'{type(test_nested_transitions_0.states).__module__}.{type(test_nested_transitions_0.states).__qualname__}' == 'builtins.list'
    assert len(test_nested_transitions_0.states) == 6
    assert f'{type(test_nested_transitions_0.stuff).__module__}.{type(test_nested_transitions_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_nested_transitions_0.test_callbacks_duplicate()
    var_0.expandtabs()

@pytest.mark.xfail(strict=True)
def test_case_27():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    test_nested_transitions_0.test_example_one()

@pytest.mark.xfail(strict=True)
def test_case_28():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = test_nested_transitions_0.setUp()
    assert f'{type(test_nested_transitions_0.states).__module__}.{type(test_nested_transitions_0.states).__qualname__}' == 'builtins.list'
    assert len(test_nested_transitions_0.states) == 6
    assert f'{type(test_nested_transitions_0.stuff).__module__}.{type(test_nested_transitions_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_nested_transitions_0.test_skip_to_override()
    var_2 = test_nested_transitions_0.test_state_callbacks()
    lt_e_0 = module_2.LtE()
    var_3 = test_nested_transitions_0.test_transition_with_unknown_state()
    var_4 = test_nested_transitions_0.test_transition_with_unknown_state()
    var_5 = test_nested_transitions_0.test_add_model()
    var_6 = test_nested_transitions_0.test_pickle()
    var_5.delimit(var_6, var_6)

@pytest.mark.xfail(strict=True)
def test_case_29():
    test_nested_transitions_0 = module_0.TestNestedTransitions()
    var_0 = test_nested_transitions_0.setUp()
    assert f'{type(test_nested_transitions_0.states).__module__}.{type(test_nested_transitions_0.states).__qualname__}' == 'builtins.list'
    assert len(test_nested_transitions_0.states) == 6
    assert f'{type(test_nested_transitions_0.stuff).__module__}.{type(test_nested_transitions_0.stuff).__qualname__}' == 'tests.utils.Stuff'
    var_1 = test_nested_transitions_0.test_add_nested_state()
    var_1.test_pickle()