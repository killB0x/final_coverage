# Automatically generated by Pynguin.
import pytest
import transitions.extensions.diagrams as module_0
import transitions.extensions.markup as module_1

def test_case_0():
    graph_machine_0 = module_0.GraphMachine()
    assert f'{type(graph_machine_0).__module__}.{type(graph_machine_0).__qualname__}' == 'transitions.extensions.diagrams.GraphMachine'
    assert graph_machine_0.title == 'State Machine'
    assert graph_machine_0.show_conditions is False
    assert graph_machine_0.show_state_attributes is False
    assert f'{type(graph_machine_0.model_graphs).__module__}.{type(graph_machine_0.model_graphs).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.model_graphs) == 1
    assert graph_machine_0.skip_references is True
    assert f'{type(graph_machine_0.states).__module__}.{type(graph_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(graph_machine_0.states) == 1
    assert f'{type(graph_machine_0.events).__module__}.{type(graph_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.events) == 1
    assert graph_machine_0.send_event is False
    assert graph_machine_0.auto_transitions is True
    assert graph_machine_0.ignore_invalid_triggers is None
    assert graph_machine_0.name == ''
    assert graph_machine_0.model_attribute == 'state'
    assert f'{type(graph_machine_0.models).__module__}.{type(graph_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(graph_machine_0.models) == 1
    assert graph_machine_0.state == 'initial'
    assert module_0.GraphMachine.machine_attributes == {'directed': 'true', 'strict': 'false', 'rankdir': 'LR'}
    assert module_0.GraphMachine.hierarchical_machine_attributes == {'rankdir': 'TB', 'rank': 'source', 'nodesep': '1.5', 'compound': 'true'}
    assert module_0.GraphMachine.style_attributes == {'node': {'': {}, 'default': {'shape': 'rectangle', 'style': 'rounded, filled', 'fillcolor': 'white', 'color': 'black', 'peripheries': '1'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dashed, rounded, filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'peripheries': '2'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'peripheries': '1'}}, 'edge': {'': {}, 'default': {'color': 'black'}, 'previous': {'color': 'blue'}}, 'graph': {'': {}, 'default': {'color': 'black', 'fillcolor': 'white', 'style': 'solid'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'style': 'filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'style': 'filled'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dotted'}}}

def test_case_1():
    graph_machine_0 = module_0.GraphMachine()
    assert f'{type(graph_machine_0).__module__}.{type(graph_machine_0).__qualname__}' == 'transitions.extensions.diagrams.GraphMachine'
    assert graph_machine_0.title == 'State Machine'
    assert graph_machine_0.show_conditions is False
    assert graph_machine_0.show_state_attributes is False
    assert f'{type(graph_machine_0.model_graphs).__module__}.{type(graph_machine_0.model_graphs).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.model_graphs) == 1
    assert graph_machine_0.skip_references is True
    assert f'{type(graph_machine_0.states).__module__}.{type(graph_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(graph_machine_0.states) == 1
    assert f'{type(graph_machine_0.events).__module__}.{type(graph_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.events) == 1
    assert graph_machine_0.send_event is False
    assert graph_machine_0.auto_transitions is True
    assert graph_machine_0.ignore_invalid_triggers is None
    assert graph_machine_0.name == ''
    assert graph_machine_0.model_attribute == 'state'
    assert f'{type(graph_machine_0.models).__module__}.{type(graph_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(graph_machine_0.models) == 1
    assert graph_machine_0.state == 'initial'
    assert module_0.GraphMachine.machine_attributes == {'directed': 'true', 'strict': 'false', 'rankdir': 'LR'}
    assert module_0.GraphMachine.hierarchical_machine_attributes == {'rankdir': 'TB', 'rank': 'source', 'nodesep': '1.5', 'compound': 'true'}
    assert module_0.GraphMachine.style_attributes == {'node': {'': {}, 'default': {'shape': 'rectangle', 'style': 'rounded, filled', 'fillcolor': 'white', 'color': 'black', 'peripheries': '1'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dashed, rounded, filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'peripheries': '2'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'peripheries': '1'}}, 'edge': {'': {}, 'default': {'color': 'black'}, 'previous': {'color': 'blue'}}, 'graph': {'': {}, 'default': {'color': 'black', 'fillcolor': 'white', 'style': 'solid'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'style': 'filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'style': 'filled'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dotted'}}}
    var_0 = graph_machine_0.__getstate__()
    var_1 = graph_machine_0.__setstate__(var_0)

def test_case_2():
    graph_machine_0 = module_0.GraphMachine()
    assert f'{type(graph_machine_0).__module__}.{type(graph_machine_0).__qualname__}' == 'transitions.extensions.diagrams.GraphMachine'
    assert graph_machine_0.title == 'State Machine'
    assert graph_machine_0.show_conditions is False
    assert graph_machine_0.show_state_attributes is False
    assert f'{type(graph_machine_0.model_graphs).__module__}.{type(graph_machine_0.model_graphs).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.model_graphs) == 1
    assert graph_machine_0.skip_references is True
    assert f'{type(graph_machine_0.states).__module__}.{type(graph_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(graph_machine_0.states) == 1
    assert f'{type(graph_machine_0.events).__module__}.{type(graph_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.events) == 1
    assert graph_machine_0.send_event is False
    assert graph_machine_0.auto_transitions is True
    assert graph_machine_0.ignore_invalid_triggers is None
    assert graph_machine_0.name == ''
    assert graph_machine_0.model_attribute == 'state'
    assert f'{type(graph_machine_0.models).__module__}.{type(graph_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(graph_machine_0.models) == 1
    assert graph_machine_0.state == 'initial'
    assert module_0.GraphMachine.machine_attributes == {'directed': 'true', 'strict': 'false', 'rankdir': 'LR'}
    assert module_0.GraphMachine.hierarchical_machine_attributes == {'rankdir': 'TB', 'rank': 'source', 'nodesep': '1.5', 'compound': 'true'}
    assert module_0.GraphMachine.style_attributes == {'node': {'': {}, 'default': {'shape': 'rectangle', 'style': 'rounded, filled', 'fillcolor': 'white', 'color': 'black', 'peripheries': '1'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dashed, rounded, filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'peripheries': '2'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'peripheries': '1'}}, 'edge': {'': {}, 'default': {'color': 'black'}, 'previous': {'color': 'blue'}}, 'graph': {'': {}, 'default': {'color': 'black', 'fillcolor': 'white', 'style': 'solid'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'style': 'filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'style': 'filled'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dotted'}}}
    var_0 = graph_machine_0.get_combined_graph()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'graphviz.graphs.Digraph'
    assert var_0.filename == 'State Machine.gv'
    assert var_0.name == 'State Machine'
    assert var_0.comment is None
    assert var_0.graph_attr == {'color': 'black', 'fillcolor': 'white', 'style': 'solid', 'directed': 'true', 'strict': 'false', 'rankdir': 'LR', 'label': 'State Machine'}
    assert var_0.node_attr == {'shape': 'rectangle', 'style': 'rounded, filled', 'fillcolor': 'white', 'color': 'black', 'peripheries': '1'}
    assert var_0.edge_attr == {'color': 'black'}
    assert var_0.body == ['\tinitial [label=initial color=red fillcolor=darksalmon peripheries=2]\n']
    assert var_0.strict is False

@pytest.mark.xfail(strict=True)
def test_case_3():
    graph_machine_0 = module_0.GraphMachine()
    assert f'{type(graph_machine_0).__module__}.{type(graph_machine_0).__qualname__}' == 'transitions.extensions.diagrams.GraphMachine'
    assert graph_machine_0.title == 'State Machine'
    assert graph_machine_0.show_conditions is False
    assert graph_machine_0.show_state_attributes is False
    assert f'{type(graph_machine_0.model_graphs).__module__}.{type(graph_machine_0.model_graphs).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.model_graphs) == 1
    assert graph_machine_0.skip_references is True
    assert f'{type(graph_machine_0.states).__module__}.{type(graph_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(graph_machine_0.states) == 1
    assert f'{type(graph_machine_0.events).__module__}.{type(graph_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.events) == 1
    assert graph_machine_0.send_event is False
    assert graph_machine_0.auto_transitions is True
    assert graph_machine_0.ignore_invalid_triggers is None
    assert graph_machine_0.name == ''
    assert graph_machine_0.model_attribute == 'state'
    assert f'{type(graph_machine_0.models).__module__}.{type(graph_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(graph_machine_0.models) == 1
    assert graph_machine_0.state == 'initial'
    assert module_0.GraphMachine.machine_attributes == {'directed': 'true', 'strict': 'false', 'rankdir': 'LR'}
    assert module_0.GraphMachine.hierarchical_machine_attributes == {'rankdir': 'TB', 'rank': 'source', 'nodesep': '1.5', 'compound': 'true'}
    assert module_0.GraphMachine.style_attributes == {'node': {'': {}, 'default': {'shape': 'rectangle', 'style': 'rounded, filled', 'fillcolor': 'white', 'color': 'black', 'peripheries': '1'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dashed, rounded, filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'peripheries': '2'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'peripheries': '1'}}, 'edge': {'': {}, 'default': {'color': 'black'}, 'previous': {'color': 'blue'}}, 'graph': {'': {}, 'default': {'color': 'black', 'fillcolor': 'white', 'style': 'solid'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'style': 'filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'style': 'filled'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dotted'}}}
    graph_machine_0.add_model(graph_machine_0)

def test_case_4():
    list_0 = []
    graph_machine_0 = module_0.GraphMachine(*list_0)
    assert f'{type(graph_machine_0).__module__}.{type(graph_machine_0).__qualname__}' == 'transitions.extensions.diagrams.GraphMachine'
    assert graph_machine_0.title == 'State Machine'
    assert graph_machine_0.show_conditions is False
    assert graph_machine_0.show_state_attributes is False
    assert f'{type(graph_machine_0.model_graphs).__module__}.{type(graph_machine_0.model_graphs).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.model_graphs) == 1
    assert graph_machine_0.skip_references is True
    assert f'{type(graph_machine_0.states).__module__}.{type(graph_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(graph_machine_0.states) == 1
    assert f'{type(graph_machine_0.events).__module__}.{type(graph_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.events) == 1
    assert graph_machine_0.send_event is False
    assert graph_machine_0.auto_transitions is True
    assert graph_machine_0.ignore_invalid_triggers is None
    assert graph_machine_0.name == ''
    assert graph_machine_0.model_attribute == 'state'
    assert f'{type(graph_machine_0.models).__module__}.{type(graph_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(graph_machine_0.models) == 1
    assert graph_machine_0.state == 'initial'
    assert module_0.GraphMachine.machine_attributes == {'directed': 'true', 'strict': 'false', 'rankdir': 'LR'}
    assert module_0.GraphMachine.hierarchical_machine_attributes == {'rankdir': 'TB', 'rank': 'source', 'nodesep': '1.5', 'compound': 'true'}
    assert module_0.GraphMachine.style_attributes == {'node': {'': {}, 'default': {'shape': 'rectangle', 'style': 'rounded, filled', 'fillcolor': 'white', 'color': 'black', 'peripheries': '1'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dashed, rounded, filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'peripheries': '2'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'peripheries': '1'}}, 'edge': {'': {}, 'default': {'color': 'black'}, 'previous': {'color': 'blue'}}, 'graph': {'': {}, 'default': {'color': 'black', 'fillcolor': 'white', 'style': 'solid'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'style': 'filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'style': 'filled'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dotted'}}}
    str_0 = 'self'
    var_0 = graph_machine_0.add_transition(str_0, str_0, list_0, after=str_0)

def test_case_5():
    list_0 = []
    graph_machine_0 = module_0.GraphMachine()
    assert f'{type(graph_machine_0).__module__}.{type(graph_machine_0).__qualname__}' == 'transitions.extensions.diagrams.GraphMachine'
    assert graph_machine_0.title == 'State Machine'
    assert graph_machine_0.show_conditions is False
    assert graph_machine_0.show_state_attributes is False
    assert f'{type(graph_machine_0.model_graphs).__module__}.{type(graph_machine_0.model_graphs).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.model_graphs) == 1
    assert graph_machine_0.skip_references is True
    assert f'{type(graph_machine_0.states).__module__}.{type(graph_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(graph_machine_0.states) == 1
    assert f'{type(graph_machine_0.events).__module__}.{type(graph_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.events) == 1
    assert graph_machine_0.send_event is False
    assert graph_machine_0.auto_transitions is True
    assert graph_machine_0.ignore_invalid_triggers is None
    assert graph_machine_0.name == ''
    assert graph_machine_0.model_attribute == 'state'
    assert f'{type(graph_machine_0.models).__module__}.{type(graph_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(graph_machine_0.models) == 1
    assert graph_machine_0.state == 'initial'
    assert module_0.GraphMachine.machine_attributes == {'directed': 'true', 'strict': 'false', 'rankdir': 'LR'}
    assert module_0.GraphMachine.hierarchical_machine_attributes == {'rankdir': 'TB', 'rank': 'source', 'nodesep': '1.5', 'compound': 'true'}
    assert module_0.GraphMachine.style_attributes == {'node': {'': {}, 'default': {'shape': 'rectangle', 'style': 'rounded, filled', 'fillcolor': 'white', 'color': 'black', 'peripheries': '1'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dashed, rounded, filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'peripheries': '2'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'peripheries': '1'}}, 'edge': {'': {}, 'default': {'color': 'black'}, 'previous': {'color': 'blue'}}, 'graph': {'': {}, 'default': {'color': 'black', 'fillcolor': 'white', 'style': 'solid'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'style': 'filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'style': 'filled'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dotted'}}}
    var_0 = graph_machine_0.__setstate__(list_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    graph_machine_0 = module_0.GraphMachine(*list_0)
    assert f'{type(graph_machine_0).__module__}.{type(graph_machine_0).__qualname__}' == 'transitions.extensions.diagrams.GraphMachine'
    assert graph_machine_0.title == 'State Machine'
    assert graph_machine_0.show_conditions is False
    assert graph_machine_0.show_state_attributes is False
    assert f'{type(graph_machine_0.model_graphs).__module__}.{type(graph_machine_0.model_graphs).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.model_graphs) == 1
    assert graph_machine_0.skip_references is True
    assert f'{type(graph_machine_0.states).__module__}.{type(graph_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(graph_machine_0.states) == 1
    assert f'{type(graph_machine_0.events).__module__}.{type(graph_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.events) == 1
    assert graph_machine_0.send_event is False
    assert graph_machine_0.auto_transitions is True
    assert graph_machine_0.ignore_invalid_triggers is None
    assert graph_machine_0.name == ''
    assert graph_machine_0.model_attribute == 'state'
    assert f'{type(graph_machine_0.models).__module__}.{type(graph_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(graph_machine_0.models) == 1
    assert graph_machine_0.state == 'initial'
    assert module_0.GraphMachine.machine_attributes == {'directed': 'true', 'strict': 'false', 'rankdir': 'LR'}
    assert module_0.GraphMachine.hierarchical_machine_attributes == {'rankdir': 'TB', 'rank': 'source', 'nodesep': '1.5', 'compound': 'true'}
    assert module_0.GraphMachine.style_attributes == {'node': {'': {}, 'default': {'shape': 'rectangle', 'style': 'rounded, filled', 'fillcolor': 'white', 'color': 'black', 'peripheries': '1'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dashed, rounded, filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'peripheries': '2'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'peripheries': '1'}}, 'edge': {'': {}, 'default': {'color': 'black'}, 'previous': {'color': 'blue'}}, 'graph': {'': {}, 'default': {'color': 'black', 'fillcolor': 'white', 'style': 'solid'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'style': 'filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'style': 'filled'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dotted'}}}
    str_0 = 'slf'
    list_1 = [str_0]
    var_0 = graph_machine_0.add_transition(str_0, list_1, str_0, after=list_0)
    markup_machine_0 = graph_machine_0.add_states(list_0, graph_machine_0)
    str_0.__getstate__()

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    graph_machine_0 = module_0.GraphMachine(*list_0)
    assert f'{type(graph_machine_0).__module__}.{type(graph_machine_0).__qualname__}' == 'transitions.extensions.diagrams.GraphMachine'
    assert graph_machine_0.title == 'State Machine'
    assert graph_machine_0.show_conditions is False
    assert graph_machine_0.show_state_attributes is False
    assert graph_machine_0.model_graphs == {}
    assert graph_machine_0.skip_references is True
    assert f'{type(graph_machine_0.states).__module__}.{type(graph_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(graph_machine_0.states) == 0
    assert graph_machine_0.events == {}
    assert graph_machine_0.send_event is False
    assert graph_machine_0.auto_transitions is True
    assert graph_machine_0.ignore_invalid_triggers is None
    assert graph_machine_0.name == ''
    assert graph_machine_0.model_attribute == 'state'
    assert graph_machine_0.models == []
    assert module_0.GraphMachine.machine_attributes == {'directed': 'true', 'strict': 'false', 'rankdir': 'LR'}
    assert module_0.GraphMachine.hierarchical_machine_attributes == {'rankdir': 'TB', 'rank': 'source', 'nodesep': '1.5', 'compound': 'true'}
    assert module_0.GraphMachine.style_attributes == {'node': {'': {}, 'default': {'shape': 'rectangle', 'style': 'rounded, filled', 'fillcolor': 'white', 'color': 'black', 'peripheries': '1'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dashed, rounded, filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'peripheries': '2'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'peripheries': '1'}}, 'edge': {'': {}, 'default': {'color': 'black'}, 'previous': {'color': 'blue'}}, 'graph': {'': {}, 'default': {'color': 'black', 'fillcolor': 'white', 'style': 'solid'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'style': 'filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'style': 'filled'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dotted'}}}
    list_1 = []
    graph_machine_1 = module_0.GraphMachine(*list_1)
    assert f'{type(graph_machine_1).__module__}.{type(graph_machine_1).__qualname__}' == 'transitions.extensions.diagrams.GraphMachine'
    assert graph_machine_1.title == 'State Machine'
    assert graph_machine_1.show_conditions is False
    assert graph_machine_1.show_state_attributes is False
    assert f'{type(graph_machine_1.model_graphs).__module__}.{type(graph_machine_1.model_graphs).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_1.model_graphs) == 1
    assert graph_machine_1.skip_references is True
    assert f'{type(graph_machine_1.states).__module__}.{type(graph_machine_1.states).__qualname__}' == 'collections.OrderedDict'
    assert len(graph_machine_1.states) == 1
    assert f'{type(graph_machine_1.events).__module__}.{type(graph_machine_1.events).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_1.events) == 1
    assert graph_machine_1.send_event is False
    assert graph_machine_1.auto_transitions is True
    assert graph_machine_1.ignore_invalid_triggers is None
    assert graph_machine_1.name == ''
    assert graph_machine_1.model_attribute == 'state'
    assert f'{type(graph_machine_1.models).__module__}.{type(graph_machine_1.models).__qualname__}' == 'builtins.list'
    assert len(graph_machine_1.models) == 1
    assert graph_machine_1.state == 'initial'
    var_0 = graph_machine_1.__getstate__()
    markup_machine_0 = module_1.MarkupMachine()
    var_1 = graph_machine_1.__getstate__()
    var_2 = graph_machine_1.__setstate__(list_1)
    var_2.__getstate__()

def test_case_8():
    graph_machine_0 = module_0.GraphMachine()
    assert f'{type(graph_machine_0).__module__}.{type(graph_machine_0).__qualname__}' == 'transitions.extensions.diagrams.GraphMachine'
    assert graph_machine_0.title == 'State Machine'
    assert graph_machine_0.show_conditions is False
    assert graph_machine_0.show_state_attributes is False
    assert f'{type(graph_machine_0.model_graphs).__module__}.{type(graph_machine_0.model_graphs).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.model_graphs) == 1
    assert graph_machine_0.skip_references is True
    assert f'{type(graph_machine_0.states).__module__}.{type(graph_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(graph_machine_0.states) == 1
    assert f'{type(graph_machine_0.events).__module__}.{type(graph_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.events) == 1
    assert graph_machine_0.send_event is False
    assert graph_machine_0.auto_transitions is True
    assert graph_machine_0.ignore_invalid_triggers is None
    assert graph_machine_0.name == ''
    assert graph_machine_0.model_attribute == 'state'
    assert f'{type(graph_machine_0.models).__module__}.{type(graph_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(graph_machine_0.models) == 1
    assert graph_machine_0.state == 'initial'
    assert module_0.GraphMachine.machine_attributes == {'directed': 'true', 'strict': 'false', 'rankdir': 'LR'}
    assert module_0.GraphMachine.hierarchical_machine_attributes == {'rankdir': 'TB', 'rank': 'source', 'nodesep': '1.5', 'compound': 'true'}
    assert module_0.GraphMachine.style_attributes == {'node': {'': {}, 'default': {'shape': 'rectangle', 'style': 'rounded, filled', 'fillcolor': 'white', 'color': 'black', 'peripheries': '1'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dashed, rounded, filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'peripheries': '2'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'peripheries': '1'}}, 'edge': {'': {}, 'default': {'color': 'black'}, 'previous': {'color': 'blue'}}, 'graph': {'': {}, 'default': {'color': 'black', 'fillcolor': 'white', 'style': 'solid'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'style': 'filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'style': 'filled'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dotted'}}}
    var_0 = graph_machine_0.get_combined_graph(show_roi=graph_machine_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'graphviz.graphs.Digraph'
    assert var_0.filename == 'State Machine.gv'
    assert var_0.name == 'State Machine'
    assert var_0.comment is None
    assert var_0.graph_attr == {'color': 'black', 'fillcolor': 'white', 'style': 'solid', 'directed': 'true', 'strict': 'false', 'rankdir': 'LR', 'label': 'State Machine'}
    assert var_0.node_attr == {'shape': 'rectangle', 'style': 'rounded, filled', 'fillcolor': 'white', 'color': 'black', 'peripheries': '1'}
    assert var_0.edge_attr == {'color': 'black'}
    assert var_0.body == ['\tinitial [label=initial color=red fillcolor=darksalmon peripheries=2]\n']
    assert var_0.strict is False

@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    graph_machine_0 = module_0.GraphMachine(*list_0)
    assert f'{type(graph_machine_0).__module__}.{type(graph_machine_0).__qualname__}' == 'transitions.extensions.diagrams.GraphMachine'
    assert graph_machine_0.title == 'State Machine'
    assert graph_machine_0.show_conditions is False
    assert graph_machine_0.show_state_attributes is False
    assert f'{type(graph_machine_0.model_graphs).__module__}.{type(graph_machine_0.model_graphs).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.model_graphs) == 1
    assert graph_machine_0.skip_references is True
    assert f'{type(graph_machine_0.states).__module__}.{type(graph_machine_0.states).__qualname__}' == 'collections.OrderedDict'
    assert len(graph_machine_0.states) == 1
    assert f'{type(graph_machine_0.events).__module__}.{type(graph_machine_0.events).__qualname__}' == 'builtins.dict'
    assert len(graph_machine_0.events) == 1
    assert graph_machine_0.send_event is False
    assert graph_machine_0.auto_transitions is True
    assert graph_machine_0.ignore_invalid_triggers is None
    assert graph_machine_0.name == ''
    assert graph_machine_0.model_attribute == 'state'
    assert f'{type(graph_machine_0.models).__module__}.{type(graph_machine_0.models).__qualname__}' == 'builtins.list'
    assert len(graph_machine_0.models) == 1
    assert graph_machine_0.state == 'initial'
    assert module_0.GraphMachine.machine_attributes == {'directed': 'true', 'strict': 'false', 'rankdir': 'LR'}
    assert module_0.GraphMachine.hierarchical_machine_attributes == {'rankdir': 'TB', 'rank': 'source', 'nodesep': '1.5', 'compound': 'true'}
    assert module_0.GraphMachine.style_attributes == {'node': {'': {}, 'default': {'shape': 'rectangle', 'style': 'rounded, filled', 'fillcolor': 'white', 'color': 'black', 'peripheries': '1'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dashed, rounded, filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'peripheries': '2'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'peripheries': '1'}}, 'edge': {'': {}, 'default': {'color': 'black'}, 'previous': {'color': 'blue'}}, 'graph': {'': {}, 'default': {'color': 'black', 'fillcolor': 'white', 'style': 'solid'}, 'previous': {'color': 'blue', 'fillcolor': 'azure2', 'style': 'filled'}, 'active': {'color': 'red', 'fillcolor': 'darksalmon', 'style': 'filled'}, 'parallel': {'color': 'black', 'fillcolor': 'white', 'style': 'dotted'}}}
    str_0 = 'slf'
    list_1 = [str_0]
    var_0 = graph_machine_0.add_transition(str_0, list_1, str_0, after=list_0)
    var_0.__getstate__()