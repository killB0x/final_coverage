# Automatically generated by Pynguin.
import pytest
import src.core as module_0
import tokenize as module_1
import inspect as module_2
import ast as module_3
import posixpath as module_4

def test_case_0():
    with pytest.raises(ValueError):
        module_0.Parser()

def test_case_1():
    var_0 = module_1.maybe()
    var_1 = module_2.getdoc(var_0)
    var_2 = module_0.try_parse(var_1, var_0)
    assert module_0.HOME == '/root'

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '.json'
    module_0.try_parse(str_0, str_0)

def test_case_3():
    var_0 = module_1.group()
    parser_0 = module_0.Parser(prog=var_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'src.core.Parser'
    assert parser_0.description is None
    assert parser_0.argument_default is None
    assert parser_0.prefix_chars == '-'
    assert parser_0.conflict_handler == 'error'
    assert parser_0.prog == '()'
    assert parser_0.usage is None
    assert parser_0.epilog is None
    assert parser_0.fromfile_prefix_chars is None
    assert parser_0.add_help is True
    assert parser_0.allow_abbrev is True
    assert parser_0.exit_on_error is True
    assert module_0.HOME == '/root'
    assert module_0.Parser.default_ext == '.json'

def test_case_4():
    var_0 = module_1.maybe()
    parser_0 = module_0.Parser(prog=var_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'src.core.Parser'
    assert parser_0.description is None
    assert parser_0.argument_default is None
    assert parser_0.prefix_chars == '-'
    assert parser_0.conflict_handler == 'error'
    assert parser_0.prog == '()?'
    assert parser_0.usage is None
    assert parser_0.epilog is None
    assert parser_0.fromfile_prefix_chars is None
    assert parser_0.add_help is True
    assert parser_0.allow_abbrev is True
    assert parser_0.exit_on_error is True
    assert module_0.HOME == '/root'
    assert module_0.Parser.default_ext == '.json'
    var_1 = parser_0.parse_known_args()

def test_case_5():
    var_0 = module_1.maybe()
    parser_0 = module_0.Parser(prog=var_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'src.core.Parser'
    assert parser_0.description is None
    assert parser_0.argument_default is None
    assert parser_0.prefix_chars == '-'
    assert parser_0.conflict_handler == 'error'
    assert parser_0.prog == '()?'
    assert parser_0.usage is None
    assert parser_0.epilog is None
    assert parser_0.fromfile_prefix_chars is None
    assert parser_0.add_help is True
    assert parser_0.allow_abbrev is True
    assert parser_0.exit_on_error is True
    assert module_0.HOME == '/root'
    assert module_0.Parser.default_ext == '.json'
    var_1 = parser_0.set_default_ext(var_0)
    assert parser_0.default_ext == '.()?'

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    var_0 = module_0.files_in(none_type_0)
    assert module_0.HOME == '/root'
    module_3.Attribute(*var_0)

def test_case_7():
    str_0 = '?GA'
    var_0 = module_4.dirname(str_0)
    with pytest.raises(ValueError):
        module_0.Parser(prog=var_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '.json'
    parser_0 = module_0.Parser(prog=str_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'src.core.Parser'
    assert parser_0.description is None
    assert parser_0.argument_default is None
    assert parser_0.prefix_chars == '-'
    assert parser_0.conflict_handler == 'error'
    assert parser_0.prog == '.json'
    assert parser_0.usage is None
    assert parser_0.epilog is None
    assert parser_0.fromfile_prefix_chars is None
    assert parser_0.add_help is True
    assert parser_0.allow_abbrev is True
    assert parser_0.exit_on_error is True
    assert module_0.HOME == '/root'
    assert module_0.Parser.default_ext == '.json'
    var_0 = parser_0.set_default_ext(str_0)
    assert parser_0.default_ext == '.json'
    var_1 = parser_0.parse_known_args(namespace=var_0)
    module_3.Attribute(*var_0)