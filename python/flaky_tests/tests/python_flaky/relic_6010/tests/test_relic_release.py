# Automatically generated by Pynguin.
import pytest
import relic.release as module_0

def test_case_0():
    float_0 = 67.12
    with pytest.raises(AssertionError):
        module_0.write_template(float_0, float_0)

def test_case_1():
    bool_0 = True
    var_0 = module_0.write_info(bool_0)
    assert module_0.template == "# AUTOMATICALLY GENERATED BY 'RELIC':\n# * DO NOT EDIT THIS MODULE MANUALLY.\n# * DO NOT COMMIT THIS MODULE TO YOUR GIT REPOSITORY\n\n__all__ = [\n    '__version__',\n    '__version_short__',\n    '__version_long__',\n    '__version_post__',\n    '__version_commit__',\n    '__version_date__',\n    '__version_dirty__',\n    '__build_date__',\n    '__build_time__',\n    '__build_status__'\n]\n\n__version__ = '{0}'\n__version_short__ = '{1}'\n__version_long__ = '{2}'\n__version_post__ = '{3}'\n__version_commit__ = '{4}'\n__version_date__ = '{5}'\n__version_dirty__ = {6}\n__build_date__ = '{7}'\n__build_time__ = '{8}'\n__build_status__ = 'release' if not int(__version_post__) > 0 \\\n    and not __version_dirty__ \\\n    else 'development'\n"

def test_case_2():
    module_0.read_info()
    var_0 = module_0.read_info()
    var_1 = module_0.read_info()
    var_3 = var_2.reset()

def test_case_3():
    module_0.read_info()

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'\x8a\x15\x1e|\xe2\xfd\xdd)\xc6P\xcc\xb3=Mq\xe2'
    module_0.write_info(bytes_0)