# Automatically generated by Pynguin.
import pytest
import qexpy.utils.units as module_0

def test_case_0():
    dict_0 = {}
    str_0 = module_0.construct_unit_string(dict_0)
    assert str_0 == ''
    assert module_0.DOT_STRING == '⋅'

def test_case_1():
    none_type_0 = None
    var_0 = module_0.operate_with_units(none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'collections.OrderedDict'
    assert len(var_0) == 0
    assert module_0.DOT_STRING == '⋅'

def test_case_2():
    str_0 = 'V'
    dict_0 = module_0.parse_unit_string(str_0)
    assert f'{type(dict_0).__module__}.{type(dict_0).__qualname__}' == 'collections.OrderedDict'
    assert len(dict_0) == 1
    assert module_0.DOT_STRING == '⋅'

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'pTHCy\\9$7uqW>'
    module_0.parse_unit_string(str_0)

def test_case_4():
    str_0 = 'V'
    dict_0 = module_0.parse_unit_string(str_0)
    assert f'{type(dict_0).__module__}.{type(dict_0).__qualname__}' == 'collections.OrderedDict'
    assert len(dict_0) == 1
    assert module_0.DOT_STRING == '⋅'
    str_1 = module_0.construct_unit_string(dict_0)
    assert str_1 == 'V'

def test_case_5():
    str_0 = 'P/m'
    dict_0 = module_0.parse_unit_string(str_0)
    assert f'{type(dict_0).__module__}.{type(dict_0).__qualname__}' == 'collections.OrderedDict'
    assert len(dict_0) == 2
    assert module_0.DOT_STRING == '⋅'
    str_1 = module_0.construct_unit_string(dict_0)
    assert str_1 == 'P⋅m^-1'

@pytest.mark.xfail(strict=True)
def test_case_6():
    module_0.Expression()

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '/'
    module_0.parse_unit_string(str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'R)Cql&&C\t'
    bool_0 = False
    str_1 = '9%+GtFZd92tfmi5LB'
    str_2 = 'G!B"\rRV<T7{#t'
    int_0 = -2802
    str_3 = ',ly&2'
    dict_0 = {str_0: bool_0, str_1: int_0, str_2: int_0, str_3: int_0}
    var_0 = module_0.operate_with_units(str_3)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'collections.OrderedDict'
    assert len(var_0) == 0
    assert module_0.DOT_STRING == '⋅'
    str_4 = module_0.construct_unit_string(dict_0)
    assert str_4 == 'R)Cql&&C\t^0⋅9%+GtFZd92tfmi5LB^-2802⋅G!B"\rRV<T7{#t^-2802⋅,ly&2^-2802'
    var_1 = var_0.__str__()
    module_0.parse_unit_string(var_1)

def test_case_9():
    str_0 = 'P/m'
    dict_0 = module_0.parse_unit_string(str_0)
    assert f'{type(dict_0).__module__}.{type(dict_0).__qualname__}' == 'collections.OrderedDict'
    assert len(dict_0) == 2
    assert module_0.DOT_STRING == '⋅'

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '/m'
    module_0.parse_unit_string(str_0)

def test_case_11():
    str_0 = 'P/m'
    dict_0 = module_0.parse_unit_string(str_0)
    assert f'{type(dict_0).__module__}.{type(dict_0).__qualname__}' == 'collections.OrderedDict'
    assert len(dict_0) == 2
    assert module_0.DOT_STRING == '⋅'
    str_1 = module_0.construct_unit_string(dict_0)
    assert str_1 == 'P⋅m^-1'
    dict_1 = module_0.parse_unit_string(str_1)
    assert f'{type(dict_1).__module__}.{type(dict_1).__qualname__}' == 'collections.OrderedDict'
    assert len(dict_1) == 2

def test_case_12():
    str_0 = 'm/m'
    dict_0 = module_0.parse_unit_string(str_0)
    assert f'{type(dict_0).__module__}.{type(dict_0).__qualname__}' == 'collections.OrderedDict'
    assert len(dict_0) == 1
    assert module_0.DOT_STRING == '⋅'

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'o^0f'
    dict_0 = module_0.parse_unit_string(str_0)
    assert f'{type(dict_0).__module__}.{type(dict_0).__qualname__}' == 'collections.OrderedDict'
    assert len(dict_0) == 2
    assert module_0.DOT_STRING == '⋅'
    var_0 = module_0.operate_with_units(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'collections.OrderedDict'
    assert len(var_0) == 0
    str_1 = module_0.construct_unit_string(dict_0)
    assert str_1 == 'o^0⋅f'
    str_2 = module_0.construct_unit_string(var_0)
    none_type_0 = None
    str_3 = 'I(z)cf'
    dict_1 = module_0.parse_unit_string(str_3)
    assert f'{type(dict_1).__module__}.{type(dict_1).__qualname__}' == 'collections.OrderedDict'
    assert len(dict_1) == 3
    var_1 = module_0.operate_with_units(none_type_0)
    var_2 = module_0.operate_with_units(str_0)
    str_4 = '.isBL!Tg'
    module_0.parse_unit_string(str_4)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'neg'
    dict_0 = module_0.parse_unit_string(str_0)
    assert f'{type(dict_0).__module__}.{type(dict_0).__qualname__}' == 'collections.OrderedDict'
    assert len(dict_0) == 1
    assert module_0.DOT_STRING == '⋅'
    str_1 = 'o^0f'
    dict_1 = module_0.parse_unit_string(str_1)
    assert f'{type(dict_1).__module__}.{type(dict_1).__qualname__}' == 'collections.OrderedDict'
    assert len(dict_1) == 2
    var_0 = module_0.operate_with_units(str_1)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'collections.OrderedDict'
    assert len(var_0) == 0
    str_2 = module_0.construct_unit_string(dict_1)
    assert str_2 == 'o^0⋅f'
    module_0.operate_with_units(str_0, *dict_0)