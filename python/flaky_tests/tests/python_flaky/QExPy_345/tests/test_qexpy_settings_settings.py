# Automatically generated by Pynguin.
import pytest
import qexpy.settings.settings as module_0

def test_case_0():
    tuple_0 = module_0.reset_default_configuration()

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    module_0.set_sig_figs_for_error(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'neg'
    module_0.set_error_method(str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "Evaluates a Formula with original values of measurements or sample values\n\n    This function evaluates the formula with the original measurements by default. If a set\n    of samples are passed in, the formula will be evaluated with the sample values.\n\n    Args:\n        formula (Union[dt.Formula, dt.ExperimentalValue]): the formula to be evaluated\n        samples (Dict): an np.ndarray of samples assigned to each source measurements's ID.\n\n    "
    module_0.set_print_style(str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'qAka\\3G'
    module_0.set_unit_style(str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    var_0 = module_0.set_monte_carlo_sample_size(bool_0)
    var_1 = module_0.set_sig_figs_for_error(bool_0)
    str_0 = 'qAka\\3G'
    module_0.set_error_method(str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    set_0 = set()
    module_0.set_sig_figs_for_value(set_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    module_0.set_monte_carlo_sample_size(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    tuple_0 = ()
    module_0.set_plot_dimensions(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_0.set_plot_dimensions(none_type_0)

def test_case_10():
    pass

def test_case_11():
    var_0 = module_0.Settings()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'qexpy.settings.settings.Settings'
    assert f'{type(module_0.Settings.error_method).__module__}.{type(module_0.Settings.error_method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.print_style).__module__}.{type(module_0.Settings.print_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.unit_style).__module__}.{type(module_0.Settings.unit_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_mode).__module__}.{type(module_0.Settings.sig_fig_mode).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_value).__module__}.{type(module_0.Settings.sig_fig_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.monte_carlo_sample_size).__module__}.{type(module_0.Settings.monte_carlo_sample_size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.plot_dimensions).__module__}.{type(module_0.Settings.plot_dimensions).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_12():
    print_style_0 = module_0.PrintStyle.SCIENTIFIC
    var_0 = module_0.set_print_style(print_style_0)
    int_0 = 787
    var_1 = module_0.set_sig_figs_for_value(int_0)
    str_0 = 'qAka\\3G'
    module_0.set_unit_style(str_0)

def test_case_13():
    int_0 = 0
    var_0 = module_0.use_mc_sample_size(int_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    float_0 = -3116.175
    module_0.set_print_style(float_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    settings_0 = module_0.Settings()
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'qexpy.settings.settings.Settings'
    assert f'{type(module_0.Settings.error_method).__module__}.{type(module_0.Settings.error_method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.print_style).__module__}.{type(module_0.Settings.print_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.unit_style).__module__}.{type(module_0.Settings.unit_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_mode).__module__}.{type(module_0.Settings.sig_fig_mode).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_value).__module__}.{type(module_0.Settings.sig_fig_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.monte_carlo_sample_size).__module__}.{type(module_0.Settings.monte_carlo_sample_size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.plot_dimensions).__module__}.{type(module_0.Settings.plot_dimensions).__qualname__}' == 'builtins.property'
    set_0 = {settings_0, settings_0, settings_0, settings_0}
    module_0.set_unit_style(set_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    int_0 = -1496
    module_0.set_sig_figs_for_error(int_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = True
    var_0 = module_0.set_monte_carlo_sample_size(bool_0)
    str_0 = 'qAka\\3G'
    module_0.set_unit_style(str_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    settings_0 = module_0.Settings()
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'qexpy.settings.settings.Settings'
    assert f'{type(module_0.Settings.error_method).__module__}.{type(module_0.Settings.error_method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.print_style).__module__}.{type(module_0.Settings.print_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.unit_style).__module__}.{type(module_0.Settings.unit_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_mode).__module__}.{type(module_0.Settings.sig_fig_mode).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_value).__module__}.{type(module_0.Settings.sig_fig_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.monte_carlo_sample_size).__module__}.{type(module_0.Settings.monte_carlo_sample_size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.plot_dimensions).__module__}.{type(module_0.Settings.plot_dimensions).__qualname__}' == 'builtins.property'
    var_0 = settings_0.reset()
    module_0.set_monte_carlo_sample_size(var_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    unit_style_0 = module_0.UnitStyle.FRACTION
    var_0 = module_0.set_unit_style(unit_style_0)
    str_0 = 'Sets the correlation factor between two MeasuredValue objects\n\n    Args:\n        var1, var2 (ExperimentalValue): the two values to set correlation between\n\n    See Also:\n        :py:func:`ExperimentalValue.set_correlation`\n\n    '
    module_0.set_print_style(str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    error_method_0 = module_0.ErrorMethod.DERIVATIVE
    var_0 = module_0.set_error_method(error_method_0)
    settings_0 = module_0.Settings()
    assert f'{type(module_0.Settings.error_method).__module__}.{type(module_0.Settings.error_method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.print_style).__module__}.{type(module_0.Settings.print_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.unit_style).__module__}.{type(module_0.Settings.unit_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_mode).__module__}.{type(module_0.Settings.sig_fig_mode).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_value).__module__}.{type(module_0.Settings.sig_fig_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.monte_carlo_sample_size).__module__}.{type(module_0.Settings.monte_carlo_sample_size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.plot_dimensions).__module__}.{type(module_0.Settings.plot_dimensions).__qualname__}' == 'builtins.property'
    tuple_0 = (settings_0, settings_0)
    module_0.set_plot_dimensions(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    settings_0 = module_0.Settings()
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'qexpy.settings.settings.Settings'
    assert f'{type(module_0.Settings.error_method).__module__}.{type(module_0.Settings.error_method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.print_style).__module__}.{type(module_0.Settings.print_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.unit_style).__module__}.{type(module_0.Settings.unit_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_mode).__module__}.{type(module_0.Settings.sig_fig_mode).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_value).__module__}.{type(module_0.Settings.sig_fig_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.monte_carlo_sample_size).__module__}.{type(module_0.Settings.monte_carlo_sample_size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.plot_dimensions).__module__}.{type(module_0.Settings.plot_dimensions).__qualname__}' == 'builtins.property'
    tuple_0 = (settings_0, settings_0)
    module_0.set_plot_dimensions(tuple_0)

def test_case_22():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    var_0 = module_0.set_plot_dimensions(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    error_method_0 = module_0.ErrorMethod.DERIVATIVE
    settings_0 = module_0.Settings()
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'qexpy.settings.settings.Settings'
    assert f'{type(module_0.Settings.error_method).__module__}.{type(module_0.Settings.error_method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.print_style).__module__}.{type(module_0.Settings.print_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.unit_style).__module__}.{type(module_0.Settings.unit_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_mode).__module__}.{type(module_0.Settings.sig_fig_mode).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_value).__module__}.{type(module_0.Settings.sig_fig_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.monte_carlo_sample_size).__module__}.{type(module_0.Settings.monte_carlo_sample_size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.plot_dimensions).__module__}.{type(module_0.Settings.plot_dimensions).__qualname__}' == 'builtins.property'
    settings_1 = module_0.get_settings()
    assert f'{type(settings_1).__module__}.{type(settings_1).__qualname__}' == 'qexpy.settings.settings.Settings'
    var_0 = module_0.set_error_method(error_method_0)
    var_1 = module_0.reset_default_configuration()
    str_0 = 'fraction'
    var_2 = module_0.set_unit_style(str_0)
    str_1 = 'edgecolor'
    module_0.set_print_style(str_1)

@pytest.mark.xfail(strict=True)
def test_case_24():
    print_style_0 = module_0.PrintStyle.LATEX
    int_0 = 1572
    var_0 = module_0.set_sig_figs_for_value(int_0)
    var_1 = module_0.set_print_style(print_style_0)
    error_method_0 = module_0.ErrorMethod.DERIVATIVE
    settings_0 = module_0.Settings()
    assert f'{type(module_0.Settings.error_method).__module__}.{type(module_0.Settings.error_method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.print_style).__module__}.{type(module_0.Settings.print_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.unit_style).__module__}.{type(module_0.Settings.unit_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_mode).__module__}.{type(module_0.Settings.sig_fig_mode).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_value).__module__}.{type(module_0.Settings.sig_fig_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.monte_carlo_sample_size).__module__}.{type(module_0.Settings.monte_carlo_sample_size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.plot_dimensions).__module__}.{type(module_0.Settings.plot_dimensions).__qualname__}' == 'builtins.property'
    settings_1 = module_0.get_settings()
    var_2 = module_0.set_error_method(error_method_0)
    var_3 = module_0.use_mc_sample_size(int_0)
    str_0 = 'monte-carlo'
    var_4 = module_0.set_error_method(str_0)
    module_0.set_print_style(str_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    print_style_0 = module_0.PrintStyle.LATEX
    var_0 = module_0.set_print_style(print_style_0)
    error_method_0 = module_0.ErrorMethod.DERIVATIVE
    settings_0 = module_0.Settings()
    assert f'{type(module_0.Settings.error_method).__module__}.{type(module_0.Settings.error_method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.print_style).__module__}.{type(module_0.Settings.print_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.unit_style).__module__}.{type(module_0.Settings.unit_style).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_mode).__module__}.{type(module_0.Settings.sig_fig_mode).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.sig_fig_value).__module__}.{type(module_0.Settings.sig_fig_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.monte_carlo_sample_size).__module__}.{type(module_0.Settings.monte_carlo_sample_size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Settings.plot_dimensions).__module__}.{type(module_0.Settings.plot_dimensions).__qualname__}' == 'builtins.property'
    settings_1 = module_0.get_settings()
    var_1 = module_0.set_error_method(error_method_0)
    settings_2 = module_0.Settings()
    var_2 = settings_0.reset()
    unit_style_0 = module_0.UnitStyle.FRACTION
    var_3 = module_0.set_unit_style(unit_style_0)
    str_0 = 'scientific'
    var_4 = module_0.set_print_style(str_0)
    module_0.set_print_style(var_3)