# Automatically generated by Pynguin.
import pytest
import ctyped.utils as module_0
import ctyped.exceptions as module_1

def test_case_0():
    str_0 = ')fPq3v:Yl&'
    var_0 = module_0.thint_str_to_obj(str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    callable_0 = module_0.c_callback()
    str_0 = 'AB'
    var_0 = module_0.thint_str_to_obj(str_0)
    var_1 = module_0.cast_type(var_0, var_0, var_0)
    str_1 = 'O'
    var_2 = module_0.thint_str_to_obj(str_1)
    module_0.FuncInfo(**var_1)

def test_case_2():
    callable_0 = module_0.c_callback()
    var_0 = module_0.cast_type(callable_0, callable_0, callable_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    callable_0 = module_0.c_callback()
    module_0.FuncInfo()

@pytest.mark.xfail(strict=True)
def test_case_4():
    module_0.FuncInfo()

@pytest.mark.xfail(strict=True)
def test_case_5():
    module_0.get_last_error()

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = ')fPq3v:Yl&'
    module_0.cast_type(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    callable_0 = module_0.c_callback()
    module_0.c_callback(callable_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = ',FyD'
    callable_0 = module_0.c_callback()
    dict_0 = {callable_0: callable_0}
    func_info_0 = module_0.extract_func_info(callable_0, name_c=str_0, scope=dict_0, registry=dict_0)
    assert f'{type(func_info_0).__module__}.{type(func_info_0).__qualname__}' == 'ctyped.utils.FuncInfo'
    assert len(func_info_0) == 4
    assert f'{type(module_0.FuncInfo.name_py).__module__}.{type(module_0.FuncInfo.name_py).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.FuncInfo.name_c).__module__}.{type(module_0.FuncInfo.name_c).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.FuncInfo.annotations).__module__}.{type(module_0.FuncInfo.annotations).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.FuncInfo.options).__module__}.{type(module_0.FuncInfo.options).__qualname__}' == '_collections._tuplegetter'
    var_0 = module_0.thint_str_to_obj(callable_0)
    dict_1 = {str_0: str_0}
    var_1 = module_0.cast_type(callable_0, str_0, dict_1)
    module_0.MissingType(**dict_1)

def test_case_9():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    callable_0 = module_0.c_callback()
    func_info_0 = module_0.extract_func_info(callable_0, name_c=none_type_0, scope=dict_0, registry=dict_0)
    assert f'{type(func_info_0).__module__}.{type(func_info_0).__qualname__}' == 'ctyped.utils.FuncInfo'
    assert len(func_info_0) == 4
    assert f'{type(module_0.FuncInfo.name_py).__module__}.{type(module_0.FuncInfo.name_py).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.FuncInfo.name_c).__module__}.{type(module_0.FuncInfo.name_c).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.FuncInfo.annotations).__module__}.{type(module_0.FuncInfo.annotations).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.FuncInfo.options).__module__}.{type(module_0.FuncInfo.options).__qualname__}' == '_collections._tuplegetter'
    with pytest.raises(module_1.FunctionRedeclared):
        module_0.extract_func_info(callable_0, name_c=none_type_0, scope=dict_0, registry=func_info_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    callable_0 = module_0.c_callback()
    func_info_0 = module_0.extract_func_info(callable_0, name_c=none_type_0, scope=dict_0, registry=dict_0)
    assert f'{type(func_info_0).__module__}.{type(func_info_0).__qualname__}' == 'ctyped.utils.FuncInfo'
    assert len(func_info_0) == 4
    assert f'{type(module_0.FuncInfo.name_py).__module__}.{type(module_0.FuncInfo.name_py).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.FuncInfo.name_c).__module__}.{type(module_0.FuncInfo.name_c).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.FuncInfo.annotations).__module__}.{type(module_0.FuncInfo.annotations).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.FuncInfo.options).__module__}.{type(module_0.FuncInfo.options).__qualname__}' == '_collections._tuplegetter'
    str_0 = 'VT1\\0+*L]hUr{Z'
    var_0 = module_0.cast_type(none_type_0, str_0, callable_0)
    str_1 = 'annotations'
    var_1 = module_0.cast_type(var_0, str_1, str_1)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == '__future__._Feature'
    assert var_1.optional == (3, 7, 0, 'beta', 1)
    assert var_1.mandatory == (3, 11, 0, 'alpha', 0)
    assert var_1.compiler_flag == 16777216
    var_2 = module_0.cast_type(dict_0, str_0, var_0)
    callable_1 = module_0.c_callback()
    module_0.get_last_error()