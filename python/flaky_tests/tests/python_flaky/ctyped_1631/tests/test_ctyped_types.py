# Automatically generated by Pynguin.
import pytest
import ctyped.types as module_0

def test_case_0():
    c_chars_w_0 = module_0.CCharsW()
    assert f'{type(module_0.CCharsW.from_param).__module__}.{type(module_0.CCharsW.from_param).__qualname__}' == 'builtins.method'

def test_case_1():
    none_type_0 = None
    c_ref_0 = module_0.CRef(none_type_0)
    assert f'{type(c_ref_0).__module__}.{type(c_ref_0).__qualname__}' == 'ctyped.types.CRef'
    assert f'{type(module_0.CRef.carray).__module__}.{type(module_0.CRef.carray).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cbool).__module__}.{type(module_0.CRef.cbool).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cint).__module__}.{type(module_0.CRef.cint).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cfloat).__module__}.{type(module_0.CRef.cfloat).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.from_param).__module__}.{type(module_0.CRef.from_param).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_2():
    c_chars_0 = module_0.CChars()
    assert f'{type(module_0.CChars.from_param).__module__}.{type(module_0.CChars.from_param).__qualname__}' == 'builtins.method'
    c_ref_0 = module_0.CRef(c_chars_0)
    assert f'{type(c_ref_0).__module__}.{type(c_ref_0).__qualname__}' == 'ctyped.types.CRef'
    assert f'{type(module_0.CRef.carray).__module__}.{type(module_0.CRef.carray).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cbool).__module__}.{type(module_0.CRef.cbool).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cint).__module__}.{type(module_0.CRef.cint).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cfloat).__module__}.{type(module_0.CRef.cfloat).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.from_param).__module__}.{type(module_0.CRef.from_param).__qualname__}' == 'builtins.method'
    var_0 = c_ref_0.__str__()
    assert var_0 == 'None'
    c_ref_0.__int__()

@pytest.mark.xfail(strict=True)
def test_case_3():
    c_chars_0 = module_0.CChars()
    assert f'{type(module_0.CChars.from_param).__module__}.{type(module_0.CChars.from_param).__qualname__}' == 'builtins.method'
    c_ref_0 = module_0.CRef(c_chars_0)
    assert f'{type(c_ref_0).__module__}.{type(c_ref_0).__qualname__}' == 'ctyped.types.CRef'
    assert f'{type(module_0.CRef.carray).__module__}.{type(module_0.CRef.carray).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cbool).__module__}.{type(module_0.CRef.cbool).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cint).__module__}.{type(module_0.CRef.cint).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cfloat).__module__}.{type(module_0.CRef.cfloat).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.from_param).__module__}.{type(module_0.CRef.from_param).__qualname__}' == 'builtins.method'
    var_0 = c_ref_0.__str__()
    assert var_0 == 'None'
    var_1 = c_chars_0.__repr__()
    var_2 = c_chars_0.__repr__()
    var_3 = var_1.__ge__(var_2)
    c_ref_0.__float__()

@pytest.mark.xfail(strict=True)
def test_case_4():
    c_chars_0 = module_0.CChars()
    assert f'{type(module_0.CChars.from_param).__module__}.{type(module_0.CChars.from_param).__qualname__}' == 'builtins.method'
    c_ref_0 = module_0.CRef(c_chars_0)
    assert f'{type(c_ref_0).__module__}.{type(c_ref_0).__qualname__}' == 'ctyped.types.CRef'
    assert f'{type(module_0.CRef.carray).__module__}.{type(module_0.CRef.carray).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cbool).__module__}.{type(module_0.CRef.cbool).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cint).__module__}.{type(module_0.CRef.cint).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cfloat).__module__}.{type(module_0.CRef.cfloat).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.from_param).__module__}.{type(module_0.CRef.from_param).__qualname__}' == 'builtins.method'
    var_0 = c_ref_0.__bool__()
    var_1 = c_ref_0.__str__()
    assert var_1 == 'None'
    module_0.CCharsW(**var_1)

@pytest.mark.xfail(strict=True)
def test_case_5():
    c_chars_0 = module_0.CChars()
    assert f'{type(module_0.CChars.from_param).__module__}.{type(module_0.CChars.from_param).__qualname__}' == 'builtins.method'
    c_ref_0 = module_0.CRef(c_chars_0)
    assert f'{type(c_ref_0).__module__}.{type(c_ref_0).__qualname__}' == 'ctyped.types.CRef'
    assert f'{type(module_0.CRef.carray).__module__}.{type(module_0.CRef.carray).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cbool).__module__}.{type(module_0.CRef.cbool).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cint).__module__}.{type(module_0.CRef.cint).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cfloat).__module__}.{type(module_0.CRef.cfloat).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.from_param).__module__}.{type(module_0.CRef.from_param).__qualname__}' == 'builtins.method'
    var_0 = c_ref_0.__str__()
    assert var_0 == 'None'
    list_0 = [var_0]
    var_1 = c_ref_0.__eq__(list_0)
    assert var_1 is False
    module_0.CCharsW(*var_0, **list_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    c_chars_0 = module_0.CChars()
    assert f'{type(module_0.CChars.from_param).__module__}.{type(module_0.CChars.from_param).__qualname__}' == 'builtins.method'
    c_ref_0 = module_0.CRef(c_chars_0)
    assert f'{type(c_ref_0).__module__}.{type(c_ref_0).__qualname__}' == 'ctyped.types.CRef'
    assert f'{type(module_0.CRef.carray).__module__}.{type(module_0.CRef.carray).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cbool).__module__}.{type(module_0.CRef.cbool).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cint).__module__}.{type(module_0.CRef.cint).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cfloat).__module__}.{type(module_0.CRef.cfloat).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.from_param).__module__}.{type(module_0.CRef.from_param).__qualname__}' == 'builtins.method'
    var_0 = c_ref_0.__str__()
    assert var_0 == 'None'
    var_1 = c_chars_0.__repr__()
    var_2 = c_ref_0.__ne__(c_ref_0)
    assert var_2 is False
    var_3 = var_1.__ge__(c_chars_0)
    var_4 = var_3.__eq__(var_1)
    var_5 = var_3.__ge__(var_3)
    var_1.__getattribute__(var_4)

@pytest.mark.xfail(strict=True)
def test_case_7():
    c_chars_0 = module_0.CChars()
    assert f'{type(module_0.CChars.from_param).__module__}.{type(module_0.CChars.from_param).__qualname__}' == 'builtins.method'
    c_ref_0 = module_0.CRef(c_chars_0)
    assert f'{type(c_ref_0).__module__}.{type(c_ref_0).__qualname__}' == 'ctyped.types.CRef'
    assert f'{type(module_0.CRef.carray).__module__}.{type(module_0.CRef.carray).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cbool).__module__}.{type(module_0.CRef.cbool).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cint).__module__}.{type(module_0.CRef.cint).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cfloat).__module__}.{type(module_0.CRef.cfloat).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.from_param).__module__}.{type(module_0.CRef.from_param).__qualname__}' == 'builtins.method'
    var_0 = c_ref_0.__str__()
    assert var_0 == 'None'
    c_ref_0.__gt__(c_ref_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'DtE{LmNsGzLD2XQ16'
    none_type_0 = None
    c_ref_0 = module_0.CRef(none_type_0)
    assert f'{type(c_ref_0).__module__}.{type(c_ref_0).__qualname__}' == 'ctyped.types.CRef'
    assert f'{type(module_0.CRef.carray).__module__}.{type(module_0.CRef.carray).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cbool).__module__}.{type(module_0.CRef.cbool).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cint).__module__}.{type(module_0.CRef.cint).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cfloat).__module__}.{type(module_0.CRef.cfloat).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.from_param).__module__}.{type(module_0.CRef.from_param).__qualname__}' == 'builtins.method'
    c_ref_0.__gt__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    c_chars_0 = module_0.CChars()
    assert f'{type(module_0.CChars.from_param).__module__}.{type(module_0.CChars.from_param).__qualname__}' == 'builtins.method'
    c_ref_0 = module_0.CRef(c_chars_0)
    assert f'{type(c_ref_0).__module__}.{type(c_ref_0).__qualname__}' == 'ctyped.types.CRef'
    assert f'{type(module_0.CRef.carray).__module__}.{type(module_0.CRef.carray).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cbool).__module__}.{type(module_0.CRef.cbool).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cint).__module__}.{type(module_0.CRef.cint).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cfloat).__module__}.{type(module_0.CRef.cfloat).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.from_param).__module__}.{type(module_0.CRef.from_param).__qualname__}' == 'builtins.method'
    var_0 = c_ref_0.__str__()
    assert var_0 == 'None'
    c_ref_0.__le__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    c_ref_0 = module_0.CRef(bool_0)
    assert f'{type(c_ref_0).__module__}.{type(c_ref_0).__qualname__}' == 'ctyped.types.CRef'
    assert f'{type(module_0.CRef.carray).__module__}.{type(module_0.CRef.carray).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cbool).__module__}.{type(module_0.CRef.cbool).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cint).__module__}.{type(module_0.CRef.cint).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cfloat).__module__}.{type(module_0.CRef.cfloat).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.from_param).__module__}.{type(module_0.CRef.from_param).__qualname__}' == 'builtins.method'
    c_ref_0.__ge__(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    c_ref_0 = module_0.CRef(none_type_0)
    assert f'{type(c_ref_0).__module__}.{type(c_ref_0).__qualname__}' == 'ctyped.types.CRef'
    assert f'{type(module_0.CRef.carray).__module__}.{type(module_0.CRef.carray).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cbool).__module__}.{type(module_0.CRef.cbool).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cint).__module__}.{type(module_0.CRef.cint).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cfloat).__module__}.{type(module_0.CRef.cfloat).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.from_param).__module__}.{type(module_0.CRef.from_param).__qualname__}' == 'builtins.method'
    c_ref_0.__iter__()

def test_case_12():
    c_chars_0 = module_0.CChars()
    assert f'{type(module_0.CChars.from_param).__module__}.{type(module_0.CChars.from_param).__qualname__}' == 'builtins.method'
    c_ref_0 = module_0.CRef(c_chars_0)
    assert f'{type(c_ref_0).__module__}.{type(c_ref_0).__qualname__}' == 'ctyped.types.CRef'
    assert f'{type(module_0.CRef.carray).__module__}.{type(module_0.CRef.carray).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cbool).__module__}.{type(module_0.CRef.cbool).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cint).__module__}.{type(module_0.CRef.cint).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.cfloat).__module__}.{type(module_0.CRef.cfloat).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CRef.from_param).__module__}.{type(module_0.CRef.from_param).__qualname__}' == 'builtins.method'
    var_0 = c_ref_0.__str__()
    assert var_0 == 'None'