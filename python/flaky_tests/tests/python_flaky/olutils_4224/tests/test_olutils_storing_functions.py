# Automatically generated by Pynguin.
import pytest
import olutils.storing.functions as module_0
import re as module_1
import codecs as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.load(none_type_0)

def test_case_1():
    str_0 = 'c3'
    with pytest.raises(ValueError):
        module_0.load(str_0, str_0)

def test_case_2():
    str_0 = 'pickle'
    module_0.load(str_0)

def test_case_3():
    bool_0 = False
    str_0 = 'E3g'
    with pytest.raises(ValueError):
        module_0.save(bool_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'pickle'
    str_1 = 'd/[\nY~Vj&oC'
    var_0 = module_0.save(str_0, str_1, str_0)
    dict_0 = {str_1: str_0}
    module_0.load(str_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'pickle'
    str_1 = 'd/[\nY~Vj&oC'
    var_0 = module_0.save(str_0, str_1, str_0)
    str_2 = 'dc/GZlLygAr*,x_,)cJ)'
    dict_0 = {str_1: str_2}
    module_0.load(str_0, **dict_0)

def test_case_6():
    str_0 = 'pickle'
    module_0.load(str_0)
    dict_0 = {str_0: str_0, str_0: var_0, var_0: var_0, str_0: str_0}
    var_1 = module_0.save(var_0, var_0, var_0)
    var_2 = module_0.save(str_0, str_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'pickle'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.save(str_0, str_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    str_0 = 'txt'
    var_0 = module_0.save(bool_0, str_0)
    tuple_0 = ()
    var_1 = module_1.purge()
    var_1.__exit__(tuple_0, tuple_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    str_0 = 'txt'
    module_0.load(bool_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'json'
    module_0.load(str_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'json'
    incremental_decoder_0 = module_2.IncrementalDecoder(str_0)
    module_0.save(incremental_decoder_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'csv'
    str_1 = 'c3'
    none_type_0 = None
    module_0.save(str_1, str_1, str_0, none_type_0)

def test_case_13():
    str_0 = 'csv'
    with pytest.raises(ValueError):
        module_0.load(str_0)