# Automatically generated by Pynguin.
import pytest
import olutils.log as module_0
import logging as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'n{%xhbY~'
    var_0 = module_0.LogClass(str_0)
    var_1 = module_0.create_logger(str_0, overwrite=str_0)
    var_2 = module_0.clear_loggers()

def test_case_1():
    dict_0 = module_0.clear_loggers()

@pytest.mark.xfail(strict=True)
def test_case_2():
    complex_0 = (-1543+3359.8j)
    module_0.LogClass(complex_0, complex_0)

def test_case_3():
    var_0 = module_0.get_loggers()
    with pytest.raises(ValueError):
        module_0.create_logger(var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'n{%xhbY~'
    log_class_0 = module_0.create_logger(str_0, overwrite=str_0)
    assert f'{type(log_class_0).__module__}.{type(log_class_0).__qualname__}' == 'logging.Logger'
    assert log_class_0.filters == []
    assert log_class_0.name == 'n{%xhbY~'
    assert log_class_0.level == 20
    assert f'{type(log_class_0.parent).__module__}.{type(log_class_0.parent).__qualname__}' == 'logging.RootLogger'
    assert log_class_0.propagate is True
    assert f'{type(log_class_0.handlers).__module__}.{type(log_class_0.handlers).__qualname__}' == 'builtins.list'
    assert log_class_0.disabled is False
    assert f'{type(log_class_0.manager).__module__}.{type(log_class_0.manager).__qualname__}' == 'logging.Manager'
    assert len(module_1.Logger.manager.loggerDict) == 2038
    var_0 = module_0.create_logger(str_0, overwrite=str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'logging.Logger'
    assert var_0.filters == []
    assert var_0.name == 'n{%xhbY~'
    assert var_0.level == 20
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'logging.RootLogger'
    assert var_0.propagate is True
    assert f'{type(var_0.handlers).__module__}.{type(var_0.handlers).__qualname__}' == 'builtins.list'
    assert len(var_0.handlers) == 1
    assert var_0.disabled is False
    assert f'{type(var_0.manager).__module__}.{type(var_0.manager).__qualname__}' == 'logging.Manager'
    log_class_0.get_loglvl(log_class_0)

def test_case_5():
    str_0 = 'n{%xhbY~'
    var_0 = module_0.clear_loggers()
    log_class_0 = module_0.LogClass(str_0, logpath=str_0)
    assert f'{type(log_class_0).__module__}.{type(log_class_0).__qualname__}' == 'olutils.log.LogClass'
    assert f'{type(log_class_0.log).__module__}.{type(log_class_0.log).__qualname__}' == 'logging.Logger'
    var_1 = module_0.create_logger(str_0, overwrite=str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'logging.Logger'
    assert var_1.filters == []
    assert var_1.name == 'n{%xhbY~'
    assert var_1.level == 20
    assert f'{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}' == 'logging.RootLogger'
    assert var_1.propagate is True
    assert f'{type(var_1.handlers).__module__}.{type(var_1.handlers).__qualname__}' == 'builtins.list'
    assert len(var_1.handlers) == 1
    assert var_1.disabled is False
    assert f'{type(var_1.manager).__module__}.{type(var_1.manager).__qualname__}' == 'logging.Manager'
    assert len(module_1.Logger.manager.loggerDict) == 2038
    var_2 = module_0.get_loggers()

def test_case_6():
    str_0 = 'n{%xhbY~'
    var_0 = module_0.create_logger(str_0, overwrite=str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'logging.Logger'
    assert var_0.filters == []
    assert var_0.name == 'n{%xhbY~'
    assert var_0.level == 20
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'logging.RootLogger'
    assert var_0.propagate is True
    assert f'{type(var_0.handlers).__module__}.{type(var_0.handlers).__qualname__}' == 'builtins.list'
    assert len(var_0.handlers) == 1
    assert var_0.disabled is False
    assert f'{type(var_0.manager).__module__}.{type(var_0.manager).__qualname__}' == 'logging.Manager'
    assert len(module_1.Logger.manager.loggerDict) == 2038

def test_case_7():
    str_0 = 'n{%xhbY~'
    var_0 = module_0.clear_loggers()
    log_class_0 = module_0.LogClass(str_0, logpath=str_0)
    assert f'{type(log_class_0).__module__}.{type(log_class_0).__qualname__}' == 'olutils.log.LogClass'
    assert f'{type(log_class_0.log).__module__}.{type(log_class_0.log).__qualname__}' == 'logging.Logger'
    int_0 = 3530
    var_1 = log_class_0.set_loglvl(int_0)
    var_2 = log_class_0.get_loglvl(int_0)
    assert var_2 == 'FATAL'

def test_case_8():
    str_0 = 'n{%xhbY~'
    var_0 = module_0.get_loggers()
    module_0.LogClass(str_0, logpath=str_0)
    var_1 = module_0.create_logger(str_0, overwrite=str_0)
    var_2 = log_class_0.__del__()
    var_3 = var_2.set_loglvl(var_2)

def test_case_9():
    str_0 = 'n{%xhbY~'
    var_0 = module_0.clear_loggers()
    log_class_0 = module_0.LogClass(str_0, logpath=str_0)
    assert f'{type(log_class_0).__module__}.{type(log_class_0).__qualname__}' == 'olutils.log.LogClass'
    assert f'{type(log_class_0.log).__module__}.{type(log_class_0.log).__qualname__}' == 'logging.Logger'
    var_1 = module_0.create_logger(str_0, overwrite=str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'logging.Logger'
    assert var_1.filters == []
    assert var_1.name == 'n{%xhbY~'
    assert var_1.level == 20
    assert f'{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}' == 'logging.RootLogger'
    assert var_1.propagate is True
    assert var_1.disabled is False
    assert f'{type(var_1.manager).__module__}.{type(var_1.manager).__qualname__}' == 'logging.Manager'
    assert len(module_1.Logger.manager.loggerDict) == 2038
    int_0 = 3530
    var_2 = log_class_0.get_loglvl(int_0)
    assert var_2 == 'INFO'

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'n{%xhbY~'
    var_0 = module_0.clear_loggers()
    log_class_0 = module_0.LogClass(str_0, logpath=str_0)
    assert f'{type(log_class_0).__module__}.{type(log_class_0).__qualname__}' == 'olutils.log.LogClass'
    assert f'{type(log_class_0.log).__module__}.{type(log_class_0.log).__qualname__}' == 'logging.Logger'
    var_1 = module_0.create_logger(str_0, overwrite=str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'logging.Logger'
    assert var_1.filters == []
    assert var_1.name == 'n{%xhbY~'
    assert var_1.level == 20
    assert f'{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}' == 'logging.RootLogger'
    assert var_1.propagate is True
    assert f'{type(var_1.handlers).__module__}.{type(var_1.handlers).__qualname__}' == 'builtins.list'
    assert len(var_1.handlers) == 1
    assert var_1.disabled is False
    assert f'{type(var_1.manager).__module__}.{type(var_1.manager).__qualname__}' == 'logging.Manager'
    assert len(module_1.Logger.manager.loggerDict) == 2038
    int_0 = 3528
    var_2 = log_class_0.set_loglvl(int_0)
    var_3 = log_class_0.get_loglvl()
    assert var_3 == 3528
    var_4 = log_class_0.get_loglvl(var_3)
    assert var_4 == 'FATAL'
    module_0.LogClass(str_0, log_class_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '[CzOL/H5'
    var_0 = module_0.clear_loggers()
    log_class_0 = module_0.LogClass(str_0, logpath=str_0)
    assert f'{type(log_class_0).__module__}.{type(log_class_0).__qualname__}' == 'olutils.log.LogClass'
    assert f'{type(log_class_0.log).__module__}.{type(log_class_0.log).__qualname__}' == 'logging.Logger'
    var_1 = module_0.create_logger(str_0, overwrite=str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'logging.Logger'
    assert var_1.filters == []
    assert var_1.name == '[CzOL/H5'
    assert var_1.level == 20
    assert f'{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}' == 'logging.RootLogger'
    assert var_1.propagate is True
    assert f'{type(var_1.handlers).__module__}.{type(var_1.handlers).__qualname__}' == 'builtins.list'
    assert len(var_1.handlers) == 1
    assert var_1.disabled is False
    assert f'{type(var_1.manager).__module__}.{type(var_1.manager).__qualname__}' == 'logging.Manager'
    assert len(module_1.Logger.manager.loggerDict) == 2038
    int_0 = 1947
    var_2 = log_class_0.set_loglvl(int_0)
    var_3 = module_0.get_loggers()
    var_4 = log_class_0.get_loglvl(var_3)
    assert var_4 == 'FATAL'
    var_3.set_loglvl(var_3)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = '[CzOL/H5'
    var_0 = module_0.clear_loggers()
    log_class_0 = module_0.LogClass(str_0, logpath=str_0)
    assert f'{type(log_class_0).__module__}.{type(log_class_0).__qualname__}' == 'olutils.log.LogClass'
    assert f'{type(log_class_0.log).__module__}.{type(log_class_0.log).__qualname__}' == 'logging.Logger'
    var_1 = module_0.create_logger(str_0, overwrite=str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'logging.Logger'
    assert var_1.filters == []
    assert var_1.name == '[CzOL/H5'
    assert var_1.level == 20
    assert f'{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}' == 'logging.RootLogger'
    assert var_1.propagate is True
    assert f'{type(var_1.handlers).__module__}.{type(var_1.handlers).__qualname__}' == 'builtins.list'
    assert len(var_1.handlers) == 1
    assert var_1.disabled is False
    assert f'{type(var_1.manager).__module__}.{type(var_1.manager).__qualname__}' == 'logging.Manager'
    assert len(module_1.Logger.manager.loggerDict) == 2038
    int_0 = 1947
    var_2 = log_class_0.set_loglvl(int_0)
    var_3 = module_0.get_loggers()
    var_4 = log_class_0.get_loglvl(var_3)
    assert var_4 == 'FATAL'
    log_class_1 = module_0.LogClass(var_4)
    assert f'{type(log_class_1).__module__}.{type(log_class_1).__qualname__}' == 'olutils.log.LogClass'
    assert f'{type(log_class_1.log).__module__}.{type(log_class_1.log).__qualname__}' == 'logging.Logger'
    var_3.set_loglvl(var_3)

def test_case_13():
    str_0 = 'n{%xhbY~'
    var_0 = module_0.clear_loggers()
    log_class_0 = module_0.LogClass(str_0, logpath=str_0)
    assert f'{type(log_class_0).__module__}.{type(log_class_0).__qualname__}' == 'olutils.log.LogClass'
    assert f'{type(log_class_0.log).__module__}.{type(log_class_0.log).__qualname__}' == 'logging.Logger'
    var_1 = module_0.create_logger(str_0, overwrite=str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'logging.Logger'
    assert var_1.filters == []
    assert var_1.name == 'n{%xhbY~'
    assert var_1.level == 20
    assert f'{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}' == 'logging.RootLogger'
    assert var_1.propagate is True
    assert f'{type(var_1.handlers).__module__}.{type(var_1.handlers).__qualname__}' == 'builtins.list'
    assert len(var_1.handlers) == 1
    assert var_1.disabled is False
    assert f'{type(var_1.manager).__module__}.{type(var_1.manager).__qualname__}' == 'logging.Manager'
    assert len(module_1.Logger.manager.loggerDict) == 2038
    var_2 = log_class_0.get_loglvl(var_0)
    assert var_2 == 20

def test_case_14():
    str_0 = 'n{%xhbY~'
    var_0 = module_0.clear_loggers()
    log_class_0 = module_0.LogClass(str_0, logpath=str_0)
    assert f'{type(log_class_0).__module__}.{type(log_class_0).__qualname__}' == 'olutils.log.LogClass'
    assert f'{type(log_class_0.log).__module__}.{type(log_class_0.log).__qualname__}' == 'logging.Logger'
    var_1 = module_0.create_logger(str_0, overwrite=str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'logging.Logger'
    assert var_1.filters == []
    assert var_1.name == 'n{%xhbY~'
    assert var_1.level == 20
    assert f'{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}' == 'logging.RootLogger'
    assert var_1.propagate is True
    assert f'{type(var_1.handlers).__module__}.{type(var_1.handlers).__qualname__}' == 'builtins.list'
    assert len(var_1.handlers) == 1
    assert var_1.disabled is False
    assert f'{type(var_1.manager).__module__}.{type(var_1.manager).__qualname__}' == 'logging.Manager'
    assert len(module_1.Logger.manager.loggerDict) == 2038
    int_0 = -177
    var_2 = log_class_0.set_loglvl(int_0)
    var_3 = module_0.get_loggers()
    var_4 = log_class_0.get_loglvl(var_3)
    assert var_4 == 'DEBUG'
    log_class_1 = module_0.LogClass(var_4)
    assert f'{type(log_class_1).__module__}.{type(log_class_1).__qualname__}' == 'olutils.log.LogClass'
    assert f'{type(log_class_1.log).__module__}.{type(log_class_1.log).__qualname__}' == 'logging.Logger'

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'P_/[#'
    log_class_0 = module_0.LogClass(str_0, logpath=str_0)
    assert f'{type(log_class_0).__module__}.{type(log_class_0).__qualname__}' == 'olutils.log.LogClass'
    assert f'{type(log_class_0.log).__module__}.{type(log_class_0.log).__qualname__}' == 'logging.Logger'
    int_0 = 32
    var_0 = log_class_0.set_loglvl(int_0)
    var_1 = log_class_0.get_loglvl(str_0)
    assert var_1 == 'ERROR'
    var_2 = module_0.get_loggers()
    var_3 = module_0.clear_loggers()
    var_4 = log_class_0.get_loglvl()
    assert var_4 == 32
    var_5 = log_class_0.__del__()
    var_1.set_loglvl(log_class_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = '[P_/d>'
    log_class_0 = module_0.LogClass(str_0, logpath=str_0)
    assert f'{type(log_class_0).__module__}.{type(log_class_0).__qualname__}' == 'olutils.log.LogClass'
    assert f'{type(log_class_0.log).__module__}.{type(log_class_0.log).__qualname__}' == 'logging.Logger'
    var_0 = module_0.create_logger(str_0, overwrite=str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'logging.Logger'
    assert var_0.filters == []
    assert var_0.name == '[P_/d>'
    assert var_0.level == 20
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'logging.RootLogger'
    assert var_0.propagate is True
    assert f'{type(var_0.handlers).__module__}.{type(var_0.handlers).__qualname__}' == 'builtins.list'
    assert len(var_0.handlers) == 1
    assert var_0.disabled is False
    assert f'{type(var_0.manager).__module__}.{type(var_0.manager).__qualname__}' == 'logging.Manager'
    assert len(module_1.Logger.manager.loggerDict) == 2038
    int_0 = 24
    var_1 = log_class_0.set_loglvl(int_0)
    var_2 = log_class_0.get_loglvl(str_0)
    assert var_2 == 'WARNING'
    var_3 = module_0.get_loggers()
    var_4 = module_0.clear_loggers()
    assert var_0.handlers == []
    var_5 = log_class_0.get_loglvl()
    assert var_5 == 24
    var_0.__del__()