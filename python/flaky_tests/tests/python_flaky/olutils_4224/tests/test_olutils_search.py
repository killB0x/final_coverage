# Automatically generated by Pynguin.
import pytest
import olutils.search as module_0

def test_case_0():
    bytes_0 = b'\x0fDs\xf6\xf5\xa9\xcau\xb2\xa7^\x84\xad\xe5\x80!)\xa0t'
    var_0 = module_0.closest(bytes_0, bytes_0, strict=bytes_0)

def test_case_1():
    set_0 = set()
    with pytest.raises(ValueError):
        module_0.closest(set_0, set_0)

def test_case_2():
    str_0 = "z';d%uYTMgK"
    var_0 = module_0.previous(str_0, str_0, strict=str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    module_0.previous(set_0, set_0, set_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'\x9ehp\\'
    module_0.previous(bytes_0, bytes_0, bytes_0)

def test_case_5():
    str_0 = 'zl/ ~^H'
    var_0 = module_0.previous(str_0, str_0, strict=str_0)

def test_case_6():
    str_0 = 'Q"SL,"#oIjw*9;'
    var_0 = module_0.previous(str_0, str_0, str_0, str_0)

def test_case_7():
    bytes_0 = b'\x81\xe6\x81\xbf0\xf8\xb6\x85&\x82f%\xa9\x84\xe7\xc55y'
    bytes_1 = b'\x81\xe6\xfe\xbf0\xf8\xb6\x85&yf%\x84\xe7\xc55y\x81\xe6\xfe\xbf0\xf8\xb6\x85&yf%\x84\xe7\xc55y'
    var_0 = module_0.closest(bytes_0, bytes_1)

def test_case_8():
    str_0 = 'a'
    var_0 = module_0.previous(str_0, str_0, strict=str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b'y\xe5\xffuW\xfa\xcfH^\x08\xf4\x90\xd5\x1b#y\xe5\xffuW\xfa\xcfH^\x08\xf4\x90\xd5\x1b#'
    module_0.closest(bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'eb\x0bSm1x6&.v>}W2!'
    var_0 = module_0.previous(str_0, str_0, str_0)
    module_0.previous(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b'\x81\xe6\xfe\xbf0\xf8\xdf\x85&yM%\x84\xe7\xc55D'
    bytes_1 = b'\x18\xaa\xc6k'
    float_0 = 965.0
    var_0 = module_0.closest(bytes_0, bytes_1, float_0)
    bool_0 = False
    set_0 = set()
    module_0.previous(bool_0, float_0, set_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b'\x81\xe6\xfe\xbf0\xf8\xb6\x85&yf%\x84\xe7\xc55y\x81\xe6\xfe\xbf0\xf8\xb6\x85&yf%\x84\xe7\xc55y'
    var_0 = module_0.previous(bytes_0, bytes_0, strict=bytes_0)
    bool_0 = True
    var_1 = module_0.closest(bytes_0, bytes_0, bool_0, bool_0)
    module_0.closest(var_1, bytes_0)

def test_case_13():
    bytes_0 = b'\x81\xe6\xfe\xbf0\xf8\xb6\x85&yf%\x84\xe7\xc55\x80\x81\xe6\xfe60\xf8\xb6\x85&yf%\x84\xe7\xc55y'
    var_0 = module_0.previous(bytes_0, bytes_0, strict=bytes_0)
    bool_0 = False
    var_1 = module_0.closest(bytes_0, bytes_0, bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b'\x81\xe6\xfe\xbf0\xf8\xb6\x85&y%\x84\xe7\xc55y'
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    var_0 = module_0.previous(set_0, set_0, bytes_0, none_type_0)
    bytes_1 = b'\x81\xe6\xfe\xbf0\xf8\xb6\x85&yf%\x84\xe7\xc55y\x81\xe6\xfe\xbf0\xf8\xb6\x85&yf%\x84\xe7\xc55y'
    module_0.previous(bytes_1, none_type_0, bytes_1)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b'P\x8eBE\xcd\xcc\x95\x0c\xd5\xa3y4\xcb'
    var_0 = module_0.closest(bytes_0, bytes_0)
    bool_0 = False
    list_0 = [bool_0]
    int_0 = -4
    var_1 = module_0.previous(list_0, list_0, int_0, bool_0)
    tuple_0 = (bytes_0, bool_0, list_0, int_0)
    float_0 = 1442.51
    module_0.closest(float_0, tuple_0)

def test_case_16():
    bytes_0 = b'\x81\xae\xfe\xbf0\xf8\xb6\x85&yf%\x84\xe7\xc55y'
    int_0 = -805
    var_0 = module_0.closest(bytes_0, bytes_0, int_0, int_0)
    set_0 = {bytes_0, bytes_0}
    var_1 = module_0.previous(set_0, set_0, bytes_0)
    bytes_1 = b'\x81\xe6\xfe\xbf0\xf8\xb6\x85&yf%\x84\xe7\xc55y\x81\xe6\xfe\xbf0\xf8\xb6\x85&yf%\x84\xe7\xc55y'
    var_2 = module_0.previous(bytes_1, bytes_1, strict=bytes_1)
    var_3 = module_0.previous(set_0, set_0, bytes_1)
    bool_0 = False
    var_4 = module_0.closest(bytes_1, bytes_1, bool_0, bool_0)
    str_0 = ''
    var_5 = module_0.closest(bytes_0, bytes_1)
    with pytest.raises(ValueError):
        module_0.closest(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bytes_0 = b'\x81\xae\xfe\xbf0\xf8\xb6\x85&yf%\x84\xe7\xc55y'
    int_0 = -805
    none_type_0 = None
    var_0 = module_0.closest(bytes_0, bytes_0, int_0, none_type_0)
    module_0.previous(bytes_0, var_0)