# Automatically generated by Pynguin.
import pytest
import olutils.conversion.temporality as module_0
import builtins as module_1

def test_case_0():
    bool_0 = False
    with pytest.raises(ValueError):
        module_0.convert_ts(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    module_0.dt2float(bool_0)

def test_case_2():
    bool_0 = True
    var_0 = module_0.float2dt(bool_0)
    assert module_0.HOUR == 3600
    assert module_0.DAY == 86400
    assert module_0.YEAR == pytest.approx(31557600.0, abs=0.01, rel=0.01)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'j,'
    module_0.str2dt(str_0)

def test_case_4():
    dict_0 = {}
    with pytest.raises(TypeError):
        module_0.convert_ts(dict_0, dict_0)

def test_case_5():
    bool_0 = True
    var_0 = module_0.float2dt(bool_0)
    assert module_0.HOUR == 3600
    assert module_0.DAY == 86400
    assert module_0.YEAR == pytest.approx(31557600.0, abs=0.01, rel=0.01)
    str_0 = 'dt'
    with pytest.raises(ValueError):
        module_0.convert_ts(str_0, str_0)

def test_case_6():
    tuple_0 = ()
    var_0 = module_0.convert_ts(tuple_0, tuple_0)
    assert module_0.HOUR == 3600
    assert module_0.DAY == 86400
    assert module_0.YEAR == pytest.approx(31557600.0, abs=0.01, rel=0.01)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 's'
    var_0 = module_0.convert_ts(str_0, str_0)
    assert module_0.HOUR == 3600
    assert module_0.DAY == 86400
    assert module_0.YEAR == pytest.approx(31557600.0, abs=0.01, rel=0.01)
    module_1.object(*var_0)

def test_case_8():
    bool_0 = True
    tuple_0 = ()
    with pytest.raises(TypeError):
        module_0.convert_ts(bool_0, tuple_0)

def test_case_9():
    bool_0 = False
    var_0 = module_0.float2dt(bool_0)
    assert module_0.HOUR == 3600
    assert module_0.DAY == 86400
    assert module_0.YEAR == pytest.approx(31557600.0, abs=0.01, rel=0.01)
    tuple_0 = ()
    tuple_1 = (var_0, var_0, tuple_0)
    with pytest.raises(TypeError):
        module_0.convert_ts(tuple_1, tuple_1)

def test_case_10():
    str_0 = 'timedelta'
    list_0 = [str_0]
    with pytest.raises(ValueError):
        module_0.convert_ts(list_0, str_0)