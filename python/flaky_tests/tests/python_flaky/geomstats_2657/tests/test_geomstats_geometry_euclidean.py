# Automatically generated by Pynguin.
import pytest
import autograd.tracer as module_0
import geomstats.geometry.euclidean as module_1
import geomstats._backend.numpy as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.divide()

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    module_1.Euclidean(bool_0)

def test_case_2():
    bool_0 = True
    euclidean_0 = module_1.Euclidean(bool_0)
    assert euclidean_0.dim is True
    assert euclidean_0.default_point_type == 'vector'
    assert euclidean_0.default_coords_type == 'intrinsic'
    assert f'{type(euclidean_0.metric).__module__}.{type(euclidean_0.metric).__qualname__}' == 'geomstats.geometry.euclidean.EuclideanMetric'
    var_0 = module_2.get_mask_i_float(bool_0, bool_0)
    var_1 = euclidean_0.belongs(var_0)
    assert var_1 is True

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    euclidean_0 = module_1.Euclidean(bool_0)
    assert euclidean_0.dim is True
    assert euclidean_0.default_point_type == 'vector'
    assert euclidean_0.default_coords_type == 'intrinsic'
    assert f'{type(euclidean_0.metric).__module__}.{type(euclidean_0.metric).__qualname__}' == 'geomstats.geometry.euclidean.EuclideanMetric'
    euclidean_0.random_uniform()

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    euclidean_metric_0 = module_1.EuclideanMetric(bool_0)
    assert euclidean_metric_0.dim is True
    assert euclidean_metric_0.default_point_type == 'vector'
    assert euclidean_metric_0.default_coords_type == 'intrinsic'
    assert euclidean_metric_0.signature == (True, 0, 0)
    none_type_0 = None
    euclidean_metric_0.dist(none_type_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    euclidean_0 = module_1.Euclidean(none_type_0)
    assert euclidean_0.dim is None
    assert euclidean_0.default_point_type == 'vector'
    assert euclidean_0.default_coords_type == 'intrinsic'
    assert f'{type(euclidean_0.metric).__module__}.{type(euclidean_0.metric).__qualname__}' == 'geomstats.geometry.euclidean.EuclideanMetric'
    euclidean_0.random_uniform(euclidean_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    euclidean_metric_0 = module_1.EuclideanMetric(bool_0)
    assert euclidean_metric_0.dim is True
    assert euclidean_metric_0.default_point_type == 'vector'
    assert euclidean_metric_0.default_coords_type == 'intrinsic'
    assert euclidean_metric_0.signature == (True, 0, 0)
    euclidean_metric_0.inner_product_matrix()

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    euclidean_0 = module_1.Euclidean(bool_0)
    assert euclidean_0.dim is True
    assert euclidean_0.default_point_type == 'vector'
    assert euclidean_0.default_coords_type == 'intrinsic'
    assert f'{type(euclidean_0.metric).__module__}.{type(euclidean_0.metric).__qualname__}' == 'geomstats.geometry.euclidean.EuclideanMetric'
    euclidean_0.get_identity()

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    euclidean_metric_0 = module_1.EuclideanMetric(bool_0)
    assert euclidean_metric_0.dim is True
    assert euclidean_metric_0.default_point_type == 'vector'
    assert euclidean_metric_0.default_coords_type == 'intrinsic'
    assert euclidean_metric_0.signature == (True, 0, 0)
    euclidean_metric_0.exp(bool_0, euclidean_metric_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    euclidean_0 = module_1.Euclidean(bool_0)
    assert euclidean_0.dim is True
    assert euclidean_0.default_point_type == 'vector'
    assert euclidean_0.default_coords_type == 'intrinsic'
    assert f'{type(euclidean_0.metric).__module__}.{type(euclidean_0.metric).__qualname__}' == 'geomstats.geometry.euclidean.EuclideanMetric'
    var_0 = module_2.get_mask_i_float(bool_0, bool_0)
    euclidean_0.exp(var_0)

def test_case_10():
    bool_0 = False
    none_type_0 = None
    euclidean_0 = module_1.Euclidean(none_type_0)
    assert euclidean_0.dim is None
    assert euclidean_0.default_point_type == 'vector'
    assert euclidean_0.default_coords_type == 'intrinsic'
    assert f'{type(euclidean_0.metric).__module__}.{type(euclidean_0.metric).__qualname__}' == 'geomstats.geometry.euclidean.EuclideanMetric'
    var_0 = module_2.get_mask_i_float(bool_0, bool_0)
    with pytest.raises(ValueError):
        euclidean_0.exp(var_0)