# Automatically generated by Pynguin.
import pytest
import geomstats.learning.kalman_filter as module_0
import geomstats._backend.numpy as module_1
import autograd.tracer as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    localization_0 = module_0.Localization()
    assert f'{type(module_0.Localization.group).__module__}.{type(module_0.Localization.group).__qualname__}' == 'geomstats.geometry.special_euclidean._SpecialEuclidean2Vectors'
    assert module_0.Localization.group.dim == 3
    assert module_0.Localization.group.default_point_type == 'vector'
    assert module_0.Localization.group.n == 2
    assert module_0.Localization.group.epsilon == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert f'{type(module_0.Localization.group.rotations).__module__}.{type(module_0.Localization.group.rotations).__qualname__}' == 'geomstats.geometry.special_orthogonal._SpecialOrthogonal2Vectors'
    assert module_0.Localization.dim == 3
    assert module_0.Localization.dim_rot == 1
    assert module_0.Localization.dim_noise == 3
    assert module_0.Localization.dim_obs == 2
    localization_0.rotation_matrix(localization_0)

def test_case_1():
    localization_linear_0 = module_0.LocalizationLinear()
    assert module_0.LocalizationLinear.group.dim == 2
    assert module_0.LocalizationLinear.dim == 2
    assert module_0.LocalizationLinear.dim_noise == 1
    assert module_0.LocalizationLinear.dim_obs == 1

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    localization_linear_0 = module_0.LocalizationLinear()
    assert module_0.LocalizationLinear.group.dim == 2
    assert module_0.LocalizationLinear.dim == 2
    assert module_0.LocalizationLinear.dim_noise == 1
    assert module_0.LocalizationLinear.dim_obs == 1
    var_0 = module_1.to_numpy(none_type_0)
    var_1 = localization_linear_0.get_measurement_noise_cov(none_type_0, var_0)
    module_2.searchsorted()

@pytest.mark.xfail(strict=True)
def test_case_3():
    localization_0 = module_0.Localization()
    assert f'{type(module_0.Localization.group).__module__}.{type(module_0.Localization.group).__qualname__}' == 'geomstats.geometry.special_euclidean._SpecialEuclidean2Vectors'
    assert module_0.Localization.group.dim == 3
    assert module_0.Localization.group.default_point_type == 'vector'
    assert module_0.Localization.group.n == 2
    assert module_0.Localization.group.epsilon == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert f'{type(module_0.Localization.group.rotations).__module__}.{type(module_0.Localization.group.rotations).__qualname__}' == 'geomstats.geometry.special_orthogonal._SpecialOrthogonal2Vectors'
    assert module_0.Localization.dim == 3
    assert module_0.Localization.dim_rot == 1
    assert module_0.Localization.dim_noise == 3
    assert module_0.Localization.dim_obs == 2
    kalman_filter_0 = module_0.KalmanFilter(localization_0)
    assert len(kalman_filter_0.state) == 3
    assert len(kalman_filter_0.covariance) == 3
    assert len(kalman_filter_0.process_noise) == 3
    assert len(kalman_filter_0.measurement_noise) == 2
    kalman_filter_0.compute_gain(localization_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    localization_0 = module_0.Localization()
    assert f'{type(module_0.Localization.group).__module__}.{type(module_0.Localization.group).__qualname__}' == 'geomstats.geometry.special_euclidean._SpecialEuclidean2Vectors'
    assert module_0.Localization.group.dim == 3
    assert module_0.Localization.group.default_point_type == 'vector'
    assert module_0.Localization.group.n == 2
    assert module_0.Localization.group.epsilon == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert f'{type(module_0.Localization.group.rotations).__module__}.{type(module_0.Localization.group.rotations).__qualname__}' == 'geomstats.geometry.special_orthogonal._SpecialOrthogonal2Vectors'
    assert module_0.Localization.dim == 3
    assert module_0.Localization.dim_rot == 1
    assert module_0.Localization.dim_noise == 3
    assert module_0.Localization.dim_obs == 2
    kalman_filter_0 = module_0.KalmanFilter(localization_0)
    assert len(kalman_filter_0.state) == 3
    assert len(kalman_filter_0.covariance) == 3
    assert len(kalman_filter_0.process_noise) == 3
    assert len(kalman_filter_0.measurement_noise) == 2
    kalman_filter_0.update(localization_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    localization_linear_0 = module_0.LocalizationLinear()
    assert module_0.LocalizationLinear.group.dim == 2
    assert module_0.LocalizationLinear.dim == 2
    assert module_0.LocalizationLinear.dim_noise == 1
    assert module_0.LocalizationLinear.dim_obs == 1
    list_0 = []
    localization_linear_0.propagate(list_0, localization_linear_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    localization_linear_0 = module_0.LocalizationLinear()
    assert module_0.LocalizationLinear.group.dim == 2
    assert module_0.LocalizationLinear.dim == 2
    assert module_0.LocalizationLinear.dim_noise == 1
    assert module_0.LocalizationLinear.dim_obs == 1
    localization_linear_1 = module_0.LocalizationLinear()
    none_type_0 = None
    localization_linear_0.innovation(localization_linear_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    localization_linear_0 = module_0.LocalizationLinear()
    assert module_0.LocalizationLinear.group.dim == 2
    assert module_0.LocalizationLinear.dim == 2
    assert module_0.LocalizationLinear.dim_noise == 1
    assert module_0.LocalizationLinear.dim_obs == 1
    kalman_filter_0 = module_0.KalmanFilter(localization_linear_0)
    assert len(kalman_filter_0.state) == 2
    assert len(kalman_filter_0.covariance) == 2
    assert len(kalman_filter_0.process_noise) == 1
    assert len(kalman_filter_0.measurement_noise) == 1
    kalman_filter_0.propagate(kalman_filter_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    localization_0 = module_0.Localization()
    assert f'{type(module_0.Localization.group).__module__}.{type(module_0.Localization.group).__qualname__}' == 'geomstats.geometry.special_euclidean._SpecialEuclidean2Vectors'
    assert module_0.Localization.group.dim == 3
    assert module_0.Localization.group.default_point_type == 'vector'
    assert module_0.Localization.group.n == 2
    assert module_0.Localization.group.epsilon == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert f'{type(module_0.Localization.group.rotations).__module__}.{type(module_0.Localization.group.rotations).__qualname__}' == 'geomstats.geometry.special_orthogonal._SpecialOrthogonal2Vectors'
    assert module_0.Localization.dim == 3
    assert module_0.Localization.dim_rot == 1
    assert module_0.Localization.dim_noise == 3
    assert module_0.Localization.dim_obs == 2
    localization_0.propagate(localization_0, localization_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    localization_0 = module_0.Localization()
    assert f'{type(module_0.Localization.group).__module__}.{type(module_0.Localization.group).__qualname__}' == 'geomstats.geometry.special_euclidean._SpecialEuclidean2Vectors'
    assert module_0.Localization.group.dim == 3
    assert module_0.Localization.group.default_point_type == 'vector'
    assert module_0.Localization.group.n == 2
    assert module_0.Localization.group.epsilon == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert f'{type(module_0.Localization.group.rotations).__module__}.{type(module_0.Localization.group.rotations).__qualname__}' == 'geomstats.geometry.special_orthogonal._SpecialOrthogonal2Vectors'
    assert module_0.Localization.dim == 3
    assert module_0.Localization.dim_rot == 1
    assert module_0.Localization.dim_noise == 3
    assert module_0.Localization.dim_obs == 2
    localization_0.regularize_angle(localization_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    localization_0 = module_0.Localization()
    assert f'{type(module_0.Localization.group).__module__}.{type(module_0.Localization.group).__qualname__}' == 'geomstats.geometry.special_euclidean._SpecialEuclidean2Vectors'
    assert module_0.Localization.group.dim == 3
    assert module_0.Localization.group.default_point_type == 'vector'
    assert module_0.Localization.group.n == 2
    assert module_0.Localization.group.epsilon == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert f'{type(module_0.Localization.group.rotations).__module__}.{type(module_0.Localization.group.rotations).__qualname__}' == 'geomstats.geometry.special_orthogonal._SpecialOrthogonal2Vectors'
    assert module_0.Localization.dim == 3
    assert module_0.Localization.dim_rot == 1
    assert module_0.Localization.dim_noise == 3
    assert module_0.Localization.dim_obs == 2
    localization_0.innovation(localization_0, localization_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    localization_0 = module_0.Localization()
    assert f'{type(module_0.Localization.group).__module__}.{type(module_0.Localization.group).__qualname__}' == 'geomstats.geometry.special_euclidean._SpecialEuclidean2Vectors'
    assert module_0.Localization.group.dim == 3
    assert module_0.Localization.group.default_point_type == 'vector'
    assert module_0.Localization.group.n == 2
    assert module_0.Localization.group.epsilon == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert f'{type(module_0.Localization.group.rotations).__module__}.{type(module_0.Localization.group.rotations).__qualname__}' == 'geomstats.geometry.special_orthogonal._SpecialOrthogonal2Vectors'
    assert module_0.Localization.dim == 3
    assert module_0.Localization.dim_rot == 1
    assert module_0.Localization.dim_noise == 3
    assert module_0.Localization.dim_obs == 2
    var_0 = localization_0.observation_jacobian(localization_0, localization_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'numpy.ndarray'
    assert len(var_0) == 2
    localization_0.rotation_matrix(var_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    localization_0 = module_0.Localization()
    assert f'{type(module_0.Localization.group).__module__}.{type(module_0.Localization.group).__qualname__}' == 'geomstats.geometry.special_euclidean._SpecialEuclidean2Vectors'
    assert module_0.Localization.group.dim == 3
    assert module_0.Localization.group.default_point_type == 'vector'
    assert module_0.Localization.group.n == 2
    assert module_0.Localization.group.epsilon == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert f'{type(module_0.Localization.group.rotations).__module__}.{type(module_0.Localization.group.rotations).__qualname__}' == 'geomstats.geometry.special_orthogonal._SpecialOrthogonal2Vectors'
    assert module_0.Localization.dim == 3
    assert module_0.Localization.dim_rot == 1
    assert module_0.Localization.dim_noise == 3
    assert module_0.Localization.dim_obs == 2
    localization_0.propagation_jacobian(localization_0, localization_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    localization_0 = module_0.Localization()
    assert f'{type(module_0.Localization.group).__module__}.{type(module_0.Localization.group).__qualname__}' == 'geomstats.geometry.special_euclidean._SpecialEuclidean2Vectors'
    assert module_0.Localization.group.dim == 3
    assert module_0.Localization.group.default_point_type == 'vector'
    assert module_0.Localization.group.n == 2
    assert module_0.Localization.group.epsilon == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert f'{type(module_0.Localization.group.rotations).__module__}.{type(module_0.Localization.group.rotations).__qualname__}' == 'geomstats.geometry.special_orthogonal._SpecialOrthogonal2Vectors'
    assert module_0.Localization.dim == 3
    assert module_0.Localization.dim_rot == 1
    assert module_0.Localization.dim_noise == 3
    assert module_0.Localization.dim_obs == 2
    localization_0.noise_jacobian(localization_0, localization_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    localization_0 = module_0.Localization()
    assert f'{type(module_0.Localization.group).__module__}.{type(module_0.Localization.group).__qualname__}' == 'geomstats.geometry.special_euclidean._SpecialEuclidean2Vectors'
    assert module_0.Localization.group.dim == 3
    assert module_0.Localization.group.default_point_type == 'vector'
    assert module_0.Localization.group.n == 2
    assert module_0.Localization.group.epsilon == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert f'{type(module_0.Localization.group.rotations).__module__}.{type(module_0.Localization.group.rotations).__qualname__}' == 'geomstats.geometry.special_orthogonal._SpecialOrthogonal2Vectors'
    assert module_0.Localization.dim == 3
    assert module_0.Localization.dim_rot == 1
    assert module_0.Localization.dim_noise == 3
    assert module_0.Localization.dim_obs == 2
    localization_0.adjoint_map(localization_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    localization_linear_0 = module_0.LocalizationLinear()
    assert module_0.LocalizationLinear.group.dim == 2
    assert module_0.LocalizationLinear.dim == 2
    assert module_0.LocalizationLinear.dim_noise == 1
    assert module_0.LocalizationLinear.dim_obs == 1
    localization_linear_1 = module_0.LocalizationLinear()
    dict_0 = {localization_linear_1: localization_linear_1, localization_linear_1: localization_linear_1, localization_linear_0: localization_linear_1, localization_linear_1: localization_linear_1}
    var_0 = localization_linear_0.observation_jacobian(localization_linear_0, dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'numpy.ndarray'
    assert len(var_0) == 1
    none_type_0 = None
    localization_linear_0.innovation(localization_linear_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    localization_0 = module_0.Localization()
    assert f'{type(module_0.Localization.group).__module__}.{type(module_0.Localization.group).__qualname__}' == 'geomstats.geometry.special_euclidean._SpecialEuclidean2Vectors'
    assert module_0.Localization.group.dim == 3
    assert module_0.Localization.group.default_point_type == 'vector'
    assert module_0.Localization.group.n == 2
    assert module_0.Localization.group.epsilon == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert f'{type(module_0.Localization.group.rotations).__module__}.{type(module_0.Localization.group.rotations).__qualname__}' == 'geomstats.geometry.special_orthogonal._SpecialOrthogonal2Vectors'
    assert module_0.Localization.dim == 3
    assert module_0.Localization.dim_rot == 1
    assert module_0.Localization.dim_noise == 3
    assert module_0.Localization.dim_obs == 2
    kalman_filter_0 = module_0.KalmanFilter(localization_0)
    assert len(kalman_filter_0.state) == 3
    assert len(kalman_filter_0.covariance) == 3
    assert len(kalman_filter_0.process_noise) == 3
    assert len(kalman_filter_0.measurement_noise) == 2
    var_0 = kalman_filter_0.initialize_covariances(localization_0, kalman_filter_0, localization_0)
    assert f'{type(kalman_filter_0.covariance).__module__}.{type(kalman_filter_0.covariance).__qualname__}' == 'geomstats.learning.kalman_filter.Localization'
    assert f'{type(kalman_filter_0.process_noise).__module__}.{type(kalman_filter_0.process_noise).__qualname__}' == 'geomstats.learning.kalman_filter.KalmanFilter'
    assert f'{type(kalman_filter_0.measurement_noise).__module__}.{type(kalman_filter_0.measurement_noise).__qualname__}' == 'geomstats.learning.kalman_filter.Localization'
    localization_0.rotation_matrix(localization_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    localization_0 = module_0.Localization()
    assert f'{type(module_0.Localization.group).__module__}.{type(module_0.Localization.group).__qualname__}' == 'geomstats.geometry.special_euclidean._SpecialEuclidean2Vectors'
    assert module_0.Localization.group.dim == 3
    assert module_0.Localization.group.default_point_type == 'vector'
    assert module_0.Localization.group.n == 2
    assert module_0.Localization.group.epsilon == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert f'{type(module_0.Localization.group.rotations).__module__}.{type(module_0.Localization.group.rotations).__qualname__}' == 'geomstats.geometry.special_orthogonal._SpecialOrthogonal2Vectors'
    assert module_0.Localization.dim == 3
    assert module_0.Localization.dim_rot == 1
    assert module_0.Localization.dim_noise == 3
    assert module_0.Localization.dim_obs == 2
    var_0 = localization_0.observation_jacobian(localization_0, localization_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'numpy.ndarray'
    assert len(var_0) == 2
    var_1 = localization_0.regularize_angle(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'numpy.ndarray'
    assert len(var_1) == 2
    none_type_0 = None
    localization_0.rotation_matrix(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = False
    none_type_0 = None
    localization_linear_0 = module_0.LocalizationLinear()
    assert module_0.LocalizationLinear.group.dim == 2
    assert module_0.LocalizationLinear.dim == 2
    assert module_0.LocalizationLinear.dim_noise == 1
    assert module_0.LocalizationLinear.dim_obs == 1
    localization_linear_0.noise_jacobian(none_type_0, bool_0)