# Automatically generated by Pynguin.
import pytest
import geomstats.learning.preprocessing as module_0
import autograd.tracer as module_1
import geomstats.geometry.riemannian_metric as module_2
import geomstats.learning.frechet_mean as module_3

def test_case_0():
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.ToTangentSpace(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    module_1.searchsorted()

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    riemannian_metric_0 = module_2.RiemannianMetric(none_type_0)
    to_tangent_space_0 = module_0.ToTangentSpace(riemannian_metric_0)
    assert f'{type(to_tangent_space_0).__module__}.{type(to_tangent_space_0).__qualname__}' == 'geomstats.learning.preprocessing.ToTangentSpace'
    assert f'{type(to_tangent_space_0.estimator).__module__}.{type(to_tangent_space_0.estimator).__qualname__}' == 'geomstats.learning.frechet_mean.FrechetMean'
    assert to_tangent_space_0.point_type == 'vector'
    assert f'{type(to_tangent_space_0.geometry).__module__}.{type(to_tangent_space_0.geometry).__qualname__}' == 'geomstats.geometry.riemannian_metric.RiemannianMetric'
    assert module_0.EPSILON == pytest.approx(0.0001, abs=0.01, rel=0.01)
    to_tangent_space_0.inverse_transform(none_type_0, riemannian_metric_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    riemannian_metric_0 = module_2.RiemannianMetric(none_type_0)
    to_tangent_space_0 = module_0.ToTangentSpace(riemannian_metric_0)
    assert f'{type(to_tangent_space_0).__module__}.{type(to_tangent_space_0).__qualname__}' == 'geomstats.learning.preprocessing.ToTangentSpace'
    assert f'{type(to_tangent_space_0.estimator).__module__}.{type(to_tangent_space_0.estimator).__qualname__}' == 'geomstats.learning.frechet_mean.FrechetMean'
    assert to_tangent_space_0.point_type == 'vector'
    assert f'{type(to_tangent_space_0.geometry).__module__}.{type(to_tangent_space_0.geometry).__qualname__}' == 'geomstats.geometry.riemannian_metric.RiemannianMetric'
    assert module_0.EPSILON == pytest.approx(0.0001, abs=0.01, rel=0.01)
    to_tangent_space_0.fit(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    riemannian_metric_0 = module_2.RiemannianMetric(none_type_0, none_type_0)
    to_tangent_space_0 = module_0.ToTangentSpace(riemannian_metric_0)
    assert f'{type(to_tangent_space_0).__module__}.{type(to_tangent_space_0).__qualname__}' == 'geomstats.learning.preprocessing.ToTangentSpace'
    assert f'{type(to_tangent_space_0.estimator).__module__}.{type(to_tangent_space_0.estimator).__qualname__}' == 'geomstats.learning.frechet_mean.FrechetMean'
    assert to_tangent_space_0.point_type == 'vector'
    assert f'{type(to_tangent_space_0.geometry).__module__}.{type(to_tangent_space_0.geometry).__qualname__}' == 'geomstats.geometry.riemannian_metric.RiemannianMetric'
    assert module_0.EPSILON == pytest.approx(0.0001, abs=0.01, rel=0.01)
    var_0 = to_tangent_space_0.fit(none_type_0, weights=riemannian_metric_0, base_point=riemannian_metric_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geomstats.learning.preprocessing.ToTangentSpace'
    assert f'{type(var_0.estimator).__module__}.{type(var_0.estimator).__qualname__}' == 'geomstats.learning.frechet_mean.FrechetMean'
    assert var_0.point_type == 'vector'
    assert f'{type(var_0.geometry).__module__}.{type(var_0.geometry).__qualname__}' == 'geomstats.geometry.riemannian_metric.RiemannianMetric'
    to_tangent_space_0.inverse_transform(riemannian_metric_0, to_tangent_space_0)

def test_case_5():
    none_type_0 = None
    riemannian_metric_0 = module_2.RiemannianMetric(none_type_0)
    to_tangent_space_0 = module_0.ToTangentSpace(riemannian_metric_0)
    assert f'{type(to_tangent_space_0).__module__}.{type(to_tangent_space_0).__qualname__}' == 'geomstats.learning.preprocessing.ToTangentSpace'
    assert f'{type(to_tangent_space_0.estimator).__module__}.{type(to_tangent_space_0.estimator).__qualname__}' == 'geomstats.learning.frechet_mean.FrechetMean'
    assert to_tangent_space_0.point_type == 'vector'
    assert f'{type(to_tangent_space_0.geometry).__module__}.{type(to_tangent_space_0.geometry).__qualname__}' == 'geomstats.geometry.riemannian_metric.RiemannianMetric'
    assert module_0.EPSILON == pytest.approx(0.0001, abs=0.01, rel=0.01)
    with pytest.raises(RuntimeError):
        to_tangent_space_0.inverse_transform(to_tangent_space_0)

def test_case_6():
    none_type_0 = None
    riemannian_metric_0 = module_2.RiemannianMetric(none_type_0)
    to_tangent_space_0 = module_0.ToTangentSpace(riemannian_metric_0)
    assert f'{type(to_tangent_space_0).__module__}.{type(to_tangent_space_0).__qualname__}' == 'geomstats.learning.preprocessing.ToTangentSpace'
    assert f'{type(to_tangent_space_0.estimator).__module__}.{type(to_tangent_space_0.estimator).__qualname__}' == 'geomstats.learning.frechet_mean.FrechetMean'
    assert to_tangent_space_0.point_type == 'vector'
    assert f'{type(to_tangent_space_0.geometry).__module__}.{type(to_tangent_space_0.geometry).__qualname__}' == 'geomstats.geometry.riemannian_metric.RiemannianMetric'
    assert module_0.EPSILON == pytest.approx(0.0001, abs=0.01, rel=0.01)
    with pytest.raises(RuntimeError):
        to_tangent_space_0.transform(to_tangent_space_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    riemannian_metric_0 = module_2.RiemannianMetric(none_type_0)
    to_tangent_space_0 = module_0.ToTangentSpace(riemannian_metric_0)
    assert f'{type(to_tangent_space_0).__module__}.{type(to_tangent_space_0).__qualname__}' == 'geomstats.learning.preprocessing.ToTangentSpace'
    assert f'{type(to_tangent_space_0.estimator).__module__}.{type(to_tangent_space_0.estimator).__qualname__}' == 'geomstats.learning.frechet_mean.FrechetMean'
    assert to_tangent_space_0.point_type == 'vector'
    assert f'{type(to_tangent_space_0.geometry).__module__}.{type(to_tangent_space_0.geometry).__qualname__}' == 'geomstats.geometry.riemannian_metric.RiemannianMetric'
    assert module_0.EPSILON == pytest.approx(0.0001, abs=0.01, rel=0.01)
    to_tangent_space_0.transform(to_tangent_space_0, to_tangent_space_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    riemannian_metric_0 = module_2.RiemannianMetric(none_type_0)
    to_tangent_space_0 = module_0.ToTangentSpace(riemannian_metric_0)
    assert f'{type(to_tangent_space_0).__module__}.{type(to_tangent_space_0).__qualname__}' == 'geomstats.learning.preprocessing.ToTangentSpace'
    assert f'{type(to_tangent_space_0.estimator).__module__}.{type(to_tangent_space_0.estimator).__qualname__}' == 'geomstats.learning.frechet_mean.FrechetMean'
    assert to_tangent_space_0.point_type == 'vector'
    assert f'{type(to_tangent_space_0.geometry).__module__}.{type(to_tangent_space_0.geometry).__qualname__}' == 'geomstats.geometry.riemannian_metric.RiemannianMetric'
    assert module_0.EPSILON == pytest.approx(0.0001, abs=0.01, rel=0.01)
    list_0 = [none_type_0, riemannian_metric_0, none_type_0, riemannian_metric_0]
    var_0 = to_tangent_space_0.fit(list_0, base_point=none_type_0)
    assert f'{type(var_0.estimator).__module__}.{type(var_0.estimator).__qualname__}' == 'geomstats.learning.frechet_mean.FrechetMean'
    var_0.inverse_transform(to_tangent_space_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    riemannian_metric_0 = module_2.RiemannianMetric(none_type_0)
    to_tangent_space_0 = module_0.ToTangentSpace(riemannian_metric_0)
    assert f'{type(to_tangent_space_0).__module__}.{type(to_tangent_space_0).__qualname__}' == 'geomstats.learning.preprocessing.ToTangentSpace'
    assert f'{type(to_tangent_space_0.estimator).__module__}.{type(to_tangent_space_0.estimator).__qualname__}' == 'geomstats.learning.frechet_mean.FrechetMean'
    assert to_tangent_space_0.point_type == 'vector'
    assert f'{type(to_tangent_space_0.geometry).__module__}.{type(to_tangent_space_0.geometry).__qualname__}' == 'geomstats.geometry.riemannian_metric.RiemannianMetric'
    assert module_0.EPSILON == pytest.approx(0.0001, abs=0.01, rel=0.01)
    list_0 = [none_type_0, riemannian_metric_0, none_type_0, riemannian_metric_0]
    var_0 = to_tangent_space_0.fit(list_0, base_point=none_type_0)
    assert f'{type(var_0.estimator).__module__}.{type(var_0.estimator).__qualname__}' == 'geomstats.learning.frechet_mean.FrechetMean'
    to_tangent_space_0.transform(var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    riemannian_metric_0 = module_2.RiemannianMetric(none_type_0)
    var_0 = module_3.FrechetMean(riemannian_metric_0)
    module_0.ToTangentSpace(var_0)