# Automatically generated by Pynguin.
import pytest
import geomstats.learning.agglomerative_hierarchical_clustering as module_0
import autograd.tracer as module_1

def test_case_0():
    agglomerative_hierarchical_clustering_0 = module_0.AgglomerativeHierarchicalClustering()
    assert f'{type(agglomerative_hierarchical_clustering_0).__module__}.{type(agglomerative_hierarchical_clustering_0).__qualname__}' == 'geomstats.learning.agglomerative_hierarchical_clustering.AgglomerativeHierarchicalClustering'
    assert agglomerative_hierarchical_clustering_0.n_clusters == 2
    assert agglomerative_hierarchical_clustering_0.distance_threshold is None
    assert agglomerative_hierarchical_clustering_0.memory is None
    assert agglomerative_hierarchical_clustering_0.connectivity is None
    assert agglomerative_hierarchical_clustering_0.compute_full_tree == 'auto'
    assert agglomerative_hierarchical_clustering_0.linkage == 'average'
    assert agglomerative_hierarchical_clustering_0.affinity == 'euclidean'
    assert agglomerative_hierarchical_clustering_0.compute_distances is False

def test_case_1():
    bytes_0 = b'\x88\x97\x97'
    agglomerative_hierarchical_clustering_0 = module_0.AgglomerativeHierarchicalClustering(distance=bytes_0)
    assert f'{type(agglomerative_hierarchical_clustering_0).__module__}.{type(agglomerative_hierarchical_clustering_0).__qualname__}' == 'geomstats.learning.agglomerative_hierarchical_clustering.AgglomerativeHierarchicalClustering'
    assert agglomerative_hierarchical_clustering_0.n_clusters == 2
    assert agglomerative_hierarchical_clustering_0.distance_threshold is None
    assert agglomerative_hierarchical_clustering_0.memory is None
    assert agglomerative_hierarchical_clustering_0.connectivity is None
    assert agglomerative_hierarchical_clustering_0.compute_full_tree == 'auto'
    assert agglomerative_hierarchical_clustering_0.linkage == 'average'
    assert agglomerative_hierarchical_clustering_0.compute_distances is False
    agglomerative_hierarchical_clustering_1 = module_0.AgglomerativeHierarchicalClustering(memory=agglomerative_hierarchical_clustering_0)
    assert agglomerative_hierarchical_clustering_1.n_clusters == 2
    assert agglomerative_hierarchical_clustering_1.distance_threshold is None
    assert f'{type(agglomerative_hierarchical_clustering_1.memory).__module__}.{type(agglomerative_hierarchical_clustering_1.memory).__qualname__}' == 'geomstats.learning.agglomerative_hierarchical_clustering.AgglomerativeHierarchicalClustering'
    assert agglomerative_hierarchical_clustering_1.connectivity is None
    assert agglomerative_hierarchical_clustering_1.compute_full_tree == 'auto'
    assert agglomerative_hierarchical_clustering_1.linkage == 'average'
    assert agglomerative_hierarchical_clustering_1.affinity == 'euclidean'
    assert agglomerative_hierarchical_clustering_1.compute_distances is False

@pytest.mark.xfail(strict=True)
def test_case_2():
    module_1.power()