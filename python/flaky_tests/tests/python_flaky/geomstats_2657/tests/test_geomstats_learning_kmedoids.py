# Automatically generated by Pynguin.
import pytest
import geomstats.learning.kmedoids as module_0

def test_case_0():
    none_type_0 = None
    riemannian_k_medoids_0 = module_0.RiemannianKMedoids(none_type_0)
    assert f'{type(riemannian_k_medoids_0).__module__}.{type(riemannian_k_medoids_0).__qualname__}' == 'geomstats.learning.kmedoids.RiemannianKMedoids'
    assert riemannian_k_medoids_0.metric is None
    assert riemannian_k_medoids_0.n_clusters == 8
    assert riemannian_k_medoids_0.init == 'random'
    assert riemannian_k_medoids_0.cluster_centers_ is None
    assert riemannian_k_medoids_0.labels_ is None
    assert riemannian_k_medoids_0.medoid_indices_ is None

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '-TE]\nm9='
    riemannian_k_medoids_0 = module_0.RiemannianKMedoids(str_0)
    assert f'{type(riemannian_k_medoids_0).__module__}.{type(riemannian_k_medoids_0).__qualname__}' == 'geomstats.learning.kmedoids.RiemannianKMedoids'
    assert riemannian_k_medoids_0.metric == '-TE]\nm9='
    assert riemannian_k_medoids_0.n_clusters == 8
    assert riemannian_k_medoids_0.init == 'random'
    assert riemannian_k_medoids_0.cluster_centers_ is None
    assert riemannian_k_medoids_0.labels_ is None
    assert riemannian_k_medoids_0.medoid_indices_ is None
    riemannian_k_medoids_0.predict(str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "Qy02Te,n.=/'@ T"
    riemannian_k_medoids_0 = module_0.RiemannianKMedoids(str_0)
    assert f'{type(riemannian_k_medoids_0).__module__}.{type(riemannian_k_medoids_0).__qualname__}' == 'geomstats.learning.kmedoids.RiemannianKMedoids'
    assert riemannian_k_medoids_0.metric == "Qy02Te,n.=/'@ T"
    assert riemannian_k_medoids_0.n_clusters == 8
    assert riemannian_k_medoids_0.init == 'random'
    assert riemannian_k_medoids_0.cluster_centers_ is None
    assert riemannian_k_medoids_0.labels_ is None
    assert riemannian_k_medoids_0.medoid_indices_ is None
    set_0 = set()
    var_0 = riemannian_k_medoids_0.predict(set_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'numpy.ndarray'
    assert len(var_0) == 0
    riemannian_k_medoids_0.predict(str_0)