# Automatically generated by Pynguin.
import pytest
import geomstats.datasets.utils as module_0

def test_case_0():
    var_0 = module_0.load_cities()

def test_case_1():
    var_0 = module_0.load_poses()

def test_case_2():
    var_0 = module_0.load_random_graph()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geomstats.datasets.prepare_graph_data.Graph'
    assert var_0.edges == {0: [1], 1: [0, 4], 2: [3, 4, 6], 3: [2, 4, 5], 4: [1, 2, 3], 5: [3, 9], 6: [2, 7, 8], 7: [6], 8: [6], 9: [5]}
    assert var_0.n_nodes == 10
    assert var_0.labels == {0: [1], 1: [1], 2: [3], 3: [2], 4: [1], 5: [2], 6: [3], 7: [3], 8: [3], 9: [2]}
    var_1 = module_0.load_cities()
    var_2 = module_0.load_karate_graph()
    var_3 = module_0.load_connectomes(var_0)

def test_case_3():
    var_0 = module_0.load_connectomes()

def test_case_4():
    var_0 = module_0.load_karate_graph()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geomstats.datasets.prepare_graph_data.Graph'
    assert var_0.edges == {0: [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 19, 21, 31], 1: [0, 2, 3, 7, 13, 17, 19, 21, 30], 2: [0, 1, 3, 7, 8, 9, 13, 27, 28, 32], 3: [0, 1, 2, 7, 12, 13], 4: [0, 6, 10], 5: [0, 6, 10, 16], 6: [0, 4, 5, 16], 7: [0, 1, 2, 3], 8: [0, 2, 30, 32, 33], 9: [2, 33], 10: [0, 4, 5], 11: [0], 12: [0, 3], 13: [0, 1, 2, 3, 33], 14: [32, 33], 15: [32, 33], 16: [5, 6], 17: [0, 1], 18: [32, 33], 19: [0, 1, 33], 20: [32, 33], 21: [0, 1], 22: [32, 33], 23: [25, 27, 29, 32, 33], 24: [25, 27, 31], 25: [23, 24, 31], 26: [29, 33], 27: [2, 23, 24, 33], 28: [2, 31, 33], 29: [23, 26, 32, 33], 30: [1, 8, 32, 33], 31: [0, 24, 25, 28, 32, 33], 32: [2, 8, 14, 15, 18, 20, 22, 23, 29, 30, 31, 33], 33: [8, 9, 13, 14, 15, 18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32]}
    assert var_0.n_nodes == 34
    assert var_0.labels == {0: [1], 1: [1], 2: [1], 3: [1], 4: [1], 5: [1], 6: [1], 7: [1], 8: [1], 9: [2], 10: [1], 11: [1], 12: [1], 13: [1], 14: [2], 15: [2], 16: [1], 17: [1], 18: [2], 19: [1], 20: [2], 21: [1], 22: [2], 23: [2], 24: [2], 25: [2], 26: [2], 27: [2], 28: [2], 29: [2], 30: [2], 31: [2], 32: [2], 33: [2]}

def test_case_5():
    var_0 = module_0.load_random_graph()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geomstats.datasets.prepare_graph_data.Graph'
    assert var_0.edges == {0: [1], 1: [0, 4], 2: [3, 4, 6], 3: [2, 4, 5], 4: [1, 2, 3], 5: [3, 9], 6: [2, 7, 8], 7: [6], 8: [6], 9: [5]}
    assert var_0.n_nodes == 10
    assert var_0.labels == {0: [1], 1: [1], 2: [3], 3: [2], 4: [1], 5: [2], 6: [3], 7: [3], 8: [3], 9: [2]}

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    var_0 = module_0.load_random_graph()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geomstats.datasets.prepare_graph_data.Graph'
    assert var_0.edges == {0: [1], 1: [0, 4], 2: [3, 4, 6], 3: [2, 4, 5], 4: [1, 2, 3], 5: [3, 9], 6: [2, 7, 8], 7: [6], 8: [6], 9: [5]}
    assert var_0.n_nodes == 10
    assert var_0.labels == {0: [1], 1: [1], 2: [3], 3: [2], 4: [1], 5: [2], 6: [3], 7: [3], 8: [3], 9: [2]}
    var_1 = module_0.load_poses(none_type_0)
    var_2 = module_0.load_cities()
    var_2.get_identity()