# Automatically generated by Pynguin.
import pytest
import OPi.event as module_0
import OPi.sysfs as module_1

def test_case_0():
    bool_0 = True
    worker_0 = module_0._worker(bool_0, bool_0, bool_0)
    module_0.add_edge_callback(bool_0, bool_0)
    var_0 = module_0.edge_detected(bool_0)
    var_1 = worker_0.run()

def test_case_1():
    float_0 = -1735.9533518665262
    var_0 = module_0._worker(float_0, float_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    worker_0 = module_0._worker(list_0, list_0)
    worker_0.run()

def test_case_3():
    bool_0 = True
    with pytest.raises(RuntimeError):
        var_0 = module_0.blocking_wait_for_edge(bool_0, bool_0)

def test_case_4():
    bool_0 = False
    with pytest.raises(AssertionError):
        module_0.blocking_wait_for_edge(bool_0, bool_0)

def test_case_5():
    int_0 = 9
    var_0 = module_0.edge_detected(int_0)

def test_case_6():
    bool_0 = True
    with pytest.raises(RuntimeError):
        var_0 = module_0.add_edge_detect(bool_0, bool_0)
    var_0.add_callback(var_0)

def test_case_7():
    complex_0 = (1166.45-517j)
    with pytest.raises(AssertionError):
        module_0.add_edge_detect(complex_0, complex_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    module_0.cleanup()

def test_case_9():
    float_0 = -1757.0
    var_0 = module_0.cleanup(float_0)

def test_case_10():
    float_0 = -1757.0
    none_type_0 = None
    with pytest.raises(RuntimeError):
        module_0.add_edge_callback(float_0, none_type_0)

def test_case_11():
    bool_0 = True
    var_0 = module_0.add_edge_callback(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    var_0 = module_0.edge_detected(bool_0)
    int_0 = 344
    var_1 = module_0.edge_detected(int_0)
    module_0.blocking_wait_for_edge(int_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    module_0.cleanup()
    var_1 = module_0.add_edge_callback(var_0, var_0)

def test_case_14():
    bool_0 = True
    var_0 = module_0.edge_detected(bool_0)

def test_case_15():
    bool_0 = True
    with pytest.raises(RuntimeError):
        module_0.add_edge_detect(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    worker_0 = module_0._worker(bool_0, bool_0)
    var_0 = module_0.edge_detected(bool_0)
    var_1 = module_0.edge_detected(var_0)
    var_2 = worker_0.add_callback(var_0)
    var_3 = module_1.value_descriptor(var_0, var_0)
    worker_0.notify_callbacks()

def test_case_17():
    bool_0 = False
    worker_0 = module_0._worker(bool_0, bool_0)
    var_0 = worker_0.notify_callbacks()
    var_1 = module_0.edge_detected(bool_0)
    var_2 = worker_0.notify_callbacks()
    int_0 = 5
    var_3 = module_0.edge_detected(int_0)
    bool_1 = True
    with pytest.raises(RuntimeError):
        module_0.blocking_wait_for_edge(bool_1, bool_1)