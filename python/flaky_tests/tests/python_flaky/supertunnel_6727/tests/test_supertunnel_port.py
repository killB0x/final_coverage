# Automatically generated by Pynguin.
import pytest
import supertunnel.port as module_0
import inspect as module_1
import click.parser as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -58
    forwarding_port_0 = module_0.ForwardingPort(int_0, int_0, destinationhost=int_0)
    assert module_0.ForwardingPort.destinationhost == 'localhost'
    assert f'{type(module_0.ForwardingPort.source).__module__}.{type(module_0.ForwardingPort.source).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ForwardingPort.destination).__module__}.{type(module_0.ForwardingPort.destination).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ForwardingPort.parse).__module__}.{type(module_0.ForwardingPort.parse).__qualname__}' == 'builtins.method'
    forwarding_port_0.__setattr__(forwarding_port_0, forwarding_port_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    forwarding_port_argument_0 = module_0.ForwardingPortArgument()
    assert module_0.ForwardingPortArgument.name == 'port'
    forwarding_port_argument_0.convert(forwarding_port_argument_0, forwarding_port_argument_0, forwarding_port_argument_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    forwarding_port_argument_0 = module_0.ForwardingPortArgument()
    assert module_0.ForwardingPortArgument.name == 'port'
    var_0 = module_1.ismethoddescriptor(forwarding_port_argument_0)
    var_1 = forwarding_port_argument_0.convert(var_0, forwarding_port_argument_0, var_0)
    var_2 = module_1.currentframe()
    var_2.visit_withitem(forwarding_port_argument_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -842
    forwarding_port_0 = module_0.ForwardingPort(int_0, int_0, int_0)
    assert forwarding_port_0.destinationhost == 'localhost'
    assert module_0.ForwardingPort.destinationhost == 'localhost'
    assert f'{type(module_0.ForwardingPort.source).__module__}.{type(module_0.ForwardingPort.source).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ForwardingPort.destination).__module__}.{type(module_0.ForwardingPort.destination).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ForwardingPort.parse).__module__}.{type(module_0.ForwardingPort.parse).__qualname__}' == 'builtins.method'
    str_0 = forwarding_port_0.__str__()
    assert str_0 == '-842:-842:localhost:-842'
    var_0 = forwarding_port_0.__hash__()
    assert var_0 == 1891620531418810808
    str_1 = forwarding_port_0.__repr__()
    assert str_1 == 'ForwardingPort(soruce=-842:-842, destination=localhost:-842)'
    forwarding_port_0.__delattr__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    forwarding_port_argument_0 = module_0.ForwardingPortArgument()
    assert module_0.ForwardingPortArgument.name == 'port'
    str_0 = 'nx:x'
    forwarding_port_argument_0.convert(str_0, forwarding_port_argument_0, forwarding_port_argument_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    forwarding_port_argument_0 = module_0.ForwardingPortArgument()
    assert module_0.ForwardingPortArgument.name == 'port'
    str_0 = forwarding_port_argument_0.__str__()
    forwarding_port_argument_0.convert(str_0, forwarding_port_argument_0, forwarding_port_argument_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    forwarding_port_argument_0 = module_0.ForwardingPortArgument()
    assert module_0.ForwardingPortArgument.name == 'port'
    var_0 = module_2.Argument(forwarding_port_argument_0, forwarding_port_argument_0)
    str_0 = var_0.__eq__(var_0)
    none_type_0 = None
    var_1 = forwarding_port_argument_0.convert(str_0, var_0, none_type_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'supertunnel.port.ForwardingPort'
    assert var_1.sourceport is True
    assert var_1.destinationport is True
    assert var_1.sourcehost is None
    assert var_1.destinationhost == 'localhost'
    assert module_0.ForwardingPort.destinationhost == 'localhost'
    assert f'{type(module_0.ForwardingPort.source).__module__}.{type(module_0.ForwardingPort.source).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ForwardingPort.destination).__module__}.{type(module_0.ForwardingPort.destination).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ForwardingPort.parse).__module__}.{type(module_0.ForwardingPort.parse).__qualname__}' == 'builtins.method'
    var_2 = module_1.currentframe()
    var_2.popitem()

@pytest.mark.xfail(strict=True)
def test_case_7():
    forwarding_port_argument_0 = module_0.ForwardingPortArgument()
    assert module_0.ForwardingPortArgument.name == 'port'
    var_0 = module_1.ismethoddescriptor(forwarding_port_argument_0)
    str_0 = '{z6A?4;H1Wv,R\x0c1kb,\\l'
    forwarding_port_argument_0.convert(str_0, var_0, forwarding_port_argument_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    forwarding_port_argument_0 = module_0.ForwardingPortArgument()
    assert module_0.ForwardingPortArgument.name == 'port'
    var_0 = module_1.getfullargspec(forwarding_port_argument_0)
    forwarding_port_argument_0.convert(var_0, var_0, forwarding_port_argument_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    forwarding_port_argument_0 = module_0.ForwardingPortArgument()
    assert module_0.ForwardingPortArgument.name == 'port'
    str_0 = 'x5::'
    forwarding_port_argument_0.convert(str_0, str_0, forwarding_port_argument_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    forwarding_port_argument_0 = module_0.ForwardingPortArgument()
    assert module_0.ForwardingPortArgument.name == 'port'
    bool_0 = False
    forwarding_port_0 = module_0.ForwardingPort(bool_0, bool_0)
    assert forwarding_port_0.destinationhost == 'localhost'
    assert module_0.ForwardingPort.destinationhost == 'localhost'
    assert f'{type(module_0.ForwardingPort.source).__module__}.{type(module_0.ForwardingPort.source).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ForwardingPort.destination).__module__}.{type(module_0.ForwardingPort.destination).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ForwardingPort.parse).__module__}.{type(module_0.ForwardingPort.parse).__qualname__}' == 'builtins.method'
    var_0 = module_1.ismethoddescriptor(forwarding_port_argument_0)
    var_1 = forwarding_port_argument_0.__call__(forwarding_port_0, ctx=forwarding_port_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'supertunnel.port.ForwardingPort'
    assert var_1.sourceport is False
    assert var_1.destinationport is False
    assert var_1.sourcehost is None
    assert var_1.destinationhost == 'localhost'
    str_0 = '#.oU:'
    forwarding_port_argument_0.convert(str_0, var_0, forwarding_port_argument_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    forwarding_port_argument_0 = module_0.ForwardingPortArgument()
    assert module_0.ForwardingPortArgument.name == 'port'
    str_0 = 'http://localhost:{port:d}/?token={token:s}'
    forwarding_port_argument_0.convert(str_0, str_0, forwarding_port_argument_0)