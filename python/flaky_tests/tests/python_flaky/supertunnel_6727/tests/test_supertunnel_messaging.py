# Automatically generated by Pynguin.
import pytest
import supertunnel.messaging as module_0
import inspect as module_1
import re as module_2
import collections as module_3

def test_case_0():
    terminfo_0 = module_0._Terminfo()

def test_case_1():
    terminfo_0 = module_0._Terminfo()
    str_0 = 'logline,expected_action'
    with pytest.raises(ValueError):
        terminfo_0.send(*str_0)

def test_case_2():
    terminfo_0 = module_0._Terminfo()
    str_0 = 'example'
    bool_0 = terminfo_0.has(*str_0)
    assert bool_0 is False

def test_case_3():
    terminfo_0 = module_0._Terminfo()
    bool_0 = terminfo_0.has()

def test_case_4():
    terminfo_0 = module_0._Terminfo()
    none_type_0 = terminfo_0.send()

@pytest.mark.xfail(strict=True)
def test_case_5():
    terminfo_0 = module_0._Terminfo()
    bool_0 = terminfo_0.has()
    none_type_0 = terminfo_0.send()
    status_message_0 = module_0.StatusMessage(terminfo_0)
    assert f'{type(status_message_0).__module__}.{type(status_message_0).__qualname__}' == 'supertunnel.messaging.StatusMessage'
    var_0 = module_1.ismodule(bool_0)
    module_0.format_timedelta(var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    module_0.format_timedelta(list_0)

def test_case_7():
    terminfo_0 = module_0._Terminfo()
    status_message_0 = module_0.StatusMessage(terminfo_0)
    assert f'{type(status_message_0).__module__}.{type(status_message_0).__qualname__}' == 'supertunnel.messaging.StatusMessage'
    status_message_1 = status_message_0.__enter__()
    assert status_message_0.last == ''
    assert f'{type(status_message_1).__module__}.{type(status_message_1).__qualname__}' == 'supertunnel.messaging.StatusMessage'
    assert status_message_1.last == ''

def test_case_8():
    terminfo_0 = module_0._Terminfo()
    none_type_0 = terminfo_0.send()
    bool_0 = terminfo_0.has()
    list_0 = [bool_0]
    bool_1 = terminfo_0.has(*list_0)
    assert bool_1 is False
    bool_2 = terminfo_0.has(*list_0)
    none_type_1 = terminfo_0.send()

def test_case_9():
    var_0 = module_2.purge()
    status_message_0 = module_0.StatusMessage(var_0)
    assert f'{type(status_message_0).__module__}.{type(status_message_0).__qualname__}' == 'supertunnel.messaging.StatusMessage'
    none_type_0 = status_message_0.message(status_message_0)

def test_case_10():
    none_type_0 = None
    status_message_0 = module_0.StatusMessage(none_type_0, none_type_0)
    assert f'{type(status_message_0).__module__}.{type(status_message_0).__qualname__}' == 'supertunnel.messaging.StatusMessage'
    str_0 = 'f>'
    none_type_1 = status_message_0.status(str_0)
    with pytest.raises(ValueError):
        module_3.namedtuple(none_type_0, str_0, module=str_0)

def test_case_11():
    none_type_0 = None
    status_message_0 = module_0.StatusMessage(none_type_0)
    assert f'{type(status_message_0).__module__}.{type(status_message_0).__qualname__}' == 'supertunnel.messaging.StatusMessage'
    var_0 = status_message_0.__exit__(none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    terminfo_0 = module_0._Terminfo()
    bool_0 = terminfo_0.has()
    none_type_0 = terminfo_0.send()
    bool_1 = terminfo_0.has()
    bool_2 = terminfo_0.has()
    list_0 = module_1.getmembers(bool_1)
    terminfo_0.send(*list_0)