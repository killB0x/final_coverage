# Automatically generated by Pynguin.
import pytest
import supertunnel.ssh.config as module_0
import supertunnel.ssh.helpers as module_1

def test_case_0():
    str_0 = '\x0b\x0b^\rN$Qut0n(QAy'
    list_0 = [str_0]
    s_s_h_configuration_0 = module_0.SSHConfiguration(list_0)
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == ['\x0b\x0b^\rN$Qut0n(QAy']
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'

def test_case_1():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    str_0 = '--'
    none_type_0 = s_s_h_configuration_0.set_host(str_0)
    iterable_0 = module_0.parse_config_file(str_0)

def test_case_2():
    str_0 = '{*\x0b"E~M(N%`'
    str_1 = '--auto'
    list_0 = [str_0, str_0, str_1]
    dict_0 = {str_1: str_1}
    s_s_h_configuration_0 = module_0.SSHConfiguration(list_0, list_0, dict_0)
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == ['{*\x0b"E~M(N%`', '{*\x0b"E~M(N%`', '--auto']
    assert s_s_h_configuration_0.args == ['{*\x0b"E~M(N%`', '{*\x0b"E~M(N%`', '--auto']
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'

def test_case_3():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    str_0 = '--'
    none_type_0 = s_s_h_configuration_0.set_host(str_0)
    str_1 = 'o\\p!$*\x0bt'
    none_type_1 = s_s_h_configuration_0.set_host(str_1)
    assert s_s_h_configuration_0.host == ['o\\p!$*\x0bt']
    iterable_0 = module_0.parse_config_file(str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    list_0 = s_s_h_configuration_0.arguments()
    s_s_h_configuration_1 = s_s_h_configuration_0.copy()
    s_s_h_configuration_2 = module_0.SSHConfiguration()
    s_s_h_port_forwarding_0 = module_1.SSHPortForwarding()
    s_s_h_configuration_1.extend(s_s_h_port_forwarding_0)

def test_case_5():
    str_0 = '(`,bTUq;=CYxD6'
    s_s_h_config_base_0 = module_1.SSHConfigBase()
    var_0 = module_0.parse_ssh_config_line(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'supertunnel.ssh.config.ConfigValue'
    assert len(var_0) == 2

@pytest.mark.xfail(strict=True)
def test_case_6():
    module_0.ConfigValue()

def test_case_7():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    list_0 = s_s_h_configuration_0.arguments()
    s_s_h_configuration_1 = s_s_h_configuration_0.copy()
    s_s_h_configuration_2 = module_0.SSHConfiguration()
    s_s_h_port_forwarding_0 = module_1.SSHPortForwarding()
    none_type_0 = s_s_h_configuration_0.__repr__()

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = ' '
    var_0 = module_0.parse_ssh_config_line(str_0)
    str_1 = 'q0,'
    str_2 = module_0.parse_quoted_string(str_1)
    assert str_2 == 'q0,'
    module_0.ConfigValue()

def test_case_9():
    str_0 = 'Y bm'
    var_0 = module_0.parse_ssh_config_line(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'supertunnel.ssh.config.ConfigValue'
    assert len(var_0) == 2

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '(`,bTUq;=CYxD6'
    s_s_h_config_base_0 = module_1.SSHConfigBase()
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    var_0 = module_0.parse_ssh_config_line(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'supertunnel.ssh.config.ConfigValue'
    assert len(var_0) == 2
    none_type_0 = s_s_h_configuration_0.set_host(var_0)
    assert s_s_h_configuration_0.host == ['(`,btuq;', 'CYxD6']
    module_0.parse_ssh_config_line(var_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    s_s_h_configuration_1 = module_0.SSHConfiguration()
    assert s_s_h_configuration_1.host == []
    assert s_s_h_configuration_1.args == []
    str_0 = ''
    str_1 = '*.x*{v=_|-*CPi9m'
    str_2 = module_0.parse_quoted_string(str_1)
    assert str_2 == '*.x*{v=_|-*CPi9m'
    none_type_0 = s_s_h_configuration_0.set_host(str_0)
    assert s_s_h_configuration_0.host == ['']
    s_s_h_configuration_2 = s_s_h_configuration_1.copy()
    assert f'{type(s_s_h_configuration_2).__module__}.{type(s_s_h_configuration_2).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_2.host == []
    assert s_s_h_configuration_2.args == []
    s_s_h_option_0 = module_1.SSHOption(default=s_s_h_configuration_2)
    bool_0 = False
    list_0 = s_s_h_configuration_1.arguments(bool_0)
    str_3 = 'dK~F|iyF2LQD%y'
    module_0.parse_ssh_config_line(str_3)

@pytest.mark.xfail(strict=True)
def test_case_12():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    none_type_0 = None
    var_0 = s_s_h_configuration_0.__repr__()
    assert var_0 == "SSHConfiguration({}, '', '')"
    none_type_1 = s_s_h_configuration_0.set_host(none_type_0)
    s_s_h_configuration_1 = s_s_h_configuration_0.copy()
    assert s_s_h_configuration_1.host == []
    s_s_h_configuration_2 = s_s_h_configuration_1.copy()
    assert s_s_h_configuration_2.host == []
    s_s_h_option_0 = module_1.SSHOption()
    var_0.option()

def test_case_13():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    s_s_h_configuration_1 = module_0.SSHConfiguration()
    assert s_s_h_configuration_1.host == []
    assert s_s_h_configuration_1.args == []
    str_0 = ''
    str_1 = '*.x*{v=_|-*CPnm9m'
    str_2 = module_0.parse_quoted_string(str_0)
    list_0 = s_s_h_configuration_1.arguments()
    var_0 = module_0.parse_ssh_config_line(str_0)
    none_type_0 = s_s_h_configuration_0.set_host(list_0)
    var_1 = module_0.parse_ssh_config_line(str_0)
    none_type_1 = s_s_h_configuration_1.set_host(str_1)
    assert s_s_h_configuration_1.host == ['*.x*{v=_|-*CPnm9m']
    str_3 = '&xv24=4i1v?*Dhj3G56@'
    var_2 = module_0.parse_ssh_config_line(str_3)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'supertunnel.ssh.config.ConfigValue'
    assert len(var_2) == 2
    var_3 = s_s_h_configuration_1.__repr__()
    assert var_3 == "SSHConfiguration({}, '', '*.x*{v=_|-*CPnm9m')"

@pytest.mark.xfail(strict=True)
def test_case_14():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    list_0 = s_s_h_configuration_0.arguments()
    s_s_h_configuration_1 = s_s_h_configuration_0.copy()
    var_0 = s_s_h_configuration_0.__repr__()
    assert var_0 == "SSHConfiguration({}, '', '')"
    none_type_0 = s_s_h_configuration_0.extend(var_0)
    assert s_s_h_configuration_0.args == ['S', 'S', 'H', 'C', 'o', 'n', 'f', 'i', 'g', 'u', 'r', 'a', 't', 'i', 'o', 'n', '(', '{', '}', ',', ' ', "'", "'", ',', ' ', "'", "'", ')']
    iterable_0 = module_0.parse_config_file(var_0)
    s_s_h_configuration_0.extend(iterable_0)

def test_case_15():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    str_0 = 'no'
    str_1 = '*.x*{v=_|-*CPi9m'
    str_2 = module_0.parse_quoted_string(str_1)
    assert str_2 == '*.x*{v=_|-*CPi9m'
    list_0 = s_s_h_configuration_0.arguments()
    str_3 = ''
    var_0 = module_0.parse_ssh_config_line(str_3)
    none_type_0 = s_s_h_configuration_0.set_host(str_0)
    assert s_s_h_configuration_0.host == ['no']
    list_1 = s_s_h_configuration_0.arguments()
    str_4 = '#'
    var_1 = module_0.parse_ssh_config_line(str_4)

@pytest.mark.xfail(strict=True)
def test_case_16():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    list_0 = s_s_h_configuration_0.__repr__()
    assert list_0 == "SSHConfiguration({}, '', '')"
    str_0 = 'Y bm'
    str_1 = 'QuotedKey = "Confrabulator "'
    var_0 = module_0.parse_ssh_config_line(str_1)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'supertunnel.ssh.config.ConfigValue'
    assert len(var_0) == 2
    s_s_h_descriptor_base_0 = module_1.SSHDescriptorBase(default=list_0)
    assert s_s_h_descriptor_base_0.default == "SSHConfiguration({}, '', '')"
    str_0.option()

def test_case_17():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    none_type_0 = None
    str_0 = '*.x*{v=_|-*CPi9m'
    str_1 = module_0.parse_quoted_string(str_0)
    assert str_1 == '*.x*{v=_|-*CPi9m'
    str_2 = 'y'
    s_s_h_configuration_1 = module_0.SSHConfiguration(str_1, none_type_0, none_type_0)
    assert f'{type(s_s_h_configuration_1).__module__}.{type(s_s_h_configuration_1).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_1.host == '*.x*{v=_|-*CPi9m'
    assert s_s_h_configuration_1.args == []
    str_3 = '-\x0bLheEJ~g'
    none_type_1 = s_s_h_configuration_0.set_host(none_type_0)
    str_4 = 'Kan3WHQ;F0="\n9~0'
    var_0 = module_0.parse_ssh_config_line(str_4)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'supertunnel.ssh.config.ConfigValue'
    assert len(var_0) == 2
    none_type_2 = s_s_h_configuration_0.set_host(str_2)
    none_type_3 = s_s_h_configuration_0.set_host(str_0)
    assert s_s_h_configuration_0.host == ['*.x*{v=_|-*CPi9m']
    str_5 = "$Sf<M'}e}Z($1Q"
    s_s_h_port_forwarding_0 = module_1.SSHPortForwarding(str_5)
    var_1 = module_0.parse_ssh_config_line(str_3)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'supertunnel.ssh.config.ConfigValue'
    assert len(var_1) == 2
    var_2 = s_s_h_port_forwarding_0.__get__(none_type_3, str_0)
    var_3 = var_2.__repr__()

def test_case_18():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    s_s_h_configuration_1 = module_0.SSHConfiguration()
    assert s_s_h_configuration_1.host == []
    assert s_s_h_configuration_1.args == []
    list_0 = s_s_h_configuration_0.arguments()
    str_0 = '*Y+'
    str_1 = module_0.parse_quoted_string(str_0)
    assert str_1 == '*Y+'
    var_0 = s_s_h_configuration_0.__repr__()
    assert var_0 == "SSHConfiguration({}, '', '')"
    str_2 = '--'
    none_type_0 = s_s_h_configuration_1.set_host(str_2)
    s_s_h_configuration_2 = s_s_h_configuration_1.copy()
    assert s_s_h_configuration_2.host == []
    list_1 = s_s_h_configuration_1.arguments()
    str_3 = ''
    none_type_1 = s_s_h_configuration_2.extend(var_0)
    assert s_s_h_configuration_2.args == ['S', 'S', 'H', 'C', 'o', 'n', 'f', 'i', 'g', 'u', 'r', 'a', 't', 'i', 'o', 'n', '(', '{', '}', ',', ' ', "'", "'", ',', ' ', "'", "'", ')']
    str_4 = '\x0bLheEJ~g'
    str_5 = '|g.!|f'
    list_2 = [str_2, str_5, str_4]
    none_type_2 = s_s_h_configuration_1.set_host(list_2)
    assert s_s_h_configuration_1.host == ['|g.!|f', '\x0bLheEJ~g']
    none_type_3 = s_s_h_configuration_1.set_host(str_2)
    assert s_s_h_configuration_1.host == []
    s_s_h_port_forwarding_0 = module_1.SSHPortForwarding()
    iterable_0 = module_0.parse_config_file(str_3)
    none_type_4 = s_s_h_configuration_2.extend(iterable_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    list_0 = s_s_h_configuration_0.arguments()
    bool_0 = False
    list_1 = s_s_h_configuration_0.arguments(bool_0)
    s_s_h_configuration_1 = module_0.SSHConfiguration(args=list_0)
    assert s_s_h_configuration_1.args == ['ssh']
    s_s_h_configuration_2 = s_s_h_configuration_1.copy()
    assert s_s_h_configuration_2.args == ['ssh']
    s_s_h_configuration_3 = s_s_h_configuration_2.copy()
    assert s_s_h_configuration_3.args == ['ssh']
    list_2 = s_s_h_configuration_3.arguments()
    str_0 = '2Jj^s\\NBuh>Z;\x0bcq\x0c'
    str_1 = module_0.parse_quoted_string(str_0)
    assert str_1 == '2Jj^s\\NBuh>Z;\x0bcq'
    var_0 = s_s_h_configuration_0.__repr__()
    assert var_0 == "SSHConfiguration({}, '', '')"
    str_2 = 'c8:\x0b'
    none_type_0 = s_s_h_configuration_3.extend(var_0)
    assert s_s_h_configuration_1.args == ['ssh', 'S', 'S', 'H', 'C', 'o', 'n', 'f', 'i', 'g', 'u', 'r', 'a', 't', 'i', 'o', 'n', '(', '{', '}', ',', ' ', "'", "'", ',', ' ', "'", "'", ')']
    assert s_s_h_configuration_2.args == ['ssh', 'S', 'S', 'H', 'C', 'o', 'n', 'f', 'i', 'g', 'u', 'r', 'a', 't', 'i', 'o', 'n', '(', '{', '}', ',', ' ', "'", "'", ',', ' ', "'", "'", ')']
    assert s_s_h_configuration_3.args == ['ssh', 'S', 'S', 'H', 'C', 'o', 'n', 'f', 'i', 'g', 'u', 'r', 'a', 't', 'i', 'o', 'n', '(', '{', '}', ',', ' ', "'", "'", ',', ' ', "'", "'", ')']
    str_3 = 'Test problem:'
    var_1 = module_0.parse_ssh_config_line(str_3)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'supertunnel.ssh.config.ConfigValue'
    assert len(var_1) == 2
    none_type_1 = s_s_h_configuration_0.set_host(list_2)
    none_type_2 = s_s_h_configuration_1.set_host(str_2)
    assert s_s_h_configuration_1.host == ['c8:\x0b']
    none_type_3 = s_s_h_configuration_1.set_host(str_2)
    none_type_4 = s_s_h_configuration_0.set_host(var_0)
    assert s_s_h_configuration_0.host == ["SSHConfiguration({}, '', '')"]
    list_3 = s_s_h_configuration_2.arguments()
    iterable_0 = module_0.parse_config_file(none_type_2)
    s_s_h_configuration_1.extend(none_type_4)

@pytest.mark.xfail(strict=True)
def test_case_20():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    var_0 = s_s_h_configuration_0.__repr__()
    assert var_0 == "SSHConfiguration({}, '', '')"
    bool_0 = False
    str_0 = '--'
    none_type_0 = s_s_h_configuration_0.set_host(str_0)
    s_s_h_configuration_1 = s_s_h_configuration_0.copy()
    assert s_s_h_configuration_1.host == []
    none_type_1 = s_s_h_configuration_1.extend(var_0)
    assert s_s_h_configuration_1.args == ['S', 'S', 'H', 'C', 'o', 'n', 'f', 'i', 'g', 'u', 'r', 'a', 't', 'i', 'o', 'n', '(', '{', '}', ',', ' ', "'", "'", ',', ' ', "'", "'", ')']
    str_1 = '\x0bLheEJ~g'
    list_0 = s_s_h_configuration_1.arguments(bool_0)
    none_type_2 = s_s_h_configuration_0.set_host(str_0)
    none_type_3 = s_s_h_configuration_0.set_host(str_1)
    assert s_s_h_configuration_0.host == ['\x0bLheEJ~g']
    s_s_h_port_forwarding_0 = module_1.SSHPortForwarding()
    iterable_0 = module_0.parse_config_file(s_s_h_port_forwarding_0)
    iterable_1 = module_0.parse_config_file(str_1)
    s_s_h_configuration_1.extend(iterable_1)

def test_case_21():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    s_s_h_configuration_1 = module_0.SSHConfiguration()
    assert s_s_h_configuration_1.host == []
    assert s_s_h_configuration_1.args == []
    list_0 = s_s_h_configuration_0.arguments()
    bool_0 = False
    list_1 = s_s_h_configuration_0.arguments(bool_0)
    str_0 = '<s'
    none_type_0 = s_s_h_configuration_1.set_host(str_0)
    assert s_s_h_configuration_1.host == ['<s']
    s_s_h_configuration_2 = s_s_h_configuration_1.copy()
    assert s_s_h_configuration_2.host == ['<s']
    list_2 = s_s_h_configuration_1.arguments()
    str_1 = 'y'
    str_2 = '2Jj^s\\NBuh>Z;\x0bcq\x0c'
    str_3 = module_0.parse_quoted_string(str_2)
    assert str_3 == '2Jj^s\\NBuh>Z;\x0bcq'
    var_0 = s_s_h_configuration_0.__repr__()
    assert var_0 == "SSHConfiguration({}, '', '')"
    none_type_1 = s_s_h_configuration_0.extend(var_0)
    assert s_s_h_configuration_0.args == ['S', 'S', 'H', 'C', 'o', 'n', 'f', 'i', 'g', 'u', 'r', 'a', 't', 'i', 'o', 'n', '(', '{', '}', ',', ' ', "'", "'", ',', ' ', "'", "'", ')']
    str_4 = 'c8:\x0b'
    none_type_2 = s_s_h_configuration_2.extend(var_0)
    assert s_s_h_configuration_2.args == ['S', 'S', 'H', 'C', 'o', 'n', 'f', 'i', 'g', 'u', 'r', 'a', 't', 'i', 'o', 'n', '(', '{', '}', ',', ' ', "'", "'", ',', ' ', "'", "'", ')']
    str_5 = '\x0bLheEJ~g'
    list_3 = s_s_h_configuration_2.arguments(bool_0)
    str_6 = 'Test\rj problem:'
    var_1 = module_0.parse_ssh_config_line(str_6)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'supertunnel.ssh.config.ConfigValue'
    assert len(var_1) == 2
    none_type_3 = s_s_h_configuration_0.set_host(list_2)
    assert s_s_h_configuration_0.host == ['<s']
    none_type_4 = s_s_h_configuration_1.set_host(str_0)
    none_type_5 = s_s_h_configuration_1.set_host(str_4)
    assert s_s_h_configuration_1.host == ['c8:\x0b']
    str_7 = '\\p!$*\x0bt'
    str_8 = module_0.parse_quoted_string(str_7)
    assert str_8 == '\\p!$*\x0bt'
    none_type_6 = s_s_h_configuration_1.set_host(var_0)
    assert s_s_h_configuration_1.host == ["SSHConfiguration({}, '', '')"]
    dict_0 = {str_2: s_s_h_configuration_1, str_2: str_1, str_2: str_2, str_6: none_type_0}
    list_4 = s_s_h_configuration_1.arguments()
    s_s_h_configuration_3 = module_0.SSHConfiguration()
    iterable_0 = module_0.parse_config_file(str_5)
    iterable_1 = module_0.parse_config_file(dict_0)
    none_type_7 = s_s_h_configuration_3.extend(iterable_1)
    assert len(s_s_h_configuration_3.args) == 2

@pytest.mark.xfail(strict=True)
def test_case_22():
    s_s_h_configuration_0 = module_0.SSHConfiguration()
    assert f'{type(s_s_h_configuration_0).__module__}.{type(s_s_h_configuration_0).__qualname__}' == 'supertunnel.ssh.config.SSHConfiguration'
    assert s_s_h_configuration_0.host == []
    assert s_s_h_configuration_0.args == []
    assert module_0.SSHConfiguration.no_remote_command.flag == '-N'
    assert module_0.SSHConfiguration.verbose.flag == '-v'
    assert module_0.SSHConfiguration.interval.name == 'ServerAliveInterval'
    assert module_0.SSHConfiguration.connect_timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.timeout.name == 'ConnectTimeout'
    assert module_0.SSHConfiguration.host_check.name == 'StrictHostKeyChecking'
    assert module_0.SSHConfiguration.batch_mode.name == 'BatchMode'
    assert module_0.SSHConfiguration.exit_on_forward_failure.name == 'ExitOnForwardFailure'
    assert module_0.SSHConfiguration.forward_local.mode == 'local'
    assert module_0.SSHConfiguration.forward_remote.mode == 'remote'
    s_s_h_configuration_1 = module_0.SSHConfiguration()
    assert s_s_h_configuration_1.host == []
    assert s_s_h_configuration_1.args == []
    list_0 = s_s_h_configuration_0.arguments()
    str_0 = '*Y+'
    str_1 = module_0.parse_quoted_string(str_0)
    assert str_1 == '*Y+'
    var_0 = s_s_h_configuration_0.__repr__()
    assert var_0 == "SSHConfiguration({}, '', '')"
    str_2 = '--'
    none_type_0 = s_s_h_configuration_1.set_host(str_2)
    s_s_h_configuration_2 = s_s_h_configuration_1.copy()
    assert s_s_h_configuration_2.host == []
    list_1 = s_s_h_configuration_1.arguments()
    none_type_1 = s_s_h_configuration_2.extend(var_0)
    assert s_s_h_configuration_2.args == ['S', 'S', 'H', 'C', 'o', 'n', 'f', 'i', 'g', 'u', 'r', 'a', 't', 'i', 'o', 'n', '(', '{', '}', ',', ' ', "'", "'", ',', ' ', "'", "'", ')']
    str_3 = '(_m^{S@j\ns%m'
    list_2 = [str_2, str_3, str_2]
    none_type_2 = s_s_h_configuration_1.set_host(list_2)
    assert s_s_h_configuration_1.host == ['(_m^{S@j\ns%m']
    none_type_3 = s_s_h_configuration_1.set_host(str_2)
    assert s_s_h_configuration_1.host == []
    s_s_h_port_forwarding_0 = module_1.SSHPortForwarding()
    iterable_0 = module_0.parse_config_file(var_0)
    iterable_1 = module_0.parse_config_file(none_type_1)
    s_s_h_configuration_0.extend(iterable_0)