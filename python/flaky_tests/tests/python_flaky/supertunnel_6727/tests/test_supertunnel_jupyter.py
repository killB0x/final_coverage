# Automatically generated by Pynguin.
import pytest
import supertunnel.jupyter as module_0

def test_case_0():
    str_0 = ', type='
    var_0 = module_0.find_jupyter_command(str_0)
    assert module_0.OPT_RESTRICT_USER_EPILOG == '\nDisabling the user restriction on the host machine should be a last\nresort. Turning off `restrict-user` will try to detect ports for all\nusers on the remote host, which means the automatic detection might\ntry to invoke a python binary which is owned by another user.\n'

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.get_relevant_ports(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.get_relevant_ports(none_type_0, show_urls=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.JupyterInfo()

def test_case_4():
    str_0 = '\n    Discover ports that jupyter/jupyter-lab is using on the remote machine.\n    '
    var_0 = module_0.find_jupyter_command(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'supertunnel.jupyter.JupyterCommand'
    assert len(var_0) == 2
    assert module_0.OPT_RESTRICT_USER_EPILOG == '\nDisabling the user restriction on the host machine should be a last\nresort. Turning off `restrict-user` will try to detect ports for all\nusers on the remote host, which means the automatic detection might\ntry to invoke a python binary which is owned by another user.\n'

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'pared port = {\n0}'
    var_0 = module_0.find_jupyter_command(str_0)
    assert module_0.OPT_RESTRICT_USER_EPILOG == '\nDisabling the user restriction on the host machine should be a last\nresort. Turning off `restrict-user` will try to detect ports for all\nusers on the remote host, which means the automatic detection might\ntry to invoke a python binary which is owned by another user.\n'
    str_1 = '\n    Discover ports that jupyter/jupyter-lab is using on the remote macine.\n    '
    var_1 = module_0.find_jupyter_command(str_1)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'supertunnel.jupyter.JupyterCommand'
    assert len(var_1) == 2
    var_2 = var_1.argument()
    assert var_2 == 'Discover jupyter/jupyter-notebook list --json'
    var_2.__getitem__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'parep p?rt\n = {0}'
    var_0 = module_0.iter_json_data(str_0)
    assert module_0.OPT_RESTRICT_USER_EPILOG == '\nDisabling the user restriction on the host machine should be a last\nresort. Turning off `restrict-user` will try to detect ports for all\nusers on the remote host, which means the automatic detection might\ntry to invoke a python binary which is owned by another user.\n'
    module_0.JupyterInfo(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '\n    Echo a subprocess error and the output from that subprocess.\n    '
    var_0 = module_0.iter_json_data(str_0)
    assert module_0.OPT_RESTRICT_USER_EPILOG == '\nDisabling the user restriction on the host machine should be a last\nresort. Turning off `restrict-user` will try to detect ports for all\nusers on the remote host, which means the automatic detection might\ntry to invoke a python binary which is owned by another user.\n'
    module_0.JupyterInfo(*var_0)