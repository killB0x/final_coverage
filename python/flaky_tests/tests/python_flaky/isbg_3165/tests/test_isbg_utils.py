# Automatically generated by Pynguin.
import pytest
import isbg.utils as module_0
import enum as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.hexdigit(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    module_0.detect_enc(list_0)

def test_case_2():
    str_0 = "W']{"
    var_0 = module_0.hexof(str_0)
    assert var_0 == '57275d7b'

def test_case_3():
    tuple_0 = ()
    var_0 = module_0.hexof(tuple_0)
    assert var_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 2
    module_0.dehexof(int_0)

def test_case_5():
    none_type_0 = None
    var_0 = module_0.dehexof(none_type_0)
    assert var_0 == ''

def test_case_6():
    none_type_0 = None
    var_0 = module_0.get_ascii_or_value(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '0gTZ|*R2\t[H\x0b2'
    module_0.popen(str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.shorten(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    module_0.truncate(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = -2335
    module_0.score_from_mail(int_0)

def test_case_11():
    bool_0 = False
    brace_message_0 = module_0.BraceMessage(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'b<XZ"sc_Hz'
    module_0.dehexof(str_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '3X"caHz'
    module_0.dehexof(str_0)

def test_case_14():
    str_0 = '*\nn'
    with pytest.raises(ValueError):
        module_0.hexdigit(str_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'bX"c_Hz'
    module_0.dehexof(str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = 'd1(Nti_mbeRAszITZSxf'
    module_0.dehexof(str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    var_0 = bool_0.__str__()
    module_0.dehexof(var_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "wW']{"
    module_0.dehexof(str_0)

def test_case_19():
    bool_0 = False
    with pytest.raises(ValueError):
        module_0.truncate(bool_0, bool_0)

def test_case_20():
    list_0 = []
    var_0 = module_0.shorten(list_0, list_0)

def test_case_21():
    bytes_0 = b'\xd5\xef\x818\xe2\xd1\xd4\xdc'
    var_0 = module_0.detect_enc(bytes_0)

def test_case_22():
    list_0 = []
    var_0 = module_0.get_ascii_or_value(list_0)

def test_case_23():
    bytes_0 = b'\xd5\xef\x818\xe2\xd1\xd4\xdc'
    var_0 = module_0.get_ascii_or_value(bytes_0)
    assert var_0 == b'\xd5\xef\x818\xe2\xd1\xd4\xdc'

def test_case_24():
    dict_0 = {}
    var_0 = module_0.get_ascii_or_value(dict_0)

def test_case_25():
    bytes_0 = b'\xd5\xef\x818\xe2\xd1\xd4\xdc'
    var_0 = module_0.detect_enc(bytes_0)
    var_1 = module_0.get_ascii_or_value(var_0)

def test_case_26():
    bytes_0 = b'\xd5\x900]\x95\xd1\xdc'
    var_0 = module_0.detect_enc(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    list_0 = []
    var_0 = module_0.shorten(list_0, list_0)
    bytes_0 = b'\xd5\xef\x818\xe2\xd1\xd4\xdc'
    var_1 = var_0.__dir__()
    var_2 = module_0.detect_enc(bytes_0)
    var_3 = module_0.get_ascii_or_value(bytes_0)
    assert var_3 == b'\xd5\xef\x818\xe2\xd1\xd4\xdc'
    var_4 = module_0.get_ascii_or_value(var_1)
    module_0.shorten(var_4, var_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    bytes_0 = b'\xd5\xef\x818\xe2\xd1\xd4\xe5\x02\xb8'
    var_0 = module_0.detect_enc(bytes_0)
    module_0.shorten(var_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    bytes_0 = b'\xd5\xef\x818\xe2\xd1\xd4\xdc'
    brace_message_0 = module_0.BraceMessage(bytes_0)
    var_0 = module_0.get_ascii_or_value(bytes_0)
    assert var_0 == b'\xd5\xef\x818\xe2\xd1\xd4\xdc'
    var_1 = module_0.detect_enc(var_0)
    var_2 = module_0.get_ascii_or_value(var_1)
    brace_message_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_30():
    bytes_0 = b'\xd5\xef\x818\xe2\xd1\xd4\xdc'
    var_0 = module_0.get_ascii_or_value(bytes_0)
    assert var_0 == b'\xd5\xef\x818\xe2\xd1\xd4\xdc'
    var_1 = module_0.detect_enc(var_0)
    int_0 = 60
    var_2 = module_0.shorten(var_0, int_0)
    assert var_2 == b'\xd5\xef\x818\xe2\xd1\xd4\xdc'
    module_0.detect_enc(var_1)

@pytest.mark.xfail(strict=True)
def test_case_31():
    bytes_0 = b'\xd5\xef\x818\xe2\xd1\xd4\xdc'
    var_0 = module_0.get_ascii_or_value(bytes_0)
    assert var_0 == b'\xd5\xef\x818\xe2\xd1\xd4\xdc'
    var_1 = module_0.detect_enc(var_0)
    var_2 = module_0.get_ascii_or_value(var_0)
    bool_0 = True
    var_3 = module_0.shorten(var_2, bool_0)
    assert var_3 == 'â€¦'
    var_4 = module_0.detect_enc(var_0)
    none_type_0 = None
    var_3.setstate(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_32():
    list_0 = []
    var_0 = module_0.shorten(list_0, list_0)
    bytes_0 = b'\xd5\xef\x818\xe2\xd1\xd4\xdc'
    var_1 = module_0.detect_enc(bytes_0)
    none_type_0 = None
    brace_message_0 = module_0.BraceMessage(none_type_0)
    var_2 = module_0.get_ascii_or_value(bytes_0)
    assert var_2 == b'\xd5\xef\x818\xe2\xd1\xd4\xdc'
    brace_message_0.__repr__()

@pytest.mark.xfail(strict=True)
def test_case_33():
    tuple_0 = ()
    var_0 = module_0.get_ascii_or_value(tuple_0)
    var_0.setstate(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    list_0 = []
    var_0 = module_1._EnumDict()
    var_1 = var_0.__str__()
    var_2 = module_0.get_ascii_or_value(var_0)
    var_3 = module_0.get_ascii_or_value(var_1)
    assert var_3 == '{}'
    var_4 = module_0.get_ascii_or_value(list_0)
    var_5 = module_0.shorten(var_2, var_0)
    module_0.detect_enc(var_1)

def test_case_35():
    tuple_0 = ()
    var_0 = module_0.shorten(tuple_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    bool_0 = False
    var_0 = module_0.get_ascii_or_value(bool_0)
    assert var_0 is False
    var_1 = bool_0.__str__()
    var_2 = module_0.hexof(var_1)
    assert var_2 == '46616c7365'
    var_3 = module_0.dehexof(var_2)
    assert var_3 == 'False'
    module_0.shorten(var_0, var_2)