# Automatically generated by Pynguin.
import pytest
import isbg.imaputils as module_0
import email.errors as module_1

def test_case_0():
    none_type_0 = None
    with pytest.raises(module_1.MessageError):
        module_0.mail_content(none_type_0)

def test_case_1():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_0.new_message(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 3416
    module_0.IsbgImap4(int_0, nossl=int_0, assertok=int_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.IsbgImap4()

def test_case_4():
    bool_0 = False
    with pytest.raises(TypeError):
        module_0.login_imap(bool_0, bool_0, bool_0)

def test_case_5():
    imap_settings_0 = module_0.ImapSettings()
    assert f'{type(imap_settings_0).__module__}.{type(imap_settings_0).__qualname__}' == 'isbg.imaputils.ImapSettings'
    assert imap_settings_0.host == 'localhost'
    assert imap_settings_0.port == 143
    assert imap_settings_0.user == ''
    assert imap_settings_0.passwd is None
    assert imap_settings_0.nossl is False
    assert imap_settings_0.inbox == 'INBOX'
    assert imap_settings_0.spaminbox == 'INBOX.Spam'
    assert imap_settings_0.learnspambox is None
    assert imap_settings_0.learnhambox is None
    assert f'{type(module_0.ImapSettings.hash).__module__}.{type(module_0.ImapSettings.hash).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_6():
    imap_settings_0 = module_0.ImapSettings()
    assert f'{type(imap_settings_0).__module__}.{type(imap_settings_0).__qualname__}' == 'isbg.imaputils.ImapSettings'
    assert imap_settings_0.host == 'localhost'
    assert imap_settings_0.port == 143
    assert imap_settings_0.user == ''
    assert imap_settings_0.passwd is None
    assert imap_settings_0.nossl is False
    assert imap_settings_0.inbox == 'INBOX'
    assert imap_settings_0.spaminbox == 'INBOX.Spam'
    assert imap_settings_0.learnspambox is None
    assert imap_settings_0.learnhambox is None
    assert f'{type(module_0.ImapSettings.hash).__module__}.{type(module_0.ImapSettings.hash).__qualname__}' == 'builtins.property'
    module_0.imapflags(imap_settings_0)

def test_case_7():
    imap_settings_0 = module_0.ImapSettings()
    assert f'{type(imap_settings_0).__module__}.{type(imap_settings_0).__qualname__}' == 'isbg.imaputils.ImapSettings'
    assert imap_settings_0.host == 'localhost'
    assert imap_settings_0.port == 143
    assert imap_settings_0.user == ''
    assert imap_settings_0.passwd is None
    assert imap_settings_0.nossl is False
    assert imap_settings_0.inbox == 'INBOX'
    assert imap_settings_0.spaminbox == 'INBOX.Spam'
    assert imap_settings_0.learnspambox is None
    assert imap_settings_0.learnhambox is None
    assert f'{type(module_0.ImapSettings.hash).__module__}.{type(module_0.ImapSettings.hash).__qualname__}' == 'builtins.property'
    with pytest.raises(TypeError):
        module_0.new_message(imap_settings_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    imap_settings_0 = module_0.ImapSettings()
    assert f'{type(imap_settings_0).__module__}.{type(imap_settings_0).__qualname__}' == 'isbg.imaputils.ImapSettings'
    assert imap_settings_0.host == 'localhost'
    assert imap_settings_0.port == 143
    assert imap_settings_0.user == ''
    assert imap_settings_0.passwd is None
    assert imap_settings_0.nossl is False
    assert imap_settings_0.inbox == 'INBOX'
    assert imap_settings_0.spaminbox == 'INBOX.Spam'
    assert imap_settings_0.learnspambox is None
    assert imap_settings_0.learnhambox is None
    assert f'{type(module_0.ImapSettings.hash).__module__}.{type(module_0.ImapSettings.hash).__qualname__}' == 'builtins.property'
    module_0.login_imap(imap_settings_0, imap_settings_0)

def test_case_9():
    none_type_0 = None
    var_0 = module_0.bytes_to_ascii(none_type_0)
    var_1 = var_0.__repr__()
    var_2 = module_0.bytes_to_ascii(var_1)
    var_3 = module_0.assertok(var_2)
    var_4 = module_0.new_message(var_1)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'email.message.Message'
    assert len(var_4) == 0
    imap_settings_0 = module_0.ImapSettings()
    assert f'{type(imap_settings_0).__module__}.{type(imap_settings_0).__qualname__}' == 'isbg.imaputils.ImapSettings'
    assert imap_settings_0.host == 'localhost'
    assert imap_settings_0.port == 143
    assert imap_settings_0.user == ''
    assert imap_settings_0.passwd is None
    assert imap_settings_0.nossl is False
    assert imap_settings_0.inbox == 'INBOX'
    assert imap_settings_0.spaminbox == 'INBOX.Spam'
    assert imap_settings_0.learnspambox is None
    assert imap_settings_0.learnhambox is None
    assert f'{type(module_0.ImapSettings.hash).__module__}.{type(module_0.ImapSettings.hash).__qualname__}' == 'builtins.property'
    var_5 = module_0.assertok(var_0)
    var_6 = var_2.__eq__(none_type_0)
    with pytest.raises(TypeError):
        module_0.new_message(var_6)

def test_case_10():
    bytes_0 = b'\xf9\xdc\xb8'
    var_0 = module_0.new_message(bytes_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'email.message.Message'
    assert len(var_0) == 0