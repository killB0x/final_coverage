# Automatically generated by Pynguin.
import pytest
import isbg.spamproc as module_0
import isbg.isbg as module_1
import urllib.parse as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    sa__process_0 = module_0.Sa_Process()
    assert sa__process_0.nummsg == 0
    assert sa__process_0.numspam == 0
    assert sa__process_0.spamdeleted == 0
    none_type_0 = None
    module_0.test_mail(none_type_0, sa__process_0, sa__process_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    sa__learn_0 = module_0.Sa_Learn()
    assert sa__learn_0.tolearn == 0
    assert sa__learn_0.learned == 0
    none_type_0 = None
    module_0.test_mail(none_type_0, none_type_0)

def test_case_2():
    spam_assassin_0 = module_0.SpamAssassin()
    assert f'{type(spam_assassin_0).__module__}.{type(spam_assassin_0).__qualname__}' == 'isbg.spamproc.SpamAssassin'
    assert spam_assassin_0.imap is None
    assert spam_assassin_0.spamc is None
    assert f'{type(spam_assassin_0.logger).__module__}.{type(spam_assassin_0.logger).__qualname__}' == 'logging.Logger'
    assert spam_assassin_0.partialrun is None
    assert spam_assassin_0.dryrun is None
    assert spam_assassin_0.learnthendestroy is None
    assert spam_assassin_0.gmail is None
    assert spam_assassin_0.learnthenflag is None
    assert spam_assassin_0.learnunflagged is None
    assert spam_assassin_0.learnflagged is None
    assert spam_assassin_0.deletehigherthan is None
    assert spam_assassin_0.imapsets is None
    assert spam_assassin_0.maxsize is None
    assert spam_assassin_0.noreport is None
    assert spam_assassin_0.spamflags is None
    assert spam_assassin_0.delete is None
    assert spam_assassin_0.expunge is None
    assert spam_assassin_0.spamflagscmd == '+FLAGS.SILENT'
    assert f'{type(module_0.SpamAssassin.cmd_save).__module__}.{type(module_0.SpamAssassin.cmd_save).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SpamAssassin.cmd_test).__module__}.{type(module_0.SpamAssassin.cmd_test).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SpamAssassin.create_from_isbg).__module__}.{type(module_0.SpamAssassin.create_from_isbg).__qualname__}' == 'builtins.method'

def test_case_3():
    spam_assassin_0 = module_0.SpamAssassin()
    assert f'{type(spam_assassin_0).__module__}.{type(spam_assassin_0).__qualname__}' == 'isbg.spamproc.SpamAssassin'
    assert spam_assassin_0.imap is None
    assert spam_assassin_0.spamc is None
    assert f'{type(spam_assassin_0.logger).__module__}.{type(spam_assassin_0.logger).__qualname__}' == 'logging.Logger'
    assert spam_assassin_0.partialrun is None
    assert spam_assassin_0.dryrun is None
    assert spam_assassin_0.learnthendestroy is None
    assert spam_assassin_0.gmail is None
    assert spam_assassin_0.learnthenflag is None
    assert spam_assassin_0.learnunflagged is None
    assert spam_assassin_0.learnflagged is None
    assert spam_assassin_0.deletehigherthan is None
    assert spam_assassin_0.imapsets is None
    assert spam_assassin_0.maxsize is None
    assert spam_assassin_0.noreport is None
    assert spam_assassin_0.spamflags is None
    assert spam_assassin_0.delete is None
    assert spam_assassin_0.expunge is None
    assert spam_assassin_0.spamflagscmd == '+FLAGS.SILENT'
    assert f'{type(module_0.SpamAssassin.cmd_save).__module__}.{type(module_0.SpamAssassin.cmd_save).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SpamAssassin.cmd_test).__module__}.{type(module_0.SpamAssassin.cmd_test).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SpamAssassin.create_from_isbg).__module__}.{type(module_0.SpamAssassin.create_from_isbg).__qualname__}' == 'builtins.method'
    with pytest.raises(module_1.ISBGError):
        spam_assassin_0.learn(spam_assassin_0, spam_assassin_0, spam_assassin_0, spam_assassin_0)

def test_case_4():
    sa__learn_0 = module_0.Sa_Learn()
    assert sa__learn_0.tolearn == 0
    assert sa__learn_0.learned == 0

def test_case_5():
    sa__process_0 = module_0.Sa_Process()
    assert sa__process_0.nummsg == 0
    assert sa__process_0.numspam == 0
    assert sa__process_0.spamdeleted == 0

@pytest.mark.xfail(strict=True)
def test_case_6():
    spam_assassin_0 = module_0.SpamAssassin()
    assert f'{type(spam_assassin_0).__module__}.{type(spam_assassin_0).__qualname__}' == 'isbg.spamproc.SpamAssassin'
    assert spam_assassin_0.imap is None
    assert spam_assassin_0.spamc is None
    assert f'{type(spam_assassin_0.logger).__module__}.{type(spam_assassin_0.logger).__qualname__}' == 'logging.Logger'
    assert spam_assassin_0.partialrun is None
    assert spam_assassin_0.dryrun is None
    assert spam_assassin_0.learnthendestroy is None
    assert spam_assassin_0.gmail is None
    assert spam_assassin_0.learnthenflag is None
    assert spam_assassin_0.learnunflagged is None
    assert spam_assassin_0.learnflagged is None
    assert spam_assassin_0.deletehigherthan is None
    assert spam_assassin_0.imapsets is None
    assert spam_assassin_0.maxsize is None
    assert spam_assassin_0.noreport is None
    assert spam_assassin_0.spamflags is None
    assert spam_assassin_0.delete is None
    assert spam_assassin_0.expunge is None
    assert spam_assassin_0.spamflagscmd == '+FLAGS.SILENT'
    assert f'{type(module_0.SpamAssassin.cmd_save).__module__}.{type(module_0.SpamAssassin.cmd_save).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SpamAssassin.cmd_test).__module__}.{type(module_0.SpamAssassin.cmd_test).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SpamAssassin.create_from_isbg).__module__}.{type(module_0.SpamAssassin.create_from_isbg).__qualname__}' == 'builtins.method'
    module_0.test_mail(spam_assassin_0, spam_assassin_0)

def test_case_7():
    sa__process_0 = module_0.Sa_Process()
    assert sa__process_0.nummsg == 0
    assert sa__process_0.numspam == 0
    assert sa__process_0.spamdeleted == 0
    str_0 = 'Cs7.i'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    with pytest.raises(TypeError):
        module_0.SpamAssassin(**dict_0)

def test_case_8():
    sa__learn_0 = module_0.Sa_Learn()
    assert sa__learn_0.tolearn == 0
    assert sa__learn_0.learned == 0
    str_0 = 'learnflagged'
    str_1 = ''
    dict_0 = {str_0: sa__learn_0, str_1: sa__learn_0}
    with pytest.raises(TypeError):
        module_0.SpamAssassin(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    spam_assassin_0 = module_0.SpamAssassin()
    assert f'{type(spam_assassin_0).__module__}.{type(spam_assassin_0).__qualname__}' == 'isbg.spamproc.SpamAssassin'
    assert spam_assassin_0.imap is None
    assert spam_assassin_0.spamc is None
    assert f'{type(spam_assassin_0.logger).__module__}.{type(spam_assassin_0.logger).__qualname__}' == 'logging.Logger'
    assert spam_assassin_0.partialrun is None
    assert spam_assassin_0.dryrun is None
    assert spam_assassin_0.learnthendestroy is None
    assert spam_assassin_0.gmail is None
    assert spam_assassin_0.learnthenflag is None
    assert spam_assassin_0.learnunflagged is None
    assert spam_assassin_0.learnflagged is None
    assert spam_assassin_0.deletehigherthan is None
    assert spam_assassin_0.imapsets is None
    assert spam_assassin_0.maxsize is None
    assert spam_assassin_0.noreport is None
    assert spam_assassin_0.spamflags is None
    assert spam_assassin_0.delete is None
    assert spam_assassin_0.expunge is None
    assert spam_assassin_0.spamflagscmd == '+FLAGS.SILENT'
    assert f'{type(module_0.SpamAssassin.cmd_save).__module__}.{type(module_0.SpamAssassin.cmd_save).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SpamAssassin.cmd_test).__module__}.{type(module_0.SpamAssassin.cmd_test).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SpamAssassin.create_from_isbg).__module__}.{type(module_0.SpamAssassin.create_from_isbg).__qualname__}' == 'builtins.method'
    str_0 = 'aR'
    var_0 = module_2.urlparse(str_0, allow_fragments=spam_assassin_0)
    spam_assassin_0.get_formated_uids(var_0, var_0, var_0)

def test_case_10():
    spam_assassin_0 = module_0.SpamAssassin()
    assert f'{type(spam_assassin_0).__module__}.{type(spam_assassin_0).__qualname__}' == 'isbg.spamproc.SpamAssassin'
    assert spam_assassin_0.imap is None
    assert spam_assassin_0.spamc is None
    assert f'{type(spam_assassin_0.logger).__module__}.{type(spam_assassin_0.logger).__qualname__}' == 'logging.Logger'
    assert spam_assassin_0.partialrun is None
    assert spam_assassin_0.dryrun is None
    assert spam_assassin_0.learnthendestroy is None
    assert spam_assassin_0.gmail is None
    assert spam_assassin_0.learnthenflag is None
    assert spam_assassin_0.learnunflagged is None
    assert spam_assassin_0.learnflagged is None
    assert spam_assassin_0.deletehigherthan is None
    assert spam_assassin_0.imapsets is None
    assert spam_assassin_0.maxsize is None
    assert spam_assassin_0.noreport is None
    assert spam_assassin_0.spamflags is None
    assert spam_assassin_0.delete is None
    assert spam_assassin_0.expunge is None
    assert spam_assassin_0.spamflagscmd == '+FLAGS.SILENT'
    assert f'{type(module_0.SpamAssassin.cmd_save).__module__}.{type(module_0.SpamAssassin.cmd_save).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SpamAssassin.cmd_test).__module__}.{type(module_0.SpamAssassin.cmd_test).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SpamAssassin.create_from_isbg).__module__}.{type(module_0.SpamAssassin.create_from_isbg).__qualname__}' == 'builtins.method'
    str_0 = 'ham'
    with pytest.raises(module_1.ISBGError):
        spam_assassin_0.learn(str_0, str_0, spam_assassin_0, str_0)