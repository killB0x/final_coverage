# Automatically generated by Pynguin.
import pytest
import typ.pool as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    module_0.make_pool(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    bool_1 = True
    message_type_0 = module_0._MessageType()
    assert module_0._MessageType.Request == 'Request'
    assert module_0._MessageType.Response == 'Response'
    assert module_0._MessageType.Close == 'Close'
    assert module_0._MessageType.Done == 'Done'
    assert module_0._MessageType.Error == 'Error'
    assert module_0._MessageType.Interrupt == 'Interrupt'
    assert module_0._MessageType.values == ['Request', 'Response', 'Close', 'Done', 'Error', 'Interrupt']
    module_0._ProcessPool(bool_1, bool_1, message_type_0, message_type_0, bool_0, message_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'i W3V|><0Nv='
    module_0._AsyncPool(str_0, str_0, str_0, str_0, str_0, str_0)

def test_case_3():
    message_type_0 = module_0._MessageType()
    assert module_0._MessageType.Request == 'Request'
    assert module_0._MessageType.Response == 'Response'
    assert module_0._MessageType.Close == 'Close'
    assert module_0._MessageType.Done == 'Done'
    assert module_0._MessageType.Error == 'Error'
    assert module_0._MessageType.Interrupt == 'Interrupt'
    assert module_0._MessageType.values == ['Request', 'Response', 'Close', 'Done', 'Error', 'Interrupt']

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 149
    module_0.make_pool(int_0, int_0, int_0, int_0, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    process_pool_0 = module_0._ProcessPool(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(process_pool_0).__module__}.{type(process_pool_0).__qualname__}' == 'typ.pool._ProcessPool'
    assert process_pool_0.host is False
    assert process_pool_0.jobs is False
    assert f'{type(process_pool_0.requests).__module__}.{type(process_pool_0.requests).__qualname__}' == 'multiprocessing.queues.Queue'
    assert f'{type(process_pool_0.responses).__module__}.{type(process_pool_0.responses).__qualname__}' == 'multiprocessing.queues.Queue'
    assert process_pool_0.workers == []
    assert process_pool_0.discarded_responses == []
    assert process_pool_0.closed is False
    assert process_pool_0.erred is False
    module_0.make_pool(bool_0, bool_0, bool_0, process_pool_0, bool_0, process_pool_0)

def test_case_6():
    bool_0 = False
    process_pool_0 = module_0._ProcessPool(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(process_pool_0).__module__}.{type(process_pool_0).__qualname__}' == 'typ.pool._ProcessPool'
    assert process_pool_0.host is False
    assert process_pool_0.jobs is False
    assert f'{type(process_pool_0.requests).__module__}.{type(process_pool_0.requests).__qualname__}' == 'multiprocessing.queues.Queue'
    assert f'{type(process_pool_0.responses).__module__}.{type(process_pool_0.responses).__qualname__}' == 'multiprocessing.queues.Queue'
    assert process_pool_0.workers == []
    assert process_pool_0.discarded_responses == []
    assert process_pool_0.closed is False
    assert process_pool_0.erred is False
    var_0 = process_pool_0.close()

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    process_pool_0 = module_0._ProcessPool(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(process_pool_0).__module__}.{type(process_pool_0).__qualname__}' == 'typ.pool._ProcessPool'
    assert process_pool_0.host is False
    assert process_pool_0.jobs is False
    assert f'{type(process_pool_0.requests).__module__}.{type(process_pool_0.requests).__qualname__}' == 'multiprocessing.queues.Queue'
    assert f'{type(process_pool_0.responses).__module__}.{type(process_pool_0.responses).__qualname__}' == 'multiprocessing.queues.Queue'
    assert process_pool_0.workers == []
    assert process_pool_0.discarded_responses == []
    assert process_pool_0.closed is False
    assert process_pool_0.erred is False
    module_0.make_pool(bool_0, bool_0, process_pool_0, bool_0, bool_0, process_pool_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    process_pool_0 = module_0._ProcessPool(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(process_pool_0).__module__}.{type(process_pool_0).__qualname__}' == 'typ.pool._ProcessPool'
    assert process_pool_0.host is False
    assert process_pool_0.jobs is False
    assert f'{type(process_pool_0.requests).__module__}.{type(process_pool_0.requests).__qualname__}' == 'multiprocessing.queues.Queue'
    assert f'{type(process_pool_0.responses).__module__}.{type(process_pool_0.responses).__qualname__}' == 'multiprocessing.queues.Queue'
    assert process_pool_0.workers == []
    assert process_pool_0.discarded_responses == []
    assert process_pool_0.closed is False
    assert process_pool_0.erred is False
    module_0.make_pool(bool_0, bool_0, bool_0, bool_0, process_pool_0, process_pool_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    bool_1 = False
    process_pool_0 = module_0._ProcessPool(bool_0, bool_1, bool_0, bool_1, bool_0, bool_0)
    assert f'{type(process_pool_0).__module__}.{type(process_pool_0).__qualname__}' == 'typ.pool._ProcessPool'
    assert process_pool_0.host is True
    assert process_pool_0.jobs is False
    assert f'{type(process_pool_0.requests).__module__}.{type(process_pool_0.requests).__qualname__}' == 'multiprocessing.queues.Queue'
    assert f'{type(process_pool_0.responses).__module__}.{type(process_pool_0.responses).__qualname__}' == 'multiprocessing.queues.Queue'
    assert process_pool_0.workers == []
    assert process_pool_0.discarded_responses == []
    assert process_pool_0.closed is False
    assert process_pool_0.erred is False
    var_0 = process_pool_0.send(process_pool_0)
    var_0.dirname()