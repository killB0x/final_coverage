# Automatically generated by Pynguin.
import pytest
import typ.json_results as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    result_set_0 = module_0.ResultSet()
    assert module_0.TEST_SEPARATOR == '.'
    none_type_0 = None
    result_0 = module_0.Result(none_type_0, result_set_0, result_set_0, none_type_0, none_type_0, result_set_0, code=result_set_0, out=result_set_0)
    assert f'{type(result_0.expected).__module__}.{type(result_0.expected).__qualname__}' == 'typ.json_results.ResultSet'
    assert result_0.err == ''
    assert result_0.pid == 0
    var_0 = result_set_0.add(result_set_0)
    module_0.failed_test_names(result_set_0)

def test_case_1():
    set_0 = set()
    result_type_0 = module_0.ResultType()
    assert module_0.TEST_SEPARATOR == '.'
    assert module_0.ResultType.Pass == 'Pass'
    assert module_0.ResultType.Failure == 'Failure'
    assert module_0.ResultType.ImageOnlyFailure == 'ImageOnlyFailure'
    assert module_0.ResultType.Timeout == 'Timeout'
    assert module_0.ResultType.Crash == 'Crash'
    assert module_0.ResultType.Skip == 'Skip'
    assert module_0.ResultType.values == ('Pass', 'Failure', 'ImageOnlyFailure', 'Timeout', 'Crash', 'Skip')
    result_0 = module_0.Result(set_0, set_0, set_0, set_0, set_0, code=set_0)
    assert result_0.expected == ['Pass']
    assert result_0.out == ''
    assert result_0.err == ''
    assert result_0.pid == 0
    result_set_0 = module_0.ResultSet()

@pytest.mark.xfail(strict=True)
def test_case_2():
    result_set_0 = module_0.ResultSet()
    assert module_0.TEST_SEPARATOR == '.'
    var_0 = result_set_0.add(result_set_0)
    module_0.failed_test_names(result_set_0)

def test_case_3():
    result_type_0 = module_0.ResultType()
    assert module_0.TEST_SEPARATOR == '.'
    assert module_0.ResultType.Pass == 'Pass'
    assert module_0.ResultType.Failure == 'Failure'
    assert module_0.ResultType.ImageOnlyFailure == 'ImageOnlyFailure'
    assert module_0.ResultType.Timeout == 'Timeout'
    assert module_0.ResultType.Crash == 'Crash'
    assert module_0.ResultType.Skip == 'Skip'
    assert module_0.ResultType.values == ('Pass', 'Failure', 'ImageOnlyFailure', 'Timeout', 'Crash', 'Skip')

def test_case_4():
    result_set_0 = module_0.ResultSet()
    assert module_0.TEST_SEPARATOR == '.'

def test_case_5():
    result_set_0 = module_0.ResultSet()
    assert module_0.TEST_SEPARATOR == '.'
    var_0 = module_0.failed_test_names(result_set_0)
    var_1 = module_0.make_full_results(var_0, var_0, var_0, result_set_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'collections.OrderedDict'
    assert len(var_1) == 6
    var_2 = module_0.exit_code_from_full_results(var_1)
    assert var_2 == 0

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.num_passes(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    module_0.num_skips(none_type_0)

def test_case_8():
    result_set_0 = module_0.ResultSet()
    assert module_0.TEST_SEPARATOR == '.'
    var_0 = module_0.failed_test_names(result_set_0)
    var_1 = var_0.__dir__()
    var_2 = module_0.make_full_results(var_0, var_1, var_1, result_set_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'collections.OrderedDict'
    assert len(var_2) == 6

def test_case_9():
    result_set_0 = module_0.ResultSet()
    assert module_0.TEST_SEPARATOR == '.'
    bool_0 = True
    result_0 = module_0.Result(bool_0, result_set_0, bool_0, bool_0, result_set_0, unexpected=result_set_0, code=bool_0)
    assert result_0.expected == ['Pass']
    assert result_0.out == ''
    assert result_0.err == ''
    assert result_0.pid == 0
    var_0 = module_0.failed_test_names(result_set_0)
    var_1 = result_set_0.add(result_0)
    var_2 = module_0.make_full_results(var_0, var_0, var_0, result_set_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'collections.OrderedDict'
    assert len(var_2) == 6

@pytest.mark.xfail(strict=True)
def test_case_10():
    result_set_0 = module_0.ResultSet()
    assert module_0.TEST_SEPARATOR == '.'
    var_0 = module_0.failed_test_names(result_set_0)
    var_1 = var_0.__dir__()
    var_2 = var_1.__dir__()
    module_0.make_full_results(var_1, result_set_0, result_set_0, result_set_0)

def test_case_11():
    str_0 = '|!3N[5|\\'
    var_0 = module_0.make_upload_request(str_0, str_0, str_0, str_0, str_0)
    assert module_0.TEST_SEPARATOR == '.'

def test_case_12():
    result_set_0 = module_0.ResultSet()
    assert module_0.TEST_SEPARATOR == '.'
    bool_0 = True
    result_0 = module_0.Result(bool_0, result_set_0, bool_0, bool_0, result_set_0, unexpected=result_set_0, code=bool_0)
    assert result_0.expected == ['Pass']
    assert result_0.out == ''
    assert result_0.err == ''
    assert result_0.pid == 0
    var_0 = module_0.failed_test_names(result_set_0)
    var_1 = var_0.__dir__()
    var_2 = result_set_0.add(result_0)
    var_3 = module_0.make_full_results(var_0, var_1, var_1, result_set_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'collections.OrderedDict'
    assert len(var_3) == 6

def test_case_13():
    result_set_0 = module_0.ResultSet()
    assert module_0.TEST_SEPARATOR == '.'
    none_type_0 = None
    result_0 = module_0.Result(none_type_0, result_set_0, result_set_0, none_type_0, none_type_0, result_set_0, code=result_set_0, out=result_set_0)
    assert f'{type(result_0.expected).__module__}.{type(result_0.expected).__qualname__}' == 'typ.json_results.ResultSet'
    assert result_0.err == ''
    assert result_0.pid == 0
    var_0 = result_set_0.add(result_0)
    var_1 = module_0.failed_test_names(result_set_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    result_set_0 = module_0.ResultSet()
    assert module_0.TEST_SEPARATOR == '.'
    bool_0 = True
    result_0 = module_0.Result(bool_0, result_set_0, bool_0, bool_0, result_set_0, unexpected=result_set_0, code=bool_0)
    assert result_0.expected == ['Pass']
    assert result_0.out == ''
    assert result_0.err == ''
    assert result_0.pid == 0
    var_0 = module_0.failed_test_names(result_set_0)
    var_1 = var_0.__dir__()
    var_2 = result_set_0.add(result_0)
    var_3 = module_0.make_full_results(var_0, var_1, var_1, result_set_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'collections.OrderedDict'
    assert len(var_3) == 6
    var_4 = module_0.exit_code_from_full_results(var_3)
    assert var_4 == 0
    str_0 = 'http'
    module_0.make_upload_request(str_0, var_1, var_0, var_3, str_0)