# Automatically generated by Pynguin.
import pytest
import typ.runner as module_0
import unittest.signals as module_1

def test_case_0():
    test_set_0 = module_0.TestSet()
    assert f'{type(test_set_0).__module__}.{type(test_set_0).__qualname__}' == 'typ.runner.TestSet'
    assert test_set_0.parallel_tests == []
    assert test_set_0.isolated_tests == []
    assert test_set_0.tests_to_skip == []

def test_case_1():
    str_0 = ' (GS<gI('
    test_set_0 = module_0.TestSet(tests_to_skip=str_0)
    assert f'{type(test_set_0).__module__}.{type(test_set_0).__qualname__}' == 'typ.runner.TestSet'
    assert test_set_0.parallel_tests == []
    assert test_set_0.isolated_tests == []
    assert f'{type(test_set_0.tests_to_skip).__module__}.{type(test_set_0.tests_to_skip).__qualname__}' == 'builtins.list'
    assert len(test_set_0.tests_to_skip) == 8

def test_case_2():
    runner_0 = module_0.Runner()
    assert f'{type(runner_0).__module__}.{type(runner_0).__qualname__}' == 'typ.runner.Runner'
    assert f'{type(runner_0.args).__module__}.{type(runner_0.args).__qualname__}' == 'argparse.Namespace'
    assert runner_0.classifier is None
    assert runner_0.cov is None
    assert runner_0.context is None
    assert runner_0.coverage_source is None
    assert f'{type(runner_0.host).__module__}.{type(runner_0.host).__qualname__}' == 'typ.host.Host'
    assert f'{type(runner_0.loader).__module__}.{type(runner_0.loader).__qualname__}' == 'unittest.loader.TestLoader'
    assert runner_0.printer is None
    assert runner_0.setup_fn is None
    assert runner_0.stats is None
    assert runner_0.teardown_fn is None
    assert runner_0.top_level_dir is None
    assert runner_0.top_level_dirs == []
    assert runner_0.win_multiprocessing == 'spawn'
    assert runner_0.final_responses == []

def test_case_3():
    runner_0 = module_0.Runner()
    assert f'{type(runner_0).__module__}.{type(runner_0).__qualname__}' == 'typ.runner.Runner'
    assert f'{type(runner_0.args).__module__}.{type(runner_0.args).__qualname__}' == 'argparse.Namespace'
    assert runner_0.classifier is None
    assert runner_0.cov is None
    assert runner_0.context is None
    assert runner_0.coverage_source is None
    assert f'{type(runner_0.host).__module__}.{type(runner_0.host).__qualname__}' == 'typ.host.Host'
    assert f'{type(runner_0.loader).__module__}.{type(runner_0.loader).__qualname__}' == 'unittest.loader.TestLoader'
    assert runner_0.printer is None
    assert runner_0.setup_fn is None
    assert runner_0.stats is None
    assert runner_0.teardown_fn is None
    assert runner_0.top_level_dir is None
    assert runner_0.top_level_dirs == []
    assert runner_0.win_multiprocessing == 'spawn'
    assert runner_0.final_responses == []
    var_0 = runner_0.run()
    var_1 = runner_0.report_coverage()

def test_case_4():
    runner_0 = module_0.Runner()
    assert f'{type(runner_0).__module__}.{type(runner_0).__qualname__}' == 'typ.runner.Runner'
    assert f'{type(runner_0.args).__module__}.{type(runner_0.args).__qualname__}' == 'argparse.Namespace'
    assert runner_0.classifier is None
    assert runner_0.cov is None
    assert runner_0.context is None
    assert runner_0.coverage_source is None
    assert f'{type(runner_0.host).__module__}.{type(runner_0.host).__qualname__}' == 'typ.host.Host'
    assert f'{type(runner_0.loader).__module__}.{type(runner_0.loader).__qualname__}' == 'unittest.loader.TestLoader'
    assert runner_0.printer is None
    assert runner_0.setup_fn is None
    assert runner_0.stats is None
    assert runner_0.teardown_fn is None
    assert runner_0.top_level_dir is None
    assert runner_0.top_level_dirs == []
    assert runner_0.win_multiprocessing == 'spawn'
    assert runner_0.final_responses == []
    var_0 = runner_0.report_coverage()

def test_case_5():
    none_type_0 = None
    test_input_0 = module_0.TestInput(none_type_0, expected=none_type_0)
    assert f'{type(test_input_0).__module__}.{type(test_input_0).__qualname__}' == 'typ.runner.TestInput'
    assert test_input_0.name is None
    assert test_input_0.msg == ''
    assert test_input_0.timeout is None
    assert test_input_0.expected is None

def test_case_6():
    runner_0 = module_0.Runner()
    assert f'{type(runner_0).__module__}.{type(runner_0).__qualname__}' == 'typ.runner.Runner'
    assert f'{type(runner_0.args).__module__}.{type(runner_0.args).__qualname__}' == 'argparse.Namespace'
    assert runner_0.classifier is None
    assert runner_0.cov is None
    assert runner_0.context is None
    assert runner_0.coverage_source is None
    assert f'{type(runner_0.host).__module__}.{type(runner_0.host).__qualname__}' == 'typ.host.Host'
    assert f'{type(runner_0.loader).__module__}.{type(runner_0.loader).__qualname__}' == 'unittest.loader.TestLoader'
    assert runner_0.printer is None
    assert runner_0.setup_fn is None
    assert runner_0.stats is None
    assert runner_0.teardown_fn is None
    assert runner_0.top_level_dir is None
    assert runner_0.top_level_dirs == []
    assert runner_0.win_multiprocessing == 'spawn'
    assert runner_0.final_responses == []
    child_0 = module_0._Child(runner_0)
    var_0 = runner_0.print_()
    test_input_0 = module_0.TestInput(runner_0)
    str_0 = ' (GS<gI('
    str_1 = 'spawn'
    dict_0 = {str_0: child_0, str_1: test_input_0}
    var_1 = runner_0.main(**dict_0)
    var_2 = runner_0.run()
    var_3 = runner_0.report_coverage()
    runner_1 = module_0.Runner()

@pytest.mark.xfail(strict=True)
def test_case_7():
    runner_0 = module_0.Runner()
    assert f'{type(runner_0).__module__}.{type(runner_0).__qualname__}' == 'typ.runner.Runner'
    assert f'{type(runner_0.args).__module__}.{type(runner_0.args).__qualname__}' == 'argparse.Namespace'
    assert runner_0.classifier is None
    assert runner_0.cov is None
    assert runner_0.context is None
    assert runner_0.coverage_source is None
    assert f'{type(runner_0.host).__module__}.{type(runner_0.host).__qualname__}' == 'typ.host.Host'
    assert f'{type(runner_0.loader).__module__}.{type(runner_0.loader).__qualname__}' == 'unittest.loader.TestLoader'
    assert runner_0.printer is None
    assert runner_0.setup_fn is None
    assert runner_0.stats is None
    assert runner_0.teardown_fn is None
    assert runner_0.top_level_dir is None
    assert runner_0.top_level_dirs == []
    assert runner_0.win_multiprocessing == 'spawn'
    assert runner_0.final_responses == []
    runner_0.flush()

@pytest.mark.xfail(strict=True)
def test_case_8():
    win_multiprocessing_0 = module_0.WinMultiprocessing()
    module_0.Runner(win_multiprocessing_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    runner_0 = module_0.Runner()
    assert f'{type(runner_0).__module__}.{type(runner_0).__qualname__}' == 'typ.runner.Runner'
    assert f'{type(runner_0.args).__module__}.{type(runner_0.args).__qualname__}' == 'argparse.Namespace'
    assert runner_0.classifier is None
    assert runner_0.cov is None
    assert runner_0.context is None
    assert runner_0.coverage_source is None
    assert f'{type(runner_0.host).__module__}.{type(runner_0.host).__qualname__}' == 'typ.host.Host'
    assert f'{type(runner_0.loader).__module__}.{type(runner_0.loader).__qualname__}' == 'unittest.loader.TestLoader'
    assert runner_0.printer is None
    assert runner_0.setup_fn is None
    assert runner_0.stats is None
    assert runner_0.teardown_fn is None
    assert runner_0.top_level_dir is None
    assert runner_0.top_level_dirs == []
    assert runner_0.win_multiprocessing == 'spawn'
    assert runner_0.final_responses == []
    var_0 = runner_0.run()
    var_1 = runner_0.report_coverage()
    runner_0.run(runner_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    runner_0 = module_0.Runner()
    assert f'{type(runner_0).__module__}.{type(runner_0).__qualname__}' == 'typ.runner.Runner'
    assert f'{type(runner_0.args).__module__}.{type(runner_0.args).__qualname__}' == 'argparse.Namespace'
    assert runner_0.classifier is None
    assert runner_0.cov is None
    assert runner_0.context is None
    assert runner_0.coverage_source is None
    assert f'{type(runner_0.host).__module__}.{type(runner_0.host).__qualname__}' == 'typ.host.Host'
    assert f'{type(runner_0.loader).__module__}.{type(runner_0.loader).__qualname__}' == 'unittest.loader.TestLoader'
    assert runner_0.printer is None
    assert runner_0.setup_fn is None
    assert runner_0.stats is None
    assert runner_0.teardown_fn is None
    assert runner_0.top_level_dir is None
    assert runner_0.top_level_dirs == []
    assert runner_0.win_multiprocessing == 'spawn'
    assert runner_0.final_responses == []
    child_0 = module_0._Child(runner_0)
    test_input_0 = module_0.TestInput(runner_0)
    str_0 = ' {(GS<gI('
    dict_0 = {str_0: child_0, str_0: test_input_0, str_0: child_0, str_0: child_0}
    var_0 = runner_0.main(**dict_0)
    var_0.assertIsNotNone(runner_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    runner_0 = module_1.installHandler()
    runner_1 = module_0.Runner()
    assert f'{type(runner_1).__module__}.{type(runner_1).__qualname__}' == 'typ.runner.Runner'
    assert f'{type(runner_1.args).__module__}.{type(runner_1.args).__qualname__}' == 'argparse.Namespace'
    assert runner_1.classifier is None
    assert runner_1.cov is None
    assert runner_1.context is None
    assert runner_1.coverage_source is None
    assert f'{type(runner_1.host).__module__}.{type(runner_1.host).__qualname__}' == 'typ.host.Host'
    assert f'{type(runner_1.loader).__module__}.{type(runner_1.loader).__qualname__}' == 'unittest.loader.TestLoader'
    assert runner_1.printer is None
    assert runner_1.setup_fn is None
    assert runner_1.stats is None
    assert runner_1.teardown_fn is None
    assert runner_1.top_level_dir is None
    assert runner_1.top_level_dirs == []
    assert runner_1.win_multiprocessing == 'spawn'
    assert runner_1.final_responses == []
    var_0 = runner_1.run()
    var_1 = var_0.__repr__()
    var_2 = runner_1.main(runner_0)
    var_0.report_coverage()

def test_case_12():
    runner_0 = module_0.Runner()
    assert f'{type(runner_0).__module__}.{type(runner_0).__qualname__}' == 'typ.runner.Runner'
    assert f'{type(runner_0.args).__module__}.{type(runner_0.args).__qualname__}' == 'argparse.Namespace'
    assert runner_0.classifier is None
    assert runner_0.cov is None
    assert runner_0.context is None
    assert runner_0.coverage_source is None
    assert f'{type(runner_0.host).__module__}.{type(runner_0.host).__qualname__}' == 'typ.host.Host'
    assert f'{type(runner_0.loader).__module__}.{type(runner_0.loader).__qualname__}' == 'unittest.loader.TestLoader'
    assert runner_0.printer is None
    assert runner_0.setup_fn is None
    assert runner_0.stats is None
    assert runner_0.teardown_fn is None
    assert runner_0.top_level_dir is None
    assert runner_0.top_level_dirs == []
    assert runner_0.win_multiprocessing == 'spawn'
    assert runner_0.final_responses == []
    child_0 = module_0._Child(runner_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    runner_0 = module_0.Runner()
    assert f'{type(runner_0).__module__}.{type(runner_0).__qualname__}' == 'typ.runner.Runner'
    assert f'{type(runner_0.args).__module__}.{type(runner_0.args).__qualname__}' == 'argparse.Namespace'
    assert runner_0.classifier is None
    assert runner_0.cov is None
    assert runner_0.context is None
    assert runner_0.coverage_source is None
    assert f'{type(runner_0.host).__module__}.{type(runner_0.host).__qualname__}' == 'typ.host.Host'
    assert f'{type(runner_0.loader).__module__}.{type(runner_0.loader).__qualname__}' == 'unittest.loader.TestLoader'
    assert runner_0.printer is None
    assert runner_0.setup_fn is None
    assert runner_0.stats is None
    assert runner_0.teardown_fn is None
    assert runner_0.top_level_dir is None
    assert runner_0.top_level_dirs == []
    assert runner_0.win_multiprocessing == 'spawn'
    assert runner_0.final_responses == []
    runner_0.update(runner_0, runner_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    runner_0 = module_0.Runner()
    assert f'{type(runner_0).__module__}.{type(runner_0).__qualname__}' == 'typ.runner.Runner'
    assert f'{type(runner_0.args).__module__}.{type(runner_0.args).__qualname__}' == 'argparse.Namespace'
    assert runner_0.classifier is None
    assert runner_0.cov is None
    assert runner_0.context is None
    assert runner_0.coverage_source is None
    assert f'{type(runner_0.host).__module__}.{type(runner_0.host).__qualname__}' == 'typ.host.Host'
    assert f'{type(runner_0.loader).__module__}.{type(runner_0.loader).__qualname__}' == 'unittest.loader.TestLoader'
    assert runner_0.printer is None
    assert runner_0.setup_fn is None
    assert runner_0.stats is None
    assert runner_0.teardown_fn is None
    assert runner_0.top_level_dir is None
    assert runner_0.top_level_dirs == []
    assert runner_0.win_multiprocessing == 'spawn'
    assert runner_0.final_responses == []
    none_type_0 = None
    str_0 = 'Error: --shard-index must be no more than the number of shards (%i) minus 1'
    str_1 = 'cHxNg,'
    dict_0 = {str_0: str_0, str_0: runner_0, str_1: str_1}
    runner_0.parse_args(none_type_0, none_type_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    runner_0 = module_0.Runner()
    assert f'{type(runner_0).__module__}.{type(runner_0).__qualname__}' == 'typ.runner.Runner'
    assert f'{type(runner_0.args).__module__}.{type(runner_0.args).__qualname__}' == 'argparse.Namespace'
    assert runner_0.classifier is None
    assert runner_0.cov is None
    assert runner_0.context is None
    assert runner_0.coverage_source is None
    assert f'{type(runner_0.host).__module__}.{type(runner_0.host).__qualname__}' == 'typ.host.Host'
    assert f'{type(runner_0.loader).__module__}.{type(runner_0.loader).__qualname__}' == 'unittest.loader.TestLoader'
    assert runner_0.printer is None
    assert runner_0.setup_fn is None
    assert runner_0.stats is None
    assert runner_0.teardown_fn is None
    assert runner_0.top_level_dir is None
    assert runner_0.top_level_dirs == []
    assert runner_0.win_multiprocessing == 'spawn'
    assert runner_0.final_responses == []
    test_input_0 = module_0.TestInput(runner_0)
    var_0 = runner_0.run()
    var_1 = runner_0.run()
    var_2 = runner_0.report_coverage()
    runner_1 = module_0.Runner(var_2)
    module_0.TestSet(isolated_tests=var_1, tests_to_skip=runner_1)

@pytest.mark.xfail(strict=True)
def test_case_16():
    runner_0 = module_0.Runner()
    assert f'{type(runner_0).__module__}.{type(runner_0).__qualname__}' == 'typ.runner.Runner'
    assert f'{type(runner_0.args).__module__}.{type(runner_0.args).__qualname__}' == 'argparse.Namespace'
    assert runner_0.classifier is None
    assert runner_0.cov is None
    assert runner_0.context is None
    assert runner_0.coverage_source is None
    assert f'{type(runner_0.host).__module__}.{type(runner_0.host).__qualname__}' == 'typ.host.Host'
    assert f'{type(runner_0.loader).__module__}.{type(runner_0.loader).__qualname__}' == 'unittest.loader.TestLoader'
    assert runner_0.printer is None
    assert runner_0.setup_fn is None
    assert runner_0.stats is None
    assert runner_0.teardown_fn is None
    assert runner_0.top_level_dir is None
    assert runner_0.top_level_dirs == []
    assert runner_0.win_multiprocessing == 'spawn'
    assert runner_0.final_responses == []
    child_0 = module_0._Child(runner_0)
    test_input_0 = module_0.TestInput(runner_0)
    str_0 = ' (GS<gI('
    str_1 = 'pX^'
    dict_0 = {str_0: child_0, str_1: test_input_0}
    var_0 = runner_0.main(dict_0)
    var_1 = runner_0.run()
    var_0.report_coverage()

@pytest.mark.xfail(strict=True)
def test_case_17():
    runner_0 = module_0.Runner()
    assert f'{type(runner_0).__module__}.{type(runner_0).__qualname__}' == 'typ.runner.Runner'
    assert f'{type(runner_0.args).__module__}.{type(runner_0.args).__qualname__}' == 'argparse.Namespace'
    assert runner_0.classifier is None
    assert runner_0.cov is None
    assert runner_0.context is None
    assert runner_0.coverage_source is None
    assert f'{type(runner_0.host).__module__}.{type(runner_0.host).__qualname__}' == 'typ.host.Host'
    assert f'{type(runner_0.loader).__module__}.{type(runner_0.loader).__qualname__}' == 'unittest.loader.TestLoader'
    assert runner_0.printer is None
    assert runner_0.setup_fn is None
    assert runner_0.stats is None
    assert runner_0.teardown_fn is None
    assert runner_0.top_level_dir is None
    assert runner_0.top_level_dirs == []
    assert runner_0.win_multiprocessing == 'spawn'
    assert runner_0.final_responses == []
    child_0 = module_0._Child(runner_0)
    test_input_0 = module_0.TestInput(runner_0)
    runner_0.find_tests(child_0)