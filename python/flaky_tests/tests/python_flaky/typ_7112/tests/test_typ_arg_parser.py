# Automatically generated by Pynguin.
import pytest
import typ.arg_parser as module_0
import argparse as module_1

def test_case_0():
    argument_parser_0 = module_0.ArgumentParser()
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is True
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']
    bailout_0 = argument_parser_0.argv_from_args(argument_parser_0)

def test_case_1():
    none_type_0 = None
    argument_parser_0 = module_0.ArgumentParser(add_help=none_type_0, version=none_type_0, reporting=none_type_0, running=none_type_0)
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is None
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    argument_parser_0 = module_0.ArgumentParser(discovery=none_type_0, reporting=none_type_0)
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is True
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']
    argument_parser_0.argv_from_args(none_type_0)

def test_case_3():
    none_type_0 = None
    argument_parser_0 = module_0.ArgumentParser(add_help=none_type_0, running=none_type_0)
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is None
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']
    var_0 = argument_parser_0.parse_args(namespace=argument_parser_0)
    assert argument_parser_0.exit_status == 2
    assert argument_parser_0.version is False
    assert argument_parser_0.file_list is None
    assert argument_parser_0.all is False
    assert argument_parser_0.isolate == []
    assert argument_parser_0.skip == []
    assert argument_parser_0.suffixes == []
    assert argument_parser_0.builder_name is None
    assert argument_parser_0.coverage is False
    assert argument_parser_0.coverage_source == []
    assert argument_parser_0.coverage_omit == []
    assert argument_parser_0.coverage_annotate is False
    assert argument_parser_0.coverage_show_missing is False
    assert argument_parser_0.master_name is None
    assert argument_parser_0.metadata == []
    assert argument_parser_0.test_results_server is None
    assert argument_parser_0.test_type is None
    assert argument_parser_0.write_full_results_to is None
    assert argument_parser_0.write_trace_to is None
    assert argument_parser_0.tests == ['/input']
    assert argument_parser_0.path == []
    assert argument_parser_0.top_level_dir is None
    assert argument_parser_0.top_level_dirs == []
    var_1 = argument_parser_0.argv_from_args(argument_parser_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    argument_parser_0 = module_0.ArgumentParser()
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is True
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']
    argument_parser_0.parse_args(argument_parser_0, argument_parser_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    argument_parser_0 = module_0.ArgumentParser()
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is True
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']
    argument_parser_0.optparse_options()

def test_case_6():
    none_type_0 = None
    argument_parser_0 = module_0.ArgumentParser(add_help=none_type_0, version=none_type_0, reporting=none_type_0, running=none_type_0)
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is None
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']
    var_0 = argument_parser_0.optparse_options()

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    argument_parser_0 = module_0.ArgumentParser(add_help=none_type_0, running=none_type_0)
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is None
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']
    argument_parser_0.add_option_group(none_type_0, none_type_0, argument_parser_0, reporting=argument_parser_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    bailout_0 = module_0._Bailout()
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']
    argument_parser_0 = module_0.ArgumentParser(reporting=none_type_0, running=bailout_0)
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is True
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    var_0 = argument_parser_0.parse_args(namespace=argument_parser_0)
    assert argument_parser_0.exit_status == 2
    assert argument_parser_0.version is False
    assert argument_parser_0.file_list is None
    assert argument_parser_0.all is False
    assert argument_parser_0.isolate == []
    assert argument_parser_0.skip == []
    assert argument_parser_0.suffixes == []
    assert argument_parser_0.debugger is False
    assert argument_parser_0.jobs == 48
    assert argument_parser_0.list_only is False
    assert argument_parser_0.dry_run is False
    assert argument_parser_0.quiet is False
    assert argument_parser_0.status_format == '[%f/%t] '
    assert argument_parser_0.timing is False
    assert argument_parser_0.verbose == 0
    assert argument_parser_0.passthrough is False
    assert argument_parser_0.total_shards == 1
    assert argument_parser_0.shard_index == 0
    assert argument_parser_0.retry_limit == 0
    assert argument_parser_0.terminal_width == 0
    assert argument_parser_0.overwrite is None
    assert argument_parser_0.path == []
    assert argument_parser_0.top_level_dir is None
    assert argument_parser_0.top_level_dirs == []
    var_1 = argument_parser_0.argv_from_args(argument_parser_0)
    argument_parser_0.add_option_group(var_1, none_type_0, none_type_0, reporting=var_0)

def test_case_9():
    none_type_0 = None
    bailout_0 = module_0._Bailout()
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']
    argument_parser_0 = module_0.ArgumentParser(reporting=none_type_0, running=bailout_0)
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is True
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    var_0 = argument_parser_0.parse_args(namespace=argument_parser_0)
    assert argument_parser_0.exit_status == 2
    assert argument_parser_0.version is False
    assert argument_parser_0.file_list is None
    assert argument_parser_0.all is False
    assert argument_parser_0.isolate == []
    assert argument_parser_0.skip == []
    assert argument_parser_0.suffixes == []
    assert argument_parser_0.debugger is False
    assert argument_parser_0.jobs == 48
    assert argument_parser_0.list_only is False
    assert argument_parser_0.dry_run is False
    assert argument_parser_0.quiet is False
    assert argument_parser_0.status_format == '[%f/%t] '
    assert argument_parser_0.timing is False
    assert argument_parser_0.verbose == 0
    assert argument_parser_0.passthrough is False
    assert argument_parser_0.total_shards == 1
    assert argument_parser_0.shard_index == 0
    assert argument_parser_0.retry_limit == 0
    assert argument_parser_0.terminal_width == 0
    assert argument_parser_0.overwrite is None
    assert argument_parser_0.path == []
    assert argument_parser_0.top_level_dir is None
    assert argument_parser_0.top_level_dirs == []
    var_1 = argument_parser_0.argv_from_args(argument_parser_0)

def test_case_10():
    bailout_0 = module_0._Bailout()
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']
    argument_parser_0 = module_0.ArgumentParser()
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is True
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    var_0 = argument_parser_0.argv_from_args(argument_parser_0)
    with pytest.raises(module_0._Bailout):
        argument_parser_0.exit()

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    argument_parser_0 = module_0.ArgumentParser(add_help=none_type_0, running=none_type_0)
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is None
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']
    var_0 = argument_parser_0.parse_args(namespace=argument_parser_0)
    assert argument_parser_0.exit_status == 2
    assert argument_parser_0.version is False
    assert argument_parser_0.file_list is None
    assert argument_parser_0.all is False
    assert argument_parser_0.isolate == []
    assert argument_parser_0.skip == []
    assert argument_parser_0.suffixes == []
    assert argument_parser_0.builder_name is None
    assert argument_parser_0.coverage is False
    assert argument_parser_0.coverage_source == []
    assert argument_parser_0.coverage_omit == []
    assert argument_parser_0.coverage_annotate is False
    assert argument_parser_0.coverage_show_missing is False
    assert argument_parser_0.master_name is None
    assert argument_parser_0.metadata == []
    assert argument_parser_0.test_results_server is None
    assert argument_parser_0.test_type is None
    assert argument_parser_0.write_full_results_to is None
    assert argument_parser_0.write_trace_to is None
    assert argument_parser_0.tests == ['/input']
    assert argument_parser_0.path == []
    assert argument_parser_0.top_level_dir is None
    assert argument_parser_0.top_level_dirs == []
    var_1 = argument_parser_0.argv_from_args(argument_parser_0)
    argument_parser_0.add_option_group(var_0, var_0, argument_parser_0, reporting=argument_parser_0, skip=var_1)

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    argument_parser_0 = module_0.ArgumentParser(add_help=none_type_0, running=none_type_0)
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is None
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']
    var_0 = argument_parser_0.print_help()
    var_1 = argument_parser_0.format_usage()
    assert var_1 == 'usage: typ [options] [tests...]\n'
    var_2 = argument_parser_0.parse_args(namespace=argument_parser_0)
    assert argument_parser_0.exit_status == 2
    assert argument_parser_0.version is False
    assert argument_parser_0.file_list is None
    assert argument_parser_0.all is False
    assert argument_parser_0.isolate == []
    assert argument_parser_0.skip == []
    assert argument_parser_0.suffixes == []
    assert argument_parser_0.builder_name is None
    assert argument_parser_0.coverage is False
    assert argument_parser_0.coverage_source == []
    assert argument_parser_0.coverage_omit == []
    assert argument_parser_0.coverage_annotate is False
    assert argument_parser_0.coverage_show_missing is False
    assert argument_parser_0.master_name is None
    assert argument_parser_0.metadata == []
    assert argument_parser_0.test_results_server is None
    assert argument_parser_0.test_type is None
    assert argument_parser_0.write_full_results_to is None
    assert argument_parser_0.write_trace_to is None
    assert argument_parser_0.tests == ['/input']
    assert argument_parser_0.path == []
    assert argument_parser_0.top_level_dir is None
    assert argument_parser_0.top_level_dirs == []
    var_3 = argument_parser_0.argv_from_args(argument_parser_0)
    argument_parser_0.add_option_group(var_3, var_1, var_1, var_3, skip=var_1)

@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    none_type_1 = None
    bailout_0 = module_0._Bailout()
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']
    argument_parser_0 = module_0.ArgumentParser(add_help=none_type_0, running=none_type_0)
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is None
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    var_0 = argument_parser_0.exit(message=none_type_1, bailout=none_type_1)
    assert argument_parser_0.exit_status == 0
    var_0.mktempfile(argument_parser_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    argument_parser_0 = module_0.ArgumentParser(add_help=none_type_0, running=none_type_0)
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is None
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']
    var_0 = argument_parser_0.optparse_options()
    var_1 = var_0.__str__()
    var_2 = argument_parser_0.parse_args(namespace=argument_parser_0)
    assert argument_parser_0.exit_status == 2
    assert argument_parser_0.version is False
    assert argument_parser_0.file_list is None
    assert argument_parser_0.all is False
    assert argument_parser_0.isolate == []
    assert argument_parser_0.skip == []
    assert argument_parser_0.suffixes == []
    assert argument_parser_0.builder_name is None
    assert argument_parser_0.coverage is False
    assert argument_parser_0.coverage_source == []
    assert argument_parser_0.coverage_omit == []
    assert argument_parser_0.coverage_annotate is False
    assert argument_parser_0.coverage_show_missing is False
    assert argument_parser_0.master_name is None
    assert argument_parser_0.metadata == []
    assert argument_parser_0.test_results_server is None
    assert argument_parser_0.test_type is None
    assert argument_parser_0.write_full_results_to is None
    assert argument_parser_0.write_trace_to is None
    assert argument_parser_0.tests == ['/input']
    assert argument_parser_0.path == []
    assert argument_parser_0.top_level_dir is None
    assert argument_parser_0.top_level_dirs == []
    var_3 = module_1.ArgumentParser(description=var_1, epilog=var_2, argument_default=none_type_0)
    argument_parser_0.add_option_group(var_3, var_1, var_1, var_3, skip=var_1)

@pytest.mark.xfail(strict=True)
def test_case_15():
    argument_parser_0 = module_0.ArgumentParser()
    assert f'{type(argument_parser_0).__module__}.{type(argument_parser_0).__qualname__}' == 'typ.arg_parser.ArgumentParser'
    assert argument_parser_0.description is None
    assert argument_parser_0.argument_default is None
    assert argument_parser_0.prefix_chars == '-'
    assert argument_parser_0.conflict_handler == 'error'
    assert argument_parser_0.prog == 'typ'
    assert argument_parser_0.usage == '%(prog)s [options] [tests...]'
    assert argument_parser_0.epilog is None
    assert argument_parser_0.fromfile_prefix_chars is None
    assert argument_parser_0.add_help is True
    assert argument_parser_0.allow_abbrev is True
    assert argument_parser_0.exit_on_error is True
    assert argument_parser_0.exit_status is None
    assert module_0.DEFAULT_COVERAGE_OMIT == ['*/typ/*', '*/site-packages/*']
    assert module_0.DEFAULT_STATUS_FORMAT == '[%f/%t] '
    assert module_0.DEFAULT_SUFFIXES == ['*_test.py', '*_unittest.py']
    var_0 = argument_parser_0.parse_known_args()
    none_type_0 = None
    var_1 = argument_parser_0.parse_args(namespace=argument_parser_0)
    assert argument_parser_0.exit_status == 2
    assert argument_parser_0.version is False
    assert argument_parser_0.file_list is None
    assert argument_parser_0.all is False
    assert argument_parser_0.isolate == []
    assert argument_parser_0.skip == []
    assert argument_parser_0.suffixes == []
    assert argument_parser_0.builder_name is None
    assert argument_parser_0.coverage is False
    assert argument_parser_0.coverage_source == []
    assert argument_parser_0.coverage_omit == []
    assert argument_parser_0.coverage_annotate is False
    assert argument_parser_0.coverage_show_missing is False
    assert argument_parser_0.master_name is None
    assert argument_parser_0.metadata == []
    assert argument_parser_0.test_results_server is None
    assert argument_parser_0.test_type is None
    assert argument_parser_0.write_full_results_to is None
    assert argument_parser_0.write_trace_to is None
    assert argument_parser_0.tests == ['/input']
    assert argument_parser_0.debugger is False
    assert argument_parser_0.jobs == 48
    assert argument_parser_0.list_only is False
    assert argument_parser_0.dry_run is False
    assert argument_parser_0.quiet is False
    assert argument_parser_0.status_format == '[%f/%t] '
    assert argument_parser_0.timing is False
    assert argument_parser_0.verbose == 0
    assert argument_parser_0.passthrough is False
    assert argument_parser_0.total_shards == 1
    assert argument_parser_0.shard_index == 0
    assert argument_parser_0.retry_limit == 0
    assert argument_parser_0.terminal_width == 0
    assert argument_parser_0.overwrite is None
    assert argument_parser_0.path == []
    assert argument_parser_0.top_level_dir is None
    assert argument_parser_0.top_level_dirs == []
    var_2 = argument_parser_0.argv_from_args(argument_parser_0)
    var_3 = argument_parser_0.parse_args(var_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'argparse.Namespace'
    assert var_3.version is False
    assert var_3.file_list is None
    assert var_3.all is False
    assert var_3.isolate == []
    assert var_3.skip == []
    assert var_3.suffixes == ['*_test.py', '*_unittest.py']
    assert var_3.builder_name is None
    assert var_3.coverage is False
    assert var_3.coverage_source == []
    assert var_3.coverage_omit == ['*/typ/*', '*/site-packages/*']
    assert var_3.coverage_annotate is False
    assert var_3.coverage_show_missing is False
    assert var_3.master_name is None
    assert var_3.metadata == []
    assert var_3.test_results_server is None
    assert var_3.test_type is None
    assert var_3.write_full_results_to is None
    assert var_3.write_trace_to is None
    assert var_3.tests == ['/input']
    assert var_3.debugger is False
    assert var_3.jobs == 48
    assert var_3.list_only is False
    assert var_3.dry_run is False
    assert var_3.quiet is False
    assert var_3.status_format == '[%f/%t] '
    assert var_3.timing is False
    assert var_3.verbose == 0
    assert var_3.passthrough is False
    assert var_3.total_shards == 1
    assert var_3.shard_index == 0
    assert var_3.retry_limit == 0
    assert var_3.terminal_width == 0
    assert var_3.overwrite is True
    assert var_3.path == []
    assert var_3.top_level_dir is None
    assert var_3.top_level_dirs == []
    none_type_0.add_option_group(var_1, var_1, reporting=none_type_0)