# Automatically generated by Pynguin.
import pytest
import netutils_linux_monitoring.softnet_stat as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    softnet_stat_0 = module_0.SoftnetStat()
    assert module_0.SoftnetStat.attributes == ['cpu', 'total', 'dropped', 'time_squeeze', 'cpu_collision', 'received_rps']
    softnet_stat_0.__sub__(softnet_stat_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    softnet_stat_0 = module_0.SoftnetStat()
    assert module_0.SoftnetStat.attributes == ['cpu', 'total', 'dropped', 'time_squeeze', 'cpu_collision', 'received_rps']
    softnet_stat_0.__eq__(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    softnet_stat_0 = module_0.SoftnetStat()
    assert module_0.SoftnetStat.attributes == ['cpu', 'total', 'dropped', 'time_squeeze', 'cpu_collision', 'received_rps']
    var_0 = softnet_stat_0.__eq__(softnet_stat_0)
    assert var_0 is True
    var_0.repr_source()

def test_case_3():
    softnet_stat_0 = module_0.SoftnetStat()
    assert module_0.SoftnetStat.attributes == ['cpu', 'total', 'dropped', 'time_squeeze', 'cpu_collision', 'received_rps']

@pytest.mark.xfail(strict=True)
def test_case_4():
    softnet_stat_0 = module_0.SoftnetStat()
    assert module_0.SoftnetStat.attributes == ['cpu', 'total', 'dropped', 'time_squeeze', 'cpu_collision', 'received_rps']
    softnet_stat_0.parse_list(softnet_stat_0)

def test_case_5():
    softnet_stat_top_0 = module_0.SoftnetStatTop()
    assert f'{type(softnet_stat_top_0).__module__}.{type(softnet_stat_top_0).__qualname__}' == 'netutils_linux_monitoring.softnet_stat.SoftnetStatTop'
    assert softnet_stat_top_0.topology is None
    assert f'{type(softnet_stat_top_0.color).__module__}.{type(softnet_stat_top_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.SoftnetStatTop.file_arg == '--softnet-stat-file'
    assert module_0.SoftnetStatTop.file_value == '/proc/net/softnet_stat'
    assert module_0.SoftnetStatTop.align == ['l', 'r', 'r', 'r', 'r', 'r']
    assert module_0.SoftnetStatTop.total_warning == 300000
    assert module_0.SoftnetStatTop.total_error == 900000
    assert module_0.SoftnetStatTop.dropped_warning == 1
    assert module_0.SoftnetStatTop.dropped_error == 1
    assert module_0.SoftnetStatTop.time_squeeze_warning == 1
    assert module_0.SoftnetStatTop.time_squeeze_error == 300
    assert module_0.SoftnetStatTop.cpu_collision_warning == 1
    assert module_0.SoftnetStatTop.cpu_collision_error == 1000

@pytest.mark.xfail(strict=True)
def test_case_6():
    softnet_stat_top_0 = module_0.SoftnetStatTop()
    assert f'{type(softnet_stat_top_0).__module__}.{type(softnet_stat_top_0).__qualname__}' == 'netutils_linux_monitoring.softnet_stat.SoftnetStatTop'
    assert softnet_stat_top_0.topology is None
    assert f'{type(softnet_stat_top_0.color).__module__}.{type(softnet_stat_top_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.SoftnetStatTop.file_arg == '--softnet-stat-file'
    assert module_0.SoftnetStatTop.file_value == '/proc/net/softnet_stat'
    assert module_0.SoftnetStatTop.align == ['l', 'r', 'r', 'r', 'r', 'r']
    assert module_0.SoftnetStatTop.total_warning == 300000
    assert module_0.SoftnetStatTop.total_error == 900000
    assert module_0.SoftnetStatTop.dropped_warning == 1
    assert module_0.SoftnetStatTop.dropped_error == 1
    assert module_0.SoftnetStatTop.time_squeeze_warning == 1
    assert module_0.SoftnetStatTop.time_squeeze_error == 300
    assert module_0.SoftnetStatTop.cpu_collision_warning == 1
    assert module_0.SoftnetStatTop.cpu_collision_error == 1000
    softnet_stat_top_0.post_optparse()

@pytest.mark.xfail(strict=True)
def test_case_7():
    softnet_stat_top_0 = module_0.SoftnetStatTop()
    assert f'{type(softnet_stat_top_0).__module__}.{type(softnet_stat_top_0).__qualname__}' == 'netutils_linux_monitoring.softnet_stat.SoftnetStatTop'
    assert softnet_stat_top_0.topology is None
    assert f'{type(softnet_stat_top_0.color).__module__}.{type(softnet_stat_top_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.SoftnetStatTop.file_arg == '--softnet-stat-file'
    assert module_0.SoftnetStatTop.file_value == '/proc/net/softnet_stat'
    assert module_0.SoftnetStatTop.align == ['l', 'r', 'r', 'r', 'r', 'r']
    assert module_0.SoftnetStatTop.total_warning == 300000
    assert module_0.SoftnetStatTop.total_error == 900000
    assert module_0.SoftnetStatTop.dropped_warning == 1
    assert module_0.SoftnetStatTop.dropped_error == 1
    assert module_0.SoftnetStatTop.time_squeeze_warning == 1
    assert module_0.SoftnetStatTop.time_squeeze_error == 300
    assert module_0.SoftnetStatTop.cpu_collision_warning == 1
    assert module_0.SoftnetStatTop.cpu_collision_error == 1000
    softnet_stat_top_0.eval()

@pytest.mark.xfail(strict=True)
def test_case_8():
    softnet_stat_top_0 = module_0.SoftnetStatTop()
    assert f'{type(softnet_stat_top_0).__module__}.{type(softnet_stat_top_0).__qualname__}' == 'netutils_linux_monitoring.softnet_stat.SoftnetStatTop'
    assert softnet_stat_top_0.topology is None
    assert f'{type(softnet_stat_top_0.color).__module__}.{type(softnet_stat_top_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.SoftnetStatTop.file_arg == '--softnet-stat-file'
    assert module_0.SoftnetStatTop.file_value == '/proc/net/softnet_stat'
    assert module_0.SoftnetStatTop.align == ['l', 'r', 'r', 'r', 'r', 'r']
    assert module_0.SoftnetStatTop.total_warning == 300000
    assert module_0.SoftnetStatTop.total_error == 900000
    assert module_0.SoftnetStatTop.dropped_warning == 1
    assert module_0.SoftnetStatTop.dropped_error == 1
    assert module_0.SoftnetStatTop.time_squeeze_warning == 1
    assert module_0.SoftnetStatTop.time_squeeze_error == 300
    assert module_0.SoftnetStatTop.cpu_collision_warning == 1
    assert module_0.SoftnetStatTop.cpu_collision_error == 1000
    softnet_stat_top_0.__repr__()

@pytest.mark.xfail(strict=True)
def test_case_9():
    softnet_stat_top_0 = module_0.SoftnetStatTop()
    assert f'{type(softnet_stat_top_0).__module__}.{type(softnet_stat_top_0).__qualname__}' == 'netutils_linux_monitoring.softnet_stat.SoftnetStatTop'
    assert softnet_stat_top_0.topology is None
    assert f'{type(softnet_stat_top_0.color).__module__}.{type(softnet_stat_top_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.SoftnetStatTop.file_arg == '--softnet-stat-file'
    assert module_0.SoftnetStatTop.file_value == '/proc/net/softnet_stat'
    assert module_0.SoftnetStatTop.align == ['l', 'r', 'r', 'r', 'r', 'r']
    assert module_0.SoftnetStatTop.total_warning == 300000
    assert module_0.SoftnetStatTop.total_error == 900000
    assert module_0.SoftnetStatTop.dropped_warning == 1
    assert module_0.SoftnetStatTop.dropped_error == 1
    assert module_0.SoftnetStatTop.time_squeeze_warning == 1
    assert module_0.SoftnetStatTop.time_squeeze_error == 300
    assert module_0.SoftnetStatTop.cpu_collision_warning == 1
    assert module_0.SoftnetStatTop.cpu_collision_error == 1000
    softnet_stat_top_0.make_rows()

@pytest.mark.xfail(strict=True)
def test_case_10():
    softnet_stat_top_0 = module_0.SoftnetStatTop()
    assert f'{type(softnet_stat_top_0).__module__}.{type(softnet_stat_top_0).__qualname__}' == 'netutils_linux_monitoring.softnet_stat.SoftnetStatTop'
    assert softnet_stat_top_0.topology is None
    assert f'{type(softnet_stat_top_0.color).__module__}.{type(softnet_stat_top_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.SoftnetStatTop.file_arg == '--softnet-stat-file'
    assert module_0.SoftnetStatTop.file_value == '/proc/net/softnet_stat'
    assert module_0.SoftnetStatTop.align == ['l', 'r', 'r', 'r', 'r', 'r']
    assert module_0.SoftnetStatTop.total_warning == 300000
    assert module_0.SoftnetStatTop.total_error == 900000
    assert module_0.SoftnetStatTop.dropped_warning == 1
    assert module_0.SoftnetStatTop.dropped_error == 1
    assert module_0.SoftnetStatTop.time_squeeze_warning == 1
    assert module_0.SoftnetStatTop.time_squeeze_error == 300
    assert module_0.SoftnetStatTop.cpu_collision_warning == 1
    assert module_0.SoftnetStatTop.cpu_collision_error == 1000
    softnet_stat_top_0.colorize_dropped(softnet_stat_top_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    softnet_stat_top_0 = module_0.SoftnetStatTop()
    assert f'{type(softnet_stat_top_0).__module__}.{type(softnet_stat_top_0).__qualname__}' == 'netutils_linux_monitoring.softnet_stat.SoftnetStatTop'
    assert softnet_stat_top_0.topology is None
    assert f'{type(softnet_stat_top_0.color).__module__}.{type(softnet_stat_top_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.SoftnetStatTop.file_arg == '--softnet-stat-file'
    assert module_0.SoftnetStatTop.file_value == '/proc/net/softnet_stat'
    assert module_0.SoftnetStatTop.align == ['l', 'r', 'r', 'r', 'r', 'r']
    assert module_0.SoftnetStatTop.total_warning == 300000
    assert module_0.SoftnetStatTop.total_error == 900000
    assert module_0.SoftnetStatTop.dropped_warning == 1
    assert module_0.SoftnetStatTop.dropped_error == 1
    assert module_0.SoftnetStatTop.time_squeeze_warning == 1
    assert module_0.SoftnetStatTop.time_squeeze_error == 300
    assert module_0.SoftnetStatTop.cpu_collision_warning == 1
    assert module_0.SoftnetStatTop.cpu_collision_error == 1000
    softnet_stat_top_0.colorize_time_squeeze(softnet_stat_top_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    softnet_stat_0 = module_0.SoftnetStat()
    assert module_0.SoftnetStat.attributes == ['cpu', 'total', 'dropped', 'time_squeeze', 'cpu_collision', 'received_rps']
    softnet_stat_0.parse_string(softnet_stat_0, softnet_stat_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    softnet_stat_top_0 = module_0.SoftnetStatTop()
    assert f'{type(softnet_stat_top_0).__module__}.{type(softnet_stat_top_0).__qualname__}' == 'netutils_linux_monitoring.softnet_stat.SoftnetStatTop'
    assert softnet_stat_top_0.topology is None
    assert f'{type(softnet_stat_top_0.color).__module__}.{type(softnet_stat_top_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.SoftnetStatTop.file_arg == '--softnet-stat-file'
    assert module_0.SoftnetStatTop.file_value == '/proc/net/softnet_stat'
    assert module_0.SoftnetStatTop.align == ['l', 'r', 'r', 'r', 'r', 'r']
    assert module_0.SoftnetStatTop.total_warning == 300000
    assert module_0.SoftnetStatTop.total_error == 900000
    assert module_0.SoftnetStatTop.dropped_warning == 1
    assert module_0.SoftnetStatTop.dropped_error == 1
    assert module_0.SoftnetStatTop.time_squeeze_warning == 1
    assert module_0.SoftnetStatTop.time_squeeze_error == 300
    assert module_0.SoftnetStatTop.cpu_collision_warning == 1
    assert module_0.SoftnetStatTop.cpu_collision_error == 1000
    softnet_stat_top_0.colorize_total(softnet_stat_top_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    softnet_stat_top_0 = module_0.SoftnetStatTop()
    assert f'{type(softnet_stat_top_0).__module__}.{type(softnet_stat_top_0).__qualname__}' == 'netutils_linux_monitoring.softnet_stat.SoftnetStatTop'
    assert softnet_stat_top_0.topology is None
    assert f'{type(softnet_stat_top_0.color).__module__}.{type(softnet_stat_top_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.SoftnetStatTop.file_arg == '--softnet-stat-file'
    assert module_0.SoftnetStatTop.file_value == '/proc/net/softnet_stat'
    assert module_0.SoftnetStatTop.align == ['l', 'r', 'r', 'r', 'r', 'r']
    assert module_0.SoftnetStatTop.total_warning == 300000
    assert module_0.SoftnetStatTop.total_error == 900000
    assert module_0.SoftnetStatTop.dropped_warning == 1
    assert module_0.SoftnetStatTop.dropped_error == 1
    assert module_0.SoftnetStatTop.time_squeeze_warning == 1
    assert module_0.SoftnetStatTop.time_squeeze_error == 300
    assert module_0.SoftnetStatTop.cpu_collision_warning == 1
    assert module_0.SoftnetStatTop.cpu_collision_error == 1000
    softnet_stat_top_0.colorize_cpu_collision(softnet_stat_top_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = 1847
    softnet_stat_0 = module_0.SoftnetStat(int_0)
    assert module_0.SoftnetStat.attributes == ['cpu', 'total', 'dropped', 'time_squeeze', 'cpu_collision', 'received_rps']
    var_0 = softnet_stat_0.__sub__(softnet_stat_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'netutils_linux_monitoring.softnet_stat.SoftnetStat'
    assert var_0.random is False
    assert var_0.cpu is None
    assert var_0.cpu_collision == 0
    softnet_stat_1 = module_0.SoftnetStat(softnet_stat_0)
    var_0.bright(var_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    softnet_stat_0 = module_0.SoftnetStat()
    assert module_0.SoftnetStat.attributes == ['cpu', 'total', 'dropped', 'time_squeeze', 'cpu_collision', 'received_rps']
    bytes_0 = b'\xfc#\xc9'
    none_type_0 = None
    softnet_stat_0.parse_string(bytes_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    softnet_stat_0 = module_0.SoftnetStat()
    assert module_0.SoftnetStat.attributes == ['cpu', 'total', 'dropped', 'time_squeeze', 'cpu_collision', 'received_rps']
    bytes_0 = b''
    none_type_0 = None
    softnet_stat_top_0 = module_0.SoftnetStatTop(none_type_0)
    assert f'{type(softnet_stat_top_0).__module__}.{type(softnet_stat_top_0).__qualname__}' == 'netutils_linux_monitoring.softnet_stat.SoftnetStatTop'
    assert softnet_stat_top_0.topology is None
    assert f'{type(softnet_stat_top_0.color).__module__}.{type(softnet_stat_top_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.SoftnetStatTop.file_arg == '--softnet-stat-file'
    assert module_0.SoftnetStatTop.file_value == '/proc/net/softnet_stat'
    assert module_0.SoftnetStatTop.align == ['l', 'r', 'r', 'r', 'r', 'r']
    assert module_0.SoftnetStatTop.total_warning == 300000
    assert module_0.SoftnetStatTop.total_error == 900000
    assert module_0.SoftnetStatTop.dropped_warning == 1
    assert module_0.SoftnetStatTop.dropped_error == 1
    assert module_0.SoftnetStatTop.time_squeeze_warning == 1
    assert module_0.SoftnetStatTop.time_squeeze_error == 300
    assert module_0.SoftnetStatTop.cpu_collision_warning == 1
    assert module_0.SoftnetStatTop.cpu_collision_error == 1000
    softnet_stat_0.parse_string(bytes_0, none_type_0)