# Automatically generated by Pynguin.
import pytest
import netutils_linux_monitoring.base_top as module_0

def test_case_0():
    dict_0 = {}
    base_top_0 = module_0.BaseTop(**dict_0)
    assert module_0.BaseTop.header == '\x1b[90mPress CTRL-C to exit...\n\x1b[0m'
    var_0 = base_top_0.make_base_parser()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'argparse.ArgumentParser'
    assert var_0.description is None
    assert var_0.argument_default is None
    assert var_0.prefix_chars == '-'
    assert var_0.conflict_handler == 'error'
    assert var_0.prog == 'pynguin'
    assert var_0.usage is None
    assert var_0.epilog is None
    assert var_0.fromfile_prefix_chars is None
    assert var_0.add_help is True
    assert var_0.allow_abbrev is True
    assert var_0.exit_on_error is True
    with pytest.raises(TypeError):
        base_top_0.make_parser()

def test_case_1():
    base_top_0 = module_0.BaseTop()
    assert module_0.BaseTop.header == '\x1b[90mPress CTRL-C to exit...\n\x1b[0m'
    with pytest.raises(TypeError):
        base_top_0.make_parser(base_top_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    base_top_0 = module_0.BaseTop()
    assert module_0.BaseTop.header == '\x1b[90mPress CTRL-C to exit...\n\x1b[0m'
    base_top_0.default_post_optparse()

def test_case_3():
    base_top_0 = module_0.BaseTop()
    assert module_0.BaseTop.header == '\x1b[90mPress CTRL-C to exit...\n\x1b[0m'

@pytest.mark.xfail(strict=True)
def test_case_4():
    base_top_0 = module_0.BaseTop()
    assert module_0.BaseTop.header == '\x1b[90mPress CTRL-C to exit...\n\x1b[0m'
    var_0 = base_top_0.default_init()
    var_1 = base_top_0.default_init()
    var_2 = base_top_0.eval()
    base_top_0.int(base_top_0)

def test_case_5():
    base_top_0 = module_0.BaseTop()
    assert module_0.BaseTop.header == '\x1b[90mPress CTRL-C to exit...\n\x1b[0m'
    var_0 = base_top_0.tick()

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    base_top_0 = module_0.BaseTop()
    assert module_0.BaseTop.header == '\x1b[90mPress CTRL-C to exit...\n\x1b[0m'
    var_0 = base_top_0.__repr__()
    var_0.default_init(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'dz>-q#Fba.0'
    dict_0 = {}
    base_top_0 = module_0.BaseTop(*dict_0, **dict_0)
    assert module_0.BaseTop.header == '\x1b[90mPress CTRL-C to exit...\n\x1b[0m'
    base_top_0.make_base_parser(str_0)

def test_case_8():
    base_top_0 = module_0.BaseTop()
    assert module_0.BaseTop.header == '\x1b[90mPress CTRL-C to exit...\n\x1b[0m'
    str_0 = '\n    9d3cebfe 00000000 0000004d 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    30135354 00000000 00000025 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    2102d995 00000000 00000021 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    1d208e70 00000000 00000021 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    6ba1984a 00000000 0000002b 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    25ef7f6f 00000000 0000001f 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    178ed754 00000000 0000001e 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    168824ff 00000000 00000029 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    '
    var_0 = base_top_0.int(str_0)
    assert var_0 == '\n    9d3cebfe 00000000 0000004d 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    30135354 00000000 00000025 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    2102d995 00000000 00000021 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    1d208e70 00000000 00000021 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    6ba1984a 00000000 0000002b 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    25ef7f6f 00000000 0000001f 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    178ed754 00000000 0000001e 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    168824ff 00000000 00000029 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n    '

@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b'6'
    list_0 = []
    base_top_0 = module_0.BaseTop(*list_0)
    assert module_0.BaseTop.header == '\x1b[90mPress CTRL-C to exit...\n\x1b[0m'
    var_0 = base_top_0.int(bytes_0)
    assert var_0 == 6
    base_top_1 = module_0.BaseTop()
    var_1 = base_top_1.__repr__()
    base_top_2 = module_0.BaseTop()
    base_top_2.int(var_0)