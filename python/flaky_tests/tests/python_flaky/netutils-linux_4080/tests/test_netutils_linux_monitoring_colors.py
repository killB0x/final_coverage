# Automatically generated by Pynguin.
import pytest
import netutils_linux_monitoring.colors as module_0

def test_case_0():
    none_type_0 = None
    color_0 = module_0.Color(none_type_0)
    assert f'{type(color_0).__module__}.{type(color_0).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert color_0.enabled is True
    assert color_0.topology is None
    assert module_0.Fore.RED == ''
    assert module_0.Fore.RESET == ''
    assert module_0.Style.BRIGHT == ''
    assert module_0.Style.RESET_ALL == ''
    assert module_0.Color.COLORS_NODE == {0: '\x1b[32m', 1: '\x1b[31m', 2: '\x1b[93m', 3: '\x1b[34m', -1: '\x1b[0m'}
    assert module_0.Color.COLORS_SOCKET == {0: '\x1b[34m', 1: '\x1b[93m', 2: '\x1b[31m', 3: '\x1b[32m', -1: '\x1b[0m'}
    assert module_0.Color.COLOR_NONE == {-1: '', 0: '', 1: '', 2: '', 3: ''}

@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = 1523.0
    module_0.Color(float_0)

def test_case_2():
    bool_0 = False
    color_0 = module_0.Color(bool_0, bool_0)
    assert f'{type(color_0).__module__}.{type(color_0).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert color_0.enabled is False
    assert color_0.topology is False
    assert color_0.GREY == ''
    assert color_0.YELLOW == ''
    assert color_0.color_scheme == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    assert module_0.Fore.RED == ''
    assert module_0.Fore.RESET == ''
    assert module_0.Style.BRIGHT == ''
    assert module_0.Style.RESET_ALL == ''
    assert module_0.Color.COLORS_NODE == {0: '\x1b[32m', 1: '\x1b[31m', 2: '\x1b[93m', 3: '\x1b[34m', -1: '\x1b[0m'}
    assert module_0.Color.COLORS_SOCKET == {0: '\x1b[34m', 1: '\x1b[93m', 2: '\x1b[31m', 3: '\x1b[32m', -1: '\x1b[0m'}
    assert module_0.Color.COLOR_NONE == {-1: '', 0: '', 1: '', 2: '', 3: ''}

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    color_0 = module_0.Color(bool_0, bool_0)
    assert f'{type(color_0).__module__}.{type(color_0).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert color_0.enabled is False
    assert color_0.topology is False
    assert color_0.GREY == ''
    assert color_0.YELLOW == ''
    assert color_0.color_scheme == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    assert module_0.Fore.RED == ''
    assert module_0.Fore.RESET == ''
    assert module_0.Style.BRIGHT == ''
    assert module_0.Style.RESET_ALL == ''
    assert module_0.Color.COLORS_NODE == {0: '\x1b[32m', 1: '\x1b[31m', 2: '\x1b[93m', 3: '\x1b[34m', -1: '\x1b[0m'}
    assert module_0.Color.COLORS_SOCKET == {0: '\x1b[34m', 1: '\x1b[93m', 2: '\x1b[31m', 3: '\x1b[32m', -1: '\x1b[0m'}
    assert module_0.Color.COLOR_NONE == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    var_0 = color_0.colorize(bool_0, bool_0, bool_0)
    assert var_0 == 'False'
    module_0.Color(var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    color_0 = module_0.Color(bool_0, bool_0)
    assert f'{type(color_0).__module__}.{type(color_0).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert color_0.enabled is False
    assert color_0.topology is False
    assert color_0.GREY == ''
    assert color_0.YELLOW == ''
    assert color_0.color_scheme == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    assert module_0.Fore.RED == ''
    assert module_0.Fore.RESET == ''
    assert module_0.Style.BRIGHT == ''
    assert module_0.Style.RESET_ALL == ''
    assert module_0.Color.COLORS_NODE == {0: '\x1b[32m', 1: '\x1b[31m', 2: '\x1b[93m', 3: '\x1b[34m', -1: '\x1b[0m'}
    assert module_0.Color.COLORS_SOCKET == {0: '\x1b[34m', 1: '\x1b[93m', 2: '\x1b[31m', 3: '\x1b[32m', -1: '\x1b[0m'}
    assert module_0.Color.COLOR_NONE == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    color_0.colorize_cpu(color_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    color_0 = module_0.Color(bool_0, bool_0)
    assert f'{type(color_0).__module__}.{type(color_0).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert color_0.enabled is False
    assert color_0.topology is False
    assert color_0.GREY == ''
    assert color_0.YELLOW == ''
    assert color_0.color_scheme == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    assert module_0.Fore.RED == ''
    assert module_0.Fore.RESET == ''
    assert module_0.Style.BRIGHT == ''
    assert module_0.Style.RESET_ALL == ''
    assert module_0.Color.COLORS_NODE == {0: '\x1b[32m', 1: '\x1b[31m', 2: '\x1b[93m', 3: '\x1b[34m', -1: '\x1b[0m'}
    assert module_0.Color.COLORS_SOCKET == {0: '\x1b[34m', 1: '\x1b[93m', 2: '\x1b[31m', 3: '\x1b[32m', -1: '\x1b[0m'}
    assert module_0.Color.COLOR_NONE == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    var_0 = color_0.bright(bool_0)
    assert var_0 == 'False'
    color_0.colorize_cpu(color_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    color_0 = module_0.Color(bool_0, bool_0)
    assert f'{type(color_0).__module__}.{type(color_0).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert color_0.enabled is False
    assert color_0.topology is False
    assert color_0.GREY == ''
    assert color_0.YELLOW == ''
    assert color_0.color_scheme == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    assert module_0.Fore.RED == ''
    assert module_0.Fore.RESET == ''
    assert module_0.Style.BRIGHT == ''
    assert module_0.Style.RESET_ALL == ''
    assert module_0.Color.COLORS_NODE == {0: '\x1b[32m', 1: '\x1b[31m', 2: '\x1b[93m', 3: '\x1b[34m', -1: '\x1b[0m'}
    assert module_0.Color.COLORS_SOCKET == {0: '\x1b[34m', 1: '\x1b[93m', 2: '\x1b[31m', 3: '\x1b[32m', -1: '\x1b[0m'}
    assert module_0.Color.COLOR_NONE == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    var_0 = color_0.wrap_header(bool_0)
    assert var_0 == '# False\n'
    color_0.colorize_cpu(color_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    color_0 = module_0.Color(bool_0, bool_0)
    assert f'{type(color_0).__module__}.{type(color_0).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert color_0.enabled is False
    assert color_0.topology is False
    assert color_0.GREY == ''
    assert color_0.YELLOW == ''
    assert color_0.color_scheme == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    assert module_0.Fore.RED == ''
    assert module_0.Fore.RESET == ''
    assert module_0.Style.BRIGHT == ''
    assert module_0.Style.RESET_ALL == ''
    assert module_0.Color.COLORS_NODE == {0: '\x1b[32m', 1: '\x1b[31m', 2: '\x1b[93m', 3: '\x1b[34m', -1: '\x1b[0m'}
    assert module_0.Color.COLORS_SOCKET == {0: '\x1b[34m', 1: '\x1b[93m', 2: '\x1b[31m', 3: '\x1b[32m', -1: '\x1b[0m'}
    assert module_0.Color.COLOR_NONE == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    list_0 = [color_0, color_0, color_0, bool_0, bool_0]
    color_0.colorize_cpu_list(list_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    color_0 = module_0.Color(dict_0, dict_0)
    assert f'{type(color_0).__module__}.{type(color_0).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert color_0.enabled == {}
    assert color_0.topology == {}
    assert color_0.GREY == ''
    assert color_0.YELLOW == ''
    assert color_0.color_scheme == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    assert module_0.Fore.RED == ''
    assert module_0.Fore.RESET == ''
    assert module_0.Style.BRIGHT == ''
    assert module_0.Style.RESET_ALL == ''
    assert module_0.Color.COLORS_NODE == {0: '\x1b[32m', 1: '\x1b[31m', 2: '\x1b[93m', 3: '\x1b[34m', -1: '\x1b[0m'}
    assert module_0.Color.COLORS_SOCKET == {0: '\x1b[34m', 1: '\x1b[93m', 2: '\x1b[31m', 3: '\x1b[32m', -1: '\x1b[0m'}
    assert module_0.Color.COLOR_NONE == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    var_0 = color_0.colorize_cpu_list(dict_0)
    color_0.colorize_cpu(color_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    color_0 = module_0.Color(bool_0, bool_0)
    assert f'{type(color_0).__module__}.{type(color_0).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert color_0.enabled is False
    assert color_0.topology is False
    assert color_0.GREY == ''
    assert color_0.YELLOW == ''
    assert color_0.color_scheme == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    assert module_0.Fore.RED == ''
    assert module_0.Fore.RESET == ''
    assert module_0.Style.BRIGHT == ''
    assert module_0.Style.RESET_ALL == ''
    assert module_0.Color.COLORS_NODE == {0: '\x1b[32m', 1: '\x1b[31m', 2: '\x1b[93m', 3: '\x1b[34m', -1: '\x1b[0m'}
    assert module_0.Color.COLORS_SOCKET == {0: '\x1b[34m', 1: '\x1b[93m', 2: '\x1b[31m', 3: '\x1b[32m', -1: '\x1b[0m'}
    assert module_0.Color.COLOR_NONE == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    float_0 = -1075.549
    var_0 = color_0.colorize(float_0, bool_0, bool_0)
    assert var_0 == '-1075.549'
    module_0.Color(float_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    color_0 = module_0.Color(bool_0, bool_0)
    assert f'{type(color_0).__module__}.{type(color_0).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert color_0.enabled is False
    assert color_0.topology is False
    assert color_0.GREY == ''
    assert color_0.YELLOW == ''
    assert color_0.color_scheme == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    assert module_0.Fore.RED == ''
    assert module_0.Fore.RESET == ''
    assert module_0.Style.BRIGHT == ''
    assert module_0.Style.RESET_ALL == ''
    assert module_0.Color.COLORS_NODE == {0: '\x1b[32m', 1: '\x1b[31m', 2: '\x1b[93m', 3: '\x1b[34m', -1: '\x1b[0m'}
    assert module_0.Color.COLORS_SOCKET == {0: '\x1b[34m', 1: '\x1b[93m', 2: '\x1b[31m', 3: '\x1b[32m', -1: '\x1b[0m'}
    assert module_0.Color.COLOR_NONE == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    bool_1 = True
    var_0 = color_0.colorize(bool_0, bool_0, bool_1)
    assert var_0 == '\x1b[93mFalse'
    module_0.Color(bool_1)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = ''
    color_0 = module_0.Color(str_0, str_0)
    assert f'{type(color_0).__module__}.{type(color_0).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert color_0.enabled == ''
    assert color_0.topology == ''
    assert color_0.GREY == ''
    assert color_0.YELLOW == ''
    assert color_0.color_scheme == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    assert module_0.Fore.RED == ''
    assert module_0.Fore.RESET == ''
    assert module_0.Style.BRIGHT == ''
    assert module_0.Style.RESET_ALL == ''
    assert module_0.Color.COLORS_NODE == {0: '\x1b[32m', 1: '\x1b[31m', 2: '\x1b[93m', 3: '\x1b[34m', -1: '\x1b[0m'}
    assert module_0.Color.COLORS_SOCKET == {0: '\x1b[34m', 1: '\x1b[93m', 2: '\x1b[31m', 3: '\x1b[32m', -1: '\x1b[0m'}
    assert module_0.Color.COLOR_NONE == {-1: '', 0: '', 1: '', 2: '', 3: ''}
    color_0.colorize_cpu(str_0)