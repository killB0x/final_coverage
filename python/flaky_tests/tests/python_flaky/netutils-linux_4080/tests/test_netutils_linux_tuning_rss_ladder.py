# Automatically generated by Pynguin.
import pytest
import netutils_linux_tuning.rss_ladder as module_0
import re as module_1

def test_case_0():
    module_0.RSSLadder()
    assert f'{type(r_s_s_ladder_0).__module__}.{type(r_s_s_ladder_0).__qualname__}' == 'netutils_linux_tuning.rss_ladder.RSSLadder'
    assert f'{type(r_s_s_ladder_0.options).__module__}.{type(r_s_s_ladder_0.options).__qualname__}' == 'argparse.Namespace'
    assert f'{type(r_s_s_ladder_0.pci).__module__}.{type(r_s_s_ladder_0.pci).__qualname__}' == 'netutils_linux_monitoring.pci.PCI'
    assert r_s_s_ladder_0.interrupts_file == '/proc/interrupts'
    assert f'{type(r_s_s_ladder_0.topology).__module__}.{type(r_s_s_ladder_0.topology).__qualname__}' == 'netutils_linux_monitoring.topology.Topology'
    assert f'{type(r_s_s_ladder_0.color).__module__}.{type(r_s_s_ladder_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.MAX_QUEUE_PER_DEVICE == 16

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    list_0 = [bool_0]
    module_0.RSSLadder(list_0)
    assert f'{type(r_s_s_ladder_0).__module__}.{type(r_s_s_ladder_0).__qualname__}' == 'netutils_linux_tuning.rss_ladder.RSSLadder'
    assert f'{type(r_s_s_ladder_0.options).__module__}.{type(r_s_s_ladder_0.options).__qualname__}' == 'argparse.Namespace'
    assert f'{type(r_s_s_ladder_0.pci).__module__}.{type(r_s_s_ladder_0.pci).__qualname__}' == 'netutils_linux_monitoring.pci.PCI'
    assert r_s_s_ladder_0.interrupts_file == '/proc/interrupts'
    assert f'{type(r_s_s_ladder_0.topology).__module__}.{type(r_s_s_ladder_0.topology).__qualname__}' == 'netutils_linux_monitoring.topology.Topology'
    assert f'{type(r_s_s_ladder_0.color).__module__}.{type(r_s_s_ladder_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.MAX_QUEUE_PER_DEVICE == 16
    var_0 = r_s_s_ladder_0.parse()
    var_1 = module_1.search(var_0, bool_0, var_0)

def test_case_2():
    module_0.RSSLadder()
    assert f'{type(r_s_s_ladder_0).__module__}.{type(r_s_s_ladder_0).__qualname__}' == 'netutils_linux_tuning.rss_ladder.RSSLadder'
    assert f'{type(r_s_s_ladder_0.options).__module__}.{type(r_s_s_ladder_0.options).__qualname__}' == 'argparse.Namespace'
    assert f'{type(r_s_s_ladder_0.pci).__module__}.{type(r_s_s_ladder_0.pci).__qualname__}' == 'netutils_linux_monitoring.pci.PCI'
    assert r_s_s_ladder_0.interrupts_file == '/proc/interrupts'
    assert f'{type(r_s_s_ladder_0.topology).__module__}.{type(r_s_s_ladder_0.topology).__qualname__}' == 'netutils_linux_monitoring.topology.Topology'
    assert f'{type(r_s_s_ladder_0.color).__module__}.{type(r_s_s_ladder_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.MAX_QUEUE_PER_DEVICE == 16

@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.RSSLadder()
    assert f'{type(r_s_s_ladder_0).__module__}.{type(r_s_s_ladder_0).__qualname__}' == 'netutils_linux_tuning.rss_ladder.RSSLadder'
    assert f'{type(r_s_s_ladder_0.options).__module__}.{type(r_s_s_ladder_0.options).__qualname__}' == 'argparse.Namespace'
    assert f'{type(r_s_s_ladder_0.pci).__module__}.{type(r_s_s_ladder_0.pci).__qualname__}' == 'netutils_linux_monitoring.pci.PCI'
    assert r_s_s_ladder_0.interrupts_file == '/proc/interrupts'
    assert f'{type(r_s_s_ladder_0.topology).__module__}.{type(r_s_s_ladder_0.topology).__qualname__}' == 'netutils_linux_monitoring.topology.Topology'
    assert f'{type(r_s_s_ladder_0.color).__module__}.{type(r_s_s_ladder_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.MAX_QUEUE_PER_DEVICE == 16
    var_0 = r_s_s_ladder_0.dev_colorize()
    assert var_0 == '\x1b[0mFalse'
    var_1 = r_s_s_ladder_0.rss_cpus_detect()
    var_2 = r_s_s_ladder_0.apply(var_0)

def test_case_4():
    module_0.RSSLadder()
    assert f'{type(r_s_s_ladder_0).__module__}.{type(r_s_s_ladder_0).__qualname__}' == 'netutils_linux_tuning.rss_ladder.RSSLadder'
    assert f'{type(r_s_s_ladder_0.options).__module__}.{type(r_s_s_ladder_0.options).__qualname__}' == 'argparse.Namespace'
    assert f'{type(r_s_s_ladder_0.pci).__module__}.{type(r_s_s_ladder_0.pci).__qualname__}' == 'netutils_linux_monitoring.pci.PCI'
    assert r_s_s_ladder_0.interrupts_file == '/proc/interrupts'
    assert f'{type(r_s_s_ladder_0.topology).__module__}.{type(r_s_s_ladder_0.topology).__qualname__}' == 'netutils_linux_monitoring.topology.Topology'
    assert f'{type(r_s_s_ladder_0.color).__module__}.{type(r_s_s_ladder_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.MAX_QUEUE_PER_DEVICE == 16
    var_0 = r_s_s_ladder_0.dev_colorize()
    assert var_0 == '\x1b[0mFalse'

def test_case_5():
    module_0.RSSLadder()
    assert f'{type(r_s_s_ladder_0).__module__}.{type(r_s_s_ladder_0).__qualname__}' == 'netutils_linux_tuning.rss_ladder.RSSLadder'
    assert f'{type(r_s_s_ladder_0.options).__module__}.{type(r_s_s_ladder_0.options).__qualname__}' == 'argparse.Namespace'
    assert f'{type(r_s_s_ladder_0.pci).__module__}.{type(r_s_s_ladder_0.pci).__qualname__}' == 'netutils_linux_monitoring.pci.PCI'
    assert r_s_s_ladder_0.interrupts_file == '/proc/interrupts'
    assert f'{type(r_s_s_ladder_0.topology).__module__}.{type(r_s_s_ladder_0.topology).__qualname__}' == 'netutils_linux_monitoring.topology.Topology'
    assert f'{type(r_s_s_ladder_0.color).__module__}.{type(r_s_s_ladder_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.MAX_QUEUE_PER_DEVICE == 16
    var_0 = r_s_s_ladder_0.rss_cpus_detect()

def test_case_6():
    module_0.RSSLadder()
    assert f'{type(r_s_s_ladder_0).__module__}.{type(r_s_s_ladder_0).__qualname__}' == 'netutils_linux_tuning.rss_ladder.RSSLadder'
    assert f'{type(r_s_s_ladder_0.options).__module__}.{type(r_s_s_ladder_0.options).__qualname__}' == 'argparse.Namespace'
    assert f'{type(r_s_s_ladder_0.pci).__module__}.{type(r_s_s_ladder_0.pci).__qualname__}' == 'netutils_linux_monitoring.pci.PCI'
    assert r_s_s_ladder_0.interrupts_file == '/proc/interrupts'
    assert f'{type(r_s_s_ladder_0.topology).__module__}.{type(r_s_s_ladder_0.topology).__qualname__}' == 'netutils_linux_monitoring.topology.Topology'
    assert f'{type(r_s_s_ladder_0.color).__module__}.{type(r_s_s_ladder_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.MAX_QUEUE_PER_DEVICE == 16
    var_0 = r_s_s_ladder_0.cpu_colorize(r_s_s_ladder_0)

def test_case_7():
    module_0.RSSLadder()
    assert f'{type(r_s_s_ladder_0).__module__}.{type(r_s_s_ladder_0).__qualname__}' == 'netutils_linux_tuning.rss_ladder.RSSLadder'
    assert f'{type(r_s_s_ladder_0.options).__module__}.{type(r_s_s_ladder_0.options).__qualname__}' == 'argparse.Namespace'
    assert f'{type(r_s_s_ladder_0.pci).__module__}.{type(r_s_s_ladder_0.pci).__qualname__}' == 'netutils_linux_monitoring.pci.PCI'
    assert r_s_s_ladder_0.interrupts_file == '/proc/interrupts'
    assert f'{type(r_s_s_ladder_0.topology).__module__}.{type(r_s_s_ladder_0.topology).__qualname__}' == 'netutils_linux_monitoring.topology.Topology'
    assert f'{type(r_s_s_ladder_0.color).__module__}.{type(r_s_s_ladder_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.MAX_QUEUE_PER_DEVICE == 16
    var_0 = r_s_s_ladder_0.queue_name_regex(r_s_s_ladder_0)
    var_1 = r_s_s_ladder_0.parse()
    var_2 = r_s_s_ladder_0.queue_suffix_extract(var_0)
    assert var_2 == ''

@pytest.mark.xfail(strict=True)
def test_case_8():
    module_0.RSSLadder()
    assert f'{type(r_s_s_ladder_0).__module__}.{type(r_s_s_ladder_0).__qualname__}' == 'netutils_linux_tuning.rss_ladder.RSSLadder'
    assert f'{type(r_s_s_ladder_0.options).__module__}.{type(r_s_s_ladder_0.options).__qualname__}' == 'argparse.Namespace'
    assert f'{type(r_s_s_ladder_0.pci).__module__}.{type(r_s_s_ladder_0.pci).__qualname__}' == 'netutils_linux_monitoring.pci.PCI'
    assert r_s_s_ladder_0.interrupts_file == '/proc/interrupts'
    assert f'{type(r_s_s_ladder_0.topology).__module__}.{type(r_s_s_ladder_0.topology).__qualname__}' == 'netutils_linux_monitoring.topology.Topology'
    assert f'{type(r_s_s_ladder_0.color).__module__}.{type(r_s_s_ladder_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.MAX_QUEUE_PER_DEVICE == 16
    var_0 = r_s_s_ladder_0.cpu_colorize(r_s_s_ladder_0)
    var_1 = r_s_s_ladder_0.dev_colorize()
    assert var_1 == '\x1b[0mFalse'
    var_2 = r_s_s_ladder_0.queue_suffix_extract(var_0)
    var_3 = r_s_s_ladder_0.eval()
    var_4 = r_s_s_ladder_0.cpu_colorize(var_3)
    var_5 = r_s_s_ladder_0.apply(var_1)

@pytest.mark.xfail(strict=True)
def test_case_9():
    module_0.RSSLadder()
    assert f'{type(r_s_s_ladder_0).__module__}.{type(r_s_s_ladder_0).__qualname__}' == 'netutils_linux_tuning.rss_ladder.RSSLadder'
    assert f'{type(r_s_s_ladder_0.options).__module__}.{type(r_s_s_ladder_0.options).__qualname__}' == 'argparse.Namespace'
    assert f'{type(r_s_s_ladder_0.pci).__module__}.{type(r_s_s_ladder_0.pci).__qualname__}' == 'netutils_linux_monitoring.pci.PCI'
    assert r_s_s_ladder_0.interrupts_file == '/proc/interrupts'
    assert f'{type(r_s_s_ladder_0.topology).__module__}.{type(r_s_s_ladder_0.topology).__qualname__}' == 'netutils_linux_monitoring.topology.Topology'
    assert f'{type(r_s_s_ladder_0.color).__module__}.{type(r_s_s_ladder_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.MAX_QUEUE_PER_DEVICE == 16
    var_0 = r_s_s_ladder_0.queue_name_regex(r_s_s_ladder_0)
    var_1 = r_s_s_ladder_0.queue_postfix_extract(var_0)
    assert var_1 == '<netutils_linux_tuning.rss_ladder.RSSLadder'
    var_2 = r_s_s_ladder_0.queue_suffix_extract(var_1)
    var_3 = module_1.subn(var_1, var_1, var_0, var_2)

def test_case_10():
    module_0.RSSLadder()
    assert f'{type(r_s_s_ladder_0).__module__}.{type(r_s_s_ladder_0).__qualname__}' == 'netutils_linux_tuning.rss_ladder.RSSLadder'
    assert f'{type(r_s_s_ladder_0.options).__module__}.{type(r_s_s_ladder_0.options).__qualname__}' == 'argparse.Namespace'
    assert f'{type(r_s_s_ladder_0.pci).__module__}.{type(r_s_s_ladder_0.pci).__qualname__}' == 'netutils_linux_monitoring.pci.PCI'
    assert r_s_s_ladder_0.interrupts_file == '/proc/interrupts'
    assert f'{type(r_s_s_ladder_0.topology).__module__}.{type(r_s_s_ladder_0.topology).__qualname__}' == 'netutils_linux_monitoring.topology.Topology'
    assert f'{type(r_s_s_ladder_0.color).__module__}.{type(r_s_s_ladder_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.MAX_QUEUE_PER_DEVICE == 16

@pytest.mark.xfail(strict=True)
def test_case_11():
    module_0.RSSLadder()
    assert f'{type(r_s_s_ladder_0).__module__}.{type(r_s_s_ladder_0).__qualname__}' == 'netutils_linux_tuning.rss_ladder.RSSLadder'
    assert f'{type(r_s_s_ladder_0.options).__module__}.{type(r_s_s_ladder_0.options).__qualname__}' == 'argparse.Namespace'
    assert f'{type(r_s_s_ladder_0.pci).__module__}.{type(r_s_s_ladder_0.pci).__qualname__}' == 'netutils_linux_monitoring.pci.PCI'
    assert r_s_s_ladder_0.interrupts_file == '/proc/interrupts'
    assert f'{type(r_s_s_ladder_0.topology).__module__}.{type(r_s_s_ladder_0.topology).__qualname__}' == 'netutils_linux_monitoring.topology.Topology'
    assert f'{type(r_s_s_ladder_0.color).__module__}.{type(r_s_s_ladder_0.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    assert module_0.MAX_QUEUE_PER_DEVICE == 16
    var_0 = r_s_s_ladder_0.queue_name_regex(r_s_s_ladder_0)
    var_1 = r_s_s_ladder_0.queue_suffix_extract(var_0)
    assert var_1 == ''
    r_s_s_ladder_1 = module_0.RSSLadder()
    assert f'{type(r_s_s_ladder_1.topology).__module__}.{type(r_s_s_ladder_1.topology).__qualname__}' == 'netutils_linux_monitoring.topology.Topology'
    assert f'{type(r_s_s_ladder_1.color).__module__}.{type(r_s_s_ladder_1.color).__qualname__}' == 'netutils_linux_monitoring.colors.Color'
    var_2 = r_s_s_ladder_0.apply(var_1)
    var_3 = var_1.queue_name_regex(var_2)