# Automatically generated by Pynguin.
import pytest
import netutils_linux_monitoring.layout as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = " There's no need to fill mask with zeroes, kernel does it automatically.\n\n        :param cpus: which cpus to use in mask calculation (e.g. [4,5,6,7])\n        :param cpus_count: how many cpus in this system (e.g. 8)\n        :return: cpu_mask to apply\n        "
    list_0 = [str_0]
    module_0.make_table(list_0, str_0, list_0)

def test_case_1():
    bytes_0 = b'\xad\xd5A\x93\xd2\xfe\xc0\xd0\xf9\xdbO'
    var_0 = module_0.make_table(bytes_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'prettytable.prettytable.PrettyTable'
    assert var_0.encoding == 'UTF-8'

@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 2398
    module_0.make_table(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'VPLF@GnMMW%i11'
    set_0 = {str_0, str_0}
    module_0.make_table(set_0, rows=set_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'f%M{X'
    var_0 = module_0.make_table(str_0, rows=str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'prettytable.prettytable.PrettyTable'
    assert var_0.encoding == 'UTF-8'
    set_0 = {str_0, str_0, str_0}
    module_0.make_table(set_0, rows=set_0)