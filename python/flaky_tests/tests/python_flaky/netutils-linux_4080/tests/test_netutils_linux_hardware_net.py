# Automatically generated by Pynguin.
import pytest
import netutils_linux_hardware.net as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'llz'
    ethtool_files_0 = module_0.EthtoolFiles(str_0)
    var_0 = ethtool_files_0.parse(str_0)
    module_0.ReductorMirror(ethtool_files_0)

def test_case_1():
    ethtool_files_0 = module_0.EthtoolFiles()

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '\rt^R&?Jyp.-jucJ'
    bridge_output_0 = module_0.BridgeOutput()
    bridge_output_0.parse(str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '\rtx^R?Jy\r.-juwxcJ'
    net_0 = module_0.Net(str_0, datadir=str_0)
    net_0.parse()

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 201
    module_0.ReaderNet(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    net_0 = module_0.Net()
    none_type_0 = None
    str_0 = 'mlx4_en'
    dict_0 = {str_0: net_0}
    ethtool_files_0 = module_0.EthtoolFiles()
    ethtool_files_0.parse_file(none_type_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    net_0 = module_0.Net()
    net_0.rate()

def test_case_7():
    str_0 = '\rtx^ ?Jy\r.juw'
    reductor_mirror_0 = module_0.ReductorMirror()
    var_0 = reductor_mirror_0.parse(str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    netdev_parser_0 = module_0.NetdevParser()
    str_0 = '4xt&.W'
    var_0 = netdev_parser_0.parse(str_0)
    ethtool_files_0 = module_0.EthtoolFiles(str_0)
    var_0.parse_file(var_0, **var_0)

def test_case_9():
    str_0 = '\rtx^R?Jy\r.-juwxcJ'
    ethtool_buffers_0 = module_0.EthtoolBuffers()
    var_0 = ethtool_buffers_0.parse(str_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    netdev_parser_0 = module_0.NetdevParser()
    str_0 = '\rtx^VR?Jy\r.-juwxcJ'
    ethtool_buffers_0 = module_0.EthtoolBuffers()
    bridge_output_0 = module_0.BridgeOutput()
    var_0 = bridge_output_0.parse(str_0)
    var_1 = ethtool_buffers_0.parse(str_0)
    net_0 = module_0.Net(ethtool_buffers_0, datadir=str_0)
    net_0.parse()

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'RX:'
    ethtool_buffers_0 = module_0.EthtoolBuffers()
    ethtool_buffers_0.parse(str_0)