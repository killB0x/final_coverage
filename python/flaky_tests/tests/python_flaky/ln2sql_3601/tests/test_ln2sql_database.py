# Automatically generated by Pynguin.
import pytest
import ln2sql.database as module_0
import re as module_1
import enum as module_2

def test_case_0():
    database_0 = module_0.Database()
    var_0 = database_0.get_column_with_this_name(database_0)

def test_case_1():
    database_0 = module_0.Database()
    var_0 = database_0.get_table_by_name(database_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    database_0 = module_0.Database()
    var_0 = database_0.get_primary_keys_by_table()
    var_1 = database_0.get_primary_keys_of_table(var_0)
    var_0.get_column_with_this_name(var_0)

def test_case_3():
    str_0 = 'A5%~9\x0c[8L>_Vh[m*Dg;}'
    database_0 = module_0.Database()
    var_0 = database_0.get_foreign_keys_by_table()
    var_1 = database_0.get_primary_key_names_of_table(var_0)
    var_2 = database_0.create_table(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'ln2sql.table.Table'
    assert var_2.columns == []
    assert var_2.equivalences == []

def test_case_4():
    database_0 = module_0.Database()
    var_0 = database_0.get_foreign_key_names_of_table(database_0)

def test_case_5():
    database_0 = module_0.Database()
    var_0 = database_0.print_me()
    var_1 = database_0.get_column_with_this_name(database_0)

def test_case_6():
    database_0 = module_0.Database()

@pytest.mark.xfail(strict=True)
def test_case_7():
    database_0 = module_0.Database()
    var_0 = database_0.print_me()
    str_0 = '-S=&MlC bTM=%,jim1.'
    var_1 = database_0.predict_type(str_0)
    assert var_1 == 'unknow'
    var_2 = database_0.create_table(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'ln2sql.table.Table'
    assert var_2.columns == []
    assert var_2.equivalences == []
    var_3 = var_2.add_column(var_2, str_0, var_2)
    var_4 = database_0.add_table(var_2)
    var_5 = database_0.get_primary_keys_of_table(str_0)
    var_6 = database_0.alter_table(str_0)
    var_7 = database_0.set_thesaurus(var_6)
    database_0.print_me()

@pytest.mark.xfail(strict=True)
def test_case_8():
    database_0 = module_0.Database()
    var_0 = database_0.add_table(database_0)
    database_0.get_column_with_this_name(database_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    database_0 = module_0.Database()
    var_0 = database_0.get_primary_keys_by_table()
    var_1 = database_0.add_table(database_0)
    database_0.load(database_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    database_0 = module_0.Database()
    str_0 = '#C7TjP\t|G{yB^7".'
    var_0 = database_0.predict_type(str_0)
    assert var_0 == 'unknow'
    var_1 = database_0.create_table(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'ln2sql.table.Table'
    assert var_1.columns == []
    assert var_1.equivalences == []
    var_2 = database_0.add_table(var_1)
    var_3 = database_0.get_table_by_name(database_0)
    var_4 = database_0.get_table_by_name(var_0)
    var_5 = database_0.get_primary_keys_by_table()
    var_6 = database_0.alter_table(str_0)
    var_7 = var_2.__dir__()
    var_2.get_column_with_this_name(var_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    database_0 = module_0.Database()
    var_0 = database_0.get_number_of_tables()
    var_1 = database_0.get_primary_keys_of_table(database_0)
    var_2 = database_0.get_table_by_name(database_0)
    var_3 = database_0.print_me()
    var_3.get_column_with_this_name(var_2)

@pytest.mark.xfail(strict=True)
def test_case_12():
    database_0 = module_0.Database()
    var_0 = database_0.get_primary_key_names_of_table(database_0)
    database_0.predict_type(var_0)

def test_case_13():
    database_0 = module_0.Database()
    var_0 = database_0.get_tables_into_dictionary()

@pytest.mark.xfail(strict=True)
def test_case_14():
    database_0 = module_0.Database()
    var_0 = database_0.get_foreign_keys_by_table()
    str_0 = '-S=&MlC bTM=%,jim1.'
    var_1 = database_0.predict_type(str_0)
    assert var_1 == 'unknow'
    var_2 = database_0.create_table(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'ln2sql.table.Table'
    assert var_2.columns == []
    assert var_2.equivalences == []
    var_3 = var_2.add_column(var_2, str_0, var_2)
    var_4 = database_0.add_table(var_2)
    var_5 = database_0.get_foreign_keys_by_table()
    var_6 = database_0.alter_table(str_0)
    var_7 = database_0.get_tables_into_dictionary()
    var_8 = database_0.set_thesaurus(var_6)
    database_0.print_me()

def test_case_15():
    database_0 = module_0.Database()
    var_0 = database_0.get_primary_keys_of_table(database_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    database_0 = module_0.Database()
    var_0 = database_0.print_me()
    var_1 = database_0.get_foreign_keys_of_table(var_0)
    var_0.__getitem__(var_0, var_0)

def test_case_17():
    database_0 = module_0.Database()
    var_0 = database_0.get_table_by_name(database_0)
    var_1 = database_0.get_tables()
    var_2 = database_0.get_column_with_this_name(database_0)

def test_case_18():
    database_0 = module_0.Database()
    var_0 = database_0.print_me()
    var_1 = database_0.get_tables_into_dictionary()
    str_0 = '\t\t"column": "'
    var_2 = database_0.create_table(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'ln2sql.table.Table'
    assert var_2.columns == []
    assert var_2.equivalences == []
    regex_flag_0 = module_1.RegexFlag.ASCII
    var_3 = database_0.add_table(regex_flag_0)
    var_4 = database_0.get_primary_key_names_of_table(var_1)
    var_5 = database_0.get_primary_keys_of_table(str_0)
    var_6 = database_0.get_table_by_name(regex_flag_0)
    var_7 = database_0.get_foreign_key_names_of_table(str_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    database_0 = module_0.Database()
    str_0 = '-S=&Ml bT]M=%,jim1.'
    var_0 = database_0.create_table(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ln2sql.table.Table'
    assert var_0.columns == []
    assert var_0.equivalences == []
    var_1 = var_0.add_column(var_0, str_0, var_0)
    var_2 = database_0.add_table(var_0)
    var_3 = database_0.get_table_by_name(database_0)
    var_4 = database_0.get_foreign_keys_of_table(str_0)
    database_0.print_me()

@pytest.mark.xfail(strict=True)
def test_case_20():
    database_0 = module_0.Database()
    str_0 = '-S=&Ml bT]M=%,jim1.'
    var_0 = database_0.create_table(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ln2sql.table.Table'
    assert var_0.columns == []
    assert var_0.equivalences == []
    var_1 = var_0.add_column(var_0, str_0, var_0)
    var_2 = database_0.add_table(var_0)
    database_0.print_me()

@pytest.mark.xfail(strict=True)
def test_case_21():
    database_0 = module_0.Database()
    str_0 = '-S=&Ml bT]M=%,jim1.'
    var_0 = database_0.create_table(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ln2sql.table.Table'
    assert var_0.columns == []
    assert var_0.equivalences == []
    var_1 = var_0.add_column(var_0, str_0, var_0)
    var_2 = database_0.add_table(var_0)
    var_3 = database_0.get_primary_keys_of_table(str_0)
    var_4 = database_0.alter_table(str_0)
    database_0.print_me()

def test_case_22():
    database_0 = module_0.Database()
    str_0 = 'fupTM32CWcdu?\x0cwG~x'
    var_0 = database_0.create_table(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ln2sql.table.Table'
    assert var_0.columns == []
    assert var_0.equivalences == []
    var_1 = database_0.get_foreign_keys_of_table(database_0)
    var_2 = database_0.add_table(var_0)
    var_3 = database_0.get_primary_key_names_of_table(var_0)
    var_4 = database_0.get_foreign_keys_of_table(str_0)
    var_5 = database_0.get_primary_keys_of_table(var_0)
    var_6 = database_0.alter_table(str_0)
    var_7 = database_0.get_tables_into_dictionary()
    var_8 = database_0.get_column_with_this_name(var_6)

@pytest.mark.xfail(strict=True)
def test_case_23():
    database_0 = module_0.Database()
    str_0 = '-S=&Ml bT]M=%,jim1.'
    var_0 = database_0.create_table(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ln2sql.table.Table'
    assert var_0.columns == []
    assert var_0.equivalences == []
    var_1 = var_0.add_column(var_0, str_0, var_0)
    var_2 = database_0.add_table(var_0)
    var_3 = database_0.get_primary_key_names_of_table(str_0)
    var_4 = database_0.get_primary_keys_of_table(str_0)
    var_5 = database_0.alter_table(str_0)
    database_0.print_me()

def test_case_24():
    str_0 = 'A5%~9\x0c[8L>_Vh[m*Dg;}'
    database_0 = module_0.Database()
    var_0 = database_0.create_table(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ln2sql.table.Table'
    assert var_0.columns == []
    assert var_0.equivalences == []

def test_case_25():
    str_0 = '-S=&Ml bT]M=%,jim1.'
    database_0 = module_0.Database()
    var_0 = database_0.alter_table(str_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    database_0 = module_0.Database()
    str_0 = '#C7TjP\t|G{yB^7".'
    var_0 = database_0.predict_type(str_0)
    assert var_0 == 'unknow'
    var_1 = database_0.create_table(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'ln2sql.table.Table'
    assert var_1.columns == []
    assert var_1.equivalences == []
    var_2 = database_0.add_table(var_1)
    var_3 = database_0.print_me()
    var_1.create_table(var_3)

@pytest.mark.xfail(strict=True)
def test_case_27():
    database_0 = module_0.Database()
    var_0 = database_0.get_tables_into_dictionary()
    str_0 = ''
    var_1 = database_0.create_table(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'ln2sql.table.Table'
    assert var_1.columns == []
    assert var_1.equivalences == []
    var_2 = database_0.get_column_with_this_name(str_0)
    var_3 = var_1.get_equivalences()
    var_4 = database_0.add_table(var_1)
    var_5 = database_0.get_primary_key_names_of_table(str_0)
    var_6 = database_0.get_foreign_keys_of_table(str_0)
    var_7 = database_0.get_primary_keys_of_table(var_6)
    var_8 = database_0.get_table_by_name(var_0)
    var_9 = database_0.get_foreign_key_names_of_table(database_0)
    var_10 = database_0.print_me()
    module_2.unique(var_6)

@pytest.mark.xfail(strict=True)
def test_case_28():
    database_0 = module_0.Database()
    str_0 = '-S=&Ml bT]M=%,jim1.'
    var_0 = database_0.create_table(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ln2sql.table.Table'
    assert var_0.columns == []
    assert var_0.equivalences == []
    var_1 = database_0.add_table(var_0)
    var_2 = database_0.get_table_by_name(database_0)
    var_3 = database_0.get_primary_key_names_of_table(str_0)
    var_4 = database_0.get_primary_keys_of_table(str_0)
    var_5 = database_0.alter_table(str_0)
    var_6 = database_0.print_me()
    var_7 = database_0.get_column_with_this_name(var_5)
    var_2.predict_type(var_6)

@pytest.mark.xfail(strict=True)
def test_case_29():
    database_0 = module_0.Database()
    str_0 = ''
    var_0 = database_0.create_table(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ln2sql.table.Table'
    assert var_0.columns == []
    assert var_0.equivalences == []
    var_1 = database_0.add_table(var_0)
    var_2 = database_0.get_primary_key_names_of_table(str_0)
    var_3 = database_0.get_foreign_keys_of_table(str_0)
    var_4 = database_0.get_table_by_name(var_0)
    var_5 = database_0.get_primary_keys_of_table(str_0)
    var_6 = database_0.alter_table(str_0)
    var_7 = database_0.print_me()
    var_8 = database_0.get_tables_into_dictionary()
    var_3.get_foreign_keys()

def test_case_30():
    str_0 = 'N.k,53;2N\t?D<]@\\}S2\n'
    database_0 = module_0.Database()
    var_0 = database_0.predict_type(str_0)
    assert var_0 == 'unknow'

@pytest.mark.xfail(strict=True)
def test_case_31():
    database_0 = module_0.Database()
    str_0 = '-S=&Ml bT]M=%,jim1.'
    var_0 = database_0.predict_type(str_0)
    assert var_0 == 'unknow'
    var_1 = database_0.create_table(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'ln2sql.table.Table'
    assert var_1.columns == []
    assert var_1.equivalences == []
    var_2 = var_1.add_column(var_1, str_0, var_1)
    var_3 = database_0.add_table(var_1)
    var_4 = database_0.get_primary_key_names_of_table(str_0)
    var_5 = database_0.get_foreign_keys_of_table(str_0)
    var_6 = database_0.alter_table(str_0)
    var_7 = database_0.get_tables_into_dictionary()
    database_0.print_me()

@pytest.mark.xfail(strict=True)
def test_case_32():
    database_0 = module_0.Database()
    var_0 = database_0.print_me()
    str_0 = '-S=&MlC bTM=%,im1.'
    var_1 = database_0.predict_type(str_0)
    assert var_1 == 'unknow'
    var_2 = database_0.create_table(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'ln2sql.table.Table'
    assert var_2.columns == []
    assert var_2.equivalences == []
    var_3 = var_2.add_column(var_2, str_0, var_2)
    var_4 = database_0.add_table(var_2)
    var_5 = database_0.get_primary_keys_of_table(str_0)
    var_6 = database_0.get_foreign_keys_by_table()
    var_7 = database_0.alter_table(str_0)
    var_8 = database_0.get_tables_into_dictionary()
    var_9 = database_0.get_column_with_this_name(database_0)
    database_0.print_me()

@pytest.mark.xfail(strict=True)
def test_case_33():
    database_0 = module_0.Database()
    str_0 = ''
    var_0 = database_0.predict_type(str_0)
    assert var_0 == 'unknow'
    var_1 = database_0.create_table(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'ln2sql.table.Table'
    assert var_1.columns == []
    assert var_1.equivalences == []
    var_2 = database_0.print_me()
    var_3 = database_0.add_table(var_1)
    var_4 = database_0.get_foreign_key_names_of_table(str_0)
    var_5 = database_0.get_table_by_name(database_0)
    var_6 = database_0.get_primary_key_names_of_table(str_0)
    var_7 = database_0.get_foreign_keys_of_table(str_0)
    var_8 = database_0.get_primary_keys_of_table(str_0)
    var_9 = database_0.alter_table(str_0)
    var_10 = var_1.__dir__()
    var_11 = database_0.get_tables_into_dictionary()
    var_12 = database_0.get_column_with_this_name(var_9)
    var_13 = var_1.get_number_of_columns()
    var_5.get_tables()

@pytest.mark.xfail(strict=True)
def test_case_34():
    database_0 = module_0.Database()
    var_0 = database_0.get_tables()
    var_1 = database_0.print_me()
    str_0 = '-S=&Ml bT]M=%,jim1.'
    var_2 = database_0.create_table(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'ln2sql.table.Table'
    assert var_2.columns == []
    assert var_2.equivalences == []
    var_3 = var_2.add_column(var_2, str_0, var_2)
    var_4 = database_0.add_table(var_2)
    var_5 = database_0.get_table_by_name(database_0)
    var_6 = database_0.get_primary_key_names_of_table(str_0)
    var_7 = database_0.get_foreign_keys_of_table(str_0)
    var_8 = database_0.get_primary_keys_of_table(str_0)
    none_type_0 = None
    var_9 = database_0.get_tables_into_dictionary()
    var_10 = database_0.get_column_with_this_name(var_2)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'ln2sql.column.Column'
    assert var_10.primary is False
    assert var_10.foreign is False
    var_11 = database_0.get_foreign_key_names_of_table(none_type_0)
    module_1.Match()

def test_case_35():
    database_0 = module_0.Database()
    str_0 = 'PRIMARY KEY \\(`(\\w+)`\\)'
    var_0 = database_0.create_table(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ln2sql.table.Table'
    assert var_0.columns == []
    assert var_0.equivalences == []

@pytest.mark.xfail(strict=True)
def test_case_36():
    database_0 = module_0.Database()
    var_0 = database_0.print_me()
    var_1 = database_0.get_tables_into_dictionary()
    str_0 = ''
    var_2 = database_0.create_table(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'ln2sql.table.Table'
    assert var_2.columns == []
    assert var_2.equivalences == []
    var_3 = database_0.get_column_with_this_name(var_0)
    var_4 = database_0.add_table(var_2)
    var_5 = var_2.add_primary_key(var_1)
    var_6 = database_0.get_primary_keys_of_table(var_5)
    var_7 = database_0.get_table_by_name(str_0)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'ln2sql.table.Table'
    assert var_7.columns == []
    assert var_7.equivalences == []
    database_1 = module_0.Database()
    var_8 = database_1.get_primary_keys_by_table()
    var_5.__repr__(var_7)

@pytest.mark.xfail(strict=True)
def test_case_37():
    database_0 = module_0.Database()
    var_0 = database_0.print_me()
    str_0 = 'date'
    var_1 = database_0.predict_type(str_0)
    assert var_1 == 'date'
    var_2 = database_0.create_table(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'ln2sql.table.Table'
    assert var_2.columns == []
    assert var_2.equivalences == []
    var_0.add_column(var_2, var_1, database_0)

@pytest.mark.xfail(strict=True)
def test_case_38():
    database_0 = module_0.Database()
    str_0 = 'PRIMARY KEY \\(`(\\w+)`\\)'
    database_0.alter_table(str_0)

@pytest.mark.xfail(strict=True)
def test_case_39():
    database_0 = module_0.Database()
    str_0 = '-S=&Ml bT]M=%,jim1.'
    var_0 = database_0.create_table(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ln2sql.table.Table'
    assert var_0.columns == []
    assert var_0.equivalences == []
    var_1 = var_0.add_column(var_0, str_0, var_0)
    var_2 = database_0.add_table(var_0)
    var_3 = database_0.get_foreign_keys_of_table(str_0)
    var_4 = var_0.add_primary_key(var_0)
    var_5 = database_0.get_primary_keys_of_table(str_0)
    var_6 = database_0.alter_table(str_0)
    database_0.print_me()

@pytest.mark.xfail(strict=True)
def test_case_40():
    database_0 = module_0.Database()
    str_0 = 'JCyQ4#3_D@\x0c`d9wrR`-'
    var_0 = database_0.predict_type(str_0)
    assert var_0 == 'unknow'
    var_1 = database_0.create_table(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'ln2sql.table.Table'
    assert f'{type(var_1.columns).__module__}.{type(var_1.columns).__qualname__}' == 'builtins.list'
    assert len(var_1.columns) == 1
    assert var_1.equivalences == []
    var_2 = var_1.add_column(var_1, str_0, var_1)
    assert len(var_1.columns) == 2
    var_3 = database_0.get_primary_key_names_of_table(str_0)
    var_4 = database_0.get_foreign_keys_of_table(str_0)
    var_5 = database_0.get_primary_keys_of_table(str_0)
    var_3.get_foreign_keys()