# Automatically generated by Pynguin.
import pytest
import ln2sql.parser as module_0
import re as module_1
import string as module_2
import collections as module_3
import enum as module_4

def test_case_0():
    dict_0 = {}
    group_by_parser_0 = module_0.GroupByParser(dict_0, dict_0, dict_0, dict_0)
    assert f'{type(group_by_parser_0).__module__}.{type(group_by_parser_0).__qualname__}' == 'ln2sql.parser.GroupByParser'
    assert group_by_parser_0.group_by_objects == []
    assert group_by_parser_0.phrases == {}
    assert group_by_parser_0.tables_of_from == {}
    assert group_by_parser_0.database_dico == {}
    assert group_by_parser_0.database_object == {}

def test_case_1():
    bool_0 = True
    select_parser_0 = module_0.SelectParser(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert select_parser_0.columns_of_select is True
    assert select_parser_0.tables_of_from is True
    assert select_parser_0.phrase is True
    assert select_parser_0.count_keywords is True
    assert select_parser_0.sum_keywords is True
    assert select_parser_0.average_keywords is True
    assert select_parser_0.max_keywords is True
    assert select_parser_0.min_keywords is True
    assert select_parser_0.distinct_keywords is True
    assert select_parser_0.database_dico is True
    assert select_parser_0.database_object is True

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'\xe8}\xdczn\xb0t\xed'
    module_0.FromParser(bytes_0, bytes_0, bytes_0, bytes_0)

def test_case_3():
    str_0 = '-X8";^H/-.y`'
    where_parser_0 = module_0.WhereParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == '-X8";^H/-.y`'
    assert where_parser_0.tables_of_from == '-X8";^H/-.y`'
    assert where_parser_0.columns_of_values_of_where == '-X8";^H/-.y`'
    assert where_parser_0.count_keywords == '-X8";^H/-.y`'
    assert where_parser_0.sum_keywords == '-X8";^H/-.y`'
    assert where_parser_0.average_keywords == '-X8";^H/-.y`'
    assert where_parser_0.max_keywords == '-X8";^H/-.y`'
    assert where_parser_0.min_keywords == '-X8";^H/-.y`'
    assert where_parser_0.greater_keywords == '-X8";^H/-.y`'
    assert where_parser_0.less_keywords == '-X8";^H/-.y`'
    assert where_parser_0.between_keywords == '-X8";^H/-.y`'
    assert where_parser_0.negation_keywords == '-X8";^H/-.y`'
    assert where_parser_0.junction_keywords == '-X8";^H/-.y`'
    assert where_parser_0.disjunction_keywords == '-X8";^H/-.y`'
    assert where_parser_0.like_keywords == '-X8";^H/-.y`'
    assert where_parser_0.distinct_keywords == '-X8";^H/-.y`'
    assert where_parser_0.database_dico == '-X8";^H/-.y`'
    assert where_parser_0.database_object == '-X8";^H/-.y`'

@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    group_by_parser_0 = module_0.GroupByParser(dict_0, dict_0, dict_0, dict_0)
    assert f'{type(group_by_parser_0).__module__}.{type(group_by_parser_0).__qualname__}' == 'ln2sql.parser.GroupByParser'
    assert group_by_parser_0.group_by_objects == []
    assert group_by_parser_0.phrases == {}
    assert group_by_parser_0.tables_of_from == {}
    assert group_by_parser_0.database_dico == {}
    assert group_by_parser_0.database_object == {}
    var_0 = group_by_parser_0.get_tables_of_column(group_by_parser_0)
    group_by_parser_0.join()

def test_case_5():
    var_0 = module_1.purge()
    order_by_parser_0 = module_0.OrderByParser(var_0, var_0, var_0, var_0, var_0, var_0)
    assert f'{type(order_by_parser_0).__module__}.{type(order_by_parser_0).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert order_by_parser_0.order_by_objects == []
    assert order_by_parser_0.phrases is None
    assert order_by_parser_0.tables_of_from is None
    assert order_by_parser_0.asc_keywords is None
    assert order_by_parser_0.desc_keywords is None
    assert order_by_parser_0.database_dico is None
    assert order_by_parser_0.database_object is None

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    module_0.Parser(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ' '
    where_parser_0 = module_0.WhereParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ' '
    assert where_parser_0.tables_of_from == ' '
    assert where_parser_0.columns_of_values_of_where == ' '
    assert where_parser_0.count_keywords == ' '
    assert where_parser_0.sum_keywords == ' '
    assert where_parser_0.average_keywords == ' '
    assert where_parser_0.max_keywords == ' '
    assert where_parser_0.min_keywords == ' '
    assert where_parser_0.greater_keywords == ' '
    assert where_parser_0.less_keywords == ' '
    assert where_parser_0.between_keywords == ' '
    assert where_parser_0.negation_keywords == ' '
    assert where_parser_0.junction_keywords == ' '
    assert where_parser_0.disjunction_keywords == ' '
    assert where_parser_0.like_keywords == ' '
    assert where_parser_0.distinct_keywords == ' '
    assert where_parser_0.database_dico == ' '
    assert where_parser_0.database_object == ' '
    where_parser_0.get_tables_of_column(str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = ''
    list_0 = [str_0]
    where_parser_0 = module_0.WhereParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, list_0, str_0, list_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ''
    assert where_parser_0.tables_of_from == ''
    assert where_parser_0.columns_of_values_of_where == ''
    assert where_parser_0.count_keywords == ''
    assert where_parser_0.sum_keywords == ''
    assert where_parser_0.average_keywords == ''
    assert where_parser_0.max_keywords == ''
    assert where_parser_0.min_keywords == ''
    assert where_parser_0.greater_keywords == ''
    assert where_parser_0.less_keywords == ['']
    assert where_parser_0.between_keywords == ''
    assert where_parser_0.negation_keywords == ['']
    assert where_parser_0.junction_keywords == ''
    assert where_parser_0.disjunction_keywords == ''
    assert where_parser_0.like_keywords == ''
    assert where_parser_0.distinct_keywords == ''
    assert where_parser_0.database_dico == ''
    assert where_parser_0.database_object == ''
    var_0 = where_parser_0.uniquify(list_0)
    var_1 = where_parser_0.run()
    assert where_parser_0.count_keyword_offset == []
    assert where_parser_0.sum_keyword_offset == []
    assert where_parser_0.average_keyword_offset == []
    assert where_parser_0.max_keyword_offset == []
    assert where_parser_0.min_keyword_offset == []
    assert where_parser_0.greater_keyword_offset == []
    assert where_parser_0.less_keyword_offset == []
    assert where_parser_0.between_keyword_offset == []
    assert where_parser_0.junction_keyword_offset == []
    assert where_parser_0.disjunction_keyword_offset == []
    assert where_parser_0.negation_keyword_offset == []
    assert where_parser_0.like_keyword_offset == []
    where_parser_0.predict_junction(str_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = ':b'
    where_parser_0 = module_0.WhereParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ':b'
    assert where_parser_0.tables_of_from == ':b'
    assert where_parser_0.columns_of_values_of_where == ':b'
    assert where_parser_0.count_keywords == ':b'
    assert where_parser_0.sum_keywords == ':b'
    assert where_parser_0.average_keywords == ':b'
    assert where_parser_0.max_keywords == ':b'
    assert where_parser_0.min_keywords == ':b'
    assert where_parser_0.greater_keywords == ':b'
    assert where_parser_0.less_keywords == ':b'
    assert where_parser_0.between_keywords == ':b'
    assert where_parser_0.negation_keywords == ':b'
    assert where_parser_0.junction_keywords == ':b'
    assert where_parser_0.disjunction_keywords == ':b'
    assert where_parser_0.like_keywords == ':b'
    assert where_parser_0.distinct_keywords == ':b'
    assert where_parser_0.database_dico == ':b'
    assert where_parser_0.database_object == ':b'
    where_parser_0.run()

def test_case_10():
    str_0 = ' '
    var_0 = module_2.capwords(str_0)
    where_parser_0 = module_0.WhereParser(str_0, str_0, var_0, var_0, var_0, var_0, var_0, var_0, str_0, str_0, var_0, var_0, var_0, str_0, str_0, var_0, var_0, str_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ' '
    assert where_parser_0.tables_of_from == ' '
    assert where_parser_0.columns_of_values_of_where == ''
    assert where_parser_0.count_keywords == ''
    assert where_parser_0.sum_keywords == ''
    assert where_parser_0.average_keywords == ''
    assert where_parser_0.max_keywords == ''
    assert where_parser_0.min_keywords == ''
    assert where_parser_0.greater_keywords == ' '
    assert where_parser_0.less_keywords == ' '
    assert where_parser_0.between_keywords == ''
    assert where_parser_0.negation_keywords == ''
    assert where_parser_0.junction_keywords == ''
    assert where_parser_0.disjunction_keywords == ' '
    assert where_parser_0.like_keywords == ' '
    assert where_parser_0.distinct_keywords == ''
    assert where_parser_0.database_dico == ''
    assert where_parser_0.database_object == ' '
    var_1 = where_parser_0.run()
    assert len(where_parser_0.where_objects) == 1
    assert where_parser_0.count_keyword_offset == []
    assert where_parser_0.sum_keyword_offset == []
    assert where_parser_0.average_keyword_offset == []
    assert where_parser_0.max_keyword_offset == []
    assert where_parser_0.min_keyword_offset == []
    assert where_parser_0.greater_keyword_offset == [0]
    assert where_parser_0.less_keyword_offset == [0]
    assert where_parser_0.between_keyword_offset == []
    assert where_parser_0.junction_keyword_offset == []
    assert where_parser_0.disjunction_keyword_offset == [0]
    assert where_parser_0.negation_keyword_offset == []
    assert where_parser_0.like_keyword_offset == [0]
    var_2 = where_parser_0.intersect(str_0, var_0)

def test_case_11():
    str_0 = ' '
    var_0 = module_2.capwords(str_0)
    group_by_parser_0 = module_0.GroupByParser(str_0, str_0, var_0, var_0)
    assert f'{type(group_by_parser_0).__module__}.{type(group_by_parser_0).__qualname__}' == 'ln2sql.parser.GroupByParser'
    assert group_by_parser_0.group_by_objects == []
    assert group_by_parser_0.phrases == ' '
    assert group_by_parser_0.tables_of_from == ' '
    assert group_by_parser_0.database_dico == ''
    assert group_by_parser_0.database_object == ''
    var_1 = group_by_parser_0.run()
    assert len(group_by_parser_0.group_by_objects) == 1

def test_case_12():
    str_0 = ''
    list_0 = [str_0]
    where_parser_0 = module_0.WhereParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, list_0, str_0, list_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ''
    assert where_parser_0.tables_of_from == ''
    assert where_parser_0.columns_of_values_of_where == ''
    assert where_parser_0.count_keywords == ''
    assert where_parser_0.sum_keywords == ''
    assert where_parser_0.average_keywords == ''
    assert where_parser_0.max_keywords == ''
    assert where_parser_0.min_keywords == ''
    assert where_parser_0.greater_keywords == ''
    assert where_parser_0.less_keywords == ['']
    assert where_parser_0.between_keywords == ''
    assert where_parser_0.negation_keywords == ['']
    assert where_parser_0.junction_keywords == ''
    assert where_parser_0.disjunction_keywords == ''
    assert where_parser_0.like_keywords == ''
    assert where_parser_0.distinct_keywords == ''
    assert where_parser_0.database_dico == ''
    assert where_parser_0.database_object == ''
    var_0 = where_parser_0.run()
    assert where_parser_0.count_keyword_offset == []
    assert where_parser_0.sum_keyword_offset == []
    assert where_parser_0.average_keyword_offset == []
    assert where_parser_0.max_keyword_offset == []
    assert where_parser_0.min_keyword_offset == []
    assert where_parser_0.greater_keyword_offset == []
    assert where_parser_0.less_keyword_offset == []
    assert where_parser_0.between_keyword_offset == []
    assert where_parser_0.junction_keyword_offset == []
    assert where_parser_0.disjunction_keyword_offset == []
    assert where_parser_0.negation_keyword_offset == []
    assert where_parser_0.like_keyword_offset == []

def test_case_13():
    str_0 = ' '
    var_0 = module_2.capwords(str_0)
    where_parser_0 = module_0.WhereParser(str_0, str_0, var_0, str_0, str_0, var_0, str_0, str_0, str_0, str_0, var_0, str_0, str_0, str_0, var_0, str_0, var_0, str_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ' '
    assert where_parser_0.tables_of_from == ' '
    assert where_parser_0.columns_of_values_of_where == ''
    assert where_parser_0.count_keywords == ' '
    assert where_parser_0.sum_keywords == ' '
    assert where_parser_0.average_keywords == ''
    assert where_parser_0.max_keywords == ' '
    assert where_parser_0.min_keywords == ' '
    assert where_parser_0.greater_keywords == ' '
    assert where_parser_0.less_keywords == ' '
    assert where_parser_0.between_keywords == ''
    assert where_parser_0.negation_keywords == ' '
    assert where_parser_0.junction_keywords == ' '
    assert where_parser_0.disjunction_keywords == ' '
    assert where_parser_0.like_keywords == ''
    assert where_parser_0.distinct_keywords == ' '
    assert where_parser_0.database_dico == ''
    assert where_parser_0.database_object == ' '
    var_1 = where_parser_0.run()
    assert len(where_parser_0.where_objects) == 1
    assert where_parser_0.count_keyword_offset == [0]
    assert where_parser_0.sum_keyword_offset == [0]
    assert where_parser_0.average_keyword_offset == []
    assert where_parser_0.max_keyword_offset == [0]
    assert where_parser_0.min_keyword_offset == [0]
    assert where_parser_0.greater_keyword_offset == [0]
    assert where_parser_0.less_keyword_offset == [0]
    assert where_parser_0.between_keyword_offset == []
    assert where_parser_0.junction_keyword_offset == [0]
    assert where_parser_0.disjunction_keyword_offset == [0]
    assert where_parser_0.negation_keyword_offset == [0]
    assert where_parser_0.like_keyword_offset == []
    with pytest.raises(RuntimeError):
        where_parser_0.join()

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = ''
    list_0 = [str_0, str_0, str_0]
    where_parser_0 = module_0.WhereParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, list_0, str_0, list_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ''
    assert where_parser_0.tables_of_from == ''
    assert where_parser_0.columns_of_values_of_where == ''
    assert where_parser_0.count_keywords == ''
    assert where_parser_0.sum_keywords == ''
    assert where_parser_0.average_keywords == ''
    assert where_parser_0.max_keywords == ''
    assert where_parser_0.min_keywords == ''
    assert where_parser_0.greater_keywords == ''
    assert where_parser_0.less_keywords == ['', '', '']
    assert where_parser_0.between_keywords == ''
    assert where_parser_0.negation_keywords == ['', '', '']
    assert where_parser_0.junction_keywords == ''
    assert where_parser_0.disjunction_keywords == ''
    assert where_parser_0.like_keywords == ''
    assert where_parser_0.distinct_keywords == ''
    assert where_parser_0.database_dico == ''
    assert where_parser_0.database_object == ''
    var_0 = where_parser_0.uniquify(list_0)
    var_1 = where_parser_0.run()
    assert where_parser_0.count_keyword_offset == []
    assert where_parser_0.sum_keyword_offset == []
    assert where_parser_0.average_keyword_offset == []
    assert where_parser_0.max_keyword_offset == []
    assert where_parser_0.min_keyword_offset == []
    assert where_parser_0.greater_keyword_offset == []
    assert where_parser_0.less_keyword_offset == []
    assert where_parser_0.between_keyword_offset == []
    assert where_parser_0.junction_keyword_offset == []
    assert where_parser_0.disjunction_keyword_offset == []
    assert where_parser_0.negation_keyword_offset == []
    assert where_parser_0.like_keyword_offset == []
    where_parser_0.predict_junction(str_0, var_1)

def test_case_15():
    str_0 = ''
    list_0 = [str_0]
    where_parser_0 = module_0.WhereParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, list_0, str_0, list_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ''
    assert where_parser_0.tables_of_from == ''
    assert where_parser_0.columns_of_values_of_where == ''
    assert where_parser_0.count_keywords == ''
    assert where_parser_0.sum_keywords == ''
    assert where_parser_0.average_keywords == ''
    assert where_parser_0.max_keywords == ''
    assert where_parser_0.min_keywords == ''
    assert where_parser_0.greater_keywords == ''
    assert where_parser_0.less_keywords == ['']
    assert where_parser_0.between_keywords == ''
    assert where_parser_0.negation_keywords == ['']
    assert where_parser_0.junction_keywords == ''
    assert where_parser_0.disjunction_keywords == ''
    assert where_parser_0.like_keywords == ''
    assert where_parser_0.distinct_keywords == ''
    assert where_parser_0.database_dico == ''
    assert where_parser_0.database_object == ''
    var_0 = where_parser_0.get_tables_of_column(str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = ''
    order_by_parser_0 = module_0.OrderByParser(str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(order_by_parser_0).__module__}.{type(order_by_parser_0).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert order_by_parser_0.order_by_objects == []
    assert order_by_parser_0.phrases == ''
    assert order_by_parser_0.tables_of_from == ''
    assert order_by_parser_0.asc_keywords == ''
    assert order_by_parser_0.desc_keywords == ''
    assert order_by_parser_0.database_dico == ''
    assert order_by_parser_0.database_object == ''
    str_1 = 'Cl"`F?5rT_2#nAn{y'
    var_0 = order_by_parser_0.get_tables_of_column(str_1)
    where_parser_0 = module_0.WhereParser(str_1, str_1, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, var_0, str_0, str_0, str_0, str_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == 'Cl"`F?5rT_2#nAn{y'
    assert where_parser_0.tables_of_from == 'Cl"`F?5rT_2#nAn{y'
    assert where_parser_0.columns_of_values_of_where == ''
    assert where_parser_0.count_keywords == ''
    assert where_parser_0.sum_keywords == ''
    assert where_parser_0.average_keywords == ''
    assert where_parser_0.max_keywords == ''
    assert where_parser_0.min_keywords == ''
    assert where_parser_0.greater_keywords == ''
    assert where_parser_0.less_keywords == ''
    assert where_parser_0.between_keywords == ''
    assert where_parser_0.negation_keywords == ''
    assert where_parser_0.junction_keywords == ''
    assert where_parser_0.disjunction_keywords == []
    assert where_parser_0.like_keywords == ''
    assert where_parser_0.distinct_keywords == ''
    assert where_parser_0.database_dico == ''
    assert where_parser_0.database_object == ''
    var_1 = where_parser_0.get_tables_of_column(str_0)
    var_2 = where_parser_0.run()
    assert len(where_parser_0.where_objects) == 17
    assert where_parser_0.count_keyword_offset == []
    assert where_parser_0.sum_keyword_offset == []
    assert where_parser_0.average_keyword_offset == []
    assert where_parser_0.max_keyword_offset == []
    assert where_parser_0.min_keyword_offset == []
    assert where_parser_0.greater_keyword_offset == []
    assert where_parser_0.less_keyword_offset == []
    assert where_parser_0.between_keyword_offset == []
    assert where_parser_0.junction_keyword_offset == []
    assert where_parser_0.disjunction_keyword_offset == []
    assert where_parser_0.negation_keyword_offset == []
    assert where_parser_0.like_keyword_offset == []
    select_parser_0 = module_0.SelectParser(order_by_parser_0, var_0, order_by_parser_0, var_0, order_by_parser_0, var_2, var_1, str_1, order_by_parser_0, var_1, str_1)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert f'{type(select_parser_0.columns_of_select).__module__}.{type(select_parser_0.columns_of_select).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert select_parser_0.tables_of_from == []
    assert f'{type(select_parser_0.phrase).__module__}.{type(select_parser_0.phrase).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert select_parser_0.count_keywords == []
    assert f'{type(select_parser_0.sum_keywords).__module__}.{type(select_parser_0.sum_keywords).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert select_parser_0.average_keywords is None
    assert select_parser_0.max_keywords == []
    assert select_parser_0.min_keywords == 'Cl"`F?5rT_2#nAn{y'
    assert f'{type(select_parser_0.distinct_keywords).__module__}.{type(select_parser_0.distinct_keywords).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert select_parser_0.database_dico == []
    assert select_parser_0.database_object == 'Cl"`F?5rT_2#nAn{y'
    var_3 = select_parser_0.run()
    order_by_parser_1 = module_0.OrderByParser(str_1, str_1, order_by_parser_0, var_1, var_0, var_3)
    var_4 = order_by_parser_1.run()
    assert len(order_by_parser_1.order_by_objects) == 17
    order_by_parser_1.join()

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = ' ^9xF'
    group_by_parser_0 = module_0.GroupByParser(str_0, str_0, str_0, str_0)
    assert f'{type(group_by_parser_0).__module__}.{type(group_by_parser_0).__qualname__}' == 'ln2sql.parser.GroupByParser'
    assert group_by_parser_0.group_by_objects == []
    assert group_by_parser_0.phrases == ' ^9xF'
    assert group_by_parser_0.tables_of_from == ' ^9xF'
    assert group_by_parser_0.database_dico == ' ^9xF'
    assert group_by_parser_0.database_object == ' ^9xF'
    group_by_parser_0.run()

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = ' '
    order_by_parser_0 = module_0.OrderByParser(str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(order_by_parser_0).__module__}.{type(order_by_parser_0).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert order_by_parser_0.order_by_objects == []
    assert order_by_parser_0.phrases == ' '
    assert order_by_parser_0.tables_of_from == ' '
    assert order_by_parser_0.asc_keywords == ' '
    assert order_by_parser_0.desc_keywords == ' '
    assert order_by_parser_0.database_dico == ' '
    assert order_by_parser_0.database_object == ' '
    order_by_parser_0.get_column_name_with_alias_table(str_0, order_by_parser_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'd'
    select_parser_0 = module_0.SelectParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert select_parser_0.columns_of_select == 'd'
    assert select_parser_0.tables_of_from == 'd'
    assert select_parser_0.phrase == 'd'
    assert select_parser_0.count_keywords == 'd'
    assert select_parser_0.sum_keywords == 'd'
    assert select_parser_0.average_keywords == 'd'
    assert select_parser_0.max_keywords == 'd'
    assert select_parser_0.min_keywords == 'd'
    assert select_parser_0.distinct_keywords == 'd'
    assert select_parser_0.database_dico == 'd'
    assert select_parser_0.database_object == 'd'
    select_parser_0.run()

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = 'WQB'
    select_parser_0 = module_0.SelectParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert select_parser_0.columns_of_select == 'WQB'
    assert select_parser_0.tables_of_from == 'WQB'
    assert select_parser_0.phrase == 'WQB'
    assert select_parser_0.count_keywords == 'WQB'
    assert select_parser_0.sum_keywords == 'WQB'
    assert select_parser_0.average_keywords == 'WQB'
    assert select_parser_0.max_keywords == 'WQB'
    assert select_parser_0.min_keywords == 'WQB'
    assert select_parser_0.distinct_keywords == 'WQB'
    assert select_parser_0.database_dico == 'WQB'
    assert select_parser_0.database_object == 'WQB'
    select_parser_0.run()

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = '^'
    group_by_parser_0 = module_0.GroupByParser(str_0, str_0, str_0, str_0)
    assert f'{type(group_by_parser_0).__module__}.{type(group_by_parser_0).__qualname__}' == 'ln2sql.parser.GroupByParser'
    assert group_by_parser_0.group_by_objects == []
    assert group_by_parser_0.phrases == '^'
    assert group_by_parser_0.tables_of_from == '^'
    assert group_by_parser_0.database_dico == '^'
    assert group_by_parser_0.database_object == '^'
    group_by_parser_0.get_column_name_with_alias_table(group_by_parser_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = '\x0bdVa$*y76{2\x0bmA}'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    select_parser_0 = module_0.SelectParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, dict_0, str_0)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert select_parser_0.columns_of_select == '\x0bdVa$*y76{2\x0bmA}'
    assert select_parser_0.tables_of_from == '\x0bdVa$*y76{2\x0bmA}'
    assert select_parser_0.phrase == '\x0bdVa$*y76{2\x0bmA}'
    assert select_parser_0.count_keywords == '\x0bdVa$*y76{2\x0bmA}'
    assert select_parser_0.sum_keywords == '\x0bdVa$*y76{2\x0bmA}'
    assert select_parser_0.average_keywords == '\x0bdVa$*y76{2\x0bmA}'
    assert select_parser_0.max_keywords == '\x0bdVa$*y76{2\x0bmA}'
    assert select_parser_0.min_keywords == '\x0bdVa$*y76{2\x0bmA}'
    assert select_parser_0.distinct_keywords == '\x0bdVa$*y76{2\x0bmA}'
    assert select_parser_0.database_dico == {'\x0bdVa$*y76{2\x0bmA}': '\x0bdVa$*y76{2\x0bmA}'}
    assert select_parser_0.database_object == '\x0bdVa$*y76{2\x0bmA}'
    var_0 = select_parser_0.get_column_name_with_alias_table(str_0, select_parser_0)
    assert var_0 == '\x0bdVa$*y76{2\x0bmA}.\x0bdVa$*y76{2\x0bmA}'
    select_parser_0.join()

def test_case_23():
    str_0 = ' '
    var_0 = module_2.capwords(str_0)
    where_parser_0 = module_0.WhereParser(str_0, var_0, str_0, var_0, var_0, var_0, var_0, var_0, var_0, var_0, var_0, var_0, var_0, var_0, var_0, var_0, var_0, var_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ' '
    assert where_parser_0.tables_of_from == ''
    assert where_parser_0.columns_of_values_of_where == ' '
    assert where_parser_0.count_keywords == ''
    assert where_parser_0.sum_keywords == ''
    assert where_parser_0.average_keywords == ''
    assert where_parser_0.max_keywords == ''
    assert where_parser_0.min_keywords == ''
    assert where_parser_0.greater_keywords == ''
    assert where_parser_0.less_keywords == ''
    assert where_parser_0.between_keywords == ''
    assert where_parser_0.negation_keywords == ''
    assert where_parser_0.junction_keywords == ''
    assert where_parser_0.disjunction_keywords == ''
    assert where_parser_0.like_keywords == ''
    assert where_parser_0.distinct_keywords == ''
    assert where_parser_0.database_dico == ''
    assert where_parser_0.database_object == ''
    var_1 = where_parser_0.run()
    assert where_parser_0.count_keyword_offset == []
    assert where_parser_0.sum_keyword_offset == []
    assert where_parser_0.average_keyword_offset == []
    assert where_parser_0.max_keyword_offset == []
    assert where_parser_0.min_keyword_offset == []
    assert where_parser_0.greater_keyword_offset == []
    assert where_parser_0.less_keyword_offset == []
    assert where_parser_0.between_keyword_offset == []
    assert where_parser_0.junction_keyword_offset == []
    assert where_parser_0.disjunction_keyword_offset == []
    assert where_parser_0.negation_keyword_offset == []
    assert where_parser_0.like_keyword_offset == []

def test_case_24():
    dict_0 = {}
    group_by_parser_0 = module_0.GroupByParser(dict_0, dict_0, dict_0, dict_0)
    assert f'{type(group_by_parser_0).__module__}.{type(group_by_parser_0).__qualname__}' == 'ln2sql.parser.GroupByParser'
    assert group_by_parser_0.group_by_objects == []
    assert group_by_parser_0.phrases == {}
    assert group_by_parser_0.tables_of_from == {}
    assert group_by_parser_0.database_dico == {}
    assert group_by_parser_0.database_object == {}
    var_0 = group_by_parser_0.get_tables_of_column(group_by_parser_0)

def test_case_25():
    set_0 = set()
    order_by_parser_0 = module_0.OrderByParser(set_0, set_0, set_0, set_0, set_0, set_0)
    assert f'{type(order_by_parser_0).__module__}.{type(order_by_parser_0).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert order_by_parser_0.order_by_objects == []
    assert order_by_parser_0.phrases == {*()}
    assert order_by_parser_0.tables_of_from == {*()}
    assert order_by_parser_0.asc_keywords == {*()}
    assert order_by_parser_0.desc_keywords == {*()}
    assert order_by_parser_0.database_dico == {*()}
    assert order_by_parser_0.database_object == {*()}
    str_0 = ' '
    var_0 = module_2.capwords(str_0)
    var_1 = order_by_parser_0.get_tables_of_column(str_0)

def test_case_26():
    str_0 = ''
    none_type_0 = None
    select_parser_0 = module_0.SelectParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, none_type_0, none_type_0, none_type_0, none_type_0)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert select_parser_0.columns_of_select == ''
    assert select_parser_0.tables_of_from == ''
    assert select_parser_0.phrase == ''
    assert select_parser_0.count_keywords == ''
    assert select_parser_0.sum_keywords == ''
    assert select_parser_0.average_keywords == ''
    assert select_parser_0.max_keywords == ''
    assert select_parser_0.min_keywords is None
    assert select_parser_0.distinct_keywords is None
    assert select_parser_0.database_dico is None
    assert select_parser_0.database_object is None
    var_0 = select_parser_0.run()

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = 'e[66#.Dw8Ed,VXqf Gz{'
    select_parser_0 = module_0.SelectParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert select_parser_0.columns_of_select == 'e[66#.Dw8Ed,VXqf Gz{'
    assert select_parser_0.tables_of_from == 'e[66#.Dw8Ed,VXqf Gz{'
    assert select_parser_0.phrase == 'e[66#.Dw8Ed,VXqf Gz{'
    assert select_parser_0.count_keywords == 'e[66#.Dw8Ed,VXqf Gz{'
    assert select_parser_0.sum_keywords == 'e[66#.Dw8Ed,VXqf Gz{'
    assert select_parser_0.average_keywords == 'e[66#.Dw8Ed,VXqf Gz{'
    assert select_parser_0.max_keywords == 'e[66#.Dw8Ed,VXqf Gz{'
    assert select_parser_0.min_keywords == 'e[66#.Dw8Ed,VXqf Gz{'
    assert select_parser_0.distinct_keywords == 'e[66#.Dw8Ed,VXqf Gz{'
    assert select_parser_0.database_dico == 'e[66#.Dw8Ed,VXqf Gz{'
    assert select_parser_0.database_object == 'e[66#.Dw8Ed,VXqf Gz{'
    select_parser_0.run()

def test_case_28():
    str_0 = ' '
    dict_0 = {}
    where_parser_0 = module_0.WhereParser(dict_0, str_0, dict_0, dict_0, dict_0, dict_0, dict_0, str_0, dict_0, str_0, str_0, dict_0, dict_0, dict_0, str_0, str_0, dict_0, dict_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == {}
    assert where_parser_0.tables_of_from == ' '
    assert where_parser_0.columns_of_values_of_where == {}
    assert where_parser_0.count_keywords == {}
    assert where_parser_0.sum_keywords == {}
    assert where_parser_0.average_keywords == {}
    assert where_parser_0.max_keywords == {}
    assert where_parser_0.min_keywords == ' '
    assert where_parser_0.greater_keywords == {}
    assert where_parser_0.less_keywords == ' '
    assert where_parser_0.between_keywords == ' '
    assert where_parser_0.negation_keywords == {}
    assert where_parser_0.junction_keywords == {}
    assert where_parser_0.disjunction_keywords == {}
    assert where_parser_0.like_keywords == ' '
    assert where_parser_0.distinct_keywords == ' '
    assert where_parser_0.database_dico == {}
    assert where_parser_0.database_object == {}
    var_0 = where_parser_0.run()
    assert len(where_parser_0.where_objects) == 1
    assert where_parser_0.count_keyword_offset == []
    assert where_parser_0.sum_keyword_offset == []
    assert where_parser_0.average_keyword_offset == []
    assert where_parser_0.max_keyword_offset == []
    assert where_parser_0.min_keyword_offset == []
    assert where_parser_0.greater_keyword_offset == []
    assert where_parser_0.less_keyword_offset == []
    assert where_parser_0.between_keyword_offset == []
    assert where_parser_0.junction_keyword_offset == []
    assert where_parser_0.disjunction_keyword_offset == []
    assert where_parser_0.negation_keyword_offset == []
    assert where_parser_0.like_keyword_offset == []

def test_case_29():
    str_0 = ' '
    var_0 = module_2.capwords(str_0)
    order_by_parser_0 = module_0.OrderByParser(var_0, str_0, var_0, var_0, var_0, var_0)
    assert f'{type(order_by_parser_0).__module__}.{type(order_by_parser_0).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert order_by_parser_0.order_by_objects == []
    assert order_by_parser_0.phrases == ''
    assert order_by_parser_0.tables_of_from == ' '
    assert order_by_parser_0.asc_keywords == ''
    assert order_by_parser_0.desc_keywords == ''
    assert order_by_parser_0.database_dico == ''
    assert order_by_parser_0.database_object == ''
    var_1 = order_by_parser_0.run()
    assert len(order_by_parser_0.order_by_objects) == 1

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = ' '
    order_by_parser_0 = module_0.OrderByParser(str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(order_by_parser_0).__module__}.{type(order_by_parser_0).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert order_by_parser_0.order_by_objects == []
    assert order_by_parser_0.phrases == ' '
    assert order_by_parser_0.tables_of_from == ' '
    assert order_by_parser_0.asc_keywords == ' '
    assert order_by_parser_0.desc_keywords == ' '
    assert order_by_parser_0.database_dico == ' '
    assert order_by_parser_0.database_object == ' '
    var_0 = order_by_parser_0.predict_order(str_0)
    assert var_0 == 'DESC'
    order_by_parser_0.run()

@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = 'J'
    select_parser_0 = module_0.SelectParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert select_parser_0.columns_of_select == 'J'
    assert select_parser_0.tables_of_from == 'J'
    assert select_parser_0.phrase == 'J'
    assert select_parser_0.count_keywords == 'J'
    assert select_parser_0.sum_keywords == 'J'
    assert select_parser_0.average_keywords == 'J'
    assert select_parser_0.max_keywords == 'J'
    assert select_parser_0.min_keywords == 'J'
    assert select_parser_0.distinct_keywords == 'J'
    assert select_parser_0.database_dico == 'J'
    assert select_parser_0.database_object == 'J'
    select_parser_0.run()

@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = '~t]`{wT4 '
    order_by_parser_0 = module_0.OrderByParser(str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(order_by_parser_0).__module__}.{type(order_by_parser_0).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert order_by_parser_0.order_by_objects == []
    assert order_by_parser_0.phrases == '~t]`{wT4 '
    assert order_by_parser_0.tables_of_from == '~t]`{wT4 '
    assert order_by_parser_0.asc_keywords == '~t]`{wT4 '
    assert order_by_parser_0.desc_keywords == '~t]`{wT4 '
    assert order_by_parser_0.database_dico == '~t]`{wT4 '
    assert order_by_parser_0.database_object == '~t]`{wT4 '
    order_by_parser_0.run()

@pytest.mark.xfail(strict=True)
def test_case_33():
    str_0 = ':b'
    dict_0 = {str_0: str_0}
    select_parser_0 = module_0.SelectParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, dict_0, str_0)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert select_parser_0.columns_of_select == ':b'
    assert select_parser_0.tables_of_from == ':b'
    assert select_parser_0.phrase == ':b'
    assert select_parser_0.count_keywords == ':b'
    assert select_parser_0.sum_keywords == ':b'
    assert select_parser_0.average_keywords == ':b'
    assert select_parser_0.max_keywords == ':b'
    assert select_parser_0.min_keywords == ':b'
    assert select_parser_0.distinct_keywords == ':b'
    assert select_parser_0.database_dico == {':b': ':b'}
    assert select_parser_0.database_object == ':b'
    var_0 = select_parser_0.get_column_name_with_alias_table(str_0, select_parser_0)
    assert var_0 == ':b.:b'
    select_parser_0.run()

def test_case_34():
    str_0 = ' '
    dict_0 = {}
    none_type_0 = None
    select_parser_0 = module_0.SelectParser(dict_0, str_0, dict_0, str_0, dict_0, str_0, str_0, dict_0, dict_0, none_type_0, dict_0)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert select_parser_0.columns_of_select == {}
    assert select_parser_0.tables_of_from == ' '
    assert select_parser_0.phrase == {}
    assert select_parser_0.count_keywords == ' '
    assert select_parser_0.sum_keywords == {}
    assert select_parser_0.average_keywords == ' '
    assert select_parser_0.max_keywords == ' '
    assert select_parser_0.min_keywords == {}
    assert select_parser_0.distinct_keywords == {}
    assert select_parser_0.database_dico is None
    assert select_parser_0.database_object == {}
    var_0 = select_parser_0.run()
    assert len(select_parser_0.select_objects) == 1
    assert select_parser_0.columns_of_select == []
    assert f'{type(select_parser_0.select_object).__module__}.{type(select_parser_0.select_object).__qualname__}' == 'ln2sql.query.Select'

def test_case_35():
    str_0 = ''
    none_type_0 = None
    order_by_parser_0 = module_0.OrderByParser(none_type_0, str_0, str_0, str_0, str_0, none_type_0)
    assert f'{type(order_by_parser_0).__module__}.{type(order_by_parser_0).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert order_by_parser_0.order_by_objects == []
    assert order_by_parser_0.phrases is None
    assert order_by_parser_0.tables_of_from == ''
    assert order_by_parser_0.asc_keywords == ''
    assert order_by_parser_0.desc_keywords == ''
    assert order_by_parser_0.database_dico == ''
    assert order_by_parser_0.database_object is None
    var_0 = order_by_parser_0.predict_order(str_0)
    assert var_0 == 'ASC'
    select_parser_0 = module_0.SelectParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert select_parser_0.columns_of_select == ''
    assert select_parser_0.tables_of_from == ''
    assert select_parser_0.phrase == ''
    assert select_parser_0.count_keywords == ''
    assert select_parser_0.sum_keywords == ''
    assert select_parser_0.average_keywords == ''
    assert select_parser_0.max_keywords == ''
    assert select_parser_0.min_keywords == ''
    assert select_parser_0.distinct_keywords == ''
    assert select_parser_0.database_dico == ''
    assert select_parser_0.database_object == ''
    var_1 = select_parser_0.run()

def test_case_36():
    str_0 = ' '
    dict_0 = {}
    select_parser_0 = module_0.SelectParser(dict_0, str_0, str_0, str_0, dict_0, dict_0, str_0, str_0, dict_0, str_0, dict_0)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert select_parser_0.columns_of_select == {}
    assert select_parser_0.tables_of_from == ' '
    assert select_parser_0.phrase == ' '
    assert select_parser_0.count_keywords == ' '
    assert select_parser_0.sum_keywords == {}
    assert select_parser_0.average_keywords == {}
    assert select_parser_0.max_keywords == ' '
    assert select_parser_0.min_keywords == ' '
    assert select_parser_0.distinct_keywords == {}
    assert select_parser_0.database_dico == ' '
    assert select_parser_0.database_object == {}
    var_0 = select_parser_0.run()
    assert len(select_parser_0.select_objects) == 1
    assert select_parser_0.columns_of_select == []
    assert f'{type(select_parser_0.select_object).__module__}.{type(select_parser_0.select_object).__qualname__}' == 'ln2sql.query.Select'
    var_1 = select_parser_0.__repr__()

def test_case_37():
    str_0 = ' '
    var_0 = module_2.capwords(str_0)
    where_parser_0 = module_0.WhereParser(str_0, str_0, var_0, str_0, str_0, var_0, str_0, var_0, var_0, str_0, var_0, var_0, var_0, var_0, var_0, str_0, var_0, var_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ' '
    assert where_parser_0.tables_of_from == ' '
    assert where_parser_0.columns_of_values_of_where == ''
    assert where_parser_0.count_keywords == ' '
    assert where_parser_0.sum_keywords == ' '
    assert where_parser_0.average_keywords == ''
    assert where_parser_0.max_keywords == ' '
    assert where_parser_0.min_keywords == ''
    assert where_parser_0.greater_keywords == ''
    assert where_parser_0.less_keywords == ' '
    assert where_parser_0.between_keywords == ''
    assert where_parser_0.negation_keywords == ''
    assert where_parser_0.junction_keywords == ''
    assert where_parser_0.disjunction_keywords == ''
    assert where_parser_0.like_keywords == ''
    assert where_parser_0.distinct_keywords == ' '
    assert where_parser_0.database_dico == ''
    assert where_parser_0.database_object == ''
    var_1 = where_parser_0.run()
    assert len(where_parser_0.where_objects) == 1
    assert where_parser_0.count_keyword_offset == [0]
    assert where_parser_0.sum_keyword_offset == [0]
    assert where_parser_0.average_keyword_offset == []
    assert where_parser_0.max_keyword_offset == [0]
    assert where_parser_0.min_keyword_offset == []
    assert where_parser_0.greater_keyword_offset == []
    assert where_parser_0.less_keyword_offset == [0]
    assert where_parser_0.between_keyword_offset == []
    assert where_parser_0.junction_keyword_offset == []
    assert where_parser_0.disjunction_keyword_offset == []
    assert where_parser_0.negation_keyword_offset == []
    assert where_parser_0.like_keyword_offset == []

def test_case_38():
    str_0 = ' '
    var_0 = module_2.capwords(str_0)
    where_parser_0 = module_0.WhereParser(str_0, str_0, var_0, str_0, str_0, var_0, str_0, str_0, str_0, str_0, var_0, str_0, str_0, str_0, var_0, str_0, var_0, str_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ' '
    assert where_parser_0.tables_of_from == ' '
    assert where_parser_0.columns_of_values_of_where == ''
    assert where_parser_0.count_keywords == ' '
    assert where_parser_0.sum_keywords == ' '
    assert where_parser_0.average_keywords == ''
    assert where_parser_0.max_keywords == ' '
    assert where_parser_0.min_keywords == ' '
    assert where_parser_0.greater_keywords == ' '
    assert where_parser_0.less_keywords == ' '
    assert where_parser_0.between_keywords == ''
    assert where_parser_0.negation_keywords == ' '
    assert where_parser_0.junction_keywords == ' '
    assert where_parser_0.disjunction_keywords == ' '
    assert where_parser_0.like_keywords == ''
    assert where_parser_0.distinct_keywords == ' '
    assert where_parser_0.database_dico == ''
    assert where_parser_0.database_object == ' '
    var_1 = where_parser_0.run()
    assert len(where_parser_0.where_objects) == 1
    assert where_parser_0.count_keyword_offset == [0]
    assert where_parser_0.sum_keyword_offset == [0]
    assert where_parser_0.average_keyword_offset == []
    assert where_parser_0.max_keyword_offset == [0]
    assert where_parser_0.min_keyword_offset == [0]
    assert where_parser_0.greater_keyword_offset == [0]
    assert where_parser_0.less_keyword_offset == [0]
    assert where_parser_0.between_keyword_offset == []
    assert where_parser_0.junction_keyword_offset == [0]
    assert where_parser_0.disjunction_keyword_offset == [0]
    assert where_parser_0.negation_keyword_offset == [0]
    assert where_parser_0.like_keyword_offset == []

def test_case_39():
    str_0 = ' '
    var_0 = module_2.capwords(str_0)
    var_1 = module_1.split(str_0, str_0)
    where_parser_0 = module_0.WhereParser(str_0, str_0, var_0, str_0, str_0, var_0, str_0, var_1, var_1, str_0, var_0, var_1, var_1, var_1, var_0, str_0, var_0, var_1)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ' '
    assert where_parser_0.tables_of_from == ' '
    assert where_parser_0.columns_of_values_of_where == ''
    assert where_parser_0.count_keywords == ' '
    assert where_parser_0.sum_keywords == ' '
    assert where_parser_0.average_keywords == ''
    assert where_parser_0.max_keywords == ' '
    assert where_parser_0.min_keywords == ['', '']
    assert where_parser_0.greater_keywords == ['', '']
    assert where_parser_0.less_keywords == ' '
    assert where_parser_0.between_keywords == ''
    assert where_parser_0.negation_keywords == ['', '']
    assert where_parser_0.junction_keywords == ['', '']
    assert where_parser_0.disjunction_keywords == ['', '']
    assert where_parser_0.like_keywords == ''
    assert where_parser_0.distinct_keywords == ' '
    assert where_parser_0.database_dico == ''
    assert where_parser_0.database_object == ['', '']
    var_2 = where_parser_0.run()
    assert len(where_parser_0.where_objects) == 1
    assert where_parser_0.count_keyword_offset == [0]
    assert where_parser_0.sum_keyword_offset == [0]
    assert where_parser_0.average_keyword_offset == []
    assert where_parser_0.max_keyword_offset == [0]
    assert where_parser_0.min_keyword_offset == []
    assert where_parser_0.greater_keyword_offset == []
    assert where_parser_0.less_keyword_offset == [0]
    assert where_parser_0.between_keyword_offset == []
    assert where_parser_0.junction_keyword_offset == []
    assert where_parser_0.disjunction_keyword_offset == []
    assert where_parser_0.negation_keyword_offset == []
    assert where_parser_0.like_keyword_offset == []

def test_case_40():
    str_0 = 'W '
    chain_map_0 = module_3.ChainMap()
    where_parser_0 = module_0.WhereParser(str_0, chain_map_0, chain_map_0, str_0, str_0, str_0, str_0, str_0, str_0, chain_map_0, chain_map_0, str_0, chain_map_0, str_0, str_0, str_0, chain_map_0, str_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == 'W '
    assert f'{type(where_parser_0.tables_of_from).__module__}.{type(where_parser_0.tables_of_from).__qualname__}' == 'collections.ChainMap'
    assert len(where_parser_0.tables_of_from) == 0
    assert f'{type(where_parser_0.columns_of_values_of_where).__module__}.{type(where_parser_0.columns_of_values_of_where).__qualname__}' == 'collections.ChainMap'
    assert len(where_parser_0.columns_of_values_of_where) == 0
    assert where_parser_0.count_keywords == 'W '
    assert where_parser_0.sum_keywords == 'W '
    assert where_parser_0.average_keywords == 'W '
    assert where_parser_0.max_keywords == 'W '
    assert where_parser_0.min_keywords == 'W '
    assert where_parser_0.greater_keywords == 'W '
    assert f'{type(where_parser_0.less_keywords).__module__}.{type(where_parser_0.less_keywords).__qualname__}' == 'collections.ChainMap'
    assert len(where_parser_0.less_keywords) == 0
    assert f'{type(where_parser_0.between_keywords).__module__}.{type(where_parser_0.between_keywords).__qualname__}' == 'collections.ChainMap'
    assert len(where_parser_0.between_keywords) == 0
    assert where_parser_0.negation_keywords == 'W '
    assert f'{type(where_parser_0.junction_keywords).__module__}.{type(where_parser_0.junction_keywords).__qualname__}' == 'collections.ChainMap'
    assert len(where_parser_0.junction_keywords) == 0
    assert where_parser_0.disjunction_keywords == 'W '
    assert where_parser_0.like_keywords == 'W '
    assert where_parser_0.distinct_keywords == 'W '
    assert f'{type(where_parser_0.database_dico).__module__}.{type(where_parser_0.database_dico).__qualname__}' == 'collections.ChainMap'
    assert len(where_parser_0.database_dico) == 0
    assert where_parser_0.database_object == 'W '
    var_0 = where_parser_0.run()
    assert where_parser_0.count_keyword_offset == [0]
    assert where_parser_0.sum_keyword_offset == [0]
    assert where_parser_0.average_keyword_offset == [0]
    assert where_parser_0.max_keyword_offset == [0]
    assert where_parser_0.min_keyword_offset == [0]
    assert where_parser_0.greater_keyword_offset == [0]
    assert where_parser_0.less_keyword_offset == []
    assert where_parser_0.between_keyword_offset == []
    assert where_parser_0.junction_keyword_offset == []
    assert where_parser_0.disjunction_keyword_offset == [0]
    assert where_parser_0.negation_keyword_offset == [0]
    assert where_parser_0.like_keyword_offset == [0]

def test_case_41():
    str_0 = ' '
    var_0 = module_2.capwords(str_0)
    where_parser_0 = module_0.WhereParser(str_0, str_0, var_0, var_0, var_0, var_0, var_0, var_0, str_0, str_0, var_0, var_0, var_0, str_0, str_0, var_0, var_0, str_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ' '
    assert where_parser_0.tables_of_from == ' '
    assert where_parser_0.columns_of_values_of_where == ''
    assert where_parser_0.count_keywords == ''
    assert where_parser_0.sum_keywords == ''
    assert where_parser_0.average_keywords == ''
    assert where_parser_0.max_keywords == ''
    assert where_parser_0.min_keywords == ''
    assert where_parser_0.greater_keywords == ' '
    assert where_parser_0.less_keywords == ' '
    assert where_parser_0.between_keywords == ''
    assert where_parser_0.negation_keywords == ''
    assert where_parser_0.junction_keywords == ''
    assert where_parser_0.disjunction_keywords == ' '
    assert where_parser_0.like_keywords == ' '
    assert where_parser_0.distinct_keywords == ''
    assert where_parser_0.database_dico == ''
    assert where_parser_0.database_object == ' '
    var_1 = where_parser_0.run()
    assert len(where_parser_0.where_objects) == 1
    assert where_parser_0.count_keyword_offset == []
    assert where_parser_0.sum_keyword_offset == []
    assert where_parser_0.average_keyword_offset == []
    assert where_parser_0.max_keyword_offset == []
    assert where_parser_0.min_keyword_offset == []
    assert where_parser_0.greater_keyword_offset == [0]
    assert where_parser_0.less_keyword_offset == [0]
    assert where_parser_0.between_keyword_offset == []
    assert where_parser_0.junction_keyword_offset == []
    assert where_parser_0.disjunction_keyword_offset == [0]
    assert where_parser_0.negation_keyword_offset == []
    assert where_parser_0.like_keyword_offset == [0]

def test_case_42():
    str_0 = ' '
    var_0 = module_2.capwords(str_0)
    where_parser_0 = module_0.WhereParser(str_0, str_0, var_0, var_0, str_0, str_0, var_0, str_0, var_0, str_0, var_0, var_0, str_0, var_0, str_0, var_0, var_0, var_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ' '
    assert where_parser_0.tables_of_from == ' '
    assert where_parser_0.columns_of_values_of_where == ''
    assert where_parser_0.count_keywords == ''
    assert where_parser_0.sum_keywords == ' '
    assert where_parser_0.average_keywords == ' '
    assert where_parser_0.max_keywords == ''
    assert where_parser_0.min_keywords == ' '
    assert where_parser_0.greater_keywords == ''
    assert where_parser_0.less_keywords == ' '
    assert where_parser_0.between_keywords == ''
    assert where_parser_0.negation_keywords == ''
    assert where_parser_0.junction_keywords == ' '
    assert where_parser_0.disjunction_keywords == ''
    assert where_parser_0.like_keywords == ' '
    assert where_parser_0.distinct_keywords == ''
    assert where_parser_0.database_dico == ''
    assert where_parser_0.database_object == ''
    var_1 = where_parser_0.run()
    assert len(where_parser_0.where_objects) == 1
    assert where_parser_0.count_keyword_offset == []
    assert where_parser_0.sum_keyword_offset == [0]
    assert where_parser_0.average_keyword_offset == [0]
    assert where_parser_0.max_keyword_offset == []
    assert where_parser_0.min_keyword_offset == [0]
    assert where_parser_0.greater_keyword_offset == []
    assert where_parser_0.less_keyword_offset == [0]
    assert where_parser_0.between_keyword_offset == []
    assert where_parser_0.junction_keyword_offset == [0]
    assert where_parser_0.disjunction_keyword_offset == []
    assert where_parser_0.negation_keyword_offset == []
    assert where_parser_0.like_keyword_offset == [0]

def test_case_43():
    str_0 = ' '
    var_0 = module_2.capwords(str_0)
    where_parser_0 = module_0.WhereParser(str_0, var_0, var_0, str_0, var_0, var_0, var_0, var_0, var_0, str_0, str_0, str_0, var_0, str_0, var_0, str_0, var_0, str_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ' '
    assert where_parser_0.tables_of_from == ''
    assert where_parser_0.columns_of_values_of_where == ''
    assert where_parser_0.count_keywords == ' '
    assert where_parser_0.sum_keywords == ''
    assert where_parser_0.average_keywords == ''
    assert where_parser_0.max_keywords == ''
    assert where_parser_0.min_keywords == ''
    assert where_parser_0.greater_keywords == ''
    assert where_parser_0.less_keywords == ' '
    assert where_parser_0.between_keywords == ' '
    assert where_parser_0.negation_keywords == ' '
    assert where_parser_0.junction_keywords == ''
    assert where_parser_0.disjunction_keywords == ' '
    assert where_parser_0.like_keywords == ''
    assert where_parser_0.distinct_keywords == ' '
    assert where_parser_0.database_dico == ''
    assert where_parser_0.database_object == ' '
    var_1 = where_parser_0.run()
    assert where_parser_0.count_keyword_offset == [0]
    assert where_parser_0.sum_keyword_offset == []
    assert where_parser_0.average_keyword_offset == []
    assert where_parser_0.max_keyword_offset == []
    assert where_parser_0.min_keyword_offset == []
    assert where_parser_0.greater_keyword_offset == []
    assert where_parser_0.less_keyword_offset == [0]
    assert where_parser_0.between_keyword_offset == [0]
    assert where_parser_0.junction_keyword_offset == []
    assert where_parser_0.disjunction_keyword_offset == [0]
    assert where_parser_0.negation_keyword_offset == [0]
    assert where_parser_0.like_keyword_offset == []

def test_case_44():
    str_0 = ' '
    var_0 = module_2.capwords(str_0)
    var_1 = module_1.split(str_0, str_0)
    var_2 = module_1.split(var_0, str_0)
    where_parser_0 = module_0.WhereParser(str_0, str_0, str_0, var_0, var_2, var_2, var_2, var_0, var_2, var_1, var_2, var_0, str_0, str_0, var_0, var_0, var_0, var_1)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == ' '
    assert where_parser_0.tables_of_from == ' '
    assert where_parser_0.columns_of_values_of_where == ' '
    assert where_parser_0.count_keywords == ''
    assert where_parser_0.sum_keywords == ['', ' ', '']
    assert where_parser_0.average_keywords == ['', ' ', '']
    assert where_parser_0.max_keywords == ['', ' ', '']
    assert where_parser_0.min_keywords == ''
    assert where_parser_0.greater_keywords == ['', ' ', '']
    assert where_parser_0.less_keywords == ['', '']
    assert where_parser_0.between_keywords == ['', ' ', '']
    assert where_parser_0.negation_keywords == ''
    assert where_parser_0.junction_keywords == ' '
    assert where_parser_0.disjunction_keywords == ' '
    assert where_parser_0.like_keywords == ''
    assert where_parser_0.distinct_keywords == ''
    assert where_parser_0.database_dico == ''
    assert where_parser_0.database_object == ['', '']
    var_3 = where_parser_0.run()
    assert len(where_parser_0.where_objects) == 1
    assert where_parser_0.count_keyword_offset == []
    assert where_parser_0.sum_keyword_offset == [0]
    assert where_parser_0.average_keyword_offset == [0]
    assert where_parser_0.max_keyword_offset == [0]
    assert where_parser_0.min_keyword_offset == []
    assert where_parser_0.greater_keyword_offset == [0]
    assert where_parser_0.less_keyword_offset == []
    assert where_parser_0.between_keyword_offset == [0]
    assert where_parser_0.junction_keyword_offset == [0]
    assert where_parser_0.disjunction_keyword_offset == [0]
    assert where_parser_0.negation_keyword_offset == []
    assert where_parser_0.like_keyword_offset == []

def test_case_45():
    str_0 = 'Xh=hS\tG&Z@gU>'
    var_0 = module_4._EnumDict()
    bool_0 = False
    where_parser_0 = module_0.WhereParser(str_0, str_0, var_0, var_0, var_0, str_0, var_0, var_0, var_0, str_0, var_0, str_0, str_0, var_0, str_0, str_0, var_0, bool_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == 'Xh=hS\tG&Z@gU>'
    assert where_parser_0.tables_of_from == 'Xh=hS\tG&Z@gU>'
    assert f'{type(where_parser_0.columns_of_values_of_where).__module__}.{type(where_parser_0.columns_of_values_of_where).__qualname__}' == 'enum._EnumDict'
    assert len(where_parser_0.columns_of_values_of_where) == 0
    assert f'{type(where_parser_0.count_keywords).__module__}.{type(where_parser_0.count_keywords).__qualname__}' == 'enum._EnumDict'
    assert len(where_parser_0.count_keywords) == 0
    assert f'{type(where_parser_0.sum_keywords).__module__}.{type(where_parser_0.sum_keywords).__qualname__}' == 'enum._EnumDict'
    assert len(where_parser_0.sum_keywords) == 0
    assert where_parser_0.average_keywords == 'Xh=hS\tG&Z@gU>'
    assert f'{type(where_parser_0.max_keywords).__module__}.{type(where_parser_0.max_keywords).__qualname__}' == 'enum._EnumDict'
    assert len(where_parser_0.max_keywords) == 0
    assert f'{type(where_parser_0.min_keywords).__module__}.{type(where_parser_0.min_keywords).__qualname__}' == 'enum._EnumDict'
    assert len(where_parser_0.min_keywords) == 0
    assert f'{type(where_parser_0.greater_keywords).__module__}.{type(where_parser_0.greater_keywords).__qualname__}' == 'enum._EnumDict'
    assert len(where_parser_0.greater_keywords) == 0
    assert where_parser_0.less_keywords == 'Xh=hS\tG&Z@gU>'
    assert f'{type(where_parser_0.between_keywords).__module__}.{type(where_parser_0.between_keywords).__qualname__}' == 'enum._EnumDict'
    assert len(where_parser_0.between_keywords) == 0
    assert where_parser_0.negation_keywords == 'Xh=hS\tG&Z@gU>'
    assert where_parser_0.junction_keywords == 'Xh=hS\tG&Z@gU>'
    assert f'{type(where_parser_0.disjunction_keywords).__module__}.{type(where_parser_0.disjunction_keywords).__qualname__}' == 'enum._EnumDict'
    assert len(where_parser_0.disjunction_keywords) == 0
    assert where_parser_0.like_keywords == 'Xh=hS\tG&Z@gU>'
    assert where_parser_0.distinct_keywords == 'Xh=hS\tG&Z@gU>'
    assert f'{type(where_parser_0.database_dico).__module__}.{type(where_parser_0.database_dico).__qualname__}' == 'enum._EnumDict'
    assert len(where_parser_0.database_dico) == 0
    assert where_parser_0.database_object is False
    var_1 = var_0.__or__(where_parser_0)
    var_2 = where_parser_0.run()
    assert len(where_parser_0.where_objects) == 13
    assert where_parser_0.count_keyword_offset == []
    assert where_parser_0.sum_keyword_offset == []
    assert where_parser_0.average_keyword_offset == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert where_parser_0.max_keyword_offset == []
    assert where_parser_0.min_keyword_offset == []
    assert where_parser_0.greater_keyword_offset == []
    assert where_parser_0.less_keyword_offset == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert where_parser_0.between_keyword_offset == []
    assert where_parser_0.junction_keyword_offset == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert where_parser_0.disjunction_keyword_offset == []
    assert where_parser_0.negation_keyword_offset == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert where_parser_0.like_keyword_offset == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

def test_case_46():
    str_0 = 'J'
    str_1 = ''
    str_2 = 'l6^mq+St~tAW'
    select_parser_0 = module_0.SelectParser(str_0, str_0, str_1, str_0, str_0, str_0, str_2, str_0, str_0, str_0, str_0)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert select_parser_0.columns_of_select == 'J'
    assert select_parser_0.tables_of_from == 'J'
    assert select_parser_0.phrase == ''
    assert select_parser_0.count_keywords == 'J'
    assert select_parser_0.sum_keywords == 'J'
    assert select_parser_0.average_keywords == 'J'
    assert select_parser_0.max_keywords == 'l6^mq+St~tAW'
    assert select_parser_0.min_keywords == 'J'
    assert select_parser_0.distinct_keywords == 'J'
    assert select_parser_0.database_dico == 'J'
    assert select_parser_0.database_object == 'J'
    var_0 = select_parser_0.run()
    assert len(select_parser_0.select_objects) == 1
    assert select_parser_0.columns_of_select == ['J']
    assert f'{type(select_parser_0.select_object).__module__}.{type(select_parser_0.select_object).__qualname__}' == 'ln2sql.query.Select'
    var_1 = select_parser_0.run()
    assert len(select_parser_0.select_objects) == 2

@pytest.mark.xfail(strict=True)
def test_case_47():
    str_0 = '\x1b'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    select_parser_0 = module_0.SelectParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, dict_0, str_0)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert select_parser_0.columns_of_select == '\x1b'
    assert select_parser_0.tables_of_from == '\x1b'
    assert select_parser_0.phrase == '\x1b'
    assert select_parser_0.count_keywords == '\x1b'
    assert select_parser_0.sum_keywords == '\x1b'
    assert select_parser_0.average_keywords == '\x1b'
    assert select_parser_0.max_keywords == '\x1b'
    assert select_parser_0.min_keywords == '\x1b'
    assert select_parser_0.distinct_keywords == '\x1b'
    assert select_parser_0.database_dico == {'\x1b': '\x1b'}
    assert select_parser_0.database_object == '\x1b'
    var_0 = select_parser_0.get_column_name_with_alias_table(str_0, select_parser_0)
    assert var_0 == '\x1b.\x1b'
    var_1 = select_parser_0.run()
    assert len(select_parser_0.select_objects) == 1
    assert select_parser_0.columns_of_select == ['\x1b']
    assert f'{type(select_parser_0.select_object).__module__}.{type(select_parser_0.select_object).__qualname__}' == 'ln2sql.query.Select'
    var_1.run()

@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = ':b'
    dict_0 = {str_0: str_0}
    select_parser_0 = module_0.SelectParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, dict_0, str_0)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert select_parser_0.columns_of_select == ':b'
    assert select_parser_0.tables_of_from == ':b'
    assert select_parser_0.phrase == ':b'
    assert select_parser_0.count_keywords == ':b'
    assert select_parser_0.sum_keywords == ':b'
    assert select_parser_0.average_keywords == ':b'
    assert select_parser_0.max_keywords == ':b'
    assert select_parser_0.min_keywords == ':b'
    assert select_parser_0.distinct_keywords == ':b'
    assert select_parser_0.database_dico == {':b': ':b'}
    assert select_parser_0.database_object == ':b'
    var_0 = select_parser_0.get_column_name_with_alias_table(str_0, select_parser_0)
    assert var_0 == ':b.:b'
    select_parser_0.get_column_name_with_alias_table(var_0, str_0)

def test_case_49():
    str_0 = ' '
    var_0 = module_2.capwords(str_0)
    order_by_parser_0 = module_0.OrderByParser(str_0, str_0, str_0, var_0, var_0, var_0)
    assert f'{type(order_by_parser_0).__module__}.{type(order_by_parser_0).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert order_by_parser_0.order_by_objects == []
    assert order_by_parser_0.phrases == ' '
    assert order_by_parser_0.tables_of_from == ' '
    assert order_by_parser_0.asc_keywords == ' '
    assert order_by_parser_0.desc_keywords == ''
    assert order_by_parser_0.database_dico == ''
    assert order_by_parser_0.database_object == ''
    var_1 = order_by_parser_0.run()
    assert len(order_by_parser_0.order_by_objects) == 1

@pytest.mark.xfail(strict=True)
def test_case_50():
    str_0 = ''
    order_by_parser_0 = module_0.OrderByParser(str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(order_by_parser_0).__module__}.{type(order_by_parser_0).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert order_by_parser_0.order_by_objects == []
    assert order_by_parser_0.phrases == ''
    assert order_by_parser_0.tables_of_from == ''
    assert order_by_parser_0.asc_keywords == ''
    assert order_by_parser_0.desc_keywords == ''
    assert order_by_parser_0.database_dico == ''
    assert order_by_parser_0.database_object == ''
    var_0 = order_by_parser_0.get_tables_of_column(order_by_parser_0)
    str_1 = 'Cl"`F?5rT_2#nAn{y'
    str_2 = '~{_0/'
    where_parser_0 = module_0.WhereParser(str_1, str_0, var_0, str_1, var_0, str_0, var_0, str_0, str_0, str_0, str_2, var_0, str_0, str_1, str_0, var_0, var_0, str_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == 'Cl"`F?5rT_2#nAn{y'
    assert where_parser_0.tables_of_from == ''
    assert where_parser_0.columns_of_values_of_where == []
    assert where_parser_0.count_keywords == 'Cl"`F?5rT_2#nAn{y'
    assert where_parser_0.sum_keywords == []
    assert where_parser_0.average_keywords == ''
    assert where_parser_0.max_keywords == []
    assert where_parser_0.min_keywords == ''
    assert where_parser_0.greater_keywords == ''
    assert where_parser_0.less_keywords == ''
    assert where_parser_0.between_keywords == '~{_0/'
    assert where_parser_0.negation_keywords == []
    assert where_parser_0.junction_keywords == ''
    assert where_parser_0.disjunction_keywords == 'Cl"`F?5rT_2#nAn{y'
    assert where_parser_0.like_keywords == ''
    assert where_parser_0.distinct_keywords == []
    assert where_parser_0.database_dico == []
    assert where_parser_0.database_object == ''
    var_1 = where_parser_0.run()
    assert where_parser_0.count_keyword_offset == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert where_parser_0.sum_keyword_offset == []
    assert where_parser_0.average_keyword_offset == []
    assert where_parser_0.max_keyword_offset == []
    assert where_parser_0.min_keyword_offset == []
    assert where_parser_0.greater_keyword_offset == []
    assert where_parser_0.less_keyword_offset == []
    assert where_parser_0.between_keyword_offset == [0, 0]
    assert where_parser_0.junction_keyword_offset == []
    assert where_parser_0.disjunction_keyword_offset == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert where_parser_0.negation_keyword_offset == []
    assert where_parser_0.like_keyword_offset == []
    var_0.uniquify(str_1)

@pytest.mark.xfail(strict=True)
def test_case_51():
    str_0 = ':b'
    dict_0 = {str_0: str_0}
    select_parser_0 = module_0.SelectParser(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0, dict_0, str_0)
    assert f'{type(select_parser_0).__module__}.{type(select_parser_0).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert select_parser_0.select_objects == []
    assert select_parser_0.columns_of_select == ':b'
    assert select_parser_0.tables_of_from == ':b'
    assert select_parser_0.phrase == ':b'
    assert select_parser_0.count_keywords == ':b'
    assert select_parser_0.sum_keywords == ':b'
    assert select_parser_0.average_keywords == ':b'
    assert select_parser_0.max_keywords == ':b'
    assert select_parser_0.min_keywords == ':b'
    assert select_parser_0.distinct_keywords == ':b'
    assert select_parser_0.database_dico == {':b': ':b'}
    assert select_parser_0.database_object == ':b'
    list_0 = [select_parser_0]
    where_parser_0 = module_0.WhereParser(select_parser_0, dict_0, str_0, str_0, select_parser_0, select_parser_0, str_0, select_parser_0, select_parser_0, select_parser_0, dict_0, dict_0, dict_0, list_0, list_0, list_0, dict_0, select_parser_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert f'{type(where_parser_0.phrases).__module__}.{type(where_parser_0.phrases).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert where_parser_0.tables_of_from == {':b': ':b'}
    assert where_parser_0.columns_of_values_of_where == ':b'
    assert where_parser_0.count_keywords == ':b'
    assert f'{type(where_parser_0.sum_keywords).__module__}.{type(where_parser_0.sum_keywords).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert f'{type(where_parser_0.average_keywords).__module__}.{type(where_parser_0.average_keywords).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert where_parser_0.max_keywords == ':b'
    assert f'{type(where_parser_0.min_keywords).__module__}.{type(where_parser_0.min_keywords).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert f'{type(where_parser_0.greater_keywords).__module__}.{type(where_parser_0.greater_keywords).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert f'{type(where_parser_0.less_keywords).__module__}.{type(where_parser_0.less_keywords).__qualname__}' == 'ln2sql.parser.SelectParser'
    assert where_parser_0.between_keywords == {':b': ':b'}
    assert where_parser_0.negation_keywords == {':b': ':b'}
    assert where_parser_0.junction_keywords == {':b': ':b'}
    assert f'{type(where_parser_0.disjunction_keywords).__module__}.{type(where_parser_0.disjunction_keywords).__qualname__}' == 'builtins.list'
    assert len(where_parser_0.disjunction_keywords) == 1
    assert f'{type(where_parser_0.like_keywords).__module__}.{type(where_parser_0.like_keywords).__qualname__}' == 'builtins.list'
    assert len(where_parser_0.like_keywords) == 1
    assert f'{type(where_parser_0.distinct_keywords).__module__}.{type(where_parser_0.distinct_keywords).__qualname__}' == 'builtins.list'
    assert len(where_parser_0.distinct_keywords) == 1
    assert where_parser_0.database_dico == {':b': ':b'}
    assert f'{type(where_parser_0.database_object).__module__}.{type(where_parser_0.database_object).__qualname__}' == 'ln2sql.parser.SelectParser'
    var_0 = where_parser_0.get_tables_of_column(str_0)
    where_parser_0.run()

@pytest.mark.xfail(strict=True)
def test_case_52():
    str_0 = ''
    dict_0 = {str_0: str_0}
    order_by_parser_0 = module_0.OrderByParser(str_0, str_0, dict_0, str_0, dict_0, str_0)
    assert f'{type(order_by_parser_0).__module__}.{type(order_by_parser_0).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert order_by_parser_0.order_by_objects == []
    assert order_by_parser_0.phrases == ''
    assert order_by_parser_0.tables_of_from == ''
    assert order_by_parser_0.asc_keywords == {'': ''}
    assert order_by_parser_0.desc_keywords == ''
    assert order_by_parser_0.database_dico == {'': ''}
    assert order_by_parser_0.database_object == ''
    str_1 = 'Cl"`F?5rT_2#nAn{y'
    var_0 = order_by_parser_0.get_tables_of_column(str_1)
    var_0.get_in_list()

@pytest.mark.xfail(strict=True)
def test_case_53():
    str_0 = ''
    order_by_parser_0 = module_0.OrderByParser(str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(order_by_parser_0).__module__}.{type(order_by_parser_0).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert order_by_parser_0.order_by_objects == []
    assert order_by_parser_0.phrases == ''
    assert order_by_parser_0.tables_of_from == ''
    assert order_by_parser_0.asc_keywords == ''
    assert order_by_parser_0.desc_keywords == ''
    assert order_by_parser_0.database_dico == ''
    assert order_by_parser_0.database_object == ''
    str_1 = 'Cl"`F?5rT_2#nAn{y'
    var_0 = order_by_parser_0.get_tables_of_column(str_1)
    dict_0 = {str_0: var_0}
    error_0 = module_1.error(var_0)
    where_parser_0 = module_0.WhereParser(var_0, str_0, var_0, order_by_parser_0, str_0, var_0, var_0, var_0, var_0, var_0, var_0, var_0, dict_0, var_0, var_0, var_0, dict_0, error_0)
    assert f'{type(where_parser_0).__module__}.{type(where_parser_0).__qualname__}' == 'ln2sql.parser.WhereParser'
    assert where_parser_0.where_objects == []
    assert where_parser_0.phrases == []
    assert where_parser_0.tables_of_from == ''
    assert where_parser_0.columns_of_values_of_where == []
    assert f'{type(where_parser_0.count_keywords).__module__}.{type(where_parser_0.count_keywords).__qualname__}' == 'ln2sql.parser.OrderByParser'
    assert where_parser_0.sum_keywords == ''
    assert where_parser_0.average_keywords == []
    assert where_parser_0.max_keywords == []
    assert where_parser_0.min_keywords == []
    assert where_parser_0.greater_keywords == []
    assert where_parser_0.less_keywords == []
    assert where_parser_0.between_keywords == []
    assert where_parser_0.negation_keywords == []
    assert where_parser_0.junction_keywords == {'': []}
    assert where_parser_0.disjunction_keywords == []
    assert where_parser_0.like_keywords == []
    assert where_parser_0.distinct_keywords == []
    assert where_parser_0.database_dico == {'': []}
    assert f'{type(where_parser_0.database_object).__module__}.{type(where_parser_0.database_object).__qualname__}' == 're.error'
    var_1 = where_parser_0.get_tables_of_column(var_0)
    var_1.run()