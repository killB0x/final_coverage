# Automatically generated by Pynguin.
import pytest
import ln2sql.column as module_0

def test_case_0():
    int_0 = 297
    column_0 = module_0.Column(int_0, equivalences=int_0)
    assert f'{type(module_0.Column.name).__module__}.{type(module_0.Column.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.type).__module__}.{type(module_0.Column.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.equivalences).__module__}.{type(module_0.Column.equivalences).__qualname__}' == 'builtins.property'

def test_case_1():
    column_0 = module_0.Column()
    assert f'{type(module_0.Column.name).__module__}.{type(module_0.Column.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.type).__module__}.{type(module_0.Column.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.equivalences).__module__}.{type(module_0.Column.equivalences).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 1747.71
    bool_0 = False
    column_0 = module_0.Column(bool_0)
    assert f'{type(module_0.Column.name).__module__}.{type(module_0.Column.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.type).__module__}.{type(module_0.Column.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.equivalences).__module__}.{type(module_0.Column.equivalences).__qualname__}' == 'builtins.property'
    tuple_0 = (bool_0,)
    column_1 = module_0.Column()
    var_0 = column_1.is_equivalent(tuple_0)
    assert var_0 is False
    column_2 = module_0.Column(type=tuple_0)
    var_0.add_equivalence(float_0)

def test_case_3():
    column_0 = module_0.Column()
    assert f'{type(module_0.Column.name).__module__}.{type(module_0.Column.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.type).__module__}.{type(module_0.Column.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.equivalences).__module__}.{type(module_0.Column.equivalences).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = column_0.is_equivalent(none_type_0)
    assert var_0 is False
    column_1 = module_0.Column(type=none_type_0)
    var_1 = column_0.set_as_primary()

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'\xc8\x9e'
    none_type_0 = None
    column_0 = module_0.Column(equivalences=none_type_0)
    assert f'{type(module_0.Column.name).__module__}.{type(module_0.Column.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.type).__module__}.{type(module_0.Column.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.equivalences).__module__}.{type(module_0.Column.equivalences).__qualname__}' == 'builtins.property'
    var_0 = column_0.is_equivalent(bytes_0)
    assert var_0 is False
    none_type_1 = None
    set_0 = {bytes_0, none_type_1, bytes_0}
    column_1 = module_0.Column(type=none_type_1)
    var_1 = column_1.add_equivalence(bytes_0)
    var_2 = column_1.add_type(set_0)
    var_2.add_equivalence(none_type_1)

def test_case_5():
    column_0 = module_0.Column()
    assert f'{type(module_0.Column.name).__module__}.{type(module_0.Column.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.type).__module__}.{type(module_0.Column.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.equivalences).__module__}.{type(module_0.Column.equivalences).__qualname__}' == 'builtins.property'
    var_0 = column_0.set_as_foreign(column_0)
    none_type_0 = None
    var_1 = column_0.is_equivalent(none_type_0)
    assert var_1 is False
    var_2 = column_0.add_equivalence(none_type_0)
    column_1 = module_0.Column(type=none_type_0)
    var_3 = column_0.set_as_primary()

def test_case_6():
    str_0 = '\t"select": {\n'
    column_0 = module_0.Column()
    assert f'{type(module_0.Column.name).__module__}.{type(module_0.Column.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.type).__module__}.{type(module_0.Column.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.equivalences).__module__}.{type(module_0.Column.equivalences).__qualname__}' == 'builtins.property'
    column_1 = module_0.Column(equivalences=str_0)
    var_0 = column_0.is_foreign()
    var_1 = column_1.is_primary()

def test_case_7():
    column_0 = module_0.Column()
    assert f'{type(module_0.Column.name).__module__}.{type(module_0.Column.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.type).__module__}.{type(module_0.Column.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.equivalences).__module__}.{type(module_0.Column.equivalences).__qualname__}' == 'builtins.property'
    var_0 = column_0.is_foreign()

@pytest.mark.xfail(strict=True)
def test_case_8():
    column_0 = module_0.Column()
    assert f'{type(module_0.Column.name).__module__}.{type(module_0.Column.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.type).__module__}.{type(module_0.Column.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Column.equivalences).__module__}.{type(module_0.Column.equivalences).__qualname__}' == 'builtins.property'
    var_0 = column_0.is_primary()
    var_1 = column_0.set_as_foreign(column_0)
    none_type_0 = None
    var_2 = column_0.is_equivalent(none_type_0)
    assert var_2 is False
    var_3 = column_0.add_equivalence(none_type_0)
    column_1 = module_0.Column(type=none_type_0)
    var_4 = column_0.set_as_primary()
    var_5 = column_0.is_equivalent(var_4)
    assert var_5 is True
    var_0.add_type(column_0)