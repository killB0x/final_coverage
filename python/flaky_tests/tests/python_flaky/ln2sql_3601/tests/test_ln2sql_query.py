# Automatically generated by Pynguin.
import pytest
import ln2sql.query as module_0
import ln2sql.constants as module_1

def test_case_0():
    none_type_0 = None
    select_0 = module_0.Select()
    var_0 = select_0.add_column(none_type_0, none_type_0)
    assert select_0.columns == [[None, None]]

@pytest.mark.xfail(strict=True)
def test_case_1():
    select_0 = module_0.Select()
    var_0 = select_0.__str__()
    assert var_0 == '\x1b[1mSELECT \x1b[0m'
    select_0.print_column(select_0)

def test_case_2():
    from_0 = module_0.From()
    assert from_0.table == ''
    assert module_0.From.table == ''
    select_0 = module_0.Select()
    var_0 = from_0.get_table()
    assert var_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_3():
    select_0 = module_0.Select()
    bool_0 = False
    from_0 = module_0.From()
    assert from_0.table == ''
    assert module_0.From.table == ''
    from_0.print_json(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    join_0 = module_0.Join()
    var_0 = join_0.add_table(join_0)
    assert len(join_0.tables) == 1
    join_0.__str__()

def test_case_5():
    join_0 = module_0.Join()
    var_0 = join_0.__str__()
    assert var_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_6():
    join_0 = module_0.Join()
    var_0 = join_0.add_table(join_0)
    assert len(join_0.tables) == 1
    join_0.print_json(join_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    where_0 = module_0.Where()
    assert where_0.conditions == []
    var_0 = module_0.Condition(where_0, where_0, where_0, where_0)
    assert module_0.Condition.column == ''
    assert module_0.Condition.column_type == ''
    assert module_0.Condition.operator == ''
    assert module_0.Condition.value == ''
    var_1 = where_0.add_condition(var_0, where_0)
    assert len(where_0.conditions) == 1
    var_0.__str__()

def test_case_8():
    bytes_0 = b'\x90\xf1\x0e(\xa1e\xd1$e\xec\xc9'
    where_0 = module_0.Where(bytes_0)

def test_case_9():
    where_0 = module_0.Where()
    assert where_0.conditions == []

def test_case_10():
    where_0 = module_0.Where()
    assert where_0.conditions == []
    var_0 = where_0.__str__()
    assert var_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    where_0 = module_0.Where()
    assert where_0.conditions == []
    where_0.print_json(bool_0)

def test_case_12():
    select_0 = module_0.Select()
    group_by_0 = module_0.GroupBy(select_0)
    assert f'{type(group_by_0.column).__module__}.{type(group_by_0.column).__qualname__}' == 'ln2sql.query.Select'
    var_0 = group_by_0.__str__()
    assert var_0 == '\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0m'
    var_1 = select_0.add_column(var_0, var_0)
    assert select_0.columns == [['\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0m', '\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0m']]
    var_2 = select_0.__str__()
    assert var_2 == '\x1b[1mSELECT \x1b[0m\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0m'

@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b"\x94\xab\x9e\x99\rBy\xf4\x07\x12G\xf7Ux\xff'\x1d\x12"
    group_by_0 = module_0.GroupBy()
    group_by_0.get_just_column_name(bytes_0)

def test_case_14():
    select_0 = module_0.Select()
    group_by_0 = module_0.GroupBy(select_0)
    assert f'{type(group_by_0.column).__module__}.{type(group_by_0.column).__qualname__}' == 'ln2sql.query.Select'
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    var_0 = query_0.__str__()
    assert var_0 == '\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_1 = query_0.set_select(group_by_0)
    var_2 = query_0.__str__()
    assert var_2 == '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_3 = select_0.add_column(var_2, var_2)
    assert select_0.columns == [['\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n', '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n']]
    var_4 = select_0.add_column(var_1, group_by_0)
    assert len(select_0.columns) == 2
    bool_0 = True
    query_0.print_json(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    group_by_0 = module_0.GroupBy()
    order_by_0 = module_0.OrderBy()
    var_0 = group_by_0.get_column()
    group_by_0.print_json(var_0)

def test_case_16():
    order_by_0 = module_0.OrderBy()
    var_0 = order_by_0.add_column(order_by_0, order_by_0)
    assert len(order_by_0.columns) == 1

@pytest.mark.xfail(strict=True)
def test_case_17():
    order_by_0 = module_0.OrderBy()
    var_0 = order_by_0.get_columns()
    var_1 = order_by_0.__str__()
    assert var_1 == ''
    var_0.get_conditions()

@pytest.mark.xfail(strict=True)
def test_case_18():
    order_by_0 = module_0.OrderBy()
    order_by_0.print_json(order_by_0)

def test_case_19():
    join_0 = module_0.Join()
    var_0 = join_0.__str__()
    assert var_0 == ''
    query_0 = module_0.Query(var_0)
    assert query_0.select == ''

@pytest.mark.xfail(strict=True)
def test_case_20():
    join_0 = module_0.Join()
    query_0 = module_0.Query(_from=join_0)
    var_0 = query_0.__str__()
    assert var_0 == '\nNoneNoneNoneNoneNone;\n'
    var_1 = var_0.__str__()
    assert var_1 == '\nNoneNoneNoneNoneNone;\n'
    var_0.add_column(var_1, join_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    order_by_0 = module_0.OrderBy()
    var_0 = order_by_0.get_columns()
    bytes_0 = b"\x94\xab\x9e\x99\rBy\xf4\x07\x12G\xf7Ux\xff'\x1d\x12"
    group_by_0 = module_0.GroupBy()
    var_1 = var_0.__str__()
    query_0 = module_0.Query(group_by_0, join=group_by_0, where=bytes_0, group_by=group_by_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.GroupBy'
    assert f'{type(query_0.join).__module__}.{type(query_0.join).__qualname__}' == 'ln2sql.query.GroupBy'
    assert query_0.where == b"\x94\xab\x9e\x99\rBy\xf4\x07\x12G\xf7Ux\xff'\x1d\x12"
    assert f'{type(query_0.group_by).__module__}.{type(query_0.group_by).__qualname__}' == 'ln2sql.query.GroupBy'
    var_1.set_from(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    select_0 = module_0.Select()
    select_0.print_json(select_0)

def test_case_23():
    select_0 = module_0.Select()
    var_0 = select_0.__str__()
    assert var_0 == '\x1b[1mSELECT \x1b[0m'
    var_1 = select_0.add_column(var_0, var_0)
    assert select_0.columns == [['\x1b[1mSELECT \x1b[0m', '\x1b[1mSELECT \x1b[0m']]
    var_2 = select_0.__str__()
    assert var_2 == '\x1b[1mSELECT \x1b[0m\x1b[1mSELECT \x1b[0m'
    var_3 = select_0.get_columns()

@pytest.mark.xfail(strict=True)
def test_case_24():
    from_0 = module_0.From()
    assert from_0.table == ''
    assert module_0.From.table == ''
    var_0 = from_0.set_table(from_0)
    select_0 = module_0.Select()
    var_1 = select_0.__str__()
    assert var_1 == '\x1b[1mSELECT \x1b[0m'
    var_2 = select_0.add_column(var_1, var_1)
    assert select_0.columns == [['\x1b[1mSELECT \x1b[0m', '\x1b[1mSELECT \x1b[0m']]
    var_3 = select_0.add_column(var_2, var_1)
    assert select_0.columns == [['\x1b[1mSELECT \x1b[0m', '\x1b[1mSELECT \x1b[0m'], [None, '\x1b[1mSELECT \x1b[0m']]
    var_4 = select_0.__str__()
    assert var_4 == '\x1b[1mSELECT \x1b[0m\x1b[1mSELECT \x1b[0m, *'
    var_1.print_json(from_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    join_0 = module_0.Join()
    var_0 = join_0.set_links(join_0)
    join_0.__str__()

def test_case_26():
    order_by_0 = module_0.OrderBy()
    join_0 = module_0.Join()
    var_0 = join_0.get_links()

def test_case_27():
    int_0 = -2551
    none_type_0 = None
    condition_0 = module_0.Condition(int_0, none_type_0, int_0, int_0)
    assert module_0.Condition.column == ''
    assert module_0.Condition.column_type == ''
    assert module_0.Condition.operator == ''
    assert module_0.Condition.value == ''
    var_0 = condition_0.get_value()

@pytest.mark.xfail(strict=True)
def test_case_28():
    color_0 = module_1.Color()
    condition_0 = module_0.Condition(color_0, color_0, color_0, color_0)
    assert module_0.Condition.column == ''
    assert module_0.Condition.column_type == ''
    assert module_0.Condition.operator == ''
    assert module_0.Condition.value == ''
    join_0 = module_0.Join()
    var_0 = condition_0.get_column()
    var_1 = join_0.add_table(color_0)
    assert len(join_0.tables) == 1
    var_2 = join_0.add_table(join_0)
    assert len(join_0.tables) == 2
    join_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_29():
    color_0 = module_1.Color()
    condition_0 = module_0.Condition(color_0, color_0, color_0, color_0)
    assert module_0.Condition.column == ''
    assert module_0.Condition.column_type == ''
    assert module_0.Condition.operator == ''
    assert module_0.Condition.value == ''
    join_0 = module_0.Join()
    tuple_0 = ()
    var_0 = join_0.set_links(tuple_0)
    var_1 = join_0.add_table(color_0)
    assert len(join_0.tables) == 1
    var_2 = join_0.add_table(join_0)
    assert len(join_0.tables) == 2
    var_3 = condition_0.get_in_list()
    join_0.__str__()

def test_case_30():
    where_0 = module_0.Where()
    assert where_0.conditions == []
    var_0 = where_0.__str__()
    assert var_0 == ''
    var_1 = where_0.add_condition(var_0, where_0)

def test_case_31():
    where_0 = module_0.Where()
    assert where_0.conditions == []
    var_0 = where_0.__str__()
    assert var_0 == ''
    var_1 = where_0.get_conditions()

@pytest.mark.xfail(strict=True)
def test_case_32():
    color_0 = module_1.Color()
    join_0 = module_0.Join()
    group_by_0 = module_0.GroupBy()
    var_0 = group_by_0.set_column(color_0)
    var_1 = join_0.add_table(color_0)
    assert len(join_0.tables) == 1
    var_2 = join_0.add_table(join_0)
    assert len(join_0.tables) == 2
    join_0.__str__()

def test_case_33():
    select_0 = module_0.Select()
    group_by_0 = module_0.GroupBy(select_0)
    assert f'{type(group_by_0.column).__module__}.{type(group_by_0.column).__qualname__}' == 'ln2sql.query.Select'
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    var_0 = query_0.set_select(group_by_0)
    var_1 = query_0.__str__()
    assert var_1 == '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_2 = select_0.add_column(var_1, var_1)
    assert select_0.columns == [['\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n', '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n']]
    var_3 = group_by_0.get_column()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'ln2sql.query.Select'
    assert var_3.columns == [['\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n', '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n']]
    var_4 = select_0.__str__()
    assert var_4 == '\x1b[1mSELECT \x1b[0m\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'

def test_case_34():
    order_by_0 = module_0.OrderBy()

def test_case_35():
    select_0 = module_0.Select()
    group_by_0 = module_0.GroupBy(select_0)
    assert f'{type(group_by_0.column).__module__}.{type(group_by_0.column).__qualname__}' == 'ln2sql.query.Select'
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    var_0 = query_0.set_select(group_by_0)
    var_1 = query_0.__str__()
    assert var_1 == '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_2 = select_0.add_column(var_1, var_1)
    assert select_0.columns == [['\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n', '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n']]
    var_3 = select_0.__str__()
    assert var_3 == '\x1b[1mSELECT \x1b[0m\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'

@pytest.mark.xfail(strict=True)
def test_case_36():
    order_by_0 = module_0.OrderBy()
    bytes_0 = b'RELa\xfa\x91uh\x1e\x82\xb0\xa8\xd2\x93\xf1\xfe'
    bytes_1 = b"\x94\xab\x9e\x99\rBy\xf4\x07\x12G\xf7Ux\xff'\x1d\x12"
    var_0 = order_by_0.add_column(bytes_0, bytes_1)
    assert order_by_0.columns == [[b'RELa\xfa\x91uh\x1e\x82\xb0\xa8\xd2\x93\xf1\xfe', b"\x94\xab\x9e\x99\rBy\xf4\x07\x12G\xf7Ux\xff'\x1d\x12"]]
    query_0 = module_0.Query(_from=bytes_1)
    var_1 = query_0.set_from(bytes_1)
    var_1.print_json(order_by_0)

def test_case_37():
    select_0 = module_0.Select()
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    var_0 = query_0.set_join(select_0)
    var_1 = query_0.__str__()
    assert var_1 == '\n\x1b[1mSELECT \x1b[0mNone\x1b[1mSELECT \x1b[0mNoneNoneNone;\n'
    var_2 = select_0.add_column(var_1, var_1)
    assert select_0.columns == [['\n\x1b[1mSELECT \x1b[0mNone\x1b[1mSELECT \x1b[0mNoneNoneNone;\n', '\n\x1b[1mSELECT \x1b[0mNone\x1b[1mSELECT \x1b[0mNoneNoneNone;\n']]
    var_3 = select_0.__str__()
    assert var_3 == '\x1b[1mSELECT \x1b[0m\n\x1b[1mSELECT \x1b[0mNone\x1b[1mSELECT \x1b[0mNoneNoneNone;\n'

@pytest.mark.xfail(strict=True)
def test_case_38():
    none_type_0 = None
    query_0 = module_0.Query(none_type_0, where=none_type_0, group_by=none_type_0)
    var_0 = query_0.set_where(none_type_0)
    var_0.print_json(query_0)

@pytest.mark.xfail(strict=True)
def test_case_39():
    select_0 = module_0.Select()
    group_by_0 = module_0.GroupBy(select_0)
    assert f'{type(group_by_0.column).__module__}.{type(group_by_0.column).__qualname__}' == 'ln2sql.query.Select'
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    var_0 = query_0.get_where()
    var_1 = query_0.set_select(group_by_0)
    var_2 = query_0.__str__()
    assert var_2 == '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_3 = select_0.add_column(var_2, var_2)
    assert select_0.columns == [['\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n', '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n']]
    var_4 = select_0.add_column(var_1, group_by_0)
    assert len(select_0.columns) == 2
    select_0.__str__()

def test_case_40():
    select_0 = module_0.Select()
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    var_0 = query_0.__str__()
    assert var_0 == '\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_1 = select_0.add_column(var_0, var_0)
    assert select_0.columns == [['\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n', '\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n']]
    var_2 = query_0.get_group_by()
    var_3 = select_0.__str__()
    assert var_3 == '\x1b[1mSELECT \x1b[0m\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'

def test_case_41():
    select_0 = module_0.Select()
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    var_0 = query_0.__str__()
    assert var_0 == '\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_1 = select_0.add_column(var_0, var_0)
    assert select_0.columns == [['\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n', '\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n']]
    var_2 = query_0.set_order_by(query_0)
    var_3 = select_0.__str__()
    assert var_3 == '\x1b[1mSELECT \x1b[0m\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'

def test_case_42():
    select_0 = module_0.Select()
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    var_0 = query_0.__str__()
    assert var_0 == '\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_1 = select_0.add_column(var_0, var_0)
    assert select_0.columns == [['\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n', '\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n']]
    var_2 = select_0.__str__()
    assert var_2 == '\x1b[1mSELECT \x1b[0m\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'

def test_case_43():
    select_0 = module_0.Select()
    from_0 = module_0.From()
    assert from_0.table == ''
    assert module_0.From.table == ''
    var_0 = from_0.__str__()
    assert var_0 == '\n\x1b[1mFROM \x1b[0m'
    var_1 = select_0.add_column(var_0, var_0)
    assert select_0.columns == [['\n\x1b[1mFROM \x1b[0m', '\n\x1b[1mFROM \x1b[0m']]
    var_2 = select_0.__str__()
    assert var_2 == '\x1b[1mSELECT \x1b[0m\n\x1b[1mFROM \x1b[0m'

def test_case_44():
    select_0 = module_0.Select()
    group_by_0 = module_0.GroupBy(select_0)
    assert f'{type(group_by_0.column).__module__}.{type(group_by_0.column).__qualname__}' == 'ln2sql.query.Select'
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    var_0 = query_0.get_order_by()
    var_1 = query_0.set_select(group_by_0)
    var_2 = query_0.__str__()
    assert var_2 == '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_3 = select_0.add_column(var_2, var_2)
    assert select_0.columns == [['\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n', '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n']]
    var_4 = select_0.__str__()
    assert var_4 == '\x1b[1mSELECT \x1b[0m\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'

@pytest.mark.xfail(strict=True)
def test_case_45():
    select_0 = module_0.Select()
    select_0.get_just_column_name(select_0)

@pytest.mark.xfail(strict=True)
def test_case_46():
    bool_0 = True
    group_by_0 = module_0.GroupBy()
    condition_0 = module_0.Condition(bool_0, bool_0, bool_0, bool_0)
    assert module_0.Condition.column == ''
    assert module_0.Condition.column_type == ''
    assert module_0.Condition.operator == ''
    assert module_0.Condition.value == ''
    var_0 = condition_0.get_column_type()
    select_0 = module_0.Select()
    select_0.get_just_column_name(select_0)

def test_case_47():
    select_0 = module_0.Select()
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    var_0 = query_0.set_group_by(select_0)
    var_1 = select_0.add_column(var_0, var_0)
    assert select_0.columns == [[None, None]]
    var_2 = select_0.__str__()
    assert var_2 == '\x1b[1mSELECT \x1b[0m*'

@pytest.mark.xfail(strict=True)
def test_case_48():
    none_type_0 = None
    query_0 = module_0.Query(none_type_0, where=none_type_0, group_by=none_type_0)
    query_0.print_json(query_0)

@pytest.mark.xfail(strict=True)
def test_case_49():
    select_0 = module_0.Select()
    none_type_0 = None
    none_type_1 = None
    str_0 = "``g 50h2'R>"
    dict_0 = {select_0: str_0, select_0: select_0, none_type_1: none_type_0}
    from_0 = module_0.From(dict_0)
    assert f'{type(from_0.table).__module__}.{type(from_0.table).__qualname__}' == 'builtins.dict'
    assert len(from_0.table) == 2
    assert module_0.From.table == ''
    var_0 = select_0.add_column(none_type_0, select_0)
    assert len(select_0.columns) == 1
    select_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_50():
    order_by_0 = module_0.OrderBy()
    from_0 = module_0.From(order_by_0)
    assert f'{type(from_0.table).__module__}.{type(from_0.table).__qualname__}' == 'ln2sql.query.OrderBy'
    assert module_0.From.table == ''
    from_0.print_json(order_by_0)

@pytest.mark.xfail(strict=True)
def test_case_51():
    bytes_0 = b'\xdc'
    join_0 = module_0.Join()
    var_0 = module_0.Query(order_by=bytes_0)
    assert var_0.order_by == b'\xdc'
    var_1 = join_0.set_links(bytes_0)
    join_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_52():
    bytes_0 = b'2\x0c\xdc'
    order_by_0 = module_0.OrderBy()
    var_0 = order_by_0.add_column(bytes_0, order_by_0)
    assert len(order_by_0.columns) == 1
    join_0 = module_0.Join()
    var_1 = join_0.get_tables()
    order_by_0.print_json(join_0)

def test_case_53():
    select_0 = module_0.Select()
    group_by_0 = module_0.GroupBy(select_0)
    assert f'{type(group_by_0.column).__module__}.{type(group_by_0.column).__qualname__}' == 'ln2sql.query.Select'
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    var_0 = query_0.__str__()
    assert var_0 == '\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_1 = query_0.get_select()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'ln2sql.query.Select'
    assert var_1.columns == []
    var_2 = query_0.set_select(group_by_0)
    var_3 = query_0.__str__()
    assert var_3 == '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_4 = select_0.add_column(var_3, var_3)
    assert select_0.columns == [['\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n', '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n']]
    assert var_1.columns == [['\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n', '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n']]
    var_5 = select_0.__str__()
    assert var_5 == '\x1b[1mSELECT \x1b[0m\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_6 = group_by_0.get_column()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'ln2sql.query.Select'
    assert var_6.columns == [['\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n', '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n']]

def test_case_54():
    select_0 = module_0.Select()
    group_by_0 = module_0.GroupBy(select_0)
    assert f'{type(group_by_0.column).__module__}.{type(group_by_0.column).__qualname__}' == 'ln2sql.query.Select'
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    var_0 = query_0.__str__()
    assert var_0 == '\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_1 = query_0.get_join()
    var_2 = query_0.set_select(group_by_0)
    var_3 = query_0.__str__()
    assert var_3 == '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_4 = select_0.add_column(var_3, var_3)
    assert select_0.columns == [['\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n', '\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n']]
    where_0 = module_0.Where(group_by_0)
    var_5 = select_0.__str__()
    assert var_5 == '\x1b[1mSELECT \x1b[0m\n\n\x1b[1mGROUP BY \x1b[0m\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'

@pytest.mark.xfail(strict=True)
def test_case_55():
    bytes_0 = b'2\x0c\xdc'
    order_by_0 = module_0.OrderBy()
    join_0 = module_0.Join()
    var_0 = order_by_0.add_column(bytes_0, join_0)
    assert len(order_by_0.columns) == 1
    order_by_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_56():
    select_0 = module_0.Select()
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    var_0 = query_0.get_from()
    order_by_0 = module_0.OrderBy()
    var_1 = query_0.__str__()
    assert var_1 == '\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_2 = var_1.__str__()
    assert var_2 == '\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_3 = select_0.add_column(order_by_0, var_2)
    assert len(select_0.columns) == 1
    var_4 = order_by_0.add_column(var_1, var_1)
    assert order_by_0.columns == [['\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n', '\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n']]
    var_5 = select_0.add_column(var_4, var_2)
    assert len(select_0.columns) == 2
    var_6 = select_0.__str__()
    assert var_6 == '\x1b[1mSELECT \x1b[0m\n\x1b[1mORDER BY \x1b[0m\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n \x1b[1m\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n\x1b[0m, *'
    order_by_0.print_json(var_1)

@pytest.mark.xfail(strict=True)
def test_case_57():
    where_0 = module_0.Where()
    assert where_0.conditions == []
    var_0 = where_0.add_condition(where_0, where_0)
    assert len(where_0.conditions) == 1
    where_0.print_json(var_0)

@pytest.mark.xfail(strict=True)
def test_case_58():
    select_0 = module_0.Select()
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    order_by_0 = module_0.OrderBy()
    var_0 = module_0.GroupBy()
    var_1 = query_0.__str__()
    assert var_1 == '\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_2 = var_1.__str__()
    assert var_2 == '\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n'
    var_3 = order_by_0.add_column(var_1, var_1)
    assert order_by_0.columns == [['\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n', '\n\x1b[1mSELECT \x1b[0mNoneNoneNoneNoneNone;\n']]
    var_4 = select_0.add_column(var_0, var_2)
    assert len(select_0.columns) == 1
    var_5 = select_0.__str__()
    assert var_5 == '\x1b[1mSELECT \x1b[0m'
    order_by_0.print_json(var_1)

@pytest.mark.xfail(strict=True)
def test_case_59():
    where_0 = module_0.Where()
    assert where_0.conditions == []
    var_0 = module_0.Condition(where_0, where_0, where_0, where_0)
    assert module_0.Condition.column == ''
    assert module_0.Condition.column_type == ''
    assert module_0.Condition.operator == ''
    assert module_0.Condition.value == ''
    var_0.print_json(where_0)

@pytest.mark.xfail(strict=True)
def test_case_60():
    select_0 = module_0.Select()
    none_type_0 = None
    var_0 = select_0.add_column(none_type_0, none_type_0)
    assert select_0.columns == [[None, None]]
    var_1 = select_0.__str__()
    assert var_1 == '\x1b[1mSELECT \x1b[0m*'
    condition_0 = module_0.Condition(var_0, none_type_0, none_type_0, var_0)
    assert module_0.Condition.column == ''
    assert module_0.Condition.column_type == ''
    assert module_0.Condition.operator == ''
    assert module_0.Condition.value == ''
    condition_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_61():
    join_0 = module_0.Join()
    var_0 = join_0.__str__()
    assert var_0 == ''
    join_0.print_json(join_0)

@pytest.mark.xfail(strict=True)
def test_case_62():
    select_0 = module_0.Select()
    where_0 = module_0.Where()
    assert where_0.conditions == []
    none_type_0 = None
    condition_0 = module_0.Condition(where_0, none_type_0, none_type_0, none_type_0)
    assert module_0.Condition.column == ''
    assert module_0.Condition.column_type == ''
    assert module_0.Condition.operator == ''
    assert module_0.Condition.value == ''
    condition_0.get_just_column_name(where_0)

def test_case_63():
    select_0 = module_0.Select()
    var_0 = select_0.__str__()
    assert var_0 == '\x1b[1mSELECT \x1b[0m'
    var_1 = select_0.add_column(var_0, var_0)
    assert select_0.columns == [['\x1b[1mSELECT \x1b[0m', '\x1b[1mSELECT \x1b[0m']]
    var_2 = select_0.__str__()
    assert var_2 == '\x1b[1mSELECT \x1b[0m\x1b[1mSELECT \x1b[0m'

def test_case_64():
    select_0 = module_0.Select()
    none_type_0 = None
    var_0 = select_0.add_column(none_type_0, none_type_0)
    assert select_0.columns == [[None, None]]
    var_1 = select_0.__str__()
    assert var_1 == '\x1b[1mSELECT \x1b[0m*'

@pytest.mark.xfail(strict=True)
def test_case_65():
    select_0 = module_0.Select()
    none_type_0 = None
    var_0 = select_0.add_column(none_type_0, none_type_0)
    assert select_0.columns == [[None, None]]
    select_0.print_json(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_66():
    join_0 = module_0.Join()
    var_0 = join_0.add_table(join_0)
    assert len(join_0.tables) == 1
    var_1 = join_0.add_table(join_0)
    join_0.print_json(join_0)

@pytest.mark.xfail(strict=True)
def test_case_67():
    color_0 = module_1.Color()
    condition_0 = module_0.Condition(color_0, color_0, color_0, color_0)
    assert module_0.Condition.column == ''
    assert module_0.Condition.column_type == ''
    assert module_0.Condition.operator == ''
    assert module_0.Condition.value == ''
    join_0 = module_0.Join()
    tuple_0 = ()
    var_0 = condition_0.get_operator()
    var_1 = join_0.set_links(tuple_0)
    var_2 = join_0.add_table(color_0)
    assert len(join_0.tables) == 1
    var_3 = join_0.add_table(join_0)
    assert len(join_0.tables) == 2
    var_4 = condition_0.get_in_list()
    join_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_68():
    where_0 = module_0.Where()
    assert where_0.conditions == []
    var_0 = where_0.add_condition(where_0, where_0)
    assert len(where_0.conditions) == 1
    none_type_0 = None
    join_0 = module_0.Join()
    var_1 = join_0.__str__()
    assert var_1 == ''
    var_2 = where_0.add_condition(none_type_0, where_0)
    assert len(where_0.conditions) == 2
    where_0.print_json(var_1)

@pytest.mark.xfail(strict=True)
def test_case_69():
    select_0 = module_0.Select()
    var_0 = module_0.Where(select_0)
    var_1 = var_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_70():
    order_by_0 = module_0.OrderBy()
    var_0 = order_by_0.add_column(order_by_0, order_by_0)
    assert len(order_by_0.columns) == 1
    order_by_0.print_json(order_by_0)

@pytest.mark.xfail(strict=True)
def test_case_71():
    select_0 = module_0.Select()
    none_type_0 = None
    var_0 = select_0.add_column(none_type_0, none_type_0)
    assert select_0.columns == [[None, None]]
    var_1 = select_0.add_column(var_0, select_0)
    assert len(select_0.columns) == 2
    select_0.__str__()

def test_case_72():
    select_0 = module_0.Select()
    var_0 = select_0.__str__()
    assert var_0 == '\x1b[1mSELECT \x1b[0m'
    var_1 = select_0.add_column(var_0, var_0)
    assert select_0.columns == [['\x1b[1mSELECT \x1b[0m', '\x1b[1mSELECT \x1b[0m']]
    var_2 = select_0.add_column(var_0, var_0)
    var_3 = select_0.add_column(var_2, var_0)
    assert select_0.columns == [['\x1b[1mSELECT \x1b[0m', '\x1b[1mSELECT \x1b[0m'], [None, '\x1b[1mSELECT \x1b[0m']]
    var_4 = select_0.__str__()
    assert var_4 == '\x1b[1mSELECT \x1b[0m\x1b[1mSELECT \x1b[0m, *'

@pytest.mark.xfail(strict=True)
def test_case_73():
    select_0 = module_0.Select()
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    none_type_0 = None
    var_0 = select_0.add_column(none_type_0, none_type_0)
    assert select_0.columns == [[None, None]]
    var_1 = query_0.__str__()
    assert var_1 == '\n\x1b[1mSELECT \x1b[0m*NoneNoneNoneNoneNone;\n'
    var_2 = var_1.__str__()
    assert var_2 == '\n\x1b[1mSELECT \x1b[0m*NoneNoneNoneNoneNone;\n'
    var_3 = select_0.add_column(var_1, var_1)
    assert select_0.columns == [[None, None], ['\n\x1b[1mSELECT \x1b[0m*NoneNoneNoneNoneNone;\n', '\n\x1b[1mSELECT \x1b[0m*NoneNoneNoneNoneNone;\n']]
    var_4 = select_0.__str__()
    assert var_4 == '\x1b[1mSELECT \x1b[0m*, \n\x1b[1mSELECT \x1b[0m*NoneNoneNoneNoneNone;\n'
    query_0.print_json()

@pytest.mark.xfail(strict=True)
def test_case_74():
    bytes_0 = b'2\x0c\xdc'
    order_by_0 = module_0.OrderBy()
    join_0 = module_0.Join()
    var_0 = order_by_0.add_column(bytes_0, order_by_0)
    assert len(order_by_0.columns) == 1
    var_1 = join_0.__str__()
    assert var_1 == ''
    var_2 = order_by_0.add_column(bytes_0, var_1)
    assert len(order_by_0.columns) == 2
    order_by_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_75():
    color_0 = module_1.Color()
    join_0 = module_0.Join()
    var_0 = join_0.add_table(color_0)
    assert len(join_0.tables) == 1
    join_1 = module_0.Join()
    var_1 = join_0.add_table(join_0)
    assert len(join_0.tables) == 2
    join_0.print_json(join_1)

@pytest.mark.xfail(strict=True)
def test_case_76():
    bytes_0 = b'2\x0c\xdc'
    order_by_0 = module_0.OrderBy()
    var_0 = order_by_0.add_column(bytes_0, order_by_0)
    assert len(order_by_0.columns) == 1
    join_0 = module_0.Join()
    var_1 = order_by_0.add_column(join_0, order_by_0)
    assert len(order_by_0.columns) == 2
    order_by_0.print_json(var_0)

@pytest.mark.xfail(strict=True)
def test_case_77():
    bytes_0 = b'2\x0c\xdc'
    join_0 = module_0.Join()
    var_0 = join_0.set_links(bytes_0)
    join_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_78():
    group_by_0 = module_0.GroupBy()
    where_0 = module_0.Where()
    assert where_0.conditions == []
    assert len(module_0.Where.conditions) == 2771
    order_by_0 = module_0.OrderBy()
    var_0 = group_by_0.get_column()
    var_1 = var_0.__str__()
    var_2 = var_0.__str__()
    var_3 = group_by_0.get_just_column_name(var_1)
    assert var_3 == 'None'
    var_0.get_in_list()

@pytest.mark.xfail(strict=True)
def test_case_79():
    select_0 = module_0.Select()
    none_type_0 = None
    var_0 = select_0.add_column(none_type_0, none_type_0)
    assert select_0.columns == [[None, None]]
    var_1 = select_0.add_column(var_0, select_0)
    assert len(select_0.columns) == 2
    var_2 = var_0.__str__()
    select_0.print_json(none_type_0)

def test_case_80():
    order_by_0 = module_0.OrderBy()
    join_0 = module_0.Join()
    var_0 = join_0.__str__()
    assert var_0 == ''
    var_1 = order_by_0.add_column(var_0, var_0)
    assert order_by_0.columns == [['', '']]
    var_2 = order_by_0.__str__()
    assert var_2 == '\n\x1b[1mORDER BY \x1b[0m \x1b[1m\x1b[0m'
    var_3 = var_1.__str__()
    var_4 = var_2.__str__()
    assert var_4 == '\n\x1b[1mORDER BY \x1b[0m \x1b[1m\x1b[0m'

@pytest.mark.xfail(strict=True)
def test_case_81():
    color_0 = module_1.Color()
    join_0 = module_0.Join()
    var_0 = join_0.add_table(color_0)
    assert len(join_0.tables) == 1
    var_1 = join_0.add_table(join_0)
    assert len(join_0.tables) == 2
    join_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_82():
    select_0 = module_0.Select()
    query_0 = module_0.Query(select_0)
    assert f'{type(query_0.select).__module__}.{type(query_0.select).__qualname__}' == 'ln2sql.query.Select'
    none_type_0 = None
    var_0 = select_0.add_column(none_type_0, none_type_0)
    assert select_0.columns == [[None, None]]
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()
    var_3 = select_0.add_column(var_1, var_1)
    assert select_0.columns == [[None, None], ['None', 'None']]
    var_4 = select_0.__str__()
    assert var_4 == '\x1b[1mSELECT \x1b[0m*, None'
    query_0.print_json()

def test_case_83():
    select_0 = module_0.Select()
    none_type_0 = None
    var_0 = select_0.__str__()
    assert var_0 == '\x1b[1mSELECT \x1b[0m'
    var_1 = select_0.add_column(none_type_0, var_0)
    assert select_0.columns == [[None, '\x1b[1mSELECT \x1b[0m']]
    var_2 = select_0.__str__()
    assert var_2 == '\x1b[1mSELECT \x1b[0m*'

@pytest.mark.xfail(strict=True)
def test_case_84():
    order_by_0 = module_0.OrderBy()
    var_0 = order_by_0.add_column(order_by_0, order_by_0)
    assert len(order_by_0.columns) == 1
    var_1 = order_by_0.add_column(var_0, var_0)
    assert len(order_by_0.columns) == 2
    var_2 = order_by_0.add_column(order_by_0, order_by_0)
    var_2.get_just_column_name(order_by_0)

@pytest.mark.xfail(strict=True)
def test_case_85():
    where_0 = module_0.Where()
    assert where_0.conditions == []
    assert len(module_0.Where.conditions) == 2771
    var_0 = where_0.__str__()
    assert var_0 == ''
    var_1 = where_0.add_condition(var_0, var_0)
    assert where_0.conditions == [['', '']]
    none_type_0 = None
    var_2 = where_0.__str__()
    assert var_2 == '\n\x1b[1mWHERE\x1b[0m '
    var_3 = var_2.__str__()
    assert var_3 == '\n\x1b[1mWHERE\x1b[0m '
    var_4 = where_0.add_condition(none_type_0, where_0)
    var_2.get_operator()

def test_case_86():
    color_0 = module_1.Color()
    condition_0 = module_0.Condition(color_0, color_0, color_0, color_0)
    assert module_0.Condition.column == ''
    assert module_0.Condition.column_type == ''
    assert module_0.Condition.operator == ''
    assert module_0.Condition.value == ''
    join_0 = module_0.Join()
    var_0 = join_0.add_table(color_0)
    assert len(join_0.tables) == 1
    none_type_0 = None
    var_1 = join_0.add_table(none_type_0)
    assert len(join_0.tables) == 2
    var_2 = join_0.__str__()