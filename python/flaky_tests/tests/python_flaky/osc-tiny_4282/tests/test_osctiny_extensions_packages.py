# Automatically generated by Pynguin.
import pytest
import osctiny.utils.errors as module_0
import osctiny.extensions.packages as module_1
import builtins as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    osc_error_0 = module_0.OscError()
    none_type_0 = None
    package_0 = module_1.Package(none_type_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.get_meta(package_0, package_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    package_0 = module_1.Package(bool_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.set_meta(bool_0, package_0, description=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    package_0 = module_1.Package(bool_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.set_meta(bool_0, package_0, description=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'deXQ!QwAu~p'
    package_0 = module_1.Package(str_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.download_file(package_0, package_0, str_0, str_0, rev=package_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '[yaJfAXb'
    package_0 = module_1.Package(str_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.checkout(package_0, package_0, str_0, package_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    package_0 = module_1.Package(bool_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.aggregate(bool_0, bool_0, bool_0, package_0, no_sources=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    package_0 = module_1.Package(bool_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    bool_1 = False
    package_0.aggregate(bool_0, package_0, bool_1, bool_0, bool_1)

def test_case_7():
    bool_0 = False
    package_0 = module_1.Package(bool_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'

@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 259
    package_0 = module_1.Package(int_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    dict_0 = {int_0: int_0}
    package_0.get_list(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'zyaJfAXb'
    package_0 = module_1.Package(str_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.checkout(package_0, package_0, str_0, package_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 189
    none_type_0 = None
    float_0 = -2324.16
    package_0 = module_1.Package(none_type_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.push_file(none_type_0, int_0, float_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    package_0 = module_1.Package(bool_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.get_history(bool_0, package_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    set_0 = set()
    osc_error_0 = module_0.OscError()
    package_0 = module_1.Package(set_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.get_comments(osc_error_0, osc_error_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    float_0 = -1289.5
    none_type_0 = None
    package_0 = module_1.Package(float_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.add_comment(float_0, none_type_0, none_type_0)

def test_case_14():
    bool_0 = True
    package_0 = module_1.Package(bool_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    with pytest.raises(module_0.OscError):
        package_0.aggregate(package_0, package_0, package_0, package_0, no_sources=package_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'deX!QwAu~p'
    package_0 = module_1.Package(str_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.download_file(package_0, package_0, str_0, str_0, rev=package_0)

def test_case_16():
    str_0 = 't#>u'
    package_0 = module_1.Package(str_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    with pytest.raises(ValueError):
        package_0.cmd(package_0, package_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    exception_0 = module_2.Exception()
    none_type_0 = None
    package_0 = module_1.Package(none_type_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.exists(exception_0, exception_0, exception_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = '\\0Vxy$@1goq74}b/^3W&'
    none_type_0 = None
    package_0 = module_1.Package(str_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.get_meta(none_type_0, none_type_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    tuple_0 = ()
    none_type_0 = None
    package_0 = module_1.Package(none_type_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.set_meta(none_type_0, tuple_0, tuple_0, meta=tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = True
    package_0 = module_1.Package(bool_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.set_meta(bool_0, package_0, bool_0)

def test_case_21():
    bool_0 = True
    package_0 = module_1.Package(bool_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    with pytest.raises(TypeError):
        package_0.checkout(bool_0, package_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    dict_0 = {}
    package_0 = module_1.Package(dict_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    str_0 = '$)X=BH%^\\-\n L(n6'
    package_0.set_meta(dict_0, dict_0, meta=str_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = ''
    package_0 = module_1.Package(str_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.download_file(package_0, package_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = 'yaSXb'
    package_0 = module_1.Package(str_0)
    assert module_1.Package.base_path == '/source'
    assert module_1.Package.new_package_meta_templ == '<package><title/><description/></package>'
    package_0.download_file(str_0, str_0, str_0, str_0, overwrite=package_0, rev=package_0)