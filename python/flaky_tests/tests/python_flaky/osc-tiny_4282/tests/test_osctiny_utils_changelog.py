# Automatically generated by Pynguin.
import pytest
import osctiny.utils.changelog as module_0
import re as module_1

def test_case_0():
    entry_0 = module_0.Entry()
    assert f'{type(entry_0).__module__}.{type(entry_0).__qualname__}' == 'osctiny.utils.changelog.Entry'
    assert len(entry_0) == 0
    assert module_0.Entry.content == ''
    assert f'{type(module_0.Entry.formatted_timestamp).__module__}.{type(module_0.Entry.formatted_timestamp).__qualname__}' == 'builtins.property'

def test_case_1():
    entry_0 = module_0.Entry()
    assert f'{type(entry_0).__module__}.{type(entry_0).__qualname__}' == 'osctiny.utils.changelog.Entry'
    assert len(entry_0) == 0
    assert module_0.Entry.content == ''
    assert f'{type(module_0.Entry.formatted_timestamp).__module__}.{type(module_0.Entry.formatted_timestamp).__qualname__}' == 'builtins.property'
    var_0 = entry_0.__len__()
    assert var_0 == 0

def test_case_2():
    entry_0 = module_0.Entry()
    assert f'{type(entry_0).__module__}.{type(entry_0).__qualname__}' == 'osctiny.utils.changelog.Entry'
    assert len(entry_0) == 0
    assert module_0.Entry.content == ''
    assert f'{type(module_0.Entry.formatted_timestamp).__module__}.{type(module_0.Entry.formatted_timestamp).__qualname__}' == 'builtins.property'
    var_0 = entry_0.__str__()
    assert var_0 == '-------------------------------------------------------------------\nThu Oct 13 02:59:20 UTC 2022 - None\n\n\n\n'

def test_case_3():
    change_log_0 = module_0.ChangeLog()
    assert f'{type(module_0.ChangeLog.parse).__module__}.{type(module_0.ChangeLog.parse).__qualname__}' == 'builtins.method'
    with pytest.raises(TypeError):
        change_log_0.write(change_log_0)

def test_case_4():
    entry_0 = module_0.Entry()
    assert f'{type(entry_0).__module__}.{type(entry_0).__qualname__}' == 'osctiny.utils.changelog.Entry'
    assert len(entry_0) == 0
    assert module_0.Entry.content == ''
    assert f'{type(module_0.Entry.formatted_timestamp).__module__}.{type(module_0.Entry.formatted_timestamp).__qualname__}' == 'builtins.property'
    var_0 = entry_0.__unicode__()
    assert var_0 == '-------------------------------------------------------------------\nThu Oct 13 02:59:20 UTC 2022 - None\n\n\n\n'

def test_case_5():
    change_log_0 = module_0.ChangeLog()
    assert f'{type(module_0.ChangeLog.parse).__module__}.{type(module_0.ChangeLog.parse).__qualname__}' == 'builtins.method'

def test_case_6():
    bool_0 = True
    with pytest.raises(TypeError):
        module_0.Entry(bool_0)

def test_case_7():
    entry_0 = module_0.Entry()
    assert f'{type(entry_0).__module__}.{type(entry_0).__qualname__}' == 'osctiny.utils.changelog.Entry'
    assert len(entry_0) == 0
    assert module_0.Entry.content == ''
    assert f'{type(module_0.Entry.formatted_timestamp).__module__}.{type(module_0.Entry.formatted_timestamp).__qualname__}' == 'builtins.property'
    var_0 = entry_0.__bool__()
    assert var_0 is False

def test_case_8():
    str_0 = '\nBuild result extension\n----------------------\n'
    change_log_0 = module_0.ChangeLog()
    assert f'{type(module_0.ChangeLog.parse).__module__}.{type(module_0.ChangeLog.parse).__qualname__}' == 'builtins.method'
    var_0 = change_log_0.write(str_0)

def test_case_9():
    entry_0 = module_0.Entry()
    assert f'{type(entry_0).__module__}.{type(entry_0).__qualname__}' == 'osctiny.utils.changelog.Entry'
    assert len(entry_0) == 0
    assert module_0.Entry.content == ''
    assert f'{type(module_0.Entry.formatted_timestamp).__module__}.{type(module_0.Entry.formatted_timestamp).__qualname__}' == 'builtins.property'
    var_0 = entry_0.now()
    entry_1 = module_0.Entry(var_0, content=var_0)
    assert f'{type(entry_1).__module__}.{type(entry_1).__qualname__}' == 'osctiny.utils.changelog.Entry'
    assert len(entry_1) == 0
    var_1 = entry_1.__len__()
    assert var_1 == 0

def test_case_10():
    change_log_0 = module_0.ChangeLog()
    assert f'{type(module_0.ChangeLog.parse).__module__}.{type(module_0.ChangeLog.parse).__qualname__}' == 'builtins.method'
    entry_0 = module_0.Entry(packager=change_log_0)
    assert f'{type(entry_0).__module__}.{type(entry_0).__qualname__}' == 'osctiny.utils.changelog.Entry'
    assert len(entry_0) == 0
    assert module_0.Entry.content == ''
    assert f'{type(module_0.Entry.formatted_timestamp).__module__}.{type(module_0.Entry.formatted_timestamp).__qualname__}' == 'builtins.property'
    var_0 = entry_0.__unicode__()
    var_1 = entry_0.__len__()
    assert var_1 == 0

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '\nBuhld result extension\n----------------------\n'
    change_log_0 = module_0.ChangeLog()
    assert f'{type(module_0.ChangeLog.parse).__module__}.{type(module_0.ChangeLog.parse).__qualname__}' == 'builtins.method'
    entry_0 = module_0.Entry(packager=change_log_0, content=str_0)
    assert f'{type(entry_0).__module__}.{type(entry_0).__qualname__}' == 'osctiny.utils.changelog.Entry'
    assert len(entry_0) == 1
    assert module_0.Entry.content == ''
    assert f'{type(module_0.Entry.formatted_timestamp).__module__}.{type(module_0.Entry.formatted_timestamp).__qualname__}' == 'builtins.property'
    var_0 = entry_0.__bool__()
    assert var_0 is True
    var_0.__unicode__()

@pytest.mark.xfail(strict=True)
def test_case_12():
    entry_0 = module_0.Entry()
    assert f'{type(entry_0).__module__}.{type(entry_0).__qualname__}' == 'osctiny.utils.changelog.Entry'
    assert len(entry_0) == 0
    assert module_0.Entry.content == ''
    assert f'{type(module_0.Entry.formatted_timestamp).__module__}.{type(module_0.Entry.formatted_timestamp).__qualname__}' == 'builtins.property'
    var_0 = entry_0.now()
    var_1 = entry_0.__bool__()
    assert var_1 is False
    var_2 = var_0.now()
    var_3 = var_1.__bool__()
    assert var_3 is False
    var_4 = module_0.is_aware(var_2)
    assert var_4 is False
    var_4.__unicode__()

@pytest.mark.xfail(strict=True)
def test_case_13():
    entry_0 = module_0.Entry()
    assert f'{type(entry_0).__module__}.{type(entry_0).__qualname__}' == 'osctiny.utils.changelog.Entry'
    assert len(entry_0) == 0
    assert module_0.Entry.content == ''
    assert f'{type(module_0.Entry.formatted_timestamp).__module__}.{type(module_0.Entry.formatted_timestamp).__qualname__}' == 'builtins.property'
    var_0 = entry_0.now()
    var_1 = entry_0.__bool__()
    assert var_1 is False
    var_2 = module_0.is_aware(var_0)
    var_3 = entry_0.__unicode__()
    assert var_3 == '-------------------------------------------------------------------\nThu Oct 13 02:59:20 UTC 2022 - None\n\n\n\n'
    entry_1 = module_0.Entry(packager=var_3)
    assert len(entry_1) == 0
    change_log_0 = module_0.ChangeLog()
    assert f'{type(module_0.ChangeLog.parse).__module__}.{type(module_0.ChangeLog.parse).__qualname__}' == 'builtins.method'
    bool_0 = True
    entry_2 = module_0.Entry(packager=bool_0, content=var_0)
    assert len(entry_2) == 1
    var_4 = change_log_0.write(var_3)
    var_5 = var_3.__str__()
    assert var_5 == '-------------------------------------------------------------------\nThu Oct 13 02:59:20 UTC 2022 - None\n\n\n\n'
    var_6 = entry_2.__str__()
    var_7 = entry_2.__len__()
    assert var_7 == 1
    var_8 = module_1.template(var_5, var_7)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 're.Pattern'
    var_8.__bool__()

def test_case_14():
    change_log_0 = module_0.ChangeLog()
    assert f'{type(module_0.ChangeLog.parse).__module__}.{type(module_0.ChangeLog.parse).__qualname__}' == 'builtins.method'
    entry_0 = module_0.Entry()
    assert f'{type(entry_0).__module__}.{type(entry_0).__qualname__}' == 'osctiny.utils.changelog.Entry'
    assert len(entry_0) == 0
    assert module_0.Entry.content == ''
    assert f'{type(module_0.Entry.formatted_timestamp).__module__}.{type(module_0.Entry.formatted_timestamp).__qualname__}' == 'builtins.property'
    var_0 = entry_0.now()
    var_1 = entry_0.__bool__()
    assert var_1 is False
    var_2 = module_0.is_aware(var_0)
    entry_1 = module_0.Entry(packager=var_0)
    assert len(entry_1) == 0
    var_3 = var_0.now()
    with pytest.raises(ValueError):
        module_0.Entry(var_3)