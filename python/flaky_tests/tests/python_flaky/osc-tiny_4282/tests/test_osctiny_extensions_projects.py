# Automatically generated by Pynguin.
import pytest
import osctiny.extensions.projects as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    none_type_0.exists(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    int_0 = -432
    project_0 = module_0.Project(bool_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    project_0.exists(int_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    project_0 = module_0.Project(none_type_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    project_0.get_files(none_type_0, project_0, rev=project_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    str_0 = "f5H+'.s,fB"
    dict_0 = {str_0: none_type_0, str_0: str_0, str_0: str_0, str_0: str_0}
    project_0 = module_0.Project(none_type_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    project_0.get_files(none_type_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    project_0 = module_0.Project(none_type_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    project_0.get_history(project_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    project_0 = module_0.Project(none_type_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    project_0.get_list(project_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    project_0 = module_0.Project(none_type_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    project_0.get_meta(project_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    project_0 = module_0.Project(none_type_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    project_0.get_comments(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    project_0 = module_0.Project(none_type_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    project_0.add_comment(project_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'z=[>)'
    project_0 = module_0.Project(str_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    project_0.put_meta(str_0, title=str_0, bugowner=project_0, maintainer=project_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    project_0 = module_0.Project(none_type_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    project_0.put_meta(project_0, project_0, bugowner=none_type_0, maintainer=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    project_0 = module_0.Project(none_type_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    project_0.get_history(project_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    project_0 = module_0.Project(none_type_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    float_0 = 2936.97859
    project_0.get_history(float_0, rev=float_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    str_0 = '/include_remotes'
    project_0 = module_0.Project(none_type_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    project_0.get_files(str_0, meta=str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = '}x5C_hp@!\\'
    project_0 = module_0.Project(str_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    project_0.put_meta(str_0, maintainer=str_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '}x5C_Whpq<@l\\'
    project_0 = module_0.Project(str_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    project_0.put_meta(str_0, description=str_0, bugowner=str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = ')%#l.UQ-yqhJgN#l0BWd'
    project_0 = module_0.Project(str_0)
    assert module_0.TEMPLATE_CREATE_ATTR == "<attributes><attribute namespace='' name=''><value></value></attribute></attributes>"
    assert module_0.TEMPLATE_META == "<project name=''><title></title><description></description><person userid='' role='bugowner'/><person userid='' role='maintainer'/><build><enable/></build><publish><disable/></publish><debuginfo><enable/></debuginfo></project>"
    assert module_0.Project.base_path == '/source'
    project_0.put_meta(str_0, bugowner=str_0, maintainer=str_0)