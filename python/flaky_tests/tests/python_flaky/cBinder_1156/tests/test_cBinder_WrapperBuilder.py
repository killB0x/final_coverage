# Automatically generated by Pynguin.
import pytest
import cBinder.WrapperBuilder as module_0
import platform as module_1

def test_case_0():
    bool_0 = False
    wrapper_builder_0 = module_0.WrapperBuilder(bool_0)
    assert wrapper_builder_0.dynamic_lib_ext == '.so'
    assert module_0.unique_identifier_suffix == '__internal'

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '\r>srS'
    none_type_0 = None
    wrapper_builder_0 = module_0.WrapperBuilder(none_type_0, dynamic_lib_name=str_0)
    assert wrapper_builder_0.dynamic_lib_ext == '.so'
    assert module_0.unique_identifier_suffix == '__internal'
    wrapper_builder_0.build_wrapper_for_structs_and_functions(str_0, wrapper_builder_0, str_0, wrapper_builder_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    wrapper_builder_0 = module_0.WrapperBuilder(none_type_0)
    assert wrapper_builder_0.dynamic_lib_ext == '.so'
    assert module_0.unique_identifier_suffix == '__internal'
    wrapper_builder_0.build_wrapper_for_header(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'Wczm\rXgM{gs!h'
    wrapper_builder_0 = module_0.WrapperBuilder(str_0, str_0)
    assert wrapper_builder_0.dynamic_lib_ext == '.so'
    assert module_0.unique_identifier_suffix == '__internal'
    var_0 = module_1.processor()
    wrapper_builder_0.build_wrapper_for_structs_and_functions(var_0, var_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'Wczm\rXgM{gs!h'
    wrapper_builder_0 = module_0.WrapperBuilder(str_0, str_0)
    assert wrapper_builder_0.dynamic_lib_ext == '.so'
    assert module_0.unique_identifier_suffix == '__internal'
    var_0 = module_1.node()
    wrapper_builder_0.build_wrapper_for_structs_and_functions(var_0, var_0, wrapper_builder_0, wrapper_builder_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'Wczm\rXgM{gs!h'
    wrapper_builder_0 = module_0.WrapperBuilder(str_0, str_0)
    assert wrapper_builder_0.dynamic_lib_ext == '.so'
    assert module_0.unique_identifier_suffix == '__internal'
    var_0 = module_1.processor()
    var_1 = module_1.node()
    wrapper_builder_0.build_wrapper_for_structs_and_functions(var_1, var_0, var_1, str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'Wczm\rXgM{gs!h'
    wrapper_builder_0 = module_0.WrapperBuilder(str_0, str_0)
    assert wrapper_builder_0.dynamic_lib_ext == '.so'
    assert module_0.unique_identifier_suffix == '__internal'
    var_0 = module_1.python_revision()
    var_1 = module_1.node()
    wrapper_builder_0.build_wrapper_for_structs_and_functions(var_0, var_0, var_0, var_1)