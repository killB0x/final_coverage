# Automatically generated by Pynguin.
import pytest
import cBinder.LibPaths as module_0

def test_case_0():
    dict_0 = {}
    lib_paths_0 = module_0.LibPaths(**dict_0)
    assert f'{type(module_0.LibPaths.import_path).__module__}.{type(module_0.LibPaths.import_path).__qualname__}' == 'builtins.property'
    var_0 = lib_paths_0.set_path(dict_0)

def test_case_1():
    lib_paths_0 = module_0.LibPaths()
    assert f'{type(module_0.LibPaths.import_path).__module__}.{type(module_0.LibPaths.import_path).__qualname__}' == 'builtins.property'
    var_0 = lib_paths_0.get_path()

def test_case_2():
    lib_paths_0 = module_0.LibPaths()
    assert f'{type(module_0.LibPaths.import_path).__module__}.{type(module_0.LibPaths.import_path).__qualname__}' == 'builtins.property'
    var_0 = lib_paths_0.only_static()
    assert var_0 is False

def test_case_3():
    lib_paths_0 = module_0.LibPaths()
    assert f'{type(module_0.LibPaths.import_path).__module__}.{type(module_0.LibPaths.import_path).__qualname__}' == 'builtins.property'

def test_case_4():
    lib_paths_0 = module_0.LibPaths()
    assert f'{type(module_0.LibPaths.import_path).__module__}.{type(module_0.LibPaths.import_path).__qualname__}' == 'builtins.property'
    var_0 = lib_paths_0.__bool__()

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'from .lib import _'
    lib_paths_0 = module_0.LibPaths()
    assert f'{type(module_0.LibPaths.import_path).__module__}.{type(module_0.LibPaths.import_path).__qualname__}' == 'builtins.property'
    lib_paths_1 = module_0.LibPaths()
    lib_paths_2 = module_0.LibPaths()
    var_0 = lib_paths_2.set_path(str_0)
    assert lib_paths_2.static_path is None
    var_1 = lib_paths_0.only_static()
    assert var_1 is False
    lib_paths_3 = module_0.LibPaths()
    var_2 = var_1.__bool__()
    assert var_2 is False
    var_3 = lib_paths_0.get_path()
    bytes_0 = b'\xc7\xf7\xb0\xc9\xc2\xda\x10\x81\xfeH\x01'
    var_2.set_path(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'dll'
    set_0 = {str_0}
    lib_paths_0 = module_0.LibPaths()
    assert f'{type(module_0.LibPaths.import_path).__module__}.{type(module_0.LibPaths.import_path).__qualname__}' == 'builtins.property'
    var_0 = lib_paths_0.set_path(set_0)
    assert lib_paths_0.dynamic_path == {'dll'}
    lib_paths_1 = module_0.LibPaths()
    lib_paths_2 = module_0.LibPaths()
    var_1 = lib_paths_1.only_static()
    assert var_1 is False
    str_1 = '\n        Checks if a parameter object is in fact an array size definition\n        common use: n - parameter defining a size of an input array passed\n        as another parameter\n\n        Returns\n        -------\n        bool\n            True if the parameter is an array size\n        '
    lib_paths_3 = module_0.LibPaths()
    lib_paths_4 = module_0.LibPaths()
    lib_paths_5 = module_0.LibPaths()
    var_2 = lib_paths_5.get_path()
    var_3 = lib_paths_1.set_path(str_1)
    var_4 = lib_paths_1.only_static()
    assert var_4 is False
    var_5 = lib_paths_1.__bool__()
    assert var_5 is False
    var_6 = lib_paths_3.get_path()
    var_1.only_static()

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '.dll'
    set_0 = {str_0}
    lib_paths_0 = module_0.LibPaths()
    assert f'{type(module_0.LibPaths.import_path).__module__}.{type(module_0.LibPaths.import_path).__qualname__}' == 'builtins.property'
    var_0 = lib_paths_0.set_path(set_0)
    lib_paths_1 = module_0.LibPaths()
    lib_paths_2 = module_0.LibPaths()
    var_1 = lib_paths_1.only_static()
    assert var_1 is False
    str_1 = '\n    if name contains more than one number after .so (.so.25.0.0)\n    it should be shortened (.so.25)\n    '
    lib_paths_3 = module_0.LibPaths()
    lib_paths_4 = module_0.LibPaths()
    var_2 = lib_paths_4.get_path()
    var_3 = lib_paths_1.set_path(str_1)
    assert lib_paths_1.dynamic_path == '\n    if name contains more than one number after .so (.so.25.0.0)\n    it should be shortened (.so.25)\n    '
    var_4 = lib_paths_1.only_static()
    lib_paths_5 = module_0.LibPaths()
    var_5 = lib_paths_1.__bool__()
    assert var_5 is True
    var_6 = lib_paths_3.__bool__()
    var_7 = lib_paths_3.get_path()
    bytes_0 = b'\xc7\xf7\xb0\xc9\xc2\xda\x10\x81\xfeH\x01'
    var_5.set_path(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '.dll'
    set_0 = {str_0}
    lib_paths_0 = module_0.LibPaths()
    assert f'{type(module_0.LibPaths.import_path).__module__}.{type(module_0.LibPaths.import_path).__qualname__}' == 'builtins.property'
    var_0 = lib_paths_0.set_path(set_0)
    lib_paths_1 = module_0.LibPaths()
    lib_paths_2 = module_0.LibPaths()
    var_1 = lib_paths_1.only_static()
    assert var_1 is False
    str_1 = '.abi3.*'
    lib_paths_3 = module_0.LibPaths()
    lib_paths_4 = module_0.LibPaths()
    var_2 = lib_paths_1.only_static()
    assert var_2 is False
    var_3 = lib_paths_1.set_path(str_1)
    assert lib_paths_1.static_path is None
    var_4 = lib_paths_1.only_static()
    assert var_4 is False
    lib_paths_5 = lib_paths_2.get_path()
    var_5 = lib_paths_1.__bool__()
    assert var_5 is False
    var_6 = lib_paths_3.__bool__()
    var_7 = lib_paths_3.get_path()
    bytes_0 = b'\xc7\xf7\xb0\xc9\xc2\xda\x10\x81\xfeH\x01'
    var_5.set_path(bytes_0)