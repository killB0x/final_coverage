# Automatically generated by Pynguin.
import pytest
import cBinder.DoxygenParser as module_0
import re as module_1
import cBinder.FunctionParameterTraits as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b'\xa0\xd0I\x83'
    module_0.DoxygenParser(bytes_0)

def test_case_1():
    int_0 = 2380
    doxygen_function_array_parameter_0 = module_0.DoxygenFunctionArrayParameter(int_0, int_0, int_0)
    assert f'{type(doxygen_function_array_parameter_0).__module__}.{type(doxygen_function_array_parameter_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionArrayParameter'
    assert doxygen_function_array_parameter_0.name == 2380
    assert doxygen_function_array_parameter_0.param_type == 2380
    assert doxygen_function_array_parameter_0.is_array_size is False
    assert doxygen_function_array_parameter_0.size == 2380

@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_1.purge()
    module_0.DoxygenParser(var_0)

def test_case_3():
    bytes_0 = b'\xd0\xdf\xc6@\xdd\xcfZ\xb05\x00vx\x84\n\xa8\x8aZ'
    doxygen_function_metadata_0 = module_0.DoxygenFunctionMetadata(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'\xd0\xdf\xc6@\xdd\xcfZ\xb05\x00vx\x84\n\xa8\x8aZ'
    doxygen_function_metadata_0 = module_0.DoxygenFunctionMetadata(bytes_0)
    doxygen_function_metadata_0.get_parameter(doxygen_function_metadata_0)

def test_case_5():
    bytes_0 = b'\xa0\xd0I\x83'
    doxygen_function_metadata_0 = module_0.DoxygenFunctionMetadata(bytes_0)
    var_0 = doxygen_function_metadata_0.is_any_array()
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b'\xa0\xd0I\x83'
    doxygen_function_metadata_0 = module_0.DoxygenFunctionMetadata(bytes_0)
    doxygen_function_metadata_0.is_array_size(doxygen_function_metadata_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b'\xa0\xd0I\x83'
    doxygen_function_metadata_0 = module_0.DoxygenFunctionMetadata(bytes_0)
    doxygen_function_metadata_0.param_type(bytes_0)

def test_case_8():
    str_0 = '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    doxygen_parser_0 = module_0.DoxygenParser(str_0)
    assert f'{type(doxygen_parser_0).__module__}.{type(doxygen_parser_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenParser'
    assert doxygen_parser_0.doxygen == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert f'{type(doxygen_parser_0.metadata).__module__}.{type(doxygen_parser_0.metadata).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_OUT_PARAM_NAME == '@param\\[out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_AND_OUT_PARAM_NAME == '@param\\[in,out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME_SIMPLIFIED == '@param[\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_ARRAY_SIZE == '\\(array of size ([A-Za-z0-9_]*)\\)'
    var_0 = doxygen_parser_0.get_parameter(doxygen_parser_0)

def test_case_9():
    str_0 = '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    doxygen_parser_0 = module_0.DoxygenParser(str_0)
    assert f'{type(doxygen_parser_0).__module__}.{type(doxygen_parser_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenParser'
    assert doxygen_parser_0.doxygen == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert f'{type(doxygen_parser_0.metadata).__module__}.{type(doxygen_parser_0.metadata).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_OUT_PARAM_NAME == '@param\\[out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_AND_OUT_PARAM_NAME == '@param\\[in,out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME_SIMPLIFIED == '@param[\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_ARRAY_SIZE == '\\(array of size ([A-Za-z0-9_]*)\\)'

def test_case_10():
    bytes_0 = b''
    doxygen_function_metadata_0 = module_0.DoxygenFunctionMetadata(bytes_0)
    var_0 = doxygen_function_metadata_0.is_array_size(doxygen_function_metadata_0)

def test_case_11():
    str_0 = '#A4,?\tbb2UHj>KbQyr'
    doxygen_parser_0 = module_0.DoxygenParser(str_0)
    assert f'{type(doxygen_parser_0).__module__}.{type(doxygen_parser_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenParser'
    assert doxygen_parser_0.doxygen == '#A4,?\tbb2UHj>KbQyr'
    assert f'{type(doxygen_parser_0.metadata).__module__}.{type(doxygen_parser_0.metadata).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_OUT_PARAM_NAME == '@param\\[out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_AND_OUT_PARAM_NAME == '@param\\[in,out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME_SIMPLIFIED == '@param[\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_ARRAY_SIZE == '\\(array of size ([A-Za-z0-9_]*)\\)'

def test_case_12():
    str_0 = '@param\\[in\\][\\s]a([a-z)-Z_][a-zA-Z0-9_]*)'
    doxygen_parser_0 = module_0.DoxygenParser(str_0)
    assert f'{type(doxygen_parser_0).__module__}.{type(doxygen_parser_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenParser'
    assert doxygen_parser_0.doxygen == '@param\\[in\\][\\s]a([a-z)-Z_][a-zA-Z0-9_]*)'
    assert f'{type(doxygen_parser_0.metadata).__module__}.{type(doxygen_parser_0.metadata).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_OUT_PARAM_NAME == '@param\\[out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_AND_OUT_PARAM_NAME == '@param\\[in,out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME_SIMPLIFIED == '@param[\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_ARRAY_SIZE == '\\(array of size ([A-Za-z0-9_]*)\\)'
    none_type_0 = None
    var_0 = doxygen_parser_0.get_parameter(none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionParameter'
    assert var_0.name is None
    assert var_0.param_type == module_2.ParameterType.IN
    assert var_0.is_array_size is False

def test_case_13():
    str_0 = '@parami[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    doxygen_parser_0 = module_0.DoxygenParser(str_0)
    assert f'{type(doxygen_parser_0).__module__}.{type(doxygen_parser_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenParser'
    assert doxygen_parser_0.doxygen == '@parami[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert f'{type(doxygen_parser_0.metadata).__module__}.{type(doxygen_parser_0.metadata).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_OUT_PARAM_NAME == '@param\\[out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_AND_OUT_PARAM_NAME == '@param\\[in,out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME_SIMPLIFIED == '@param[\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_ARRAY_SIZE == '\\(array of size ([A-Za-z0-9_]*)\\)'

def test_case_14():
    bytes_0 = b''
    doxygen_function_metadata_0 = module_0.DoxygenFunctionMetadata(bytes_0)
    var_0 = doxygen_function_metadata_0.param_type(doxygen_function_metadata_0)
    var_1 = doxygen_function_metadata_0.is_array_size(doxygen_function_metadata_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b'\xa0\xd0I\x83'
    doxygen_function_metadata_0 = module_0.DoxygenFunctionMetadata(bytes_0)
    doxygen_function_array_parameter_0 = module_0.DoxygenFunctionArrayParameter(doxygen_function_metadata_0, doxygen_function_metadata_0, doxygen_function_metadata_0)
    assert f'{type(doxygen_function_array_parameter_0).__module__}.{type(doxygen_function_array_parameter_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionArrayParameter'
    assert f'{type(doxygen_function_array_parameter_0.name).__module__}.{type(doxygen_function_array_parameter_0.name).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert f'{type(doxygen_function_array_parameter_0.param_type).__module__}.{type(doxygen_function_array_parameter_0.param_type).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert doxygen_function_array_parameter_0.is_array_size is False
    assert f'{type(doxygen_function_array_parameter_0.size).__module__}.{type(doxygen_function_array_parameter_0.size).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    str_0 = '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    str_1 = '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    set_0 = {str_1, doxygen_function_array_parameter_0, bytes_0}
    doxygen_function_metadata_1 = module_0.DoxygenFunctionMetadata(set_0)
    doxygen_function_metadata_1.is_array_size(str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bytes_0 = b'\xa0\xd0I\xa9'
    doxygen_function_metadata_0 = module_0.DoxygenFunctionMetadata(bytes_0)
    doxygen_function_array_parameter_0 = module_0.DoxygenFunctionArrayParameter(doxygen_function_metadata_0, doxygen_function_metadata_0, doxygen_function_metadata_0)
    assert f'{type(doxygen_function_array_parameter_0).__module__}.{type(doxygen_function_array_parameter_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionArrayParameter'
    assert f'{type(doxygen_function_array_parameter_0.name).__module__}.{type(doxygen_function_array_parameter_0.name).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert f'{type(doxygen_function_array_parameter_0.param_type).__module__}.{type(doxygen_function_array_parameter_0.param_type).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert doxygen_function_array_parameter_0.is_array_size is False
    assert f'{type(doxygen_function_array_parameter_0.size).__module__}.{type(doxygen_function_array_parameter_0.size).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    str_0 = '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    doxygen_parser_0 = module_0.DoxygenParser(str_0)
    assert f'{type(doxygen_parser_0).__module__}.{type(doxygen_parser_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenParser'
    assert doxygen_parser_0.doxygen == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert f'{type(doxygen_parser_0.metadata).__module__}.{type(doxygen_parser_0.metadata).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_OUT_PARAM_NAME == '@param\\[out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_AND_OUT_PARAM_NAME == '@param\\[in,out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME_SIMPLIFIED == '@param[\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_ARRAY_SIZE == '\\(array of size ([A-Za-z0-9_]*)\\)'
    set_0 = {str_0, doxygen_function_array_parameter_0, bytes_0}
    doxygen_function_metadata_1 = module_0.DoxygenFunctionMetadata(set_0)
    doxygen_function_metadata_1.param_type(doxygen_parser_0)

def test_case_17():
    bytes_0 = b'\xa0\xd0I\x83'
    doxygen_function_metadata_0 = module_0.DoxygenFunctionMetadata(bytes_0)
    doxygen_function_array_parameter_0 = module_0.DoxygenFunctionArrayParameter(doxygen_function_metadata_0, doxygen_function_metadata_0, doxygen_function_metadata_0)
    assert f'{type(doxygen_function_array_parameter_0).__module__}.{type(doxygen_function_array_parameter_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionArrayParameter'
    assert f'{type(doxygen_function_array_parameter_0.name).__module__}.{type(doxygen_function_array_parameter_0.name).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert f'{type(doxygen_function_array_parameter_0.param_type).__module__}.{type(doxygen_function_array_parameter_0.param_type).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert doxygen_function_array_parameter_0.is_array_size is False
    assert f'{type(doxygen_function_array_parameter_0.size).__module__}.{type(doxygen_function_array_parameter_0.size).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    var_0 = doxygen_function_metadata_0.is_any_array()
    assert var_0 is False
    str_0 = '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    doxygen_parser_0 = module_0.DoxygenParser(str_0)
    assert f'{type(doxygen_parser_0).__module__}.{type(doxygen_parser_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenParser'
    assert doxygen_parser_0.doxygen == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert f'{type(doxygen_parser_0.metadata).__module__}.{type(doxygen_parser_0.metadata).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_OUT_PARAM_NAME == '@param\\[out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_AND_OUT_PARAM_NAME == '@param\\[in,out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME_SIMPLIFIED == '@param[\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_ARRAY_SIZE == '\\(array of size ([A-Za-z0-9_]*)\\)'
    set_0 = {str_0, doxygen_function_array_parameter_0, bytes_0}
    doxygen_function_metadata_1 = module_0.DoxygenFunctionMetadata(set_0)
    var_1 = doxygen_function_metadata_1.is_any_array()
    assert var_1 is True

def test_case_18():
    bytes_0 = b'\xa0\xd0I\x83'
    doxygen_function_metadata_0 = module_0.DoxygenFunctionMetadata(bytes_0)
    doxygen_function_array_parameter_0 = module_0.DoxygenFunctionArrayParameter(doxygen_function_metadata_0, doxygen_function_metadata_0, doxygen_function_metadata_0)
    assert f'{type(doxygen_function_array_parameter_0).__module__}.{type(doxygen_function_array_parameter_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionArrayParameter'
    assert f'{type(doxygen_function_array_parameter_0.name).__module__}.{type(doxygen_function_array_parameter_0.name).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert f'{type(doxygen_function_array_parameter_0.param_type).__module__}.{type(doxygen_function_array_parameter_0.param_type).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert doxygen_function_array_parameter_0.is_array_size is False
    assert f'{type(doxygen_function_array_parameter_0.size).__module__}.{type(doxygen_function_array_parameter_0.size).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    var_0 = doxygen_function_metadata_0.is_any_array()
    assert var_0 is False
    str_0 = '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    str_1 = '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    doxygen_parser_0 = module_0.DoxygenParser(str_0)
    assert f'{type(doxygen_parser_0).__module__}.{type(doxygen_parser_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenParser'
    assert doxygen_parser_0.doxygen == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert f'{type(doxygen_parser_0.metadata).__module__}.{type(doxygen_parser_0.metadata).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_OUT_PARAM_NAME == '@param\\[out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_AND_OUT_PARAM_NAME == '@param\\[in,out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME_SIMPLIFIED == '@param[\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_ARRAY_SIZE == '\\(array of size ([A-Za-z0-9_]*)\\)'
    set_0 = {str_1, doxygen_function_array_parameter_0, bytes_0}
    doxygen_function_metadata_1 = module_0.DoxygenFunctionMetadata(set_0)
    var_1 = doxygen_parser_0.get_parameter(str_1)
    var_2 = doxygen_function_metadata_1.is_array_size(doxygen_function_metadata_0)
    assert var_2 is True

@pytest.mark.xfail(strict=True)
def test_case_19():
    bytes_0 = b'\xa0\xd0I\x83'
    doxygen_function_metadata_0 = module_0.DoxygenFunctionMetadata(bytes_0)
    doxygen_function_array_parameter_0 = module_0.DoxygenFunctionArrayParameter(doxygen_function_metadata_0, doxygen_function_metadata_0, doxygen_function_metadata_0)
    assert f'{type(doxygen_function_array_parameter_0).__module__}.{type(doxygen_function_array_parameter_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionArrayParameter'
    assert f'{type(doxygen_function_array_parameter_0.name).__module__}.{type(doxygen_function_array_parameter_0.name).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert f'{type(doxygen_function_array_parameter_0.param_type).__module__}.{type(doxygen_function_array_parameter_0.param_type).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert doxygen_function_array_parameter_0.is_array_size is False
    assert f'{type(doxygen_function_array_parameter_0.size).__module__}.{type(doxygen_function_array_parameter_0.size).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    str_0 = '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    doxygen_parser_0 = module_0.DoxygenParser(str_0)
    assert f'{type(doxygen_parser_0).__module__}.{type(doxygen_parser_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenParser'
    assert doxygen_parser_0.doxygen == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert f'{type(doxygen_parser_0.metadata).__module__}.{type(doxygen_parser_0.metadata).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_OUT_PARAM_NAME == '@param\\[out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_AND_OUT_PARAM_NAME == '@param\\[in,out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME_SIMPLIFIED == '@param[\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_ARRAY_SIZE == '\\(array of size ([A-Za-z0-9_]*)\\)'
    set_0 = {str_0, doxygen_function_array_parameter_0, bytes_0}
    doxygen_function_metadata_1 = module_0.DoxygenFunctionMetadata(set_0)
    var_0 = doxygen_function_metadata_1.param_type(doxygen_function_metadata_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert var_0.parameters == b'\xa0\xd0I\x83'
    doxygen_function_array_parameter_0.is_array_size(doxygen_function_array_parameter_0)

def test_case_20():
    str_0 = '@param[in][\\s]*([w-zA-Z_][a-zA-Z0-9_]*)'
    doxygen_parser_0 = module_0.DoxygenParser(str_0)
    assert f'{type(doxygen_parser_0).__module__}.{type(doxygen_parser_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenParser'
    assert doxygen_parser_0.doxygen == '@param[in][\\s]*([w-zA-Z_][a-zA-Z0-9_]*)'
    assert f'{type(doxygen_parser_0.metadata).__module__}.{type(doxygen_parser_0.metadata).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_OUT_PARAM_NAME == '@param\\[out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_AND_OUT_PARAM_NAME == '@param\\[in,out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME_SIMPLIFIED == '@param[\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_ARRAY_SIZE == '\\(array of size ([A-Za-z0-9_]*)\\)'

def test_case_21():
    str_0 = '\n    This function checks, if every IN array argument is not empty.\n    For example (part of doxygen comment):\n        * @param[in]   in_order   sample array (array of size n)\n    If a user provides an empty list as in_order array - there is no data to work with.\n    '
    doxygen_parser_0 = module_0.DoxygenParser(str_0)
    assert f'{type(doxygen_parser_0).__module__}.{type(doxygen_parser_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenParser'
    assert doxygen_parser_0.doxygen == '\n    This function checks, if every IN array argument is not empty.\n    For example (part of doxygen comment):\n        * @param[in]   in_order   sample array (array of size n)\n    If a user provides an empty list as in_order array - there is no data to work with.\n    '
    assert f'{type(doxygen_parser_0.metadata).__module__}.{type(doxygen_parser_0.metadata).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_OUT_PARAM_NAME == '@param\\[out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_AND_OUT_PARAM_NAME == '@param\\[in,out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME_SIMPLIFIED == '@param[\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_ARRAY_SIZE == '\\(array of size ([A-Za-z0-9_]*)\\)'

def test_case_22():
    str_0 = '\n    This functi/n checks, if eery IN array argument is not empty.\n    For example (part of doxygen comment):\n        * @param[in]   in_order   sample array (array of size 2)\n    If a user provides an empty list as in_orde7 array - there is no data to work with.\n    '
    doxygen_parser_0 = module_0.DoxygenParser(str_0)
    assert f'{type(doxygen_parser_0).__module__}.{type(doxygen_parser_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenParser'
    assert doxygen_parser_0.doxygen == '\n    This functi/n checks, if eery IN array argument is not empty.\n    For example (part of doxygen comment):\n        * @param[in]   in_order   sample array (array of size 2)\n    If a user provides an empty list as in_orde7 array - there is no data to work with.\n    '
    assert f'{type(doxygen_parser_0.metadata).__module__}.{type(doxygen_parser_0.metadata).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_OUT_PARAM_NAME == '@param\\[out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_AND_OUT_PARAM_NAME == '@param\\[in,out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME_SIMPLIFIED == '@param[\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_ARRAY_SIZE == '\\(array of size ([A-Za-z0-9_]*)\\)'

def test_case_23():
    str_0 = '\n    (1)\n    There is a possibility, that a function has multiple array parameters, both IN and OUT.\n    When there is at least one IN array of a certain declared size, every OUT array of the same\n    declared size can be initialized based on the length of the IN array (it is assumed that IN array\n    is passed with correct size).\n    This function, adds a correct initializing script to a wrapping function - when it is possible.\n    For example, part of a doxygen comment:\n        * @param[in]   in_arr   sample array (array of size n)\n        * @param[out]   out_arr   sample array (array of size n)\n    (2)\n    This function also adds a check, when there is no IN parameter of a declared size, yet there are\n    at least two OUT array parameters of this size - then, both of them should be passed with the same size.\n    '
    doxygen_parser_0 = module_0.DoxygenParser(str_0)
    assert f'{type(doxygen_parser_0).__module__}.{type(doxygen_parser_0).__qualname__}' == 'cBinder.DoxygenParser.DoxygenParser'
    assert doxygen_parser_0.doxygen == '\n    (1)\n    There is a possibility, that a function has multiple array parameters, both IN and OUT.\n    When there is at least one IN array of a certain declared size, every OUT array of the same\n    declared size can be initialized based on the length of the IN array (it is assumed that IN array\n    is passed with correct size).\n    This function, adds a correct initializing script to a wrapping function - when it is possible.\n    For example, part of a doxygen comment:\n        * @param[in]   in_arr   sample array (array of size n)\n        * @param[out]   out_arr   sample array (array of size n)\n    (2)\n    This function also adds a check, when there is no IN parameter of a declared size, yet there are\n    at least two OUT array parameters of this size - then, both of them should be passed with the same size.\n    '
    assert f'{type(doxygen_parser_0.metadata).__module__}.{type(doxygen_parser_0.metadata).__qualname__}' == 'cBinder.DoxygenParser.DoxygenFunctionMetadata'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME == '@param\\[in\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_OUT_PARAM_NAME == '@param\\[out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_AND_OUT_PARAM_NAME == '@param\\[in,out\\][\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_IN_PARAM_NAME_SIMPLIFIED == '@param[\\s]*([a-zA-Z_][a-zA-Z0-9_]*)'
    assert module_0.DoxygenParser.REGEX_ARRAY_SIZE == '\\(array of size ([A-Za-z0-9_]*)\\)'