# Automatically generated by Pynguin.
import pytest
import tests.test_classes as module_0

def test_case_0():
    three_nums_0 = module_0.ThreeNums()
    assert len(three_nums_0) == 3
    assert module_0.ThreeNums.provides == ('number',)
    three_nums_1 = module_0.ThreeNums()
    assert len(three_nums_1) == 3

@pytest.mark.xfail(strict=True)
def test_case_1():
    plus_one_0 = module_0.PlusOne()
    assert module_0.PlusOne.provides == ('p1',)
    var_0 = plus_one_0.register_params()
    none_type_0 = None
    plus_one_0.apply(number=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    plus_two_0 = module_0.PlusTwo()
    assert module_0.PlusTwo.provides == ('p2',)
    plus_two_0.apply(p1=plus_two_0)

def test_case_3():
    bool_0 = False
    plus_x_n_0 = module_0.PlusXN(bool_0)
    assert f'{type(plus_x_n_0).__module__}.{type(plus_x_n_0).__qualname__}' == 'tests.test_classes.PlusXN'
    assert plus_x_n_0.x is False
    assert plus_x_n_0.n == 0
    assert module_0.PlusXN.provides == ('pxn',)
    set_0 = set()
    plus_x_n_1 = module_0.PlusXN(set_0)
    assert plus_x_n_1.n == 0
    three_nums_0 = module_0.ThreeNums()
    assert len(three_nums_0) == 3
    assert module_0.ThreeNums.provides == ('number',)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    bytes_0 = b'm\xb0\x1c\xc8\xed'
    plus_x_n_0 = module_0.PlusXN(bytes_0)
    assert f'{type(plus_x_n_0).__module__}.{type(plus_x_n_0).__qualname__}' == 'tests.test_classes.PlusXN'
    assert plus_x_n_0.x == b'm\xb0\x1c\xc8\xed'
    assert plus_x_n_0.n == 0
    assert module_0.PlusXN.provides == ('pxn',)
    plus_x_n_0.apply(number=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    three_nums_0 = module_0.ThreeNums()
    assert len(three_nums_0) == 3
    assert module_0.ThreeNums.provides == ('number',)
    module_0.PlusTwo(*three_nums_0)

def test_case_6():
    list_0 = []
    plus_one_0 = module_0.PlusOne(*list_0)
    assert module_0.PlusOne.provides == ('p1',)
    three_nums_0 = module_0.ThreeNums()
    assert len(three_nums_0) == 3
    assert module_0.ThreeNums.provides == ('number',)
    float_0 = -379.44042
    with pytest.raises(IndexError):
        three_nums_0.__getitem__(float_0)