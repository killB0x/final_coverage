# Automatically generated by Pynguin.
import pytest
import edk2toollib.uefi.edk2.parsers.dsc_parser as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    dsc_parser_0 = module_0.DscParser()
    assert f'{type(dsc_parser_0).__module__}.{type(dsc_parser_0).__qualname__}' == 'edk2toollib.uefi.edk2.parsers.dsc_parser.DscParser'
    assert f'{type(dsc_parser_0.Logger).__module__}.{type(dsc_parser_0.Logger).__qualname__}' == 'logging.Logger'
    assert dsc_parser_0.Lines == []
    assert dsc_parser_0.LocalVars == {}
    assert dsc_parser_0.InputVars == {}
    assert dsc_parser_0.CurrentSection == ''
    assert dsc_parser_0.CurrentFullSection == ''
    assert dsc_parser_0.Parsed is False
    assert dsc_parser_0.ConditionalStack == []
    assert dsc_parser_0.RootPath == ''
    assert dsc_parser_0.PPs == []
    assert dsc_parser_0.TargetFilePath is None
    assert dsc_parser_0.CurrentLine == -1
    assert dsc_parser_0.SixMods == []
    assert dsc_parser_0.SixModsEnhanced == []
    assert dsc_parser_0.ThreeMods == []
    assert dsc_parser_0.ThreeModsEnhanced == []
    assert dsc_parser_0.OtherMods == []
    assert dsc_parser_0.Libs == []
    assert dsc_parser_0.LibsEnhanced == []
    assert dsc_parser_0.ParsingInBuildOption == 0
    assert dsc_parser_0.LibraryClassToInstanceDict == {}
    assert dsc_parser_0.Pcds == []
    var_0 = dsc_parser_0.GetLibsEnhanced()
    dsc_parser_0.ParseInfPathLib(var_0)

def test_case_1():
    dsc_parser_0 = module_0.DscParser()
    assert f'{type(dsc_parser_0).__module__}.{type(dsc_parser_0).__qualname__}' == 'edk2toollib.uefi.edk2.parsers.dsc_parser.DscParser'
    assert f'{type(dsc_parser_0.Logger).__module__}.{type(dsc_parser_0.Logger).__qualname__}' == 'logging.Logger'
    assert dsc_parser_0.Lines == []
    assert dsc_parser_0.LocalVars == {}
    assert dsc_parser_0.InputVars == {}
    assert dsc_parser_0.CurrentSection == ''
    assert dsc_parser_0.CurrentFullSection == ''
    assert dsc_parser_0.Parsed is False
    assert dsc_parser_0.ConditionalStack == []
    assert dsc_parser_0.RootPath == ''
    assert dsc_parser_0.PPs == []
    assert dsc_parser_0.TargetFilePath is None
    assert dsc_parser_0.CurrentLine == -1
    assert dsc_parser_0.SixMods == []
    assert dsc_parser_0.SixModsEnhanced == []
    assert dsc_parser_0.ThreeMods == []
    assert dsc_parser_0.ThreeModsEnhanced == []
    assert dsc_parser_0.OtherMods == []
    assert dsc_parser_0.Libs == []
    assert dsc_parser_0.LibsEnhanced == []
    assert dsc_parser_0.ParsingInBuildOption == 0
    assert dsc_parser_0.LibraryClassToInstanceDict == {}
    assert dsc_parser_0.Pcds == []

@pytest.mark.xfail(strict=True)
def test_case_2():
    dsc_parser_0 = module_0.DscParser()
    assert f'{type(dsc_parser_0).__module__}.{type(dsc_parser_0).__qualname__}' == 'edk2toollib.uefi.edk2.parsers.dsc_parser.DscParser'
    assert f'{type(dsc_parser_0.Logger).__module__}.{type(dsc_parser_0.Logger).__qualname__}' == 'logging.Logger'
    assert dsc_parser_0.Lines == []
    assert dsc_parser_0.LocalVars == {}
    assert dsc_parser_0.InputVars == {}
    assert dsc_parser_0.CurrentSection == ''
    assert dsc_parser_0.CurrentFullSection == ''
    assert dsc_parser_0.Parsed is False
    assert dsc_parser_0.ConditionalStack == []
    assert dsc_parser_0.RootPath == ''
    assert dsc_parser_0.PPs == []
    assert dsc_parser_0.TargetFilePath is None
    assert dsc_parser_0.CurrentLine == -1
    assert dsc_parser_0.SixMods == []
    assert dsc_parser_0.SixModsEnhanced == []
    assert dsc_parser_0.ThreeMods == []
    assert dsc_parser_0.ThreeModsEnhanced == []
    assert dsc_parser_0.OtherMods == []
    assert dsc_parser_0.Libs == []
    assert dsc_parser_0.LibsEnhanced == []
    assert dsc_parser_0.ParsingInBuildOption == 0
    assert dsc_parser_0.LibraryClassToInstanceDict == {}
    assert dsc_parser_0.Pcds == []
    str_0 = '@S||z{WsSqBR3*IF\\@08'
    var_0 = dsc_parser_0.ParseInfPathLib(str_0)
    assert var_0 == ''
    assert dsc_parser_0.LibraryClassToInstanceDict == {'@S': [None]}
    var_1 = dsc_parser_0.GetLibs()
    var_2 = dsc_parser_0.GetLibs()
    dsc_parser_0.ParseInfPathMod(var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    dsc_parser_0 = module_0.DscParser()
    assert f'{type(dsc_parser_0).__module__}.{type(dsc_parser_0).__qualname__}' == 'edk2toollib.uefi.edk2.parsers.dsc_parser.DscParser'
    assert f'{type(dsc_parser_0.Logger).__module__}.{type(dsc_parser_0.Logger).__qualname__}' == 'logging.Logger'
    assert dsc_parser_0.Lines == []
    assert dsc_parser_0.LocalVars == {}
    assert dsc_parser_0.InputVars == {}
    assert dsc_parser_0.CurrentSection == ''
    assert dsc_parser_0.CurrentFullSection == ''
    assert dsc_parser_0.Parsed is False
    assert dsc_parser_0.ConditionalStack == []
    assert dsc_parser_0.RootPath == ''
    assert dsc_parser_0.PPs == []
    assert dsc_parser_0.TargetFilePath is None
    assert dsc_parser_0.CurrentLine == -1
    assert dsc_parser_0.SixMods == []
    assert dsc_parser_0.SixModsEnhanced == []
    assert dsc_parser_0.ThreeMods == []
    assert dsc_parser_0.ThreeModsEnhanced == []
    assert dsc_parser_0.OtherMods == []
    assert dsc_parser_0.Libs == []
    assert dsc_parser_0.LibsEnhanced == []
    assert dsc_parser_0.ParsingInBuildOption == 0
    assert dsc_parser_0.LibraryClassToInstanceDict == {}
    assert dsc_parser_0.Pcds == []
    str_0 = 'DAI"7I,C'
    var_0 = dsc_parser_0.SetNoFailMode(str_0)
    str_1 = '@S||z{WsSqBR3*IF\\@08'
    var_1 = dsc_parser_0.ParseFile(str_1)
    assert dsc_parser_0.Parsed is True
    assert dsc_parser_0.TargetFilePath == '/pynguin/@S||z{WsSqBR3*IF\\@08'
    var_1.ParseFile(str_1)

def test_case_4():
    dsc_parser_0 = module_0.DscParser()
    assert f'{type(dsc_parser_0).__module__}.{type(dsc_parser_0).__qualname__}' == 'edk2toollib.uefi.edk2.parsers.dsc_parser.DscParser'
    assert f'{type(dsc_parser_0.Logger).__module__}.{type(dsc_parser_0.Logger).__qualname__}' == 'logging.Logger'
    assert dsc_parser_0.Lines == []
    assert dsc_parser_0.LocalVars == {}
    assert dsc_parser_0.InputVars == {}
    assert dsc_parser_0.CurrentSection == ''
    assert dsc_parser_0.CurrentFullSection == ''
    assert dsc_parser_0.Parsed is False
    assert dsc_parser_0.ConditionalStack == []
    assert dsc_parser_0.RootPath == ''
    assert dsc_parser_0.PPs == []
    assert dsc_parser_0.TargetFilePath is None
    assert dsc_parser_0.CurrentLine == -1
    assert dsc_parser_0.SixMods == []
    assert dsc_parser_0.SixModsEnhanced == []
    assert dsc_parser_0.ThreeMods == []
    assert dsc_parser_0.ThreeModsEnhanced == []
    assert dsc_parser_0.OtherMods == []
    assert dsc_parser_0.Libs == []
    assert dsc_parser_0.LibsEnhanced == []
    assert dsc_parser_0.ParsingInBuildOption == 0
    assert dsc_parser_0.LibraryClassToInstanceDict == {}
    assert dsc_parser_0.Pcds == []
    str_0 = '@S||z{WsSqBR3*IF\\@08'
    var_0 = dsc_parser_0.ParseFile(str_0)
    assert dsc_parser_0.Parsed is True
    assert dsc_parser_0.TargetFilePath == '/pynguin/@S||z{WsSqBR3*IF\\@08'

def test_case_5():
    dsc_parser_0 = module_0.DscParser()
    assert f'{type(dsc_parser_0).__module__}.{type(dsc_parser_0).__qualname__}' == 'edk2toollib.uefi.edk2.parsers.dsc_parser.DscParser'
    assert f'{type(dsc_parser_0.Logger).__module__}.{type(dsc_parser_0.Logger).__qualname__}' == 'logging.Logger'
    assert dsc_parser_0.Lines == []
    assert dsc_parser_0.LocalVars == {}
    assert dsc_parser_0.InputVars == {}
    assert dsc_parser_0.CurrentSection == ''
    assert dsc_parser_0.CurrentFullSection == ''
    assert dsc_parser_0.Parsed is False
    assert dsc_parser_0.ConditionalStack == []
    assert dsc_parser_0.RootPath == ''
    assert dsc_parser_0.PPs == []
    assert dsc_parser_0.TargetFilePath is None
    assert dsc_parser_0.CurrentLine == -1
    assert dsc_parser_0.SixMods == []
    assert dsc_parser_0.SixModsEnhanced == []
    assert dsc_parser_0.ThreeMods == []
    assert dsc_parser_0.ThreeModsEnhanced == []
    assert dsc_parser_0.OtherMods == []
    assert dsc_parser_0.Libs == []
    assert dsc_parser_0.LibsEnhanced == []
    assert dsc_parser_0.ParsingInBuildOption == 0
    assert dsc_parser_0.LibraryClassToInstanceDict == {}
    assert dsc_parser_0.Pcds == []
    var_0 = dsc_parser_0.GetMods()
    var_1 = dsc_parser_0.GetLibs()

@pytest.mark.xfail(strict=True)
def test_case_6():
    dsc_parser_0 = module_0.DscParser()
    assert f'{type(dsc_parser_0).__module__}.{type(dsc_parser_0).__qualname__}' == 'edk2toollib.uefi.edk2.parsers.dsc_parser.DscParser'
    assert f'{type(dsc_parser_0.Logger).__module__}.{type(dsc_parser_0.Logger).__qualname__}' == 'logging.Logger'
    assert dsc_parser_0.Lines == []
    assert dsc_parser_0.LocalVars == {}
    assert dsc_parser_0.InputVars == {}
    assert dsc_parser_0.CurrentSection == ''
    assert dsc_parser_0.CurrentFullSection == ''
    assert dsc_parser_0.Parsed is False
    assert dsc_parser_0.ConditionalStack == []
    assert dsc_parser_0.RootPath == ''
    assert dsc_parser_0.PPs == []
    assert dsc_parser_0.TargetFilePath is None
    assert dsc_parser_0.CurrentLine == -1
    assert dsc_parser_0.SixMods == []
    assert dsc_parser_0.SixModsEnhanced == []
    assert dsc_parser_0.ThreeMods == []
    assert dsc_parser_0.ThreeModsEnhanced == []
    assert dsc_parser_0.OtherMods == []
    assert dsc_parser_0.Libs == []
    assert dsc_parser_0.LibsEnhanced == []
    assert dsc_parser_0.ParsingInBuildOption == 0
    assert dsc_parser_0.LibraryClassToInstanceDict == {}
    assert dsc_parser_0.Pcds == []
    var_0 = dsc_parser_0.GetModsEnhanced()
    dsc_parser_0.ParseInfPathLib(var_0)

def test_case_7():
    dsc_parser_0 = module_0.DscParser()
    assert f'{type(dsc_parser_0).__module__}.{type(dsc_parser_0).__qualname__}' == 'edk2toollib.uefi.edk2.parsers.dsc_parser.DscParser'
    assert f'{type(dsc_parser_0.Logger).__module__}.{type(dsc_parser_0.Logger).__qualname__}' == 'logging.Logger'
    assert dsc_parser_0.Lines == []
    assert dsc_parser_0.LocalVars == {}
    assert dsc_parser_0.InputVars == {}
    assert dsc_parser_0.CurrentSection == ''
    assert dsc_parser_0.CurrentFullSection == ''
    assert dsc_parser_0.Parsed is False
    assert dsc_parser_0.ConditionalStack == []
    assert dsc_parser_0.RootPath == ''
    assert dsc_parser_0.PPs == []
    assert dsc_parser_0.TargetFilePath is None
    assert dsc_parser_0.CurrentLine == -1
    assert dsc_parser_0.SixMods == []
    assert dsc_parser_0.SixModsEnhanced == []
    assert dsc_parser_0.ThreeMods == []
    assert dsc_parser_0.ThreeModsEnhanced == []
    assert dsc_parser_0.OtherMods == []
    assert dsc_parser_0.Libs == []
    assert dsc_parser_0.LibsEnhanced == []
    assert dsc_parser_0.ParsingInBuildOption == 0
    assert dsc_parser_0.LibraryClassToInstanceDict == {}
    assert dsc_parser_0.Pcds == []
    var_0 = dsc_parser_0.GetAllDscPaths()
    str_0 = '@S||z{WsSqBR3*IF\\@08'
    var_1 = dsc_parser_0.ParseFile(str_0)
    assert dsc_parser_0.Parsed is True
    assert dsc_parser_0.TargetFilePath == '/pynguin/@S||z{WsSqBR3*IF\\@08'

def test_case_8():
    str_0 = '^HGZ]A81Q\x0cM`I%'
    dsc_parser_0 = module_0.DscParser()
    assert f'{type(dsc_parser_0).__module__}.{type(dsc_parser_0).__qualname__}' == 'edk2toollib.uefi.edk2.parsers.dsc_parser.DscParser'
    assert f'{type(dsc_parser_0.Logger).__module__}.{type(dsc_parser_0.Logger).__qualname__}' == 'logging.Logger'
    assert dsc_parser_0.Lines == []
    assert dsc_parser_0.LocalVars == {}
    assert dsc_parser_0.InputVars == {}
    assert dsc_parser_0.CurrentSection == ''
    assert dsc_parser_0.CurrentFullSection == ''
    assert dsc_parser_0.Parsed is False
    assert dsc_parser_0.ConditionalStack == []
    assert dsc_parser_0.RootPath == ''
    assert dsc_parser_0.PPs == []
    assert dsc_parser_0.TargetFilePath is None
    assert dsc_parser_0.CurrentLine == -1
    assert dsc_parser_0.SixMods == []
    assert dsc_parser_0.SixModsEnhanced == []
    assert dsc_parser_0.ThreeMods == []
    assert dsc_parser_0.ThreeModsEnhanced == []
    assert dsc_parser_0.OtherMods == []
    assert dsc_parser_0.Libs == []
    assert dsc_parser_0.LibsEnhanced == []
    assert dsc_parser_0.ParsingInBuildOption == 0
    assert dsc_parser_0.LibraryClassToInstanceDict == {}
    assert dsc_parser_0.Pcds == []
    var_0 = dsc_parser_0.ParseFile(str_0)
    assert dsc_parser_0.Parsed is True
    assert dsc_parser_0.TargetFilePath == '/pynguin/^HGZ]A81Q\x0cM`I%'

def test_case_9():
    dsc_parser_0 = module_0.DscParser()
    assert f'{type(dsc_parser_0).__module__}.{type(dsc_parser_0).__qualname__}' == 'edk2toollib.uefi.edk2.parsers.dsc_parser.DscParser'
    assert f'{type(dsc_parser_0.Logger).__module__}.{type(dsc_parser_0.Logger).__qualname__}' == 'logging.Logger'
    assert dsc_parser_0.Lines == []
    assert dsc_parser_0.LocalVars == {}
    assert dsc_parser_0.InputVars == {}
    assert dsc_parser_0.CurrentSection == ''
    assert dsc_parser_0.CurrentFullSection == ''
    assert dsc_parser_0.Parsed is False
    assert dsc_parser_0.ConditionalStack == []
    assert dsc_parser_0.RootPath == ''
    assert dsc_parser_0.PPs == []
    assert dsc_parser_0.TargetFilePath is None
    assert dsc_parser_0.CurrentLine == -1
    assert dsc_parser_0.SixMods == []
    assert dsc_parser_0.SixModsEnhanced == []
    assert dsc_parser_0.ThreeMods == []
    assert dsc_parser_0.ThreeModsEnhanced == []
    assert dsc_parser_0.OtherMods == []
    assert dsc_parser_0.Libs == []
    assert dsc_parser_0.LibsEnhanced == []
    assert dsc_parser_0.ParsingInBuildOption == 0
    assert dsc_parser_0.LibraryClassToInstanceDict == {}
    assert dsc_parser_0.Pcds == []
    str_0 = '@S||z{WsSqBR3*IF\\@08'
    var_0 = dsc_parser_0.ParseInfPathLib(str_0)
    assert var_0 == ''
    assert dsc_parser_0.LibraryClassToInstanceDict == {'@S': [None]}

@pytest.mark.xfail(strict=True)
def test_case_10():
    dsc_parser_0 = module_0.DscParser()
    assert f'{type(dsc_parser_0).__module__}.{type(dsc_parser_0).__qualname__}' == 'edk2toollib.uefi.edk2.parsers.dsc_parser.DscParser'
    assert f'{type(dsc_parser_0.Logger).__module__}.{type(dsc_parser_0.Logger).__qualname__}' == 'logging.Logger'
    assert dsc_parser_0.Lines == []
    assert dsc_parser_0.LocalVars == {}
    assert dsc_parser_0.InputVars == {}
    assert dsc_parser_0.CurrentSection == ''
    assert dsc_parser_0.CurrentFullSection == ''
    assert dsc_parser_0.Parsed is False
    assert dsc_parser_0.ConditionalStack == []
    assert dsc_parser_0.RootPath == ''
    assert dsc_parser_0.PPs == []
    assert dsc_parser_0.TargetFilePath is None
    assert dsc_parser_0.CurrentLine == -1
    assert dsc_parser_0.SixMods == []
    assert dsc_parser_0.SixModsEnhanced == []
    assert dsc_parser_0.ThreeMods == []
    assert dsc_parser_0.ThreeModsEnhanced == []
    assert dsc_parser_0.OtherMods == []
    assert dsc_parser_0.Libs == []
    assert dsc_parser_0.LibsEnhanced == []
    assert dsc_parser_0.ParsingInBuildOption == 0
    assert dsc_parser_0.LibraryClassToInstanceDict == {}
    assert dsc_parser_0.Pcds == []
    var_0 = dsc_parser_0.GetLibs()
    str_0 = '@S||z{WsSqBR3*IF\\@08'
    var_1 = dsc_parser_0.ParseInfPathLib(str_0)
    assert var_1 == ''
    assert dsc_parser_0.LibraryClassToInstanceDict == {'@S': [None]}
    var_2 = dsc_parser_0.ParseInfPathLib(str_0)
    assert var_2 == ''
    assert dsc_parser_0.LibraryClassToInstanceDict == {'@S': [None, None]}
    var_3 = dsc_parser_0.GetMods()
    var_0.IsGuidString(var_0)