# Automatically generated by Pynguin.
import pytest
import kademlia.routing as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -2371
    k_bucket_0 = module_0.KBucket(int_0, int_0, int_0)
    k_bucket_0.depth()

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 310
    routing_table_0 = module_0.RoutingTable(int_0, int_0, int_0)
    routing_table_0.remove_contact(int_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -684
    module_0.TableTraverser(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    module_0.KBucket(set_0, set_0, set_0, set_0)

def test_case_4():
    int_0 = 310
    routing_table_0 = module_0.RoutingTable(int_0, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 310
    routing_table_0 = module_0.RoutingTable(int_0, int_0, int_0)
    routing_table_0.find_neighbors(routing_table_0)

def test_case_6():
    int_0 = 2162
    k_bucket_0 = module_0.KBucket(int_0, int_0, int_0)
    var_0 = k_bucket_0.split()
    var_1 = k_bucket_0.__getitem__(int_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 310
    routing_table_0 = module_0.RoutingTable(int_0, int_0, int_0)
    routing_table_0.find_neighbors(routing_table_0, routing_table_0)

def test_case_8():
    int_0 = 2162
    none_type_0 = None
    routing_table_0 = module_0.RoutingTable(none_type_0, int_0, int_0)
    var_0 = routing_table_0.lonely_buckets()
    var_1 = routing_table_0.lonely_buckets()
    var_2 = var_0.__len__()
    assert var_2 == 0
    k_bucket_0 = module_0.KBucket(int_0, int_0, int_0)
    k_bucket_1 = module_0.KBucket(none_type_0, var_0, var_1)
    assert f'{type(k_bucket_1).__module__}.{type(k_bucket_1).__qualname__}' == 'kademlia.routing.KBucket'
    assert len(k_bucket_1) == 0
    var_3 = k_bucket_1.__len__()
    var_4 = k_bucket_0.split()
    var_5 = k_bucket_1.__len__()
    var_6 = k_bucket_1.__getitem__(none_type_0)
    var_7 = routing_table_0.lonely_buckets()
    var_8 = k_bucket_1.__len__()
    k_bucket_2 = module_0.KBucket(var_7, int_0, int_0)
    var_9 = routing_table_0.lonely_buckets()
    var_10 = k_bucket_0.__getitem__(int_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b'\xdf\xf5sW\t\xfdW\xeaQ\x9d\xe3\x82\r'
    none_type_0 = None
    k_bucket_0 = module_0.KBucket(bytes_0, none_type_0, bytes_0)
    assert f'{type(k_bucket_0).__module__}.{type(k_bucket_0).__qualname__}' == 'kademlia.routing.KBucket'
    assert len(k_bucket_0) == 0
    k_bucket_0.is_new_node(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b'\xb2\xf5'
    none_type_0 = None
    routing_table_0 = module_0.RoutingTable(bytes_0, bytes_0, none_type_0)
    assert f'{type(routing_table_0).__module__}.{type(routing_table_0).__qualname__}' == 'kademlia.routing.RoutingTable'
    assert routing_table_0.node is None
    assert routing_table_0.protocol == b'\xb2\xf5'
    assert routing_table_0.ksize == b'\xb2\xf5'
    assert f'{type(routing_table_0.buckets).__module__}.{type(routing_table_0.buckets).__qualname__}' == 'builtins.list'
    assert len(routing_table_0.buckets) == 1
    var_0 = routing_table_0.lonely_buckets()
    module_0.TableTraverser(routing_table_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = 2162
    none_type_0 = None
    routing_table_0 = module_0.RoutingTable(none_type_0, int_0, int_0)
    var_0 = routing_table_0.lonely_buckets()
    k_bucket_0 = module_0.KBucket(int_0, int_0, int_0)
    var_1 = routing_table_0.lonely_buckets()
    routing_table_0.split_bucket(int_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 310
    routing_table_0 = module_0.RoutingTable(int_0, int_0, int_0)
    routing_table_0.is_new_node(int_0)

def test_case_13():
    int_0 = -2371
    k_bucket_0 = module_0.KBucket(int_0, int_0, int_0)
    var_0 = k_bucket_0.split()

@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = 2158
    k_bucket_0 = module_0.KBucket(int_0, int_0, int_0)
    var_0 = k_bucket_0.get_nodes()
    var_1 = k_bucket_0.split()
    k_bucket_0.depth()

@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = -1732
    k_bucket_0 = module_0.KBucket(int_0, int_0, int_0)
    k_bucket_0.head()