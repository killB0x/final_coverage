# Automatically generated by Pynguin.
import pytest
import kademlia.node as module_0
import heapq as module_1

def test_case_0():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    node_heap_0 = module_0.NodeHeap(set_0, bool_0)
    var_0 = node_heap_0.remove(set_0)

def test_case_1():
    none_type_0 = None
    node_heap_0 = module_0.NodeHeap(none_type_0, none_type_0)
    var_0 = node_heap_0.get_node(none_type_0)

def test_case_2():
    none_type_0 = None
    node_heap_0 = module_0.NodeHeap(none_type_0, none_type_0)
    var_0 = node_heap_0.__contains__(none_type_0)

def test_case_3():
    bool_0 = True
    node_heap_0 = module_0.NodeHeap(bool_0, bool_0)
    var_0 = node_heap_0.get_uncontacted()

def test_case_4():
    var_0 = module_1.merge()
    var_1 = var_0.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    module_0.Node(bool_0, bool_0, bool_0)

def test_case_6():
    none_type_0 = None
    node_heap_0 = module_0.NodeHeap(none_type_0, none_type_0)

def test_case_7():
    bool_0 = True
    node_heap_0 = module_0.NodeHeap(bool_0, bool_0)
    var_0 = node_heap_0.have_contacted_all()
    assert var_0 is True

def test_case_8():
    bool_0 = False
    node_heap_0 = module_0.NodeHeap(bool_0, bool_0)
    var_0 = node_heap_0.get_ids()

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    node_heap_0 = module_0.NodeHeap(set_0, bool_0)
    var_0 = node_heap_0.remove(set_0)
    var_1 = node_heap_0.get_node(var_0)
    var_2 = node_heap_0.get_uncontacted()
    var_3 = node_heap_0.get_ids()
    node_heap_0.mark_contacted(var_3)

def test_case_10():
    bool_0 = True
    node_heap_0 = module_0.NodeHeap(bool_0, bool_0)
    var_0 = node_heap_0.popleft()

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    node_heap_0 = module_0.NodeHeap(bool_0, bool_0)
    node_heap_0.push(node_heap_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b'\t<'
    node_heap_0 = module_0.NodeHeap(bytes_0, bytes_0)
    var_0 = node_heap_0.get_node(bytes_0)
    node_0 = module_0.Node(bytes_0, port=bytes_0)
    assert node_0.long_id == 2364
    var_1 = node_0.same_home_as(node_0)
    assert var_1 is True
    var_2 = node_heap_0.remove(bytes_0)
    var_3 = node_0.distance_to(node_0)
    assert var_3 == 0
    var_4 = node_heap_0.__contains__(var_1)
    node_heap_0.push(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    node_heap_0 = module_0.NodeHeap(set_0, bool_0)
    var_0 = node_heap_0.remove(node_heap_0)
    var_1 = node_heap_0.remove(set_0)
    var_2 = node_heap_0.get_node(var_1)
    var_3 = node_heap_0.get_uncontacted()
    var_4 = node_heap_0.get_ids()
    module_1.nsmallest(set_0, var_3, var_4)

@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b'\t<'
    node_heap_0 = module_0.NodeHeap(bytes_0, bytes_0)
    var_0 = node_heap_0.get_node(bytes_0)
    node_0 = module_0.Node(bytes_0, port=bytes_0)
    assert node_0.long_id == 2364
    var_1 = node_0.__iter__()
    var_2 = node_0.same_home_as(node_0)
    assert var_2 is True
    var_3 = node_heap_0.remove(bytes_0)
    var_4 = node_heap_0.__contains__(var_2)
    node_heap_0.push(bytes_0)

def test_case_15():
    bytes_0 = b'\t<'
    node_0 = module_0.Node(bytes_0, port=bytes_0)
    assert node_0.long_id == 2364
    var_0 = node_0.__repr__()
    assert var_0 == "[2364, None, b'\\t<']"
    var_1 = node_0.same_home_as(node_0)
    assert var_1 is True

def test_case_16():
    bytes_0 = b';\xdb\xadeq\x83\x17\xc7\x7fU\xc4pn\x0e\xfav\xa6\xa2'
    node_0 = module_0.Node(bytes_0, port=bytes_0)
    assert node_0.long_id == 5214377191497092111947686001762471834461858
    var_0 = node_0.__str__()
    assert var_0 == "None:b';\\xdb\\xadeq\\x83\\x17\\xc7\\x7fU\\xc4pn\\x0e\\xfav\\xa6\\xa2'"
    var_1 = node_0.same_home_as(node_0)
    assert var_1 is True

@pytest.mark.xfail(strict=True)
def test_case_17():
    float_0 = -2568.6471
    bool_0 = True
    set_0 = {bool_0}
    node_heap_0 = module_0.NodeHeap(set_0, bool_0)
    bytes_0 = b'\x11H8\x17W\xa2\x91'
    var_0 = node_heap_0.get_ids()
    tuple_0 = (bytes_0, var_0)
    node_heap_1 = module_0.NodeHeap(tuple_0, set_0)
    var_1 = node_heap_1.remove(set_0)
    var_2 = node_heap_0.popleft()
    var_3 = node_heap_0.push(var_0)
    var_4 = node_heap_0.get_uncontacted()
    var_5 = node_heap_0.get_node(float_0)
    node_heap_0.push(var_3)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = True
    set_0 = {bool_0}
    node_heap_0 = module_0.NodeHeap(set_0, bool_0)
    bytes_0 = b'\x11H8\x17W\xa2\x91'
    var_0 = node_heap_0.get_ids()
    tuple_0 = (bytes_0, var_0)
    node_heap_1 = module_0.NodeHeap(tuple_0, set_0)
    var_1 = node_heap_0.popleft()
    var_2 = node_heap_0.remove(set_0)
    var_3 = node_heap_0.get_uncontacted()
    var_4 = node_heap_0.get_node(var_2)
    list_0 = [var_2, var_3, node_heap_1]
    node_heap_0.push(list_0)

def test_case_19():
    bytes_0 = b'\t<'
    node_0 = module_0.Node(bytes_0, port=bytes_0)
    assert node_0.long_id == 2364
    var_0 = node_0.same_home_as(node_0)
    assert var_0 is True