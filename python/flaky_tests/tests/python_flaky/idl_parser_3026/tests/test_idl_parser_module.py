# Automatically generated by Pynguin.
import pytest
import idl_parser.module as module_0
import idl_parser.const as module_1

def test_case_0():
    i_d_l_module_0 = module_0.IDLModule()
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'

def test_case_1():
    i_d_l_module_0 = module_0.IDLModule()
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'
    var_0 = module_0.IDLModule(i_d_l_module_0, i_d_l_module_0)
    assert var_0.sep == '::'
    var_1 = var_0.union_by_name(var_0)
    var_2 = i_d_l_module_0.for_each_typedef(i_d_l_module_0)

def test_case_2():
    i_d_l_module_0 = module_0.IDLModule()
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_module_0.to_simple_dic()

def test_case_3():
    i_d_l_module_0 = module_0.IDLModule()
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_module_0.to_dic()

@pytest.mark.xfail(strict=True)
def test_case_4():
    i_d_l_module_0 = module_0.IDLModule()
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'
    i_d_l_module_0.parse_tokens(i_d_l_module_0)

def test_case_5():
    i_d_l_module_0 = module_0.IDLModule()
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'
    i_d_l_module_1 = i_d_l_module_0.module_by_name(i_d_l_module_0)

def test_case_6():
    i_d_l_module_0 = module_0.IDLModule()
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_module_0.refine_typename(i_d_l_module_0)
    assert var_0 == '__global__'

def test_case_7():
    i_d_l_module_0 = module_0.IDLModule()
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_module_0.interface_by_name(i_d_l_module_0)

def test_case_8():
    i_d_l_module_0 = module_0.IDLModule()
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_module_0.struct_by_name(i_d_l_module_0)

def test_case_9():
    i_d_l_module_0 = module_0.IDLModule()
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_module_0.enum_by_name(i_d_l_module_0)

def test_case_10():
    i_d_l_module_0 = module_0.IDLModule()
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_module_0.union_by_name(i_d_l_module_0)

def test_case_11():
    i_d_l_module_0 = module_0.IDLModule()
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_module_0.const_by_name(i_d_l_module_0)

def test_case_12():
    i_d_l_module_0 = module_0.IDLModule()
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_module_0.for_each_const(i_d_l_module_0)

def test_case_13():
    i_d_l_module_0 = module_0.IDLModule()
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_module_0.typedef_by_name(i_d_l_module_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    list_0 = []
    i_d_l_module_0 = module_0.IDLModule(list_0, list_0)
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = i_d_l_module_0.struct_by_name(i_d_l_module_0)
    var_1 = i_d_l_module_0.const_by_name(none_type_0)
    float_0 = -32.27
    i_d_l_module_0.parse_tokens(float_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    i_d_l_module_0 = module_0.IDLModule()
    assert f'{type(i_d_l_module_0).__module__}.{type(i_d_l_module_0).__qualname__}' == 'idl_parser.module.IDLModule'
    assert i_d_l_module_0.sep == '::'
    assert module_0.global_namespace == '__global__'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLModule.is_global).__module__}.{type(module_0.IDLModule.is_global).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.full_path).__module__}.{type(module_0.IDLModule.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.modules).__module__}.{type(module_0.IDLModule.modules).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.interfaces).__module__}.{type(module_0.IDLModule.interfaces).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.structs).__module__}.{type(module_0.IDLModule.structs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.enums).__module__}.{type(module_0.IDLModule.enums).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.unions).__module__}.{type(module_0.IDLModule.unions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.consts).__module__}.{type(module_0.IDLModule.consts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLModule.typedefs).__module__}.{type(module_0.IDLModule.typedefs).__qualname__}' == 'builtins.property'
    none_type_0 = None
    i_d_l_const_0 = module_1.IDLConst(i_d_l_module_0, i_d_l_module_0, i_d_l_module_0, i_d_l_module_0, none_type_0)
    i_d_l_const_0.to_simple_dic(full_path=i_d_l_module_0, recursive=i_d_l_module_0)