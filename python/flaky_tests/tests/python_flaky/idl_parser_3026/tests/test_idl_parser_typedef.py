# Automatically generated by Pynguin.
import pytest
import idl_parser.typedef as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    i_d_l_typedef_0 = module_0.IDLTypedef(bool_0)
    assert f'{type(i_d_l_typedef_0).__module__}.{type(i_d_l_typedef_0).__qualname__}' == 'idl_parser.typedef.IDLTypedef'
    assert i_d_l_typedef_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLTypedef.full_path).__module__}.{type(module_0.IDLTypedef.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLTypedef.type).__module__}.{type(module_0.IDLTypedef.type).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_typedef_0.to_simple_dic(i_d_l_typedef_0)
    assert var_0 == 'typedef '
    i_d_l_typedef_0.to_simple_dic(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'Fni\x84,u\x87P\xbc\x8d\xbf\xd0\xf2\xdew\x1e\xf4'
    i_d_l_typedef_0 = module_0.IDLTypedef(bytes_0)
    assert f'{type(i_d_l_typedef_0).__module__}.{type(i_d_l_typedef_0).__qualname__}' == 'idl_parser.typedef.IDLTypedef'
    assert i_d_l_typedef_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLTypedef.full_path).__module__}.{type(module_0.IDLTypedef.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLTypedef.type).__module__}.{type(module_0.IDLTypedef.type).__qualname__}' == 'builtins.property'
    i_d_l_typedef_0.to_simple_dic(i_d_l_typedef_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    i_d_l_typedef_0 = module_0.IDLTypedef(bool_0)
    assert f'{type(i_d_l_typedef_0).__module__}.{type(i_d_l_typedef_0).__qualname__}' == 'idl_parser.typedef.IDLTypedef'
    assert i_d_l_typedef_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLTypedef.full_path).__module__}.{type(module_0.IDLTypedef.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLTypedef.type).__module__}.{type(module_0.IDLTypedef.type).__qualname__}' == 'builtins.property'
    i_d_l_typedef_0.to_simple_dic(bool_0)

def test_case_3():
    bool_0 = False
    i_d_l_typedef_0 = module_0.IDLTypedef(bool_0)
    assert f'{type(i_d_l_typedef_0).__module__}.{type(i_d_l_typedef_0).__qualname__}' == 'idl_parser.typedef.IDLTypedef'
    assert i_d_l_typedef_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLTypedef.full_path).__module__}.{type(module_0.IDLTypedef.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLTypedef.type).__module__}.{type(module_0.IDLTypedef.type).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    i_d_l_typedef_0 = module_0.IDLTypedef(none_type_0)
    assert f'{type(i_d_l_typedef_0).__module__}.{type(i_d_l_typedef_0).__qualname__}' == 'idl_parser.typedef.IDLTypedef'
    assert i_d_l_typedef_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLTypedef.full_path).__module__}.{type(module_0.IDLTypedef.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLTypedef.type).__module__}.{type(module_0.IDLTypedef.type).__qualname__}' == 'builtins.property'
    bool_0 = False
    i_d_l_typedef_1 = module_0.IDLTypedef(bool_0)
    assert i_d_l_typedef_1.sep == '::'
    i_d_l_typedef_1.to_dic()

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -1
    none_type_0 = None
    i_d_l_typedef_0 = module_0.IDLTypedef(none_type_0)
    assert f'{type(i_d_l_typedef_0).__module__}.{type(i_d_l_typedef_0).__qualname__}' == 'idl_parser.typedef.IDLTypedef'
    assert i_d_l_typedef_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLTypedef.full_path).__module__}.{type(module_0.IDLTypedef.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLTypedef.type).__module__}.{type(module_0.IDLTypedef.type).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_typedef_0.to_simple_dic(int_0, member_only=int_0)
    assert var_0 == 'typedef '
    i_d_l_typedef_0.get_type(int_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = -1736
    i_d_l_typedef_0 = module_0.IDLTypedef(int_0)
    assert f'{type(i_d_l_typedef_0).__module__}.{type(i_d_l_typedef_0).__qualname__}' == 'idl_parser.typedef.IDLTypedef'
    assert i_d_l_typedef_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLTypedef.full_path).__module__}.{type(module_0.IDLTypedef.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLTypedef.type).__module__}.{type(module_0.IDLTypedef.type).__qualname__}' == 'builtins.property'
    i_d_l_typedef_0.get_type()

@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 1
    i_d_l_typedef_0 = module_0.IDLTypedef(int_0)
    assert f'{type(i_d_l_typedef_0).__module__}.{type(i_d_l_typedef_0).__qualname__}' == 'idl_parser.typedef.IDLTypedef'
    assert i_d_l_typedef_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLTypedef.full_path).__module__}.{type(module_0.IDLTypedef.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLTypedef.type).__module__}.{type(module_0.IDLTypedef.type).__qualname__}' == 'builtins.property'
    i_d_l_typedef_0.to_simple_dic(recursive=int_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -1
    i_d_l_typedef_0 = module_0.IDLTypedef(int_0)
    assert f'{type(i_d_l_typedef_0).__module__}.{type(i_d_l_typedef_0).__qualname__}' == 'idl_parser.typedef.IDLTypedef'
    assert i_d_l_typedef_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLTypedef.full_path).__module__}.{type(module_0.IDLTypedef.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLTypedef.type).__module__}.{type(module_0.IDLTypedef.type).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_typedef_0.to_simple_dic(int_0, recursive=i_d_l_typedef_0)
    assert var_0 == 'typedef '
    i_d_l_typedef_0.parse_blocks(var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 17
    i_d_l_typedef_0 = module_0.IDLTypedef(int_0)
    assert f'{type(i_d_l_typedef_0).__module__}.{type(i_d_l_typedef_0).__qualname__}' == 'idl_parser.typedef.IDLTypedef'
    assert i_d_l_typedef_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLTypedef.full_path).__module__}.{type(module_0.IDLTypedef.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLTypedef.type).__module__}.{type(module_0.IDLTypedef.type).__qualname__}' == 'builtins.property'
    str_0 = 'n\\n{ "['
    i_d_l_typedef_0.parse_blocks(str_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = -1
    i_d_l_typedef_0 = module_0.IDLTypedef(int_0)
    assert f'{type(i_d_l_typedef_0).__module__}.{type(i_d_l_typedef_0).__qualname__}' == 'idl_parser.typedef.IDLTypedef'
    assert i_d_l_typedef_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLTypedef.full_path).__module__}.{type(module_0.IDLTypedef.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLTypedef.type).__module__}.{type(module_0.IDLTypedef.type).__qualname__}' == 'builtins.property'
    str_0 = 'n\\n{ "['
    list_0 = [str_0, i_d_l_typedef_0, str_0]
    i_d_l_typedef_0.parse_blocks(list_0)