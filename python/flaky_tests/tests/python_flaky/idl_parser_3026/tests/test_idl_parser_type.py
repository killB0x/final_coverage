# Automatically generated by Pynguin.
import pytest
import idl_parser.type as module_0
import idl_parser.node as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = ':\r\x0b'
    module_0.IDLType(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.IDLType(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ''
    module_0.IDLTypeBase(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "\r'"
    module_0.IDLVoid(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'Jgwzy,uM Q|BQZo'
    module_0.IDLPrimitive(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'ta6Sbt[*>[<*hlC$yU\t('
    module_0.IDLType(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'octet'
    module_0.IDLType(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'sequence < '
    module_0.IDLType(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'void'
    module_0.IDLType(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    i_d_l_node_0 = module_1.IDLNode(none_type_0, none_type_0, none_type_0)
    i_d_l_void_0 = module_0.IDLVoid(none_type_0, i_d_l_node_0)
    assert f'{type(i_d_l_void_0).__module__}.{type(i_d_l_void_0).__qualname__}' == 'idl_parser.type.IDLVoid'
    assert i_d_l_void_0.sep == '::'
    assert module_0.sep == '::'
    assert module_0.primitive == ['boolean', 'char', 'byte', 'octet', 'short', 'wchar', 'long', 'float', 'double', 'string', 'wstring']
    var_0 = i_d_l_void_0.__str__()
    var_1 = var_0.__str__()
    assert var_1 == 'None'
    var_2 = var_1.__str__()
    assert var_2 == 'None'
    var_3 = var_2.__str__()
    assert var_3 == 'None'
    module_0.IDLType(none_type_0, var_3)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'vyi'
    none_type_0 = None
    i_d_l_node_0 = module_1.IDLNode(str_0, none_type_0, none_type_0)
    module_0.IDLArray(str_0, i_d_l_node_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "[iDl@K'O\r"
    none_type_0 = None
    i_d_l_node_0 = module_1.IDLNode(str_0, none_type_0, none_type_0)
    module_0.IDLArray(str_0, i_d_l_node_0)