# Automatically generated by Pynguin.
import pytest
import idl_parser.union as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = ''
    i_d_l_union_member_0 = module_0.IDLUnionMember(str_0)
    assert f'{type(i_d_l_union_member_0).__module__}.{type(i_d_l_union_member_0).__qualname__}' == 'idl_parser.union.IDLUnionMember'
    assert i_d_l_union_member_0.sep == '::'
    assert f'{type(module_0.IDLUnionMember.full_path).__module__}.{type(module_0.IDLUnionMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.type).__module__}.{type(module_0.IDLUnionMember.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.descriminator_value_associations).__module__}.{type(module_0.IDLUnionMember.descriminator_value_associations).__qualname__}' == 'builtins.property'
    i_d_l_union_member_0.to_simple_dic()

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    i_d_l_union_member_0 = module_0.IDLUnionMember(bool_0)
    assert f'{type(i_d_l_union_member_0).__module__}.{type(i_d_l_union_member_0).__qualname__}' == 'idl_parser.union.IDLUnionMember'
    assert i_d_l_union_member_0.sep == '::'
    assert f'{type(module_0.IDLUnionMember.full_path).__module__}.{type(module_0.IDLUnionMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.type).__module__}.{type(module_0.IDLUnionMember.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.descriminator_value_associations).__module__}.{type(module_0.IDLUnionMember.descriminator_value_associations).__qualname__}' == 'builtins.property'
    i_d_l_union_member_0.get_type(i_d_l_union_member_0)

def test_case_2():
    str_0 = ''
    i_d_l_union_member_0 = module_0.IDLUnionMember(str_0)
    assert f'{type(i_d_l_union_member_0).__module__}.{type(i_d_l_union_member_0).__qualname__}' == 'idl_parser.union.IDLUnionMember'
    assert i_d_l_union_member_0.sep == '::'
    assert f'{type(module_0.IDLUnionMember.full_path).__module__}.{type(module_0.IDLUnionMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.type).__module__}.{type(module_0.IDLUnionMember.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.descriminator_value_associations).__module__}.{type(module_0.IDLUnionMember.descriminator_value_associations).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    i_d_l_union_member_0 = module_0.IDLUnionMember(bool_0)
    assert f'{type(i_d_l_union_member_0).__module__}.{type(i_d_l_union_member_0).__qualname__}' == 'idl_parser.union.IDLUnionMember'
    assert i_d_l_union_member_0.sep == '::'
    assert f'{type(module_0.IDLUnionMember.full_path).__module__}.{type(module_0.IDLUnionMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.type).__module__}.{type(module_0.IDLUnionMember.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.descriminator_value_associations).__module__}.{type(module_0.IDLUnionMember.descriminator_value_associations).__qualname__}' == 'builtins.property'
    i_d_l_union_member_1 = module_0.IDLUnionMember(bool_0)
    assert i_d_l_union_member_1.sep == '::'
    i_d_l_union_member_1.post_process()

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    module_0.IDLUnion(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'Rs'
    i_d_l_union_member_0 = module_0.IDLUnionMember(str_0)
    assert f'{type(i_d_l_union_member_0).__module__}.{type(i_d_l_union_member_0).__qualname__}' == 'idl_parser.union.IDLUnionMember'
    assert i_d_l_union_member_0.sep == '::'
    assert f'{type(module_0.IDLUnionMember.full_path).__module__}.{type(module_0.IDLUnionMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.type).__module__}.{type(module_0.IDLUnionMember.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.descriminator_value_associations).__module__}.{type(module_0.IDLUnionMember.descriminator_value_associations).__qualname__}' == 'builtins.property'
    i_d_l_union_member_0.get_type()

@pytest.mark.xfail(strict=True)
def test_case_6():
    complex_0 = (-2316.559-1596.72902j)
    i_d_l_union_member_0 = module_0.IDLUnionMember(complex_0)
    assert f'{type(i_d_l_union_member_0).__module__}.{type(i_d_l_union_member_0).__qualname__}' == 'idl_parser.union.IDLUnionMember'
    assert i_d_l_union_member_0.sep == '::'
    assert f'{type(module_0.IDLUnionMember.full_path).__module__}.{type(module_0.IDLUnionMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.type).__module__}.{type(module_0.IDLUnionMember.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.descriminator_value_associations).__module__}.{type(module_0.IDLUnionMember.descriminator_value_associations).__qualname__}' == 'builtins.property'
    i_d_l_union_member_0.to_dic()

def test_case_7():
    str_0 = ''
    i_d_l_union_0 = module_0.IDLUnion(str_0, str_0)
    assert f'{type(i_d_l_union_0).__module__}.{type(i_d_l_union_0).__qualname__}' == 'idl_parser.union.IDLUnion'
    assert i_d_l_union_0.sep == '::'
    assert f'{type(module_0.IDLUnion.full_path).__module__}.{type(module_0.IDLUnion.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.members).__module__}.{type(module_0.IDLUnion.members).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.descriminator_kind).__module__}.{type(module_0.IDLUnion.descriminator_kind).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_union_0.forEachMember(str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'c'
    i_d_l_union_member_0 = module_0.IDLUnionMember(str_0)
    assert f'{type(i_d_l_union_member_0).__module__}.{type(i_d_l_union_member_0).__qualname__}' == 'idl_parser.union.IDLUnionMember'
    assert i_d_l_union_member_0.sep == '::'
    assert f'{type(module_0.IDLUnionMember.full_path).__module__}.{type(module_0.IDLUnionMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.type).__module__}.{type(module_0.IDLUnionMember.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.descriminator_value_associations).__module__}.{type(module_0.IDLUnionMember.descriminator_value_associations).__qualname__}' == 'builtins.property'
    i_d_l_union_member_0.to_simple_dic(str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'c'
    i_d_l_union_member_0 = module_0.IDLUnionMember(str_0)
    assert f'{type(i_d_l_union_member_0).__module__}.{type(i_d_l_union_member_0).__qualname__}' == 'idl_parser.union.IDLUnionMember'
    assert i_d_l_union_member_0.sep == '::'
    assert f'{type(module_0.IDLUnionMember.full_path).__module__}.{type(module_0.IDLUnionMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.type).__module__}.{type(module_0.IDLUnionMember.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.descriminator_value_associations).__module__}.{type(module_0.IDLUnionMember.descriminator_value_associations).__qualname__}' == 'builtins.property'
    i_d_l_union_member_0.parse_blocks(str_0)

def test_case_10():
    str_0 = 'c'
    i_d_l_union_0 = module_0.IDLUnion(str_0, str_0)
    assert f'{type(i_d_l_union_0).__module__}.{type(i_d_l_union_0).__qualname__}' == 'idl_parser.union.IDLUnion'
    assert i_d_l_union_0.sep == '::'
    assert f'{type(module_0.IDLUnion.full_path).__module__}.{type(module_0.IDLUnion.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.members).__module__}.{type(module_0.IDLUnion.members).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.descriminator_kind).__module__}.{type(module_0.IDLUnion.descriminator_kind).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_union_0.to_simple_dic()

def test_case_11():
    str_0 = ''
    i_d_l_union_0 = module_0.IDLUnion(str_0, str_0)
    assert f'{type(i_d_l_union_0).__module__}.{type(i_d_l_union_0).__qualname__}' == 'idl_parser.union.IDLUnion'
    assert i_d_l_union_0.sep == '::'
    assert f'{type(module_0.IDLUnion.full_path).__module__}.{type(module_0.IDLUnion.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.members).__module__}.{type(module_0.IDLUnion.members).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.descriminator_kind).__module__}.{type(module_0.IDLUnion.descriminator_kind).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_union_0.to_dic()

def test_case_12():
    str_0 = 'c'
    i_d_l_union_0 = module_0.IDLUnion(str_0, str_0)
    assert f'{type(i_d_l_union_0).__module__}.{type(i_d_l_union_0).__qualname__}' == 'idl_parser.union.IDLUnion'
    assert i_d_l_union_0.sep == '::'
    assert f'{type(module_0.IDLUnion.full_path).__module__}.{type(module_0.IDLUnion.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.members).__module__}.{type(module_0.IDLUnion.members).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.descriminator_kind).__module__}.{type(module_0.IDLUnion.descriminator_kind).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_union_0.member_by_name(i_d_l_union_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 't>'
    i_d_l_union_0 = module_0.IDLUnion(str_0, str_0)
    assert f'{type(i_d_l_union_0).__module__}.{type(i_d_l_union_0).__qualname__}' == 'idl_parser.union.IDLUnion'
    assert i_d_l_union_0.sep == '::'
    assert f'{type(module_0.IDLUnion.full_path).__module__}.{type(module_0.IDLUnion.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.members).__module__}.{type(module_0.IDLUnion.members).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.descriminator_kind).__module__}.{type(module_0.IDLUnion.descriminator_kind).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_union_0.forEachMember(str_0)
    i_d_l_union_member_0 = module_0.IDLUnionMember(i_d_l_union_0)
    assert f'{type(i_d_l_union_member_0).__module__}.{type(i_d_l_union_member_0).__qualname__}' == 'idl_parser.union.IDLUnionMember'
    assert i_d_l_union_member_0.sep == '::'
    assert f'{type(module_0.IDLUnionMember.full_path).__module__}.{type(module_0.IDLUnionMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.type).__module__}.{type(module_0.IDLUnionMember.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.descriminator_value_associations).__module__}.{type(module_0.IDLUnionMember.descriminator_value_associations).__qualname__}' == 'builtins.property'
    i_d_l_union_0.to_simple_dic(var_0, member_only=i_d_l_union_member_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'te>'
    i_d_l_union_0 = module_0.IDLUnion(str_0, str_0)
    assert f'{type(i_d_l_union_0).__module__}.{type(i_d_l_union_0).__qualname__}' == 'idl_parser.union.IDLUnion'
    assert i_d_l_union_0.sep == '::'
    assert f'{type(module_0.IDLUnion.full_path).__module__}.{type(module_0.IDLUnion.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.members).__module__}.{type(module_0.IDLUnion.members).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.descriminator_kind).__module__}.{type(module_0.IDLUnion.descriminator_kind).__qualname__}' == 'builtins.property'
    i_d_l_union_0.to_simple_dic(full_path=str_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'c'
    i_d_l_union_0 = module_0.IDLUnion(str_0, str_0)
    assert f'{type(i_d_l_union_0).__module__}.{type(i_d_l_union_0).__qualname__}' == 'idl_parser.union.IDLUnion'
    assert i_d_l_union_0.sep == '::'
    assert f'{type(module_0.IDLUnion.full_path).__module__}.{type(module_0.IDLUnion.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.members).__module__}.{type(module_0.IDLUnion.members).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.descriminator_kind).__module__}.{type(module_0.IDLUnion.descriminator_kind).__qualname__}' == 'builtins.property'
    i_d_l_union_1 = module_0.IDLUnion(str_0, i_d_l_union_0)
    assert i_d_l_union_1.sep == '::'
    var_0 = i_d_l_union_0.to_simple_dic()
    var_1 = i_d_l_union_1.to_simple_dic(i_d_l_union_1, member_only=i_d_l_union_0)
    assert var_1 == 'union c'
    var_2 = i_d_l_union_0.forEachMember(str_0)
    var_3 = i_d_l_union_0.to_dic()
    var_4 = i_d_l_union_0.member_by_name(i_d_l_union_0)
    i_d_l_union_member_0 = module_0.IDLUnionMember(str_0)
    assert f'{type(i_d_l_union_member_0).__module__}.{type(i_d_l_union_member_0).__qualname__}' == 'idl_parser.union.IDLUnionMember'
    assert i_d_l_union_member_0.sep == '::'
    assert f'{type(module_0.IDLUnionMember.full_path).__module__}.{type(module_0.IDLUnionMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.type).__module__}.{type(module_0.IDLUnionMember.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.descriminator_value_associations).__module__}.{type(module_0.IDLUnionMember.descriminator_value_associations).__qualname__}' == 'builtins.property'
    i_d_l_union_member_0.parse_blocks(str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = '[&\x0bZ,O--/yG\\Jqph-['
    i_d_l_union_0 = module_0.IDLUnion(str_0, str_0)
    assert f'{type(i_d_l_union_0).__module__}.{type(i_d_l_union_0).__qualname__}' == 'idl_parser.union.IDLUnion'
    assert i_d_l_union_0.sep == '::'
    assert f'{type(module_0.IDLUnion.full_path).__module__}.{type(module_0.IDLUnion.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.members).__module__}.{type(module_0.IDLUnion.members).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnion.descriminator_kind).__module__}.{type(module_0.IDLUnion.descriminator_kind).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_union_0.to_simple_dic()
    var_1 = i_d_l_union_0.forEachMember(str_0)
    var_2 = i_d_l_union_0.to_dic()
    var_3 = var_0.__str__()
    assert var_3 == "{'union [&\\x0bZ,O--/yG\\\\Jqph-[': []}"
    i_d_l_union_member_0 = module_0.IDLUnionMember(str_0)
    assert f'{type(i_d_l_union_member_0).__module__}.{type(i_d_l_union_member_0).__qualname__}' == 'idl_parser.union.IDLUnionMember'
    assert i_d_l_union_member_0.sep == '::'
    assert f'{type(module_0.IDLUnionMember.full_path).__module__}.{type(module_0.IDLUnionMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.type).__module__}.{type(module_0.IDLUnionMember.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLUnionMember.descriminator_value_associations).__module__}.{type(module_0.IDLUnionMember.descriminator_value_associations).__qualname__}' == 'builtins.property'
    i_d_l_union_member_0.parse_blocks(str_0)