# Automatically generated by Pynguin.
import pytest
import idl_parser.struct as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -2395
    i_d_l_member_0 = module_0.IDLMember(int_0)
    assert f'{type(i_d_l_member_0).__module__}.{type(i_d_l_member_0).__qualname__}' == 'idl_parser.struct.IDLMember'
    assert i_d_l_member_0.sep == '::'
    assert f'{type(module_0.IDLMember.full_path).__module__}.{type(module_0.IDLMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMember.type).__module__}.{type(module_0.IDLMember.type).__qualname__}' == 'builtins.property'
    i_d_l_member_0.to_simple_dic()

def test_case_1():
    bytes_0 = b'\xdc\xf2?b+'
    i_d_l_struct_0 = module_0.IDLStruct(bytes_0, bytes_0)
    assert f'{type(i_d_l_struct_0).__module__}.{type(i_d_l_struct_0).__qualname__}' == 'idl_parser.struct.IDLStruct'
    assert i_d_l_struct_0.sep == '::'
    assert f'{type(module_0.IDLStruct.full_path).__module__}.{type(module_0.IDLStruct.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLStruct.members).__module__}.{type(module_0.IDLStruct.members).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_struct_0.forEachMember(i_d_l_struct_0)

def test_case_2():
    bytes_0 = b'\xd5Vm\xca f]C\xec\x84?\xaa\x002'
    i_d_l_member_0 = module_0.IDLMember(bytes_0)
    assert f'{type(i_d_l_member_0).__module__}.{type(i_d_l_member_0).__qualname__}' == 'idl_parser.struct.IDLMember'
    assert i_d_l_member_0.sep == '::'
    assert f'{type(module_0.IDLMember.full_path).__module__}.{type(module_0.IDLMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMember.type).__module__}.{type(module_0.IDLMember.type).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    i_d_l_member_0 = module_0.IDLMember(none_type_0)
    assert f'{type(i_d_l_member_0).__module__}.{type(i_d_l_member_0).__qualname__}' == 'idl_parser.struct.IDLMember'
    assert i_d_l_member_0.sep == '::'
    assert f'{type(module_0.IDLMember.full_path).__module__}.{type(module_0.IDLMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMember.type).__module__}.{type(module_0.IDLMember.type).__qualname__}' == 'builtins.property'
    i_d_l_member_0.post_process()

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.IDLStruct(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = ' # IDL (%s) can not be found.\n'
    i_d_l_member_0 = module_0.IDLMember(str_0)
    assert f'{type(i_d_l_member_0).__module__}.{type(i_d_l_member_0).__qualname__}' == 'idl_parser.struct.IDLMember'
    assert i_d_l_member_0.sep == '::'
    assert f'{type(module_0.IDLMember.full_path).__module__}.{type(module_0.IDLMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMember.type).__module__}.{type(module_0.IDLMember.type).__qualname__}' == 'builtins.property'
    i_d_l_member_0.get_type()

def test_case_6():
    bytes_0 = b'\xdc\xf2?b+4'
    i_d_l_struct_0 = module_0.IDLStruct(bytes_0, bytes_0)
    assert f'{type(i_d_l_struct_0).__module__}.{type(i_d_l_struct_0).__qualname__}' == 'idl_parser.struct.IDLStruct'
    assert i_d_l_struct_0.sep == '::'
    assert f'{type(module_0.IDLStruct.full_path).__module__}.{type(module_0.IDLStruct.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLStruct.members).__module__}.{type(module_0.IDLStruct.members).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_struct_0.member_by_name(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b'\xdc\xf2?b+4'
    i_d_l_struct_0 = module_0.IDLStruct(bytes_0, bytes_0)
    assert f'{type(i_d_l_struct_0).__module__}.{type(i_d_l_struct_0).__qualname__}' == 'idl_parser.struct.IDLStruct'
    assert i_d_l_struct_0.sep == '::'
    assert f'{type(module_0.IDLStruct.full_path).__module__}.{type(module_0.IDLStruct.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLStruct.members).__module__}.{type(module_0.IDLStruct.members).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_struct_0.forEachMember(i_d_l_struct_0)
    var_1 = i_d_l_struct_0.to_dic()
    var_2 = i_d_l_struct_0.member_by_name(i_d_l_struct_0)
    var_3 = i_d_l_struct_0.to_simple_dic()
    var_4 = var_2.__str__()
    var_5 = var_3.__str__()
    assert var_5 == '{"struct b\'\\\\xdc\\\\xf2?b+4\'": []}'
    i_d_l_member_0 = module_0.IDLMember(var_4)
    assert f'{type(i_d_l_member_0).__module__}.{type(i_d_l_member_0).__qualname__}' == 'idl_parser.struct.IDLMember'
    assert i_d_l_member_0.sep == '::'
    assert f'{type(module_0.IDLMember.full_path).__module__}.{type(module_0.IDLMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMember.type).__module__}.{type(module_0.IDLMember.type).__qualname__}' == 'builtins.property'
    i_d_l_member_0.get_type(var_3)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    i_d_l_member_0 = module_0.IDLMember(none_type_0)
    assert f'{type(i_d_l_member_0).__module__}.{type(i_d_l_member_0).__qualname__}' == 'idl_parser.struct.IDLMember'
    assert i_d_l_member_0.sep == '::'
    assert f'{type(module_0.IDLMember.full_path).__module__}.{type(module_0.IDLMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMember.type).__module__}.{type(module_0.IDLMember.type).__qualname__}' == 'builtins.property'
    i_d_l_member_0.to_dic()

@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = -2412
    i_d_l_member_0 = module_0.IDLMember(int_0)
    assert f'{type(i_d_l_member_0).__module__}.{type(i_d_l_member_0).__qualname__}' == 'idl_parser.struct.IDLMember'
    assert i_d_l_member_0.sep == '::'
    assert f'{type(module_0.IDLMember.full_path).__module__}.{type(module_0.IDLMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMember.type).__module__}.{type(module_0.IDLMember.type).__qualname__}' == 'builtins.property'
    i_d_l_member_0.to_simple_dic(int_0)

def test_case_10():
    bytes_0 = b'\xdc\xf2?b+4'
    i_d_l_struct_0 = module_0.IDLStruct(bytes_0, bytes_0)
    assert f'{type(i_d_l_struct_0).__module__}.{type(i_d_l_struct_0).__qualname__}' == 'idl_parser.struct.IDLStruct'
    assert i_d_l_struct_0.sep == '::'
    assert f'{type(module_0.IDLStruct.full_path).__module__}.{type(module_0.IDLStruct.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLStruct.members).__module__}.{type(module_0.IDLStruct.members).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_struct_0.to_simple_dic()

def test_case_11():
    bytes_0 = b'\xdc\xf2?b+4'
    i_d_l_struct_0 = module_0.IDLStruct(bytes_0, bytes_0)
    assert f'{type(i_d_l_struct_0).__module__}.{type(i_d_l_struct_0).__qualname__}' == 'idl_parser.struct.IDLStruct'
    assert i_d_l_struct_0.sep == '::'
    assert f'{type(module_0.IDLStruct.full_path).__module__}.{type(module_0.IDLStruct.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLStruct.members).__module__}.{type(module_0.IDLStruct.members).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_struct_0.to_dic()

@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b'\xdc\xf2?b+4'
    i_d_l_struct_0 = module_0.IDLStruct(bytes_0, bytes_0)
    assert f'{type(i_d_l_struct_0).__module__}.{type(i_d_l_struct_0).__qualname__}' == 'idl_parser.struct.IDLStruct'
    assert i_d_l_struct_0.sep == '::'
    assert f'{type(module_0.IDLStruct.full_path).__module__}.{type(module_0.IDLStruct.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLStruct.members).__module__}.{type(module_0.IDLStruct.members).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_struct_0.to_simple_dic(i_d_l_struct_0, recursive=bytes_0, member_only=i_d_l_struct_0)
    assert var_0 == "struct b'\\xdc\\xf2?b+4'"
    var_1 = var_0.__str__()
    assert var_1 == "struct b'\\xdc\\xf2?b+4'"
    var_2 = var_1.__str__()
    assert var_2 == "struct b'\\xdc\\xf2?b+4'"
    var_2.member_by_name(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b'\xdc\xf2?\x9aH'
    i_d_l_struct_0 = module_0.IDLStruct(bytes_0, bytes_0)
    assert f'{type(i_d_l_struct_0).__module__}.{type(i_d_l_struct_0).__qualname__}' == 'idl_parser.struct.IDLStruct'
    assert i_d_l_struct_0.sep == '::'
    assert f'{type(module_0.IDLStruct.full_path).__module__}.{type(module_0.IDLStruct.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLStruct.members).__module__}.{type(module_0.IDLStruct.members).__qualname__}' == 'builtins.property'
    tuple_0 = ()
    var_0 = i_d_l_struct_0.member_by_name(tuple_0)
    i_d_l_struct_0.to_simple_dic(bytes_0, bytes_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b'\xdc\xf2?b+4'
    i_d_l_struct_0 = module_0.IDLStruct(bytes_0, bytes_0)
    assert f'{type(i_d_l_struct_0).__module__}.{type(i_d_l_struct_0).__qualname__}' == 'idl_parser.struct.IDLStruct'
    assert i_d_l_struct_0.sep == '::'
    assert f'{type(module_0.IDLStruct.full_path).__module__}.{type(module_0.IDLStruct.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLStruct.members).__module__}.{type(module_0.IDLStruct.members).__qualname__}' == 'builtins.property'
    i_d_l_struct_0.to_simple_dic(recursive=bytes_0, member_only=i_d_l_struct_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '`*'
    i_d_l_member_0 = module_0.IDLMember(str_0)
    assert f'{type(i_d_l_member_0).__module__}.{type(i_d_l_member_0).__qualname__}' == 'idl_parser.struct.IDLMember'
    assert i_d_l_member_0.sep == '::'
    assert f'{type(module_0.IDLMember.full_path).__module__}.{type(module_0.IDLMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMember.type).__module__}.{type(module_0.IDLMember.type).__qualname__}' == 'builtins.property'
    i_d_l_member_0.parse_blocks(str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = '[]'
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    i_d_l_member_0 = module_0.IDLMember(none_type_0)
    assert f'{type(i_d_l_member_0).__module__}.{type(i_d_l_member_0).__qualname__}' == 'idl_parser.struct.IDLMember'
    assert i_d_l_member_0.sep == '::'
    assert f'{type(module_0.IDLMember.full_path).__module__}.{type(module_0.IDLMember.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMember.type).__module__}.{type(module_0.IDLMember.type).__qualname__}' == 'builtins.property'
    i_d_l_member_0.parse_blocks(list_0, str_0)