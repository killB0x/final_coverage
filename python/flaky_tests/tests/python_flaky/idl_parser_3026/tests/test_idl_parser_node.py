# Automatically generated by Pynguin.
import pytest
import idl_parser.node as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = ''
    none_type_0 = None
    i_d_l_node_0 = module_0.IDLNode(str_0, str_0, none_type_0)
    assert i_d_l_node_0.sep == '::'
    assert f'{type(module_0.IDLNode.filepath).__module__}.{type(module_0.IDLNode.filepath).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_array).__module__}.{type(module_0.IDLNode.is_array).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_void).__module__}.{type(module_0.IDLNode.is_void).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_struct).__module__}.{type(module_0.IDLNode.is_struct).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_typedef).__module__}.{type(module_0.IDLNode.is_typedef).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_sequence).__module__}.{type(module_0.IDLNode.is_sequence).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_primitive).__module__}.{type(module_0.IDLNode.is_primitive).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_interface).__module__}.{type(module_0.IDLNode.is_interface).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_enum).__module__}.{type(module_0.IDLNode.is_enum).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_union).__module__}.{type(module_0.IDLNode.is_union).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_const).__module__}.{type(module_0.IDLNode.is_const).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.classname).__module__}.{type(module_0.IDLNode.classname).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.name).__module__}.{type(module_0.IDLNode.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.basename).__module__}.{type(module_0.IDLNode.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.pathname).__module__}.{type(module_0.IDLNode.pathname).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.parent).__module__}.{type(module_0.IDLNode.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_root).__module__}.{type(module_0.IDLNode.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.root_node).__module__}.{type(module_0.IDLNode.root_node).__qualname__}' == 'builtins.property'
    i_d_l_node_0.refine_typename(i_d_l_node_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'SX\tN1~'
    list_0 = [str_0, str_0]
    dict_0 = {}
    i_d_l_node_0 = module_0.IDLNode(dict_0, dict_0, dict_0)
    assert i_d_l_node_0.sep == '::'
    assert f'{type(module_0.IDLNode.filepath).__module__}.{type(module_0.IDLNode.filepath).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_array).__module__}.{type(module_0.IDLNode.is_array).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_void).__module__}.{type(module_0.IDLNode.is_void).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_struct).__module__}.{type(module_0.IDLNode.is_struct).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_typedef).__module__}.{type(module_0.IDLNode.is_typedef).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_sequence).__module__}.{type(module_0.IDLNode.is_sequence).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_primitive).__module__}.{type(module_0.IDLNode.is_primitive).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_interface).__module__}.{type(module_0.IDLNode.is_interface).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_enum).__module__}.{type(module_0.IDLNode.is_enum).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_union).__module__}.{type(module_0.IDLNode.is_union).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_const).__module__}.{type(module_0.IDLNode.is_const).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.classname).__module__}.{type(module_0.IDLNode.classname).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.name).__module__}.{type(module_0.IDLNode.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.basename).__module__}.{type(module_0.IDLNode.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.pathname).__module__}.{type(module_0.IDLNode.pathname).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.parent).__module__}.{type(module_0.IDLNode.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_root).__module__}.{type(module_0.IDLNode.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.root_node).__module__}.{type(module_0.IDLNode.root_node).__qualname__}' == 'builtins.property'
    i_d_l_node_0.refine_typename(list_0)

def test_case_2():
    dict_0 = {}
    i_d_l_node_0 = module_0.IDLNode(dict_0, dict_0, dict_0)
    assert i_d_l_node_0.sep == '::'
    assert f'{type(module_0.IDLNode.filepath).__module__}.{type(module_0.IDLNode.filepath).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_array).__module__}.{type(module_0.IDLNode.is_array).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_void).__module__}.{type(module_0.IDLNode.is_void).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_struct).__module__}.{type(module_0.IDLNode.is_struct).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_typedef).__module__}.{type(module_0.IDLNode.is_typedef).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_sequence).__module__}.{type(module_0.IDLNode.is_sequence).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_primitive).__module__}.{type(module_0.IDLNode.is_primitive).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_interface).__module__}.{type(module_0.IDLNode.is_interface).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_enum).__module__}.{type(module_0.IDLNode.is_enum).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_union).__module__}.{type(module_0.IDLNode.is_union).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_const).__module__}.{type(module_0.IDLNode.is_const).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.classname).__module__}.{type(module_0.IDLNode.classname).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.name).__module__}.{type(module_0.IDLNode.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.basename).__module__}.{type(module_0.IDLNode.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.pathname).__module__}.{type(module_0.IDLNode.pathname).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.parent).__module__}.{type(module_0.IDLNode.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_root).__module__}.{type(module_0.IDLNode.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.root_node).__module__}.{type(module_0.IDLNode.root_node).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'sequence < '
    none_type_0 = None
    i_d_l_node_0 = module_0.IDLNode(none_type_0, str_0, none_type_0)
    assert i_d_l_node_0.sep == '::'
    assert f'{type(module_0.IDLNode.filepath).__module__}.{type(module_0.IDLNode.filepath).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_array).__module__}.{type(module_0.IDLNode.is_array).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_void).__module__}.{type(module_0.IDLNode.is_void).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_struct).__module__}.{type(module_0.IDLNode.is_struct).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_typedef).__module__}.{type(module_0.IDLNode.is_typedef).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_sequence).__module__}.{type(module_0.IDLNode.is_sequence).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_primitive).__module__}.{type(module_0.IDLNode.is_primitive).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_interface).__module__}.{type(module_0.IDLNode.is_interface).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_enum).__module__}.{type(module_0.IDLNode.is_enum).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_union).__module__}.{type(module_0.IDLNode.is_union).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_const).__module__}.{type(module_0.IDLNode.is_const).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.classname).__module__}.{type(module_0.IDLNode.classname).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.name).__module__}.{type(module_0.IDLNode.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.basename).__module__}.{type(module_0.IDLNode.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.pathname).__module__}.{type(module_0.IDLNode.pathname).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.parent).__module__}.{type(module_0.IDLNode.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.is_root).__module__}.{type(module_0.IDLNode.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLNode.root_node).__module__}.{type(module_0.IDLNode.root_node).__qualname__}' == 'builtins.property'
    i_d_l_node_0.refine_typename(i_d_l_node_0)