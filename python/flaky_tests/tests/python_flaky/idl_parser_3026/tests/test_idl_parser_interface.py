# Automatically generated by Pynguin.
import pytest
import idl_parser.interface as module_0

def test_case_0():
    none_type_0 = None
    i_d_l_method_0 = module_0.IDLMethod(none_type_0)
    assert f'{type(i_d_l_method_0).__module__}.{type(i_d_l_method_0).__qualname__}' == 'idl_parser.interface.IDLMethod'
    assert i_d_l_method_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLMethod.returns).__module__}.{type(module_0.IDLMethod.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMethod.arguments).__module__}.{type(module_0.IDLMethod.arguments).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_method_0.to_simple_dic()

def test_case_1():
    bool_0 = True
    i_d_l_method_0 = module_0.IDLMethod(bool_0)
    assert f'{type(i_d_l_method_0).__module__}.{type(i_d_l_method_0).__qualname__}' == 'idl_parser.interface.IDLMethod'
    assert i_d_l_method_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLMethod.returns).__module__}.{type(module_0.IDLMethod.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMethod.arguments).__module__}.{type(module_0.IDLMethod.arguments).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_method_0.argument_by_name(bool_0)

def test_case_2():
    int_0 = -527
    i_d_l_method_0 = module_0.IDLMethod(int_0)
    assert f'{type(i_d_l_method_0).__module__}.{type(i_d_l_method_0).__qualname__}' == 'idl_parser.interface.IDLMethod'
    assert i_d_l_method_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLMethod.returns).__module__}.{type(module_0.IDLMethod.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMethod.arguments).__module__}.{type(module_0.IDLMethod.arguments).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_method_0.forEachArgument(int_0)

def test_case_3():
    str_0 = '\\'
    i_d_l_interface_0 = module_0.IDLInterface(str_0, str_0)
    assert f'{type(i_d_l_interface_0).__module__}.{type(i_d_l_interface_0).__qualname__}' == 'idl_parser.interface.IDLInterface'
    assert i_d_l_interface_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLInterface.inheritances).__module__}.{type(module_0.IDLInterface.inheritances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLInterface.full_path).__module__}.{type(module_0.IDLInterface.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLInterface.methods).__module__}.{type(module_0.IDLInterface.methods).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_interface_0.to_simple_dic()

def test_case_4():
    int_0 = 0
    i_d_l_interface_0 = module_0.IDLInterface(int_0, int_0)
    assert f'{type(i_d_l_interface_0).__module__}.{type(i_d_l_interface_0).__qualname__}' == 'idl_parser.interface.IDLInterface'
    assert i_d_l_interface_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLInterface.inheritances).__module__}.{type(module_0.IDLInterface.inheritances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLInterface.full_path).__module__}.{type(module_0.IDLInterface.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLInterface.methods).__module__}.{type(module_0.IDLInterface.methods).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_interface_0.method_by_name(int_0)

def test_case_5():
    int_0 = -19
    i_d_l_interface_0 = module_0.IDLInterface(int_0, int_0)
    assert f'{type(i_d_l_interface_0).__module__}.{type(i_d_l_interface_0).__qualname__}' == 'idl_parser.interface.IDLInterface'
    assert i_d_l_interface_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLInterface.inheritances).__module__}.{type(module_0.IDLInterface.inheritances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLInterface.full_path).__module__}.{type(module_0.IDLInterface.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLInterface.methods).__module__}.{type(module_0.IDLInterface.methods).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_interface_0.forEachMethod(int_0)

def test_case_6():
    int_0 = 3
    i_d_l_argument_0 = module_0.IDLArgument(int_0)
    assert f'{type(i_d_l_argument_0).__module__}.{type(i_d_l_argument_0).__qualname__}' == 'idl_parser.interface.IDLArgument'
    assert i_d_l_argument_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLArgument.direction).__module__}.{type(module_0.IDLArgument.direction).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLArgument.type).__module__}.{type(module_0.IDLArgument.type).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    i_d_l_argument_0 = module_0.IDLArgument(bool_0)
    assert f'{type(i_d_l_argument_0).__module__}.{type(i_d_l_argument_0).__qualname__}' == 'idl_parser.interface.IDLArgument'
    assert i_d_l_argument_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLArgument.direction).__module__}.{type(module_0.IDLArgument.direction).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLArgument.type).__module__}.{type(module_0.IDLArgument.type).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_argument_0.to_simple_dic()
    assert var_0 == 'in None '
    i_d_l_argument_0.parse_blocks(var_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    i_d_l_method_0 = module_0.IDLMethod(none_type_0)
    assert f'{type(i_d_l_method_0).__module__}.{type(i_d_l_method_0).__qualname__}' == 'idl_parser.interface.IDLMethod'
    assert i_d_l_method_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLMethod.returns).__module__}.{type(module_0.IDLMethod.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMethod.arguments).__module__}.{type(module_0.IDLMethod.arguments).__qualname__}' == 'builtins.property'
    i_d_l_interface_0 = module_0.IDLInterface(i_d_l_method_0, i_d_l_method_0)
    assert f'{type(i_d_l_interface_0).__module__}.{type(i_d_l_interface_0).__qualname__}' == 'idl_parser.interface.IDLInterface'
    assert i_d_l_interface_0.sep == '::'
    assert f'{type(module_0.IDLInterface.inheritances).__module__}.{type(module_0.IDLInterface.inheritances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLInterface.full_path).__module__}.{type(module_0.IDLInterface.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLInterface.methods).__module__}.{type(module_0.IDLInterface.methods).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_interface_0.to_dic()
    var_1 = i_d_l_method_0.argument_by_name(i_d_l_interface_0)
    i_d_l_argument_0 = module_0.IDLArgument(i_d_l_interface_0)
    assert f'{type(i_d_l_argument_0).__module__}.{type(i_d_l_argument_0).__qualname__}' == 'idl_parser.interface.IDLArgument'
    assert i_d_l_argument_0.sep == '::'
    assert f'{type(module_0.IDLArgument.direction).__module__}.{type(module_0.IDLArgument.direction).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLArgument.type).__module__}.{type(module_0.IDLArgument.type).__qualname__}' == 'builtins.property'
    var_2 = i_d_l_method_0.to_dic()
    var_3 = i_d_l_interface_0.forEachMethod(none_type_0)
    var_4 = i_d_l_argument_0.to_dic()
    var_5 = i_d_l_method_0.to_simple_dic()
    var_2.to_simple_dic()

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '}'
    i_d_l_argument_0 = module_0.IDLArgument(str_0)
    assert f'{type(i_d_l_argument_0).__module__}.{type(i_d_l_argument_0).__qualname__}' == 'idl_parser.interface.IDLArgument'
    assert i_d_l_argument_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLArgument.direction).__module__}.{type(module_0.IDLArgument.direction).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLArgument.type).__module__}.{type(module_0.IDLArgument.type).__qualname__}' == 'builtins.property'
    none_type_0 = None
    i_d_l_method_0 = module_0.IDLMethod(none_type_0)
    assert f'{type(i_d_l_method_0).__module__}.{type(i_d_l_method_0).__qualname__}' == 'idl_parser.interface.IDLMethod'
    assert i_d_l_method_0.sep == '::'
    assert f'{type(module_0.IDLMethod.returns).__module__}.{type(module_0.IDLMethod.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMethod.arguments).__module__}.{type(module_0.IDLMethod.arguments).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_method_0.forEachArgument(i_d_l_argument_0)
    i_d_l_argument_0.post_process()

def test_case_10():
    bool_0 = True
    i_d_l_method_0 = module_0.IDLMethod(bool_0)
    assert f'{type(i_d_l_method_0).__module__}.{type(i_d_l_method_0).__qualname__}' == 'idl_parser.interface.IDLMethod'
    assert i_d_l_method_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLMethod.returns).__module__}.{type(module_0.IDLMethod.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMethod.arguments).__module__}.{type(module_0.IDLMethod.arguments).__qualname__}' == 'builtins.property'

def test_case_11():
    none_type_0 = None
    i_d_l_method_0 = module_0.IDLMethod(none_type_0)
    assert f'{type(i_d_l_method_0).__module__}.{type(i_d_l_method_0).__qualname__}' == 'idl_parser.interface.IDLMethod'
    assert i_d_l_method_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLMethod.returns).__module__}.{type(module_0.IDLMethod.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMethod.arguments).__module__}.{type(module_0.IDLMethod.arguments).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_method_0.to_dic()

def test_case_12():
    int_0 = 2
    none_type_0 = None
    i_d_l_method_0 = module_0.IDLMethod(none_type_0)
    assert f'{type(i_d_l_method_0).__module__}.{type(i_d_l_method_0).__qualname__}' == 'idl_parser.interface.IDLMethod'
    assert i_d_l_method_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLMethod.returns).__module__}.{type(module_0.IDLMethod.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMethod.arguments).__module__}.{type(module_0.IDLMethod.arguments).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_method_0.post_process()
    var_1 = i_d_l_method_0.forEachArgument(int_0)

def test_case_13():
    int_0 = 2
    i_d_l_interface_0 = module_0.IDLInterface(int_0, int_0)
    assert f'{type(i_d_l_interface_0).__module__}.{type(i_d_l_interface_0).__qualname__}' == 'idl_parser.interface.IDLInterface'
    assert i_d_l_interface_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLInterface.inheritances).__module__}.{type(module_0.IDLInterface.inheritances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLInterface.full_path).__module__}.{type(module_0.IDLInterface.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLInterface.methods).__module__}.{type(module_0.IDLInterface.methods).__qualname__}' == 'builtins.property'

def test_case_14():
    int_0 = 2
    i_d_l_interface_0 = module_0.IDLInterface(int_0, int_0)
    assert f'{type(i_d_l_interface_0).__module__}.{type(i_d_l_interface_0).__qualname__}' == 'idl_parser.interface.IDLInterface'
    assert i_d_l_interface_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLInterface.inheritances).__module__}.{type(module_0.IDLInterface.inheritances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLInterface.full_path).__module__}.{type(module_0.IDLInterface.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLInterface.methods).__module__}.{type(module_0.IDLInterface.methods).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_interface_0.to_dic()

@pytest.mark.xfail(strict=True)
def test_case_15():
    float_0 = 3188.907
    i_d_l_interface_0 = module_0.IDLInterface(float_0, float_0)
    assert f'{type(i_d_l_interface_0).__module__}.{type(i_d_l_interface_0).__qualname__}' == 'idl_parser.interface.IDLInterface'
    assert i_d_l_interface_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLInterface.inheritances).__module__}.{type(module_0.IDLInterface.inheritances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLInterface.full_path).__module__}.{type(module_0.IDLInterface.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLInterface.methods).__module__}.{type(module_0.IDLInterface.methods).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_interface_0.to_simple_dic(float_0)
    assert var_0 == 'interface 3188.907'
    var_0.to_dic()

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = '+}'
    i_d_l_method_0 = module_0.IDLMethod(str_0)
    assert f'{type(i_d_l_method_0).__module__}.{type(i_d_l_method_0).__qualname__}' == 'idl_parser.interface.IDLMethod'
    assert i_d_l_method_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLMethod.returns).__module__}.{type(module_0.IDLMethod.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLMethod.arguments).__module__}.{type(module_0.IDLMethod.arguments).__qualname__}' == 'builtins.property'
    i_d_l_method_0.parse_blocks(str_0, i_d_l_method_0)