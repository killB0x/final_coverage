# Automatically generated by Pynguin.
import pytest
import idl_parser.enum as module_0

def test_case_0():
    none_type_0 = None
    i_d_l_enum_0 = module_0.IDLEnum(none_type_0, none_type_0)
    assert f'{type(i_d_l_enum_0).__module__}.{type(i_d_l_enum_0).__qualname__}' == 'idl_parser.enum.IDLEnum'
    assert i_d_l_enum_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLEnum.full_path).__module__}.{type(module_0.IDLEnum.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLEnum.values).__module__}.{type(module_0.IDLEnum.values).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_enum_0.to_simple_dic()

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 3
    i_d_l_enum_value_0 = module_0.IDLEnumValue(int_0, int_0)
    assert f'{type(i_d_l_enum_value_0).__module__}.{type(i_d_l_enum_value_0).__qualname__}' == 'idl_parser.enum.IDLEnumValue'
    assert i_d_l_enum_value_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLEnumValue.full_path).__module__}.{type(module_0.IDLEnumValue.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLEnumValue.value).__module__}.{type(module_0.IDLEnumValue.value).__qualname__}' == 'builtins.property'
    set_0 = {int_0}
    bool_0 = False
    i_d_l_enum_0 = module_0.IDLEnum(bool_0, set_0)
    assert f'{type(i_d_l_enum_0).__module__}.{type(i_d_l_enum_0).__qualname__}' == 'idl_parser.enum.IDLEnum'
    assert i_d_l_enum_0.sep == '::'
    assert f'{type(module_0.IDLEnum.full_path).__module__}.{type(module_0.IDLEnum.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLEnum.values).__module__}.{type(module_0.IDLEnum.values).__qualname__}' == 'builtins.property'
    set_1 = {bool_0, bool_0}
    i_d_l_enum_1 = module_0.IDLEnum(set_1, i_d_l_enum_value_0)
    assert i_d_l_enum_1.sep == '::'
    var_0 = i_d_l_enum_value_0.to_dic()
    tuple_0 = (bool_0, i_d_l_enum_value_0, i_d_l_enum_1, int_0)
    i_d_l_enum_1.to_simple_dic(tuple_0, i_d_l_enum_value_0)

def test_case_2():
    str_0 = '$o><zvm+'
    i_d_l_enum_0 = module_0.IDLEnum(str_0, str_0)
    assert f'{type(i_d_l_enum_0).__module__}.{type(i_d_l_enum_0).__qualname__}' == 'idl_parser.enum.IDLEnum'
    assert i_d_l_enum_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLEnum.full_path).__module__}.{type(module_0.IDLEnum.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLEnum.values).__module__}.{type(module_0.IDLEnum.values).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_enum_0.to_dic()

def test_case_3():
    bool_0 = False
    i_d_l_enum_0 = module_0.IDLEnum(bool_0, bool_0)
    assert f'{type(i_d_l_enum_0).__module__}.{type(i_d_l_enum_0).__qualname__}' == 'idl_parser.enum.IDLEnum'
    assert i_d_l_enum_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLEnum.full_path).__module__}.{type(module_0.IDLEnum.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLEnum.values).__module__}.{type(module_0.IDLEnum.values).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_enum_0.value_by_name(bool_0)

def test_case_4():
    set_0 = set()
    i_d_l_enum_0 = module_0.IDLEnum(set_0, set_0)
    assert f'{type(i_d_l_enum_0).__module__}.{type(i_d_l_enum_0).__qualname__}' == 'idl_parser.enum.IDLEnum'
    assert i_d_l_enum_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLEnum.full_path).__module__}.{type(module_0.IDLEnum.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLEnum.values).__module__}.{type(module_0.IDLEnum.values).__qualname__}' == 'builtins.property'

def test_case_5():
    bool_0 = False
    i_d_l_enum_value_0 = module_0.IDLEnumValue(bool_0, bool_0)
    assert f'{type(i_d_l_enum_value_0).__module__}.{type(i_d_l_enum_value_0).__qualname__}' == 'idl_parser.enum.IDLEnumValue'
    assert i_d_l_enum_value_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLEnumValue.full_path).__module__}.{type(module_0.IDLEnumValue.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLEnumValue.value).__module__}.{type(module_0.IDLEnumValue.value).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = -712
    i_d_l_enum_value_0 = module_0.IDLEnumValue(int_0, int_0)
    assert f'{type(i_d_l_enum_value_0).__module__}.{type(i_d_l_enum_value_0).__qualname__}' == 'idl_parser.enum.IDLEnumValue'
    assert i_d_l_enum_value_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLEnumValue.full_path).__module__}.{type(module_0.IDLEnumValue.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLEnumValue.value).__module__}.{type(module_0.IDLEnumValue.value).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_enum_value_0.to_simple_dic()
    var_0.value_by_name(int_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    float_0 = 4428.34
    bool_0 = True
    i_d_l_enum_value_0 = module_0.IDLEnumValue(bool_0, bool_0)
    assert f'{type(i_d_l_enum_value_0).__module__}.{type(i_d_l_enum_value_0).__qualname__}' == 'idl_parser.enum.IDLEnumValue'
    assert i_d_l_enum_value_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLEnumValue.full_path).__module__}.{type(module_0.IDLEnumValue.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLEnumValue.value).__module__}.{type(module_0.IDLEnumValue.value).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_enum_value_0.to_dic()
    var_0.refine_typename(float_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    i_d_l_enum_value_0 = module_0.IDLEnumValue(bool_0, bool_0)
    assert f'{type(i_d_l_enum_value_0).__module__}.{type(i_d_l_enum_value_0).__qualname__}' == 'idl_parser.enum.IDLEnumValue'
    assert i_d_l_enum_value_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLEnumValue.full_path).__module__}.{type(module_0.IDLEnumValue.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLEnumValue.value).__module__}.{type(module_0.IDLEnumValue.value).__qualname__}' == 'builtins.property'
    complex_0 = (2248.6039+644.387j)
    none_type_0 = None
    i_d_l_enum_0 = module_0.IDLEnum(complex_0, none_type_0)
    assert f'{type(i_d_l_enum_0).__module__}.{type(i_d_l_enum_0).__qualname__}' == 'idl_parser.enum.IDLEnum'
    assert i_d_l_enum_0.sep == '::'
    assert f'{type(module_0.IDLEnum.full_path).__module__}.{type(module_0.IDLEnum.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLEnum.values).__module__}.{type(module_0.IDLEnum.values).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_enum_0.to_simple_dic(i_d_l_enum_value_0, recursive=complex_0)
    assert var_0 == 'enum (2248.6039+644.387j)'
    var_0.to_simple_dic()

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    list_0 = []
    none_type_0 = None
    i_d_l_enum_value_0 = module_0.IDLEnumValue(none_type_0, none_type_0)
    assert f'{type(i_d_l_enum_value_0).__module__}.{type(i_d_l_enum_value_0).__qualname__}' == 'idl_parser.enum.IDLEnumValue'
    assert i_d_l_enum_value_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLEnumValue.full_path).__module__}.{type(module_0.IDLEnumValue.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLEnumValue.value).__module__}.{type(module_0.IDLEnumValue.value).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_enum_value_0.parse_blocks(list_0)
    int_0 = 1732
    tuple_0 = (var_0, i_d_l_enum_value_0, int_0, var_0)
    i_d_l_enum_value_1 = module_0.IDLEnumValue(tuple_0, var_0)
    assert i_d_l_enum_value_1.sep == '::'
    var_1 = i_d_l_enum_value_1.to_dic()
    var_1.parse_blocks(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    i_d_l_enum_0 = module_0.IDLEnum(none_type_0, none_type_0)
    assert f'{type(i_d_l_enum_0).__module__}.{type(i_d_l_enum_0).__qualname__}' == 'idl_parser.enum.IDLEnum'
    assert i_d_l_enum_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLEnum.full_path).__module__}.{type(module_0.IDLEnum.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLEnum.values).__module__}.{type(module_0.IDLEnum.values).__qualname__}' == 'builtins.property'
    dict_0 = {}
    var_0 = i_d_l_enum_0.to_dic()
    int_0 = 659
    var_1 = i_d_l_enum_0.value_by_name(i_d_l_enum_0)
    var_2 = i_d_l_enum_0.to_simple_dic()
    i_d_l_enum_value_0 = module_0.IDLEnumValue(dict_0, var_2)
    assert f'{type(i_d_l_enum_value_0).__module__}.{type(i_d_l_enum_value_0).__qualname__}' == 'idl_parser.enum.IDLEnumValue'
    assert i_d_l_enum_value_0.sep == '::'
    assert f'{type(module_0.IDLEnumValue.full_path).__module__}.{type(module_0.IDLEnumValue.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLEnumValue.value).__module__}.{type(module_0.IDLEnumValue.value).__qualname__}' == 'builtins.property'
    var_3 = i_d_l_enum_value_0.parse_blocks(dict_0, var_0)
    i_d_l_enum_value_1 = module_0.IDLEnumValue(int_0, var_0)
    assert i_d_l_enum_value_1.sep == '::'
    i_d_l_enum_value_1.parse_blocks(var_2, var_2)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b'\xe2S\xe8'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    bool_0 = True
    i_d_l_enum_0 = module_0.IDLEnum(bool_0, bool_0)
    assert f'{type(i_d_l_enum_0).__module__}.{type(i_d_l_enum_0).__qualname__}' == 'idl_parser.enum.IDLEnum'
    assert i_d_l_enum_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLEnum.full_path).__module__}.{type(module_0.IDLEnum.full_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLEnum.values).__module__}.{type(module_0.IDLEnum.values).__qualname__}' == 'builtins.property'
    i_d_l_enum_0.parse_tokens(set_0)