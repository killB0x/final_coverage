# Automatically generated by Pynguin.
import pytest
import idl_parser.const as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -306
    str_0 = 'hAYK'
    none_type_0 = None
    i_d_l_const_0 = module_0.IDLConst(int_0, str_0, int_0, none_type_0)
    assert f'{type(i_d_l_const_0).__module__}.{type(i_d_l_const_0).__qualname__}' == 'idl_parser.const.IDLConst'
    assert i_d_l_const_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLConst.typename).__module__}.{type(module_0.IDLConst.typename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.type).__module__}.{type(module_0.IDLConst.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.value).__module__}.{type(module_0.IDLConst.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.value_string).__module__}.{type(module_0.IDLConst.value_string).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.full_path).__module__}.{type(module_0.IDLConst.full_path).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_const_0.to_simple_dic(int_0, member_only=str_0)
    assert var_0 == 'const hAYK -306 = -306'
    var_0.to_simple_dic(full_path=str_0)

def test_case_1():
    int_0 = 1
    set_0 = {int_0, int_0, int_0, int_0}
    tuple_0 = (set_0,)
    i_d_l_const_0 = module_0.IDLConst(tuple_0, int_0, int_0, set_0)
    assert f'{type(i_d_l_const_0).__module__}.{type(i_d_l_const_0).__qualname__}' == 'idl_parser.const.IDLConst'
    assert i_d_l_const_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLConst.typename).__module__}.{type(module_0.IDLConst.typename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.type).__module__}.{type(module_0.IDLConst.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.value).__module__}.{type(module_0.IDLConst.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.value_string).__module__}.{type(module_0.IDLConst.value_string).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.full_path).__module__}.{type(module_0.IDLConst.full_path).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_const_0.to_simple_dic()

@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    tuple_0 = (set_0,)
    i_d_l_const_0 = module_0.IDLConst(tuple_0, set_0, set_0, set_0, set_0)
    assert f'{type(i_d_l_const_0).__module__}.{type(i_d_l_const_0).__qualname__}' == 'idl_parser.const.IDLConst'
    assert i_d_l_const_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLConst.typename).__module__}.{type(module_0.IDLConst.typename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.type).__module__}.{type(module_0.IDLConst.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.value).__module__}.{type(module_0.IDLConst.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.value_string).__module__}.{type(module_0.IDLConst.value_string).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.full_path).__module__}.{type(module_0.IDLConst.full_path).__qualname__}' == 'builtins.property'
    str_0 = 'ZD!b%648QqS|gs5hIq:'
    bytes_0 = b'-\x97o\x12F#\x9f\xcf\x00\xc7\x14'
    int_0 = -424
    i_d_l_const_1 = module_0.IDLConst(int_0, int_0, int_0, int_0)
    assert i_d_l_const_1.sep == '::'
    i_d_l_const_1.to_simple_dic(full_path=str_0, recursive=str_0, member_only=bytes_0)

def test_case_3():
    bytes_0 = b'j:9\x19C\xc8(&[\x01\xe1\x14'
    i_d_l_const_0 = module_0.IDLConst(bytes_0, bytes_0, bytes_0, bytes_0)
    assert f'{type(i_d_l_const_0).__module__}.{type(i_d_l_const_0).__qualname__}' == 'idl_parser.const.IDLConst'
    assert i_d_l_const_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLConst.typename).__module__}.{type(module_0.IDLConst.typename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.type).__module__}.{type(module_0.IDLConst.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.value).__module__}.{type(module_0.IDLConst.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.value_string).__module__}.{type(module_0.IDLConst.value_string).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.full_path).__module__}.{type(module_0.IDLConst.full_path).__qualname__}' == 'builtins.property'

def test_case_4():
    bytes_0 = b'\xac:9\x19C\xc8(&[\x01\xe1\x14'
    i_d_l_const_0 = module_0.IDLConst(bytes_0, bytes_0, bytes_0, bytes_0)
    assert f'{type(i_d_l_const_0).__module__}.{type(i_d_l_const_0).__qualname__}' == 'idl_parser.const.IDLConst'
    assert i_d_l_const_0.sep == '::'
    assert module_0.sep == '::'
    assert f'{type(module_0.IDLConst.typename).__module__}.{type(module_0.IDLConst.typename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.type).__module__}.{type(module_0.IDLConst.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.value).__module__}.{type(module_0.IDLConst.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.value_string).__module__}.{type(module_0.IDLConst.value_string).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.IDLConst.full_path).__module__}.{type(module_0.IDLConst.full_path).__qualname__}' == 'builtins.property'
    var_0 = i_d_l_const_0.to_dic()