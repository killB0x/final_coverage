# Automatically generated by Pynguin.
import pytest
import samarche as module_0
import tokenize as module_1
import inspect as module_2
import re as module_3
import ast as module_4

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.build_signature(none_type_0)

def test_case_1():
    class_signature_0 = module_0.ClassSignature()
    assert f'{type(class_signature_0).__module__}.{type(class_signature_0).__qualname__}' == 'samarche.ClassSignature'

def test_case_2():
    none_type_0 = None
    var_0 = module_0.signature_factory(none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'samarche.AttributeSignature'
    var_1 = var_0.validate(none_type_0)
    assert var_1 == 'type mismatch (orginal: Attribute, actual: None)'

def test_case_3():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'
    var_0 = function_signature_0.validate(function_signature_0)

def test_case_4():
    module_signature_0 = module_0.ModuleSignature()
    assert f'{type(module_signature_0).__module__}.{type(module_signature_0).__qualname__}' == 'samarche.ModuleSignature'
    var_0 = module_signature_0.validate(module_signature_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'
    function_signature_0.__str__()

def test_case_6():
    none_type_0 = None
    var_0 = module_0.signature_factory(none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'samarche.AttributeSignature'
    var_1 = var_0.validate(var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    node_signature_0 = module_0.NodeSignature()
    assert f'{type(node_signature_0).__module__}.{type(node_signature_0).__qualname__}' == 'samarche.NodeSignature'
    str_0 = ''
    var_0 = node_signature_0.validate(node_signature_0)
    var_1 = module_0.signature_factory(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'samarche.AttributeSignature'
    var_2 = var_1.validate(var_1)
    node_signature_0.validate(var_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    leaf_signature_0 = module_0.LeafSignature(none_type_0)
    assert f'{type(leaf_signature_0).__module__}.{type(leaf_signature_0).__qualname__}' == 'samarche.LeafSignature'
    leaf_signature_0.build_signature(none_type_0)

def test_case_9():
    module_signature_0 = module_0.ModuleSignature()
    assert f'{type(module_signature_0).__module__}.{type(module_signature_0).__qualname__}' == 'samarche.ModuleSignature'
    var_0 = module_signature_0.__eq__(module_signature_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_10():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'
    module_signature_0 = module_0.ModuleSignature()
    var_0 = module_0.signature_factory(module_signature_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'samarche.AttributeSignature'
    var_1 = module_signature_0.validate(module_signature_0)
    var_2 = var_0.validate(var_0)
    module_signature_0.validate(var_0)

def test_case_11():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'

def test_case_12():
    attribute_signature_0 = module_0.AttributeSignature()

def test_case_13():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'
    var_0 = function_signature_0.validate(function_signature_0)
    generator_signature_0 = module_0.GeneratorSignature()
    var_1 = module_0.signature_factory(generator_signature_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'samarche.AttributeSignature'
    var_2 = var_1.validate(generator_signature_0)
    assert var_2 == 'type mismatch (orginal: Attribute, actual: Generator)'

def test_case_14():
    none_type_0 = None
    var_0 = module_0.signature_factory(none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'samarche.AttributeSignature'

def test_case_15():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'
    var_0 = module_0.signature_factory(function_signature_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'samarche.AttributeSignature'

@pytest.mark.xfail(strict=True)
def test_case_16():
    var_0 = module_1.group()
    module_0.check_signature(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    list_0 = []
    class_signature_0 = module_0.ClassSignature(*list_0)
    assert f'{type(class_signature_0).__module__}.{type(class_signature_0).__qualname__}' == 'samarche.ClassSignature'
    dict_0 = {}
    class_signature_0.validate(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'
    var_0 = module_2.getmodule(function_signature_0, function_signature_0)
    module_signature_0 = module_0.ModuleSignature()
    var_1 = function_signature_0.validate(function_signature_0)
    module_0.signature_factory(var_0)

def test_case_19():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'
    var_0 = module_2.formatannotationrelativeto(function_signature_0)
    var_1 = module_0.signature_factory(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'samarche.FunctionSignature'

@pytest.mark.xfail(strict=True)
def test_case_20():
    function_signature_0 = module_3.purge()
    var_0 = module_4.walk(function_signature_0)
    module_signature_0 = module_0.ModuleSignature()
    assert f'{type(module_signature_0).__module__}.{type(module_signature_0).__qualname__}' == 'samarche.ModuleSignature'
    var_1 = module_0.signature_factory(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'samarche.GeneratorSignature'
    var_0.validate(var_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'
    var_0 = function_signature_0.__eq__(function_signature_0)
    assert var_0 is True
    module_signature_0 = module_0.ModuleSignature()
    var_1 = module_0.signature_factory(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'samarche.AttributeSignature'
    var_2 = module_signature_0.validate(module_signature_0)
    var_3 = module_0.signature_factory(var_2)
    var_4 = var_3.validate(var_1)
    assert var_4 == 'Attribute type has changed: original None, actual bool'
    var_5 = var_3.validate(var_2)
    assert var_5 == 'type mismatch (orginal: Attribute, actual: None)'
    var_6 = var_4.__str__()
    assert var_6 == 'Attribute type has changed: original None, actual bool'
    var_3.__setitem__(var_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_22():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'
    var_0 = module_2.formatannotationrelativeto(function_signature_0)
    var_1 = module_0.signature_factory(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'samarche.FunctionSignature'
    function_signature_0.validate(var_1)

def test_case_23():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'
    var_0 = module_2.formatannotationrelativeto(function_signature_0)
    var_1 = module_0.signature_factory(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'samarche.FunctionSignature'
    var_2 = var_1.validate(var_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'
    var_0 = module_2.formatannotationrelativeto(function_signature_0)
    module_signature_0 = module_0.ModuleSignature()
    var_1 = module_signature_0.build_signature(var_0)
    var_2 = module_signature_0.validate(var_1)
    assert var_2 == 'type mismatch (orginal: Module _formatannotation, actual: None)'
    var_3 = module_0.signature_factory(var_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'samarche.FunctionSignature'
    var_4 = module_signature_0.validate(module_signature_0)
    var_3.__setitem__(module_signature_0, var_0)

def test_case_25():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'
    var_0 = module_2.formatannotationrelativeto(function_signature_0)
    var_1 = module_4.iter_child_nodes(var_0)
    var_2 = function_signature_0.build_signature(var_1)

@pytest.mark.xfail(strict=True)
def test_case_26():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'
    var_0 = module_2.formatannotationrelativeto(function_signature_0)
    module_signature_0 = module_0.ModuleSignature()
    var_1 = module_0.signature_factory(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'samarche.FunctionSignature'
    var_2 = module_4.iter_child_nodes(var_1)
    var_3 = var_1.build_signature(var_2)
    var_4 = module_signature_0.validate(module_signature_0)
    var_5 = module_0.signature_factory(module_signature_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'samarche.AttributeSignature'
    var_6 = var_5.validate(var_1)
    assert var_6 == 'type mismatch (orginal: Attribute, actual: Function iter_child_nodes <built-in function>)'
    var_0.validate(var_6)

def test_case_27():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'
    module_signature_0 = module_0.ModuleSignature()
    var_0 = module_4.iter_child_nodes(function_signature_0)
    var_1 = module_signature_0.build_signature(var_0)
    var_2 = module_signature_0.validate(module_signature_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    function_signature_0 = module_0.FunctionSignature()
    assert f'{type(function_signature_0).__module__}.{type(function_signature_0).__qualname__}' == 'samarche.FunctionSignature'
    var_0 = module_2.formatannotationrelativeto(function_signature_0)
    module_signature_0 = module_0.ModuleSignature()
    var_1 = module_0.signature_factory(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'samarche.FunctionSignature'
    var_2 = module_4.iter_child_nodes(var_1)
    var_3 = var_1.build_signature(var_2)
    var_4 = module_signature_0.validate(module_signature_0)
    var_5 = module_0.signature_factory(module_signature_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'samarche.AttributeSignature'
    var_6 = var_1.validate(var_1)
    var_7 = var_5.validate(var_5)
    var_1.validate(function_signature_0)