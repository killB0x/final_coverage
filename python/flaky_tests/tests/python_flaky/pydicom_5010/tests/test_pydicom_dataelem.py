# Automatically generated by Pynguin.
import pytest
import pydicom.dataelem as module_0
import pydicom.pixel_data_handlers.jpeg_ls_handler as module_1
import platform as module_2
import inspect as module_3
import pydicom.overlay_data_handlers.numpy_handler as module_4
import _locale as module_5
import pydicom.datadict as module_6
import urllib.parse as module_7
import email._header_value_parser as module_8
import pydicom.tag as module_9
import pydicom.data.data_manager as module_10
import ast as module_11
import http as module_12

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.RawDataElement()

def test_case_1():
    none_type_0 = None
    var_0 = module_0.empty_value_for_VR(none_type_0)
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.DataElement(none_type_0, none_type_0, none_type_0, none_type_0, already_converted=none_type_0)

def test_case_3():
    var_0 = module_1.is_available()
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR is False
    assert data_element_0.file_tell is False
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.DataElement_from_raw(none_type_0)

def test_case_5():
    var_0 = module_2.python_revision()
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR == ''
    assert data_element_0.file_tell == ''
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_1 = module_0.empty_value_for_VR(data_element_0, var_0)
    var_2 = data_element_0.__eq__(var_1)

def test_case_6():
    bool_0 = False
    none_type_0 = None
    data_element_0 = module_0.DataElement(bool_0, bool_0, none_type_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR is False
    assert data_element_0.file_tell is None
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    with pytest.raises(TypeError):
        data_element_0.__getitem__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_1.is_available()
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR is False
    assert data_element_0.file_tell is False
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    data_element_0.__unicode__()

@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_1.is_available()
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR is False
    assert data_element_0.file_tell is False
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    data_element_0.to_json(var_0, dump_handler=var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    none_type_0 = None
    data_element_0 = module_0.DataElement(bool_0, none_type_0, bool_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR is None
    assert data_element_0.file_tell is None
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    module_0.DataElement_from_raw(data_element_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    none_type_0 = None
    data_element_0 = module_0.DataElement(bool_0, none_type_0, bool_0, is_undefined_length=none_type_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR is None
    assert data_element_0.file_tell is None
    assert data_element_0.is_undefined_length is None
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_0 = module_3.getmembers(data_element_0)
    module_4.get_expected_length(bool_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    none_type_0 = None
    data_element_0 = module_0.DataElement(bool_0, bool_0, none_type_0, none_type_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR is False
    assert data_element_0.file_tell is None
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_0 = data_element_0.clear()
    var_1 = data_element_0.to_json()
    assert var_1 == '{"vr": false}'
    data_element_0.__repr__()

@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    data_element_0 = module_0.DataElement(bool_0, bool_0, bool_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR is True
    assert data_element_0.file_tell is None
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_0 = module_5.localeconv()
    module_0.DataElement_from_raw(data_element_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_2.python_revision()
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR == ''
    assert data_element_0.file_tell == ''
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_1 = data_element_0.__eq__(data_element_0)
    module_0.DataElement(data_element_0, data_element_0, data_element_0, is_undefined_length=data_element_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    var_0 = module_2.python_revision()
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR == ''
    assert data_element_0.file_tell == ''
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_1 = data_element_0.__repr__()
    assert var_1 == "(0400, 0315)                                     : ''"
    module_6.dictionary_is_retired(var_1)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    str_0 = '130088'
    list_0 = [str_0, str_0, str_0]
    data_element_0 = module_0.DataElement(bool_0, list_0, str_0, already_converted=str_0)
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR == ['130088', '130088', '130088']
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_0 = data_element_0.to_json_dict(data_element_0, str_0)
    var_0.isalnum()

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    none_type_0 = None
    data_element_0 = module_0.DataElement(bool_0, bool_0, none_type_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR is False
    assert data_element_0.file_tell is None
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    data_element_0.__repr__()

def test_case_17():
    bool_0 = True
    none_type_0 = None
    data_element_0 = module_0.DataElement(bool_0, none_type_0, none_type_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR is None
    assert data_element_0.file_tell is None
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    data_element_1 = module_0.DataElement(bool_0, bool_0, none_type_0, none_type_0)
    assert f'{type(data_element_1.tag).__module__}.{type(data_element_1.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_1.VR is True
    var_0 = data_element_0.__ne__(data_element_1)
    assert var_0 is True
    var_1 = data_element_0.__ne__(var_0)
    assert var_1 is True
    var_2 = module_7.to_bytes(data_element_1)
    assert f'{type(var_2.tag).__module__}.{type(var_2.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert var_2.VR is True

@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = False
    none_type_0 = None
    data_element_0 = module_0.DataElement(bool_0, none_type_0, bool_0, is_undefined_length=none_type_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR is None
    assert data_element_0.file_tell is None
    assert data_element_0.is_undefined_length is None
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    data_element_1 = module_0.DataElement(bool_0, none_type_0, data_element_0, is_undefined_length=data_element_0)
    assert f'{type(data_element_1).__module__}.{type(data_element_1).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_1.tag).__module__}.{type(data_element_1.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_1.VR is None
    assert data_element_1.file_tell is None
    assert f'{type(data_element_1.is_undefined_length).__module__}.{type(data_element_1.is_undefined_length).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert data_element_1.private_creator is None
    var_0 = data_element_0.__ne__(data_element_1)
    assert var_0 is True
    var_0.group_dataset(data_element_1)

@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = False
    none_type_0 = None
    data_element_0 = module_0.DataElement(bool_0, bool_0, none_type_0, none_type_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR is False
    assert data_element_0.file_tell is None
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_0 = data_element_0.to_json()
    assert var_0 == '{"vr": false}'
    module_8.get_group_list(data_element_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    var_0 = module_2.python_revision()
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR == ''
    assert data_element_0.file_tell == ''
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_1 = data_element_0.__eq__(data_element_0)
    var_2 = var_0.__repr__()
    var_3 = data_element_0.to_json_dict(var_1, var_2)
    module_0.DataElement(data_element_0, var_2, var_2, is_undefined_length=var_2)

def test_case_21():
    var_0 = module_1.is_available()
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR is False
    assert data_element_0.file_tell is False
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_1 = data_element_0.to_json()
    assert var_1 == '{"Value": [false], "vr": false}'

def test_case_22():
    var_0 = module_2.python_revision()
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR == ''
    assert data_element_0.file_tell == ''
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = False
    var_0 = module_9.Tag(bool_0)
    data_element_0 = module_0.DataElement(var_0, bool_0, var_0, is_undefined_length=var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR is False
    assert data_element_0.file_tell is None
    assert f'{type(data_element_0.is_undefined_length).__module__}.{type(data_element_0.is_undefined_length).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_0.title()

@pytest.mark.xfail(strict=True)
def test_case_24():
    var_0 = module_2.python_revision()
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR == ''
    assert data_element_0.file_tell == ''
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    bool_0 = False
    var_1 = data_element_0.description()
    assert var_1 == ''
    data_element_1 = module_0.DataElement(bool_0, var_0, bool_0)
    assert f'{type(data_element_1).__module__}.{type(data_element_1).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_1.tag).__module__}.{type(data_element_1.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_1.VR == ''
    assert data_element_1.file_tell is None
    assert data_element_1.is_undefined_length is False
    assert data_element_1.private_creator is None
    data_element_2 = module_0.DataElement(var_1, data_element_0, var_1, already_converted=bool_0)
    assert f'{type(data_element_2).__module__}.{type(data_element_2).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_2.tag).__module__}.{type(data_element_2.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert f'{type(data_element_2.VR).__module__}.{type(data_element_2.VR).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert data_element_2.file_tell is None
    assert data_element_2.is_undefined_length is False
    assert data_element_2.private_creator is None
    var_2 = var_1.__iter__()
    var_3 = data_element_1.to_json(data_element_2, var_2)
    assert var_3 == '{"Value": [false], "vr": ""}'
    var_3.__getstate__()

@pytest.mark.xfail(strict=True)
def test_case_25():
    var_0 = module_2.python_revision()
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR == ''
    assert data_element_0.file_tell == ''
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_1 = module_3.getmembers(data_element_0)
    var_2 = var_0.__eq__(var_0)
    var_3 = data_element_0.to_json_dict(data_element_0, var_2)
    var_4 = data_element_0.__unicode__()
    assert var_4 == '(0400, 0315)                                     : '
    var_4.clear()

@pytest.mark.xfail(strict=True)
def test_case_26():
    data_types_0 = module_10.DataTypes.JPEG
    data_element_0 = module_0.DataElement(data_types_0, data_types_0, data_types_0, data_types_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR == module_10.DataTypes.JPEG
    assert data_element_0.file_tell == module_10.DataTypes.JPEG
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    bool_0 = True
    var_0 = data_element_0.description()
    assert var_0 == ''
    var_1 = bool_0.__lt__(bool_0)
    var_2 = var_1.__repr__()
    module_11.Match(**data_types_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    var_0 = module_2.python_revision()
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR == ''
    assert data_element_0.file_tell == ''
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    bool_0 = False
    var_1 = data_element_0.description()
    assert var_1 == ''
    data_element_1 = module_0.DataElement(bool_0, var_0, bool_0)
    assert f'{type(data_element_1).__module__}.{type(data_element_1).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_1.tag).__module__}.{type(data_element_1.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_1.VR == ''
    assert data_element_1.file_tell is None
    assert data_element_1.is_undefined_length is False
    assert data_element_1.private_creator is None
    var_2 = module_0.empty_value_for_VR(data_element_1)
    var_3 = data_element_1.__eq__(data_element_0)
    assert var_3 is False
    module_0.DataElement_from_raw(var_2)

def test_case_28():
    var_0 = module_2.python_revision()
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR == ''
    assert data_element_0.file_tell == ''
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_1 = module_0.empty_value_for_VR(data_element_0, var_0)
    var_2 = data_element_0.__eq__(var_1)
    var_3 = var_0.__repr__()
    var_4 = data_element_0.description()
    assert var_4 == ''
    var_5 = var_1.__str__()
    assert var_5 == 'None'
    var_6 = var_4.__str__()
    assert var_6 == ''
    var_7 = var_4.__lt__(var_5)
    assert var_7 is True
    var_8 = data_element_0.to_json_dict(var_2, var_3)
    data_element_1 = module_0.DataElement(var_6, var_3, var_3, is_undefined_length=var_3)
    assert f'{type(data_element_1).__module__}.{type(data_element_1).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_1.tag).__module__}.{type(data_element_1.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_1.VR == "''"
    assert data_element_1.file_tell is None
    assert data_element_1.is_undefined_length == "''"
    assert data_element_1.private_creator is None
    var_9 = var_6.__repr__()
    with pytest.raises(NotImplementedError):
        module_0.DataElement_from_raw(data_element_1, var_1)

@pytest.mark.xfail(strict=True)
def test_case_29():
    var_0 = module_2.python_revision()
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR == ''
    assert data_element_0.file_tell == ''
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_1 = module_0.empty_value_for_VR(data_element_0, var_0)
    var_2 = data_element_0.__repr__()
    assert var_2 == "(0400, 0315)                                     : ''"
    var_3 = data_element_0.__str__()
    assert var_3 == "(0400, 0315)                                     : ''"
    var_4 = data_element_0.clear()
    bool_0 = True
    var_5 = data_element_0.description()
    assert var_5 == ''
    data_element_1 = module_0.DataElement(bool_0, var_0, bool_0)
    assert f'{type(data_element_1).__module__}.{type(data_element_1).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_1.tag).__module__}.{type(data_element_1.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_1.VR == ''
    assert data_element_1.file_tell is None
    assert data_element_1.is_undefined_length is False
    assert data_element_1.private_creator is None
    var_6 = var_4.__str__()
    var_7 = module_0.empty_value_for_VR(var_0, data_element_0)
    var_8 = module_5.localeconv()
    var_9 = var_5.__str__()
    assert var_9 == ''
    var_10 = var_5.__lt__(var_4)
    var_11 = data_element_0.to_json_dict(bool_0, var_4)
    data_element_2 = module_0.DataElement(var_9, var_8, var_8, is_undefined_length=var_8)
    assert f'{type(data_element_2).__module__}.{type(data_element_2).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_2.tag).__module__}.{type(data_element_2.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_2.VR == {'int_curr_symbol': '', 'currency_symbol': '', 'mon_decimal_point': '', 'mon_thousands_sep': '', 'mon_grouping': [], 'positive_sign': '', 'negative_sign': '', 'int_frac_digits': 127, 'frac_digits': 127, 'p_cs_precedes': 127, 'p_sep_by_space': 127, 'n_cs_precedes': 127, 'n_sep_by_space': 127, 'p_sign_posn': 127, 'n_sign_posn': 127, 'decimal_point': '.', 'thousands_sep': '', 'grouping': []}
    assert data_element_2.file_tell is None
    assert data_element_2.is_undefined_length == {'int_curr_symbol': '', 'currency_symbol': '', 'mon_decimal_point': '', 'mon_thousands_sep': '', 'mon_grouping': [], 'positive_sign': '', 'negative_sign': '', 'int_frac_digits': 127, 'frac_digits': 127, 'p_cs_precedes': 127, 'p_sep_by_space': 127, 'n_cs_precedes': 127, 'n_sep_by_space': 127, 'p_sign_posn': 127, 'n_sign_posn': 127, 'decimal_point': '.', 'thousands_sep': '', 'grouping': []}
    assert data_element_2.private_creator is None
    var_12 = var_10.__repr__()
    var_13 = data_element_2.to_json_dict(data_element_2, var_2)
    module_0.DataElement_from_raw(data_element_1)

@pytest.mark.xfail(strict=True)
def test_case_30():
    var_0 = module_2.python_revision()
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR == ''
    assert data_element_0.file_tell == ''
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_1 = module_3.getmembers(data_element_0)
    var_2 = module_0.empty_value_for_VR(data_element_0, var_1)
    var_3 = var_1.__repr__()
    data_element_1 = module_0.DataElement(var_0, var_3, var_3)
    assert f'{type(data_element_1).__module__}.{type(data_element_1).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_1.tag).__module__}.{type(data_element_1.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_1.file_tell is None
    assert data_element_1.is_undefined_length is False
    assert data_element_1.private_creator is None
    var_4 = var_0.__str__()
    var_5 = data_element_0.to_json(bulk_data_element_handler=var_3)
    assert var_5 == '{"vr": ""}'
    var_0.to_json_dict(var_0, var_3)

@pytest.mark.xfail(strict=True)
def test_case_31():
    var_0 = module_12.HTTPStatus.NON_AUTHORITATIVE_INFORMATION
    data_element_0 = module_0.DataElement(var_0, var_0, var_0, var_0)
    assert f'{type(data_element_0).__module__}.{type(data_element_0).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(data_element_0.tag).__module__}.{type(data_element_0.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert data_element_0.VR == module_12.HTTPStatus.NON_AUTHORITATIVE_INFORMATION
    assert data_element_0.file_tell == module_12.HTTPStatus.NON_AUTHORITATIVE_INFORMATION
    assert data_element_0.is_undefined_length is False
    assert data_element_0.private_creator is None
    assert module_0.BINARY_VR_VALUES == ['US', 'SS', 'UL', 'SL', 'OW', 'OB', 'OL', 'UN', 'OB or OW', 'US or OW', 'US or SS or OW', 'FL', 'FD', 'OF', 'OD']
    assert module_0.msg == 'tag VR length value value_tell is_implicit_VR is_little_endian'
    assert module_0.DataElement.descripWidth == 35
    assert module_0.DataElement.maxBytesToDisplay == 16
    assert f'{type(module_0.DataElement.from_json).__module__}.{type(module_0.DataElement.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.DataElement.value).__module__}.{type(module_0.DataElement.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.VM).__module__}.{type(module_0.DataElement.VM).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_empty).__module__}.{type(module_0.DataElement.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.empty_value).__module__}.{type(module_0.DataElement.empty_value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.repval).__module__}.{type(module_0.DataElement.repval).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.name).__module__}.{type(module_0.DataElement.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.is_retired).__module__}.{type(module_0.DataElement.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DataElement.keyword).__module__}.{type(module_0.DataElement.keyword).__qualname__}' == 'builtins.property'
    var_1 = data_element_0.__eq__(var_0)
    var_2 = module_3.getmembers(data_element_0)
    var_3 = var_0.__eq__(var_0)
    var_4 = module_0.empty_value_for_VR(data_element_0, var_3)
    var_5 = data_element_0.to_json_dict(data_element_0, var_3)
    data_element_0.__unicode__()