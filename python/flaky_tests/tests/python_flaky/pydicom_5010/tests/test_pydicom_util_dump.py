# Automatically generated by Pynguin.
import pytest
import pydicom.util.dump as module_0
import _io as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.filedump(bool_0, stop_address=bool_0)

def test_case_1():
    int_0 = 1598
    var_0 = module_0.print_character(int_0)
    assert var_0 == '.'

def test_case_2():
    bool_0 = True
    var_0 = module_0.print_character(bool_0)
    assert var_0 == '.'

@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b' '
    module_0.datadump(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'\xd7\xd7>\r7'
    module_0.pretty_print(bytes_0, indent_chars=bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_i_o_0 = module_1.BytesIO()
    module_0.datadump(bytes_i_o_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_i_o_0 = module_1.BytesIO()
    module_0.hexdump(bytes_i_o_0)

def test_case_7():
    bytes_i_o_0 = module_1.BytesIO()
    var_0 = module_0.pretty_print(bytes_i_o_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -241
    var_0 = module_0.print_character(int_0)
    assert var_0 == '.'
    var_1 = module_0.print_character(int_0)
    assert var_1 == '.'
    bytes_i_o_0 = module_1.BytesIO()
    var_2 = module_0.hexdump(bytes_i_o_0, stop_address=int_0)
    assert var_2 == b''
    var_3 = module_0.pretty_print(bytes_i_o_0)
    int_1 = 84
    var_4 = module_0.print_character(int_1)
    assert var_4 == 'T'
    var_5 = module_0.print_character(int_1)
    assert var_5 == 'T'
    module_0.pretty_print(var_4, int_0, int_1)

def test_case_9():
    bytes_i_o_0 = module_1.BytesIO()
    none_type_0 = None
    var_0 = module_0.hexdump(bytes_i_o_0, showAddress=none_type_0)
    assert var_0 == b''

def test_case_10():
    int_0 = 52
    var_0 = module_0.print_character(int_0)
    assert var_0 == '4'

@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_i_o_0 = module_1.BytesIO()
    none_type_0 = None
    var_0 = module_0.hexdump(bytes_i_o_0, showAddress=none_type_0)
    assert var_0 == b''
    int_0 = 92
    var_1 = module_0.print_character(int_0)
    assert var_1 == '.'
    bytes_i_o_1 = module_1.BytesIO()
    module_0.pretty_print(var_1, indent_chars=var_1)