# Automatically generated by Pynguin.
import pytest
import pydicom.pixel_data_handlers.gdcm_handler as module_0
import platform as module_1
import inspect as module_2
import pydicom.fileutil as module_3

def test_case_0():
    bool_0 = module_0.is_available()
    assert bool_0 is False
    assert module_0.HAVE_NP is False
    assert module_0.HAVE_GDCM is False
    assert module_0.HAVE_GDCM_IN_MEMORY_SUPPORT is False
    assert module_0.HANDLER_NAME == 'GDCM'
    assert module_0.DEPENDENCIES == {'numpy': ('http://www.numpy.org/', 'NumPy'), 'gdcm': ('http://gdcm.sourceforge.net/wiki/index.php/Main_Page', 'GDCM')}

def test_case_1():
    bool_0 = module_1.freedesktop_os_release()
    with pytest.raises(ImportError):
        module_0.get_pixeldata(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_2.isasyncgenfunction(none_type_0)
    module_0.needs_to_convert_to_RGB(var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "*\r*d)hwr_h'n#4d @"
    list_0 = [str_0]
    var_0 = module_3.path_from_pathlike(list_0)
    module_0.should_change_PhotometricInterpretation_to_RGB(var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_1.platform()
    bool_0 = module_0.supports_transfer_syntax(var_0)
    assert bool_0 is False
    assert module_0.HAVE_NP is False
    assert module_0.HAVE_GDCM is False
    assert module_0.HAVE_GDCM_IN_MEMORY_SUPPORT is False
    assert module_0.HANDLER_NAME == 'GDCM'
    assert module_0.DEPENDENCIES == {'numpy': ('http://www.numpy.org/', 'NumPy'), 'gdcm': ('http://gdcm.sourceforge.net/wiki/index.php/Main_Page', 'GDCM')}
    var_1 = var_0.__eq__(bool_0)
    var_0.init(*var_1, **bool_0)