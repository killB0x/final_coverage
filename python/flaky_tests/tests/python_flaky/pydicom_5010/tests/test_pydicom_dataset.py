# Automatically generated by Pynguin.
import pytest
import pydicom.dataset as module_0
import pydicom.pixel_data_handlers.util as module_1
import pydicom.pixel_data_handlers.pylibjpeg_handler as module_2
import inspect as module_3
import collections as module_4
import urllib.request as module_5
import platform as module_6
import encodings.utf_8 as module_7
import email._header_value_parser as module_8
import _locale as module_9
import uuid as module_10

def test_case_0():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0

def test_case_1():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.__dir__()

def test_case_2():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.decode()

@pytest.mark.xfail(strict=True)
def test_case_3():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_meta_dataset_0.fix_meta_info()

def test_case_4():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.__str__()
    assert var_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_5():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_meta_dataset_0.decompress()

def test_case_6():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.__enter__()
    with pytest.raises(TypeError):
        file_meta_dataset_0.get(file_meta_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.__exit__(file_meta_dataset_0, file_meta_dataset_0, file_meta_dataset_0)
    file_meta_dataset_0.group_dataset(file_meta_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.decode()
    var_1 = file_meta_dataset_0.to_json(bulk_data_element_handler=var_0)
    assert var_1 == '{}'
    file_meta_dataset_0.popitem()

@pytest.mark.xfail(strict=True)
def test_case_9():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    file_meta_dataset_0.save_as(var_0)

def test_case_10():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.trait_names()

def test_case_11():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.update(file_meta_dataset_0)

def test_case_12():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)

def test_case_13():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = module_1.get_j2k_parameters(file_meta_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.__str__()
    assert var_0 == ''
    var_1 = file_meta_dataset_0.add_new(var_0, file_meta_dataset_0, var_0)
    assert len(file_meta_dataset_0) == 1
    var_2 = file_meta_dataset_0.setdefault(var_0, file_meta_dataset_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'pydicom.dataelem.DataElement'
    assert f'{type(var_2.tag).__module__}.{type(var_2.tag).__qualname__}' == 'pydicom.tag.BaseTag'
    assert f'{type(var_2.VR).__module__}.{type(var_2.VR).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(var_2.VR) == 1
    assert var_2.file_tell is None
    assert var_2.is_undefined_length is False
    assert var_2.private_creator is None
    file_meta_dataset_0.save_as(var_0, var_0)

def test_case_15():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.__ne__(file_meta_dataset_0)
    assert var_0 is False
    with pytest.raises(ValueError):
        file_meta_dataset_0.overlay_array(var_0)

def test_case_16():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.copy()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(var_0) == 0
    var_1 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    with pytest.raises(RuntimeError):
        file_meta_dataset_0.waveform_array(file_meta_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    module_2.get_pixeldata(file_meta_dataset_0)

def test_case_18():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    with pytest.raises(TypeError):
        file_meta_dataset_0.get(file_meta_dataset_0, file_meta_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    module_0.PrivateBlock(file_meta_dataset_0, file_meta_dataset_0, file_meta_dataset_0)

def test_case_20():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.to_json_dict()

def test_case_21():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = module_3.getblock(file_meta_dataset_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pydicom.dataset.Dataset'
    assert len(var_0) == 0
    assert module_0.Dataset.indent_chars == '   '
    assert f'{type(module_0.Dataset.is_original_encoding).__module__}.{type(module_0.Dataset.is_original_encoding).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dataset.pixel_array).__module__}.{type(module_0.Dataset.pixel_array).__qualname__}' == 'builtins.property'
    assert module_0.Dataset.default_element_format == '%(tag)s %(name)-35.35s %(VR)s: %(repval)s'
    assert module_0.Dataset.default_sequence_element_format == '%(tag)s %(name)-35.35s %(VR)s: %(repval)s'
    assert f'{type(module_0.Dataset.from_json).__module__}.{type(module_0.Dataset.from_json).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_22():
    var_0 = module_3.trace()
    module_0.FileDataset(var_0, var_0, var_0, var_0)

def test_case_23():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    with pytest.raises(AttributeError):
        file_meta_dataset_0.__delattr__(var_0)

def test_case_24():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.__str__()
    assert var_0 == ''
    with pytest.raises(AttributeError):
        file_meta_dataset_0.__delattr__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_meta_dataset_0.__delitem__(file_meta_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_meta_dataset_0.get_item(file_meta_dataset_0)

def test_case_27():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.top()
    assert var_0 == ''
    var_1 = file_meta_dataset_0.get(var_0)

def test_case_28():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_dataset_0 = module_0.FileDataset(file_meta_dataset_0, file_meta_dataset_0, is_little_endian=file_meta_dataset_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 0
    var_0 = module_3.getmembers(file_dataset_0)

def test_case_29():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    var_1 = var_0.__str__()
    file_meta_dataset_0.save_as(var_1)

def test_case_30():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_dataset_0 = module_0.FileDataset(file_meta_dataset_0, file_meta_dataset_0, file_meta=file_meta_dataset_0, is_little_endian=file_meta_dataset_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_31():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = module_4._OrderedDictItemsView(file_meta_dataset_0)
    module_5.url2pathname(file_meta_dataset_0)

def test_case_32():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.trait_names()
    var_1 = file_meta_dataset_0.setdefault(var_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_meta_dataset_0.add(file_meta_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.values()
    file_meta_dataset_0.__delitem__(file_meta_dataset_0)

def test_case_35():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.top()
    assert var_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_36():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    list_0 = [file_meta_dataset_0, file_meta_dataset_0, file_meta_dataset_0, file_meta_dataset_0]
    file_meta_dataset_0.pop(file_meta_dataset_0, *list_0)

def test_case_37():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_dataset_0 = module_0.FileDataset(file_meta_dataset_0, file_meta_dataset_0, is_little_endian=file_meta_dataset_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_38():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.__str__()
    assert var_0 == ''
    var_1 = file_meta_dataset_0.decode()
    file_meta_dataset_0.__contains__(var_1)

@pytest.mark.xfail(strict=True)
def test_case_39():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_dataset_0 = module_0.FileDataset(file_meta_dataset_0, file_meta_dataset_0, file_meta=file_meta_dataset_0, is_little_endian=file_meta_dataset_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 0
    var_0 = file_meta_dataset_0.clear()
    file_meta_dataset_0.fix_meta_info()

@pytest.mark.xfail(strict=True)
def test_case_40():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.__str__()
    assert var_0 == ''
    file_meta_dataset_0.setdefault(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.to_json(file_meta_dataset_0)
    assert var_0 == '{}'
    file_meta_dataset_0.fix_meta_info()

@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = 'read'
    str_1 = '756bAFd*s<?<X\x0c'
    str_2 = ':_g2\x0bb)0(m'
    str_3 = 'b\n#1+(Z}cY( e2_G@'
    dict_0 = {str_0: str_1, str_2: str_2, str_3: str_1}
    list_0 = [dict_0, dict_0]
    module_0.FileMetaDataset(*list_0, **dict_0)

def test_case_43():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    var_1 = file_meta_dataset_0.__str__()
    assert var_1 == 'Dataset.file_meta -------------------------------\n(0002, 0010) Transfer Syntax UID                 UI: Explicit VR Big Endian\n-------------------------------------------------'

@pytest.mark.xfail(strict=True)
def test_case_44():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    file_meta_dataset_0.fix_meta_info()

def test_case_45():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.decode()
    with pytest.raises(ValueError):
        file_meta_dataset_0.private_block(var_0, var_0, file_meta_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_46():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_dataset_0 = module_0.FileDataset(file_meta_dataset_0, file_meta_dataset_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 0
    file_dataset_0.fix_meta_info()

def test_case_47():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_dataset_0 = file_meta_dataset_0.remove_private_tags()

@pytest.mark.xfail(strict=True)
def test_case_48():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_dataset_0 = module_0.FileDataset(file_meta_dataset_0, file_meta_dataset_0, file_meta=file_meta_dataset_0, is_implicit_VR=file_meta_dataset_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 0
    file_dataset_0.save_as(file_meta_dataset_0, file_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_49():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.walk(file_meta_dataset_0)
    file_dataset_0 = module_0.FileDataset(file_meta_dataset_0, var_0, is_implicit_VR=file_meta_dataset_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert file_dataset_0.is_decompressed is False
    assert file_dataset_0.read_little_endian is None
    assert file_dataset_0.read_implicit_vr is None
    assert file_dataset_0.read_encoding is None
    assert file_dataset_0.is_little_endian is True
    assert f'{type(file_dataset_0.is_implicit_VR).__module__}.{type(file_dataset_0.is_implicit_VR).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_dataset_0.is_implicit_VR) == 0
    assert file_dataset_0.parent is None
    assert file_dataset_0.preamble is None
    assert file_dataset_0.file_meta is None
    assert f'{type(file_dataset_0.filename).__module__}.{type(file_dataset_0.filename).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_dataset_0.filename) == 0
    assert file_dataset_0.timestamp is None
    file_dataset_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_50():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_meta_dataset_0.to_json(dump_handler=file_meta_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_51():
    file_meta_dataset_0 = module_6.python_compiler()
    file_dataset_0 = module_0.FileDataset(file_meta_dataset_0, file_meta_dataset_0, is_implicit_VR=file_meta_dataset_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 19
    file_meta_dataset_0.setdefault(file_meta_dataset_0)

def test_case_52():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_dataset_0 = module_0.FileDataset(file_meta_dataset_0, file_meta_dataset_0, file_meta=file_meta_dataset_0, is_little_endian=file_meta_dataset_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 0
    with pytest.raises(NotImplementedError):
        file_dataset_0.fix_meta_info(file_meta_dataset_0)

def test_case_53():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_dataset_0 = module_0.FileDataset(file_meta_dataset_0, file_meta_dataset_0, file_meta=file_meta_dataset_0, is_little_endian=file_meta_dataset_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 0
    var_0 = file_meta_dataset_0.__str__()
    assert var_0 == ''
    var_1 = file_dataset_0.__str__()
    assert var_1 == ''

def test_case_54():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    var_1 = var_0.__str__()
    var_2 = file_meta_dataset_0.dir(*var_1)

def test_case_55():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    with pytest.raises(RuntimeError):
        file_meta_dataset_0.waveform_array(var_0)

@pytest.mark.xfail(strict=True)
def test_case_56():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    file_meta_dataset_0.decompress()

def test_case_57():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_dataset_0 = module_0.FileDataset(file_meta_dataset_0, file_meta_dataset_0, is_implicit_VR=file_meta_dataset_0, is_little_endian=file_meta_dataset_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 0
    var_0 = file_dataset_0.__eq__(file_meta_dataset_0)

def test_case_58():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    var_1 = file_meta_dataset_0.data_element(var_0)

def test_case_59():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_dataset_0 = module_0.FileDataset(file_meta_dataset_0, file_meta_dataset_0, file_meta=file_meta_dataset_0, is_little_endian=file_meta_dataset_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 0
    with pytest.raises(TypeError):
        file_dataset_0.__setitem__(file_meta_dataset_0, file_meta_dataset_0)

def test_case_60():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    file_dataset_0 = module_0.FileDataset(file_meta_dataset_0, file_meta_dataset_0, file_meta=file_meta_dataset_0, is_little_endian=file_meta_dataset_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 0
    var_0 = file_dataset_0.__ne__(file_dataset_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_61():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    var_1 = file_meta_dataset_0.__str__()
    assert var_1 == 'Dataset.file_meta -------------------------------\n(0002, 0010) Transfer Syntax UID                 UI: Explicit VR Big Endian\n-------------------------------------------------'
    file_meta_dataset_0.decompress(var_1)

@pytest.mark.xfail(strict=True)
def test_case_62():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    file_meta_dataset_0.get_private_item(var_0, var_0, var_0)

def test_case_63():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = module_3.getmembers(file_meta_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_64():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = module_7.StreamReader(file_meta_dataset_0)
    file_meta_dataset_0.private_block(var_0, var_0, file_meta_dataset_0)

def test_case_65():
    dataset_0 = module_0.Dataset()
    assert f'{type(dataset_0).__module__}.{type(dataset_0).__qualname__}' == 'pydicom.dataset.Dataset'
    assert len(dataset_0) == 0
    assert module_0.Dataset.indent_chars == '   '
    assert f'{type(module_0.Dataset.is_original_encoding).__module__}.{type(module_0.Dataset.is_original_encoding).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dataset.pixel_array).__module__}.{type(module_0.Dataset.pixel_array).__qualname__}' == 'builtins.property'
    assert module_0.Dataset.default_element_format == '%(tag)s %(name)-35.35s %(VR)s: %(repval)s'
    assert module_0.Dataset.default_sequence_element_format == '%(tag)s %(name)-35.35s %(VR)s: %(repval)s'
    assert f'{type(module_0.Dataset.from_json).__module__}.{type(module_0.Dataset.from_json).__qualname__}' == 'builtins.method'
    var_0 = dataset_0.__eq__(dataset_0)
    var_1 = dataset_0.private_creators(var_0)

def test_case_66():
    none_type_0 = None
    list_0 = [none_type_0]
    dict_0 = {}
    file_meta_dataset_0 = module_0.FileMetaDataset(*list_0, **dict_0)
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert file_meta_dataset_0.is_decompressed is False
    assert file_meta_dataset_0.read_little_endian is None
    assert file_meta_dataset_0.read_implicit_vr is None
    assert file_meta_dataset_0.read_encoding is None
    assert file_meta_dataset_0.is_little_endian is None
    assert file_meta_dataset_0.is_implicit_VR is None
    assert file_meta_dataset_0.parent is None
    file_meta_dataset_1 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_1).__module__}.{type(file_meta_dataset_1).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_1) == 0
    var_0 = file_meta_dataset_1.fix_meta_info(file_meta_dataset_1)
    var_1 = file_meta_dataset_1.__ne__(var_0)
    assert var_1 is True
    with pytest.raises(ValueError):
        file_meta_dataset_1.overlay_array(var_1)

@pytest.mark.xfail(strict=True)
def test_case_67():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    var_1 = file_meta_dataset_0.to_json()
    assert var_1 == '{}'
    file_dataset_0 = module_0.FileDataset(var_1, var_1, var_1, is_little_endian=file_meta_dataset_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 2
    var_2 = file_meta_dataset_0.__str__()
    assert var_2 == 'Dataset.file_meta -------------------------------\n(0002, 0010) Transfer Syntax UID                 UI: Explicit VR Big Endian\n-------------------------------------------------'
    file_dataset_0.decode()

def test_case_68():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = module_8.get_comment(file_meta_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_69():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    file_meta_dataset_0.__delitem__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_70():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    var_1 = var_0.__str__()
    file_meta_dataset_0.pop(var_1)

@pytest.mark.xfail(strict=True)
def test_case_71():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.__str__()
    assert var_0 == ''
    file_meta_dataset_0.data_element(var_0)

def test_case_72():
    var_0 = module_6.node()
    var_1 = var_0.__len__()
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    with pytest.raises(ValueError):
        file_meta_dataset_0.private_creators(var_1)

@pytest.mark.xfail(strict=True)
def test_case_73():
    file_meta_dataset_0 = module_9.localeconv()
    none_type_0 = None
    file_dataset_0 = module_0.FileDataset(file_meta_dataset_0, file_meta_dataset_0, none_type_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 18
    var_0 = file_dataset_0.__ne__(none_type_0)
    assert var_0 is True
    file_dataset_0.walk(var_0)

@pytest.mark.xfail(strict=True)
def test_case_74():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.fix_meta_info(file_meta_dataset_0)
    var_1 = var_0.__str__()
    file_dataset_0 = module_0.FileDataset(var_1, file_meta_dataset_0, is_implicit_VR=var_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 0
    file_meta_dataset_0.decompress(var_1)

@pytest.mark.xfail(strict=True)
def test_case_75():
    var_0 = module_9.localeconv()
    file_dataset_0 = module_0.FileDataset(var_0, var_0, var_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 18
    file_dataset_0.save_as(file_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_76():
    var_0 = module_10.SafeUUID.safe
    none_type_0 = None
    file_dataset_0 = module_0.FileDataset(var_0, var_0, none_type_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert file_dataset_0.is_decompressed is False
    assert file_dataset_0.read_little_endian is None
    assert file_dataset_0.read_implicit_vr is None
    assert file_dataset_0.read_encoding is None
    assert file_dataset_0.is_little_endian is True
    assert file_dataset_0.is_implicit_VR is True
    assert file_dataset_0.parent is None
    assert file_dataset_0.preamble is None
    assert file_dataset_0.file_meta is None
    assert file_dataset_0.timestamp is None
    assert file_dataset_0.filename == 'safe'
    var_1 = var_0.__str__()
    file_dataset_0.save_as(var_0)

@pytest.mark.xfail(strict=True)
def test_case_77():
    var_0 = module_9.localeconv()
    none_type_0 = None
    file_dataset_0 = module_0.FileDataset(var_0, var_0, none_type_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 18
    file_dataset_0.dir(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_78():
    var_0 = module_5.ftperrors()
    file_dataset_0 = module_0.FileDataset(var_0, var_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 4
    module_8.get_addr_spec(file_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_79():
    var_0 = module_9.localeconv()
    file_dataset_0 = module_0.FileDataset(var_0, var_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 18
    module_0.FileDataset(file_dataset_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_80():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    var_0 = file_meta_dataset_0.iterall()
    file_meta_dataset_0.pop(file_meta_dataset_0, *var_0)

def test_case_81():
    file_meta_dataset_0 = module_0.FileMetaDataset()
    assert f'{type(file_meta_dataset_0).__module__}.{type(file_meta_dataset_0).__qualname__}' == 'pydicom.dataset.FileMetaDataset'
    assert len(file_meta_dataset_0) == 0
    none_type_0 = None
    file_dataset_0 = module_0.FileDataset(file_meta_dataset_0, file_meta_dataset_0, is_little_endian=none_type_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 0
    var_0 = module_3.getmembers(file_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_82():
    var_0 = module_9.localeconv()
    file_dataset_0 = module_0.FileDataset(var_0, var_0, var_0, is_implicit_VR=var_0)
    assert f'{type(file_dataset_0).__module__}.{type(file_dataset_0).__qualname__}' == 'pydicom.dataset.FileDataset'
    assert len(file_dataset_0) == 18
    file_dataset_0.to_json_dict(bulk_data_element_handler=file_dataset_0)