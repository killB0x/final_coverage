# Automatically generated by Pynguin.
import pytest
import pydicom.filebase as module_0
import pydicom.tag as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    dicom_bytes_i_o_0.write_tag(dicom_bytes_i_o_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    dicom_bytes_i_o_0.read_be_tag()

def test_case_2():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'

@pytest.mark.xfail(strict=True)
def test_case_3():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    dicom_bytes_i_o_0.read_leUL()

@pytest.mark.xfail(strict=True)
def test_case_4():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    bool_0 = True
    var_0 = dicom_bytes_i_o_0.write_tag(bool_0)
    dicom_bytes_i_o_0.read_be_tag()

@pytest.mark.xfail(strict=True)
def test_case_5():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    bool_0 = True
    var_0 = dicom_bytes_i_o_0.write_tag(bool_0)
    var_1 = dicom_bytes_i_o_0.write_beUS(bool_0)
    dicom_bytes_i_o_0.read_be_tag()

def test_case_6():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    bool_0 = True
    var_0 = dicom_bytes_i_o_0.write_beUL(bool_0)
    var_1 = dicom_bytes_i_o_0.getvalue()
    var_2 = dicom_bytes_i_o_0.write_tag(bool_0)
    with pytest.raises(EOFError):
        dicom_bytes_i_o_0.read(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    bool_0 = False
    var_0 = dicom_bytes_i_o_0.write_tag(bool_0)
    var_1 = module_0.DicomBytesIO()
    assert var_1.name == '<no filename>'
    var_1.read_beUL()

@pytest.mark.xfail(strict=True)
def test_case_8():
    module_0.DicomFile()

def test_case_9():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    bool_0 = True
    var_0 = dicom_bytes_i_o_0.getvalue()
    assert var_0 == b''
    with pytest.raises(EOFError):
        dicom_bytes_i_o_0.read(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    dicom_bytes_i_o_0.read_leUS()

@pytest.mark.xfail(strict=True)
def test_case_11():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    dicom_bytes_i_o_0.read_beUS()

@pytest.mark.xfail(strict=True)
def test_case_12():
    dicom_i_o_0 = module_0.DicomIO()
    assert module_0.DicomIO.max_read_attempts == 3
    assert f'{type(module_0.DicomIO.is_little_endian).__module__}.{type(module_0.DicomIO.is_little_endian).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.DicomIO.is_implicit_VR).__module__}.{type(module_0.DicomIO.is_implicit_VR).__qualname__}' == 'builtins.property'
    bool_0 = False
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    dicom_bytes_i_o_0.no_write(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    dicom_bytes_i_o_0.read_le_tag()

@pytest.mark.xfail(strict=True)
def test_case_14():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    var_0 = dicom_bytes_i_o_0.__enter__()
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == '_io.BytesIO'
    assert var_0.name == '<no filename>'
    dicom_bytes_i_o_0.read_be_tag()

@pytest.mark.xfail(strict=True)
def test_case_15():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    var_0 = dicom_bytes_i_o_0.__exit__()
    dicom_bytes_i_o_0.getvalue()

@pytest.mark.xfail(strict=True)
def test_case_16():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    dicom_bytes_i_o_0.no_read(dicom_bytes_i_o_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    none_type_0 = None
    var_0 = dicom_bytes_i_o_0.read()
    assert var_0 == b''
    var_1 = var_0.__ne__(none_type_0)
    dicom_bytes_i_o_0.write_tag(var_1)

@pytest.mark.xfail(strict=True)
def test_case_18():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    bool_0 = False
    var_0 = dicom_bytes_i_o_0.write_leUL(bool_0)
    dicom_bytes_i_o_0.read_be_tag()

@pytest.mark.xfail(strict=True)
def test_case_19():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    list_0 = [dicom_bytes_i_o_0, dicom_bytes_i_o_0]
    none_type_0 = None
    dicom_bytes_i_o_0.no_seek(list_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b'\xf9\xbf\xad\x99v\x90\x07\xc6\x85\x9b\xb4\x8b\xd2@\xabN\x80\xab'
    list_0 = [bytes_0]
    dicom_bytes_i_o_0 = module_0.DicomBytesIO(*list_0)
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    var_0 = dicom_bytes_i_o_0.read_beUL()
    assert var_0 == 4190088601
    var_0.read()

@pytest.mark.xfail(strict=True)
def test_case_21():
    dicom_bytes_i_o_0 = module_0.DicomBytesIO()
    assert f'{type(dicom_bytes_i_o_0).__module__}.{type(dicom_bytes_i_o_0).__qualname__}' == 'pydicom.filebase.DicomBytesIO'
    assert f'{type(dicom_bytes_i_o_0.parent).__module__}.{type(dicom_bytes_i_o_0.parent).__qualname__}' == '_io.BytesIO'
    assert dicom_bytes_i_o_0.name == '<no filename>'
    bool_0 = True
    var_0 = module_1.Tag(bool_0)
    var_1 = dicom_bytes_i_o_0.write_tag(var_0)
    var_0.read_be_tag()