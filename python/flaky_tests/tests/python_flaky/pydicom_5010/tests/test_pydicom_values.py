# Automatically generated by Pynguin.
import pytest
import pydicom.values as module_0
import re as module_1
import platform as module_2
import email.errors as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.convert_single_string(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.purge()
    module_0.convert_tag(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_2.python_branch()
    module_0.convert_DT_string(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.convert_TM_string(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.convert_value(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_0.convert_AE_string(none_type_0, none_type_0)

def test_case_6():
    none_type_0 = None
    var_0 = module_0.convert_OWvalue(none_type_0, none_type_0)
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']

def test_case_7():
    var_0 = module_2.version()
    var_1 = module_0.convert_OVvalue(var_0, var_0)
    assert var_1 == '#1 SMP Debian 5.10.140-1 (2022-09-02)'
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.convert_SQ(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

def test_case_9():
    none_type_0 = None
    var_0 = module_0.convert_UN(none_type_0, none_type_0)
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    module_0.convert_UR_string(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    var_0 = module_2.python_compiler()
    module_0.convert_tag(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    var_0 = module_2.python_build()
    module_0.convert_DA_string(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b'6\x088\xde'
    module_0.convert_single_string(bytes_0, bytes_0)

def test_case_14():
    bytes_0 = b'\x7f\x15'
    var_0 = module_0.convert_text(bytes_0)
    assert var_0 == '\x7f\x15'
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']

def test_case_15():
    bytes_0 = b'\x01M\x00'
    var_0 = module_0.convert_UI(bytes_0, bytes_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pydicom.uid.UID'
    assert len(var_0) == 2
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']
    with pytest.raises(NotImplementedError):
        module_0.convert_value(var_0, bytes_0)

def test_case_16():
    bytes_0 = b'd\x078\xed'
    var_0 = module_0.convert_PN(bytes_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pydicom.valuerep.PersonName'
    assert var_0.original_string == b'd\x078\xed'
    assert var_0.encodings is None
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']

def test_case_17():
    bytes_0 = b''
    with pytest.raises(ImportError):
        module_0.convert_DS_string(bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b'6\x088\xde'
    var_0 = module_0.convert_text(bytes_0)
    assert var_0 == '6\x088Þ'
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']
    var_1 = bytes_0.__add__(bytes_0)
    var_2 = module_0.convert_single_string(bytes_0, var_0)
    assert var_2 == '6\x088Þ'
    none_type_0 = None
    module_0.convert_ATvalue(var_2, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    bytes_0 = b'6\x088\xde'
    var_0 = module_2.python_revision()
    var_1 = module_0.convert_ATvalue(var_0, var_0, var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pydicom.multival.MultiValue'
    assert len(var_1) == 0
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']
    module_0.convert_value(bytes_0, bytes_0)

def test_case_20():
    bytes_0 = b'k\xb0W\x85\xf8\xde\x04\xcf\xcb6\xc6&\xeaQ\xcf\x91\xa3\x84'
    with pytest.raises(ValueError):
        module_0.convert_IS_string(bytes_0, bytes_0, bytes_0)

def test_case_21():
    bytes_0 = b'M\x00'
    var_0 = module_0.convert_UI(bytes_0, bytes_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pydicom.uid.UID'
    assert len(var_0) == 1
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']

@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b'M\x00'
    var_0 = module_0.convert_UI(bytes_0, bytes_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pydicom.uid.UID'
    assert len(var_0) == 1
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']
    module_0.convert_value(var_0, var_0)

def test_case_23():
    bytes_0 = b'-C'
    var_0 = module_0.convert_UI(bytes_0, bytes_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pydicom.uid.UID'
    assert len(var_0) == 2
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']

def test_case_24():
    bytes_0 = b'k\xb0W\x85\xf8\xde\x04\xcf\xcb6\xc6&\xeaQ\xcf\x91\xa3\x84'
    var_0 = module_0.convert_text(bytes_0)
    assert var_0 == 'k°W\x85øÞ\x04ÏË6Æ&êQÏ\x91£\x84'
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']
    var_1 = module_2.python_revision()
    with pytest.raises(NotImplementedError):
        module_0.convert_value(var_0, var_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    bytes_0 = b' '
    var_0 = module_0.convert_text(bytes_0)
    assert var_0 == ''
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']
    var_0.getheader(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    bytes_0 = b'k\xb0W\x85\xf8\xde\x04\xcf\xcb6\xc6&\xeaQ\xcf\x91\xa3\x84'
    var_0 = module_0.convert_text(bytes_0)
    assert var_0 == 'k°W\x85øÞ\x04ÏË6Æ&êQÏ\x91£\x84'
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']
    var_1 = module_2.python_revision()
    module_0.convert_ATvalue(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    bytes_0 = b''
    var_0 = module_0.convert_UN(bytes_0, bytes_0)
    assert var_0 == b''
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']
    var_1 = module_0.convert_DT_string(bytes_0, bytes_0, bytes_0)
    assert var_1 == ''
    var_2 = module_0.convert_text(bytes_0)
    assert var_2 == ''
    var_3 = module_0.convert_PN(bytes_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'pydicom.valuerep.PersonName'
    assert var_3.original_string == b''
    assert var_3.encodings is None
    module_0.convert_value(var_1, bytes_0)

def test_case_28():
    bytes_0 = b'TI'
    var_0 = module_0.convert_DA_string(bytes_0, bytes_0)
    assert var_0 == 'TI'
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']
    var_1 = module_0.convert_DT_string(bytes_0, bytes_0, bytes_0)
    assert var_1 == 'TI'
    var_2 = module_0.convert_text(bytes_0)
    assert var_2 == 'TI'
    var_3 = module_0.convert_PN(bytes_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'pydicom.valuerep.PersonName'
    assert var_3.original_string == b'TI'
    assert var_3.encodings is None
    with pytest.raises(NotImplementedError):
        module_0.convert_value(var_1, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    bytes_0 = b'UN'
    var_0 = module_0.convert_DA_string(bytes_0, bytes_0)
    assert var_0 == 'UN'
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']
    var_1 = module_0.convert_DT_string(bytes_0, bytes_0, bytes_0)
    assert var_1 == 'UN'
    var_2 = module_0.convert_text(bytes_0)
    assert var_2 == 'UN'
    module_0.convert_value(var_1, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    bytes_0 = b'~\xd8\xbd#T\xcf\xd5-\x93\x1c\\[ep'
    undecodable_bytes_defect_0 = module_3.UndecodableBytesDefect()
    var_0 = module_0.convert_DT_string(bytes_0, bytes_0, bytes_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pydicom.multival.MultiValue'
    assert len(var_0) == 2
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']
    var_1 = module_0.convert_text(bytes_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pydicom.multival.MultiValue'
    assert len(var_1) == 2
    var_2 = module_0.convert_PN(bytes_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'pydicom.multival.MultiValue'
    assert len(var_2) == 2
    var_3 = module_0.convert_TM_string(bytes_0, var_1)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'pydicom.multival.MultiValue'
    assert len(var_3) == 2
    module_0.convert_value(var_0, bytes_0)

def test_case_31():
    bytes_0 = b''
    var_0 = module_0.convert_UI(bytes_0, bytes_0)
    assert var_0 == ''
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']

def test_case_32():
    bytes_0 = b'\xff\xfe\xe0\x00'
    var_0 = module_0.convert_PN(bytes_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pydicom.valuerep.PersonName'
    assert var_0.original_string == b'\xff\xfe\xe0'
    assert var_0.encodings is None
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']

def test_case_33():
    bytes_0 = b'\x7fI'
    undecodable_bytes_defect_0 = module_3.UndecodableBytesDefect()
    with pytest.raises(ImportError):
        module_0.convert_DS_string(bytes_0, undecodable_bytes_defect_0)

def test_case_34():
    bytes_0 = b'\xff\xfe\xe0\x00'
    var_0 = module_0.convert_text(bytes_0)
    assert var_0 == 'ÿþà'
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']

@pytest.mark.xfail(strict=True)
def test_case_35():
    bytes_0 = b'\x00\x00'
    var_0 = module_0.convert_DT_string(bytes_0, bytes_0, bytes_0)
    assert var_0 == ''
    assert module_0.have_numpy is False
    assert module_0.convert_retry_VR_order == ['SH', 'UL', 'SL', 'US', 'SS', 'FL', 'FD', 'OF', 'OB', 'UI', 'DA', 'TM', 'PN', 'IS', 'DS', 'LT', 'SQ', 'UN', 'AT', 'OW', 'DT', 'UT']
    var_1 = module_0.convert_UI(bytes_0, var_0)
    var_2 = module_0.convert_DA_string(bytes_0, var_0)
    assert var_2 == ''
    var_3 = module_0.convert_text(bytes_0)
    assert var_3 == ''
    var_4 = module_0.convert_PN(bytes_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'pydicom.valuerep.PersonName'
    assert var_4.original_string == b'\x00'
    assert var_4.encodings is None
    var_5 = module_0.convert_OBvalue(var_4, var_4)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'pydicom.valuerep.PersonName'
    assert var_5.original_string == b'\x00'
    assert var_5.encodings is None
    var_6 = module_0.convert_TM_string(bytes_0, var_3)
    assert var_6 == ''
    module_0.convert_value(var_0, bytes_0)