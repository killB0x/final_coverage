# Automatically generated by Pynguin.
import pytest
import pydicom.uid as module_0

def test_case_0():
    u_i_d_0 = module_0.generate_uid()
    assert f'{type(u_i_d_0).__module__}.{type(u_i_d_0).__qualname__}' == 'pydicom.uid.UID'
    assert len(u_i_d_0) == 64
    assert module_0.PYDICOM_ROOT_UID == '1.2.826.0.1.3680043.8.498.'
    assert module_0.PYDICOM_IMPLEMENTATION_UID == '1.2.826.0.1.3680043.8.498.1'
    assert module_0.RE_VALID_UID == '^(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*$'
    assert module_0.RE_VALID_UID_PREFIX == '^(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*\\.$'
    assert len(module_0.ImplicitVRLittleEndian) == 17
    assert len(module_0.ExplicitVRLittleEndian) == 19
    assert len(module_0.DeflatedExplicitVRLittleEndian) == 22
    assert len(module_0.ExplicitVRBigEndian) == 19
    assert len(module_0.JPEGBaseline) == 22
    assert len(module_0.JPEGExtended) == 22
    assert len(module_0.JPEGLosslessP14) == 22
    assert len(module_0.JPEGLossless) == 22
    assert len(module_0.JPEGLSLossless) == 22
    assert len(module_0.JPEGLSLossy) == 22
    assert len(module_0.JPEG2000Lossless) == 22
    assert len(module_0.JPEG2000) == 22
    assert len(module_0.JPEG2000MultiComponentLossless) == 22
    assert len(module_0.JPEG2000MultiComponent) == 22
    assert len(module_0.MPEG2MainProfileMainLevel) == 23
    assert len(module_0.MPEG2MainProfileHighLevel) == 23
    assert len(module_0.MPEG4HighProfileLevel41) == 23
    assert len(module_0.MPEG4BDCompatibleHighProfileLevel41) == 23
    assert len(module_0.MPEG4HighProfileLevel422D) == 23
    assert len(module_0.MPEG4HighProfileLevel423D) == 23
    assert len(module_0.MPEG4StereoHighProfileLevel42) == 23
    assert len(module_0.HEVCMainProfileLevel51) == 23
    assert len(module_0.HEVCMain10ProfileLevel51) == 23
    assert len(module_0.RLELossless) == 19
    assert f'{type(module_0.UID.is_implicit_VR).__module__}.{type(module_0.UID.is_implicit_VR).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_little_endian).__module__}.{type(module_0.UID.is_little_endian).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_transfer_syntax).__module__}.{type(module_0.UID.is_transfer_syntax).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_deflated).__module__}.{type(module_0.UID.is_deflated).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_encapsulated).__module__}.{type(module_0.UID.is_encapsulated).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_compressed).__module__}.{type(module_0.UID.is_compressed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.name).__module__}.{type(module_0.UID.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.type).__module__}.{type(module_0.UID.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.info).__module__}.{type(module_0.UID.info).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_retired).__module__}.{type(module_0.UID.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_private).__module__}.{type(module_0.UID.is_private).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_valid).__module__}.{type(module_0.UID.is_valid).__qualname__}' == 'builtins.property'

def test_case_1():
    str_0 = 'R?|'
    with pytest.raises(ValueError):
        module_0.generate_uid(str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '4Eu0u175Eb1%;}]|)'
    list_0 = [str_0]
    u_i_d_0 = module_0.generate_uid(entropy_srcs=list_0)
    assert f'{type(u_i_d_0).__module__}.{type(u_i_d_0).__qualname__}' == 'pydicom.uid.UID'
    assert len(u_i_d_0) == 64
    assert module_0.PYDICOM_ROOT_UID == '1.2.826.0.1.3680043.8.498.'
    assert module_0.PYDICOM_IMPLEMENTATION_UID == '1.2.826.0.1.3680043.8.498.1'
    assert module_0.RE_VALID_UID == '^(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*$'
    assert module_0.RE_VALID_UID_PREFIX == '^(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*\\.$'
    assert len(module_0.ImplicitVRLittleEndian) == 17
    assert len(module_0.ExplicitVRLittleEndian) == 19
    assert len(module_0.DeflatedExplicitVRLittleEndian) == 22
    assert len(module_0.ExplicitVRBigEndian) == 19
    assert len(module_0.JPEGBaseline) == 22
    assert len(module_0.JPEGExtended) == 22
    assert len(module_0.JPEGLosslessP14) == 22
    assert len(module_0.JPEGLossless) == 22
    assert len(module_0.JPEGLSLossless) == 22
    assert len(module_0.JPEGLSLossy) == 22
    assert len(module_0.JPEG2000Lossless) == 22
    assert len(module_0.JPEG2000) == 22
    assert len(module_0.JPEG2000MultiComponentLossless) == 22
    assert len(module_0.JPEG2000MultiComponent) == 22
    assert len(module_0.MPEG2MainProfileMainLevel) == 23
    assert len(module_0.MPEG2MainProfileHighLevel) == 23
    assert len(module_0.MPEG4HighProfileLevel41) == 23
    assert len(module_0.MPEG4BDCompatibleHighProfileLevel41) == 23
    assert len(module_0.MPEG4HighProfileLevel422D) == 23
    assert len(module_0.MPEG4HighProfileLevel423D) == 23
    assert len(module_0.MPEG4StereoHighProfileLevel42) == 23
    assert len(module_0.HEVCMainProfileLevel51) == 23
    assert len(module_0.HEVCMain10ProfileLevel51) == 23
    assert len(module_0.RLELossless) == 19
    assert f'{type(module_0.UID.is_implicit_VR).__module__}.{type(module_0.UID.is_implicit_VR).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_little_endian).__module__}.{type(module_0.UID.is_little_endian).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_transfer_syntax).__module__}.{type(module_0.UID.is_transfer_syntax).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_deflated).__module__}.{type(module_0.UID.is_deflated).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_encapsulated).__module__}.{type(module_0.UID.is_encapsulated).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_compressed).__module__}.{type(module_0.UID.is_compressed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.name).__module__}.{type(module_0.UID.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.type).__module__}.{type(module_0.UID.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.info).__module__}.{type(module_0.UID.info).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_retired).__module__}.{type(module_0.UID.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_private).__module__}.{type(module_0.UID.is_private).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_valid).__module__}.{type(module_0.UID.is_valid).__qualname__}' == 'builtins.property'
    list_1 = [u_i_d_0]
    none_type_0 = None
    module_0.UID(*list_1, **none_type_0)

def test_case_3():
    u_i_d_0 = module_0.generate_uid()
    assert f'{type(u_i_d_0).__module__}.{type(u_i_d_0).__qualname__}' == 'pydicom.uid.UID'
    assert len(u_i_d_0) == 64
    assert module_0.PYDICOM_ROOT_UID == '1.2.826.0.1.3680043.8.498.'
    assert module_0.PYDICOM_IMPLEMENTATION_UID == '1.2.826.0.1.3680043.8.498.1'
    assert module_0.RE_VALID_UID == '^(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*$'
    assert module_0.RE_VALID_UID_PREFIX == '^(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*\\.$'
    assert len(module_0.ImplicitVRLittleEndian) == 17
    assert len(module_0.ExplicitVRLittleEndian) == 19
    assert len(module_0.DeflatedExplicitVRLittleEndian) == 22
    assert len(module_0.ExplicitVRBigEndian) == 19
    assert len(module_0.JPEGBaseline) == 22
    assert len(module_0.JPEGExtended) == 22
    assert len(module_0.JPEGLosslessP14) == 22
    assert len(module_0.JPEGLossless) == 22
    assert len(module_0.JPEGLSLossless) == 22
    assert len(module_0.JPEGLSLossy) == 22
    assert len(module_0.JPEG2000Lossless) == 22
    assert len(module_0.JPEG2000) == 22
    assert len(module_0.JPEG2000MultiComponentLossless) == 22
    assert len(module_0.JPEG2000MultiComponent) == 22
    assert len(module_0.MPEG2MainProfileMainLevel) == 23
    assert len(module_0.MPEG2MainProfileHighLevel) == 23
    assert len(module_0.MPEG4HighProfileLevel41) == 23
    assert len(module_0.MPEG4BDCompatibleHighProfileLevel41) == 23
    assert len(module_0.MPEG4HighProfileLevel422D) == 23
    assert len(module_0.MPEG4HighProfileLevel423D) == 23
    assert len(module_0.MPEG4StereoHighProfileLevel42) == 23
    assert len(module_0.HEVCMainProfileLevel51) == 23
    assert len(module_0.HEVCMain10ProfileLevel51) == 23
    assert len(module_0.RLELossless) == 19
    assert f'{type(module_0.UID.is_implicit_VR).__module__}.{type(module_0.UID.is_implicit_VR).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_little_endian).__module__}.{type(module_0.UID.is_little_endian).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_transfer_syntax).__module__}.{type(module_0.UID.is_transfer_syntax).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_deflated).__module__}.{type(module_0.UID.is_deflated).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_encapsulated).__module__}.{type(module_0.UID.is_encapsulated).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_compressed).__module__}.{type(module_0.UID.is_compressed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.name).__module__}.{type(module_0.UID.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.type).__module__}.{type(module_0.UID.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.info).__module__}.{type(module_0.UID.info).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_retired).__module__}.{type(module_0.UID.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_private).__module__}.{type(module_0.UID.is_private).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_valid).__module__}.{type(module_0.UID.is_valid).__qualname__}' == 'builtins.property'
    u_i_d_1 = module_0.generate_uid()
    assert len(u_i_d_1) == 64
    u_i_d_2 = module_0.generate_uid()
    assert len(u_i_d_2) == 64
    with pytest.raises(ValueError):
        module_0.generate_uid(u_i_d_2)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.UID(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    u_i_d_0 = module_0.generate_uid(none_type_0)
    assert f'{type(u_i_d_0).__module__}.{type(u_i_d_0).__qualname__}' == 'pydicom.uid.UID'
    assert len(u_i_d_0) == 43
    assert module_0.PYDICOM_ROOT_UID == '1.2.826.0.1.3680043.8.498.'
    assert module_0.PYDICOM_IMPLEMENTATION_UID == '1.2.826.0.1.3680043.8.498.1'
    assert module_0.RE_VALID_UID == '^(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*$'
    assert module_0.RE_VALID_UID_PREFIX == '^(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*\\.$'
    assert len(module_0.ImplicitVRLittleEndian) == 17
    assert len(module_0.ExplicitVRLittleEndian) == 19
    assert len(module_0.DeflatedExplicitVRLittleEndian) == 22
    assert len(module_0.ExplicitVRBigEndian) == 19
    assert len(module_0.JPEGBaseline) == 22
    assert len(module_0.JPEGExtended) == 22
    assert len(module_0.JPEGLosslessP14) == 22
    assert len(module_0.JPEGLossless) == 22
    assert len(module_0.JPEGLSLossless) == 22
    assert len(module_0.JPEGLSLossy) == 22
    assert len(module_0.JPEG2000Lossless) == 22
    assert len(module_0.JPEG2000) == 22
    assert len(module_0.JPEG2000MultiComponentLossless) == 22
    assert len(module_0.JPEG2000MultiComponent) == 22
    assert len(module_0.MPEG2MainProfileMainLevel) == 23
    assert len(module_0.MPEG2MainProfileHighLevel) == 23
    assert len(module_0.MPEG4HighProfileLevel41) == 23
    assert len(module_0.MPEG4BDCompatibleHighProfileLevel41) == 23
    assert len(module_0.MPEG4HighProfileLevel422D) == 23
    assert len(module_0.MPEG4HighProfileLevel423D) == 23
    assert len(module_0.MPEG4StereoHighProfileLevel42) == 23
    assert len(module_0.HEVCMainProfileLevel51) == 23
    assert len(module_0.HEVCMain10ProfileLevel51) == 23
    assert len(module_0.RLELossless) == 19
    assert f'{type(module_0.UID.is_implicit_VR).__module__}.{type(module_0.UID.is_implicit_VR).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_little_endian).__module__}.{type(module_0.UID.is_little_endian).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_transfer_syntax).__module__}.{type(module_0.UID.is_transfer_syntax).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_deflated).__module__}.{type(module_0.UID.is_deflated).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_encapsulated).__module__}.{type(module_0.UID.is_encapsulated).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_compressed).__module__}.{type(module_0.UID.is_compressed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.name).__module__}.{type(module_0.UID.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.type).__module__}.{type(module_0.UID.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.info).__module__}.{type(module_0.UID.info).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_retired).__module__}.{type(module_0.UID.is_retired).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_private).__module__}.{type(module_0.UID.is_private).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.UID.is_valid).__module__}.{type(module_0.UID.is_valid).__qualname__}' == 'builtins.property'
    u_i_d_1 = module_0.generate_uid(entropy_srcs=none_type_0)
    assert f'{type(u_i_d_1).__module__}.{type(u_i_d_1).__qualname__}' == 'pydicom.uid.UID'
    assert len(u_i_d_1) == 64
    int_0 = -1900
    module_0.generate_uid(entropy_srcs=int_0)