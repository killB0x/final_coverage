# Automatically generated by Pynguin.
import pytest
import aeneas.configuration as module_0
import platform as module_1
import aeneas.globalfunctions as module_2

def test_case_0():
    configuration_0 = module_0.Configuration()
    assert f'{type(configuration_0).__module__}.{type(configuration_0).__qualname__}' == 'aeneas.configuration.Configuration'
    assert configuration_0.data == {}
    assert configuration_0.types == {}
    assert configuration_0.aliases == {}
    assert configuration_0.desc == {}
    assert module_0.Configuration.TRUE_ALIASES == [True, 'TRUE', 'True', 'true', 'YES', 'Yes', 'yes', '1', 1]
    assert module_0.Configuration.TAG == 'Configuration'
    assert f'{type(module_0.Configuration.config_string).__module__}.{type(module_0.Configuration.config_string).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Configuration.parameters).__module__}.{type(module_0.Configuration.parameters).__qualname__}' == 'builtins.method'

def test_case_1():
    configuration_0 = module_0.Configuration()
    assert f'{type(configuration_0).__module__}.{type(configuration_0).__qualname__}' == 'aeneas.configuration.Configuration'
    assert configuration_0.data == {}
    assert configuration_0.types == {}
    assert configuration_0.aliases == {}
    assert configuration_0.desc == {}
    assert module_0.Configuration.TRUE_ALIASES == [True, 'TRUE', 'True', 'true', 'YES', 'Yes', 'yes', '1', 1]
    assert module_0.Configuration.TAG == 'Configuration'
    assert f'{type(module_0.Configuration.config_string).__module__}.{type(module_0.Configuration.config_string).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Configuration.parameters).__module__}.{type(module_0.Configuration.parameters).__qualname__}' == 'builtins.method'
    var_0 = configuration_0.__contains__(configuration_0)
    assert var_0 is False

def test_case_2():
    configuration_0 = module_0.Configuration()
    assert f'{type(configuration_0).__module__}.{type(configuration_0).__qualname__}' == 'aeneas.configuration.Configuration'
    assert configuration_0.data == {}
    assert configuration_0.types == {}
    assert configuration_0.aliases == {}
    assert configuration_0.desc == {}
    assert module_0.Configuration.TRUE_ALIASES == [True, 'TRUE', 'True', 'true', 'YES', 'Yes', 'yes', '1', 1]
    assert module_0.Configuration.TAG == 'Configuration'
    assert f'{type(module_0.Configuration.config_string).__module__}.{type(module_0.Configuration.config_string).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Configuration.parameters).__module__}.{type(module_0.Configuration.parameters).__qualname__}' == 'builtins.method'
    with pytest.raises(KeyError):
        configuration_0.__setitem__(configuration_0, configuration_0)

def test_case_3():
    configuration_0 = module_0.Configuration()
    assert f'{type(configuration_0).__module__}.{type(configuration_0).__qualname__}' == 'aeneas.configuration.Configuration'
    assert configuration_0.data == {}
    assert configuration_0.types == {}
    assert configuration_0.aliases == {}
    assert configuration_0.desc == {}
    assert module_0.Configuration.TRUE_ALIASES == [True, 'TRUE', 'True', 'true', 'YES', 'Yes', 'yes', '1', 1]
    assert module_0.Configuration.TAG == 'Configuration'
    assert f'{type(module_0.Configuration.config_string).__module__}.{type(module_0.Configuration.config_string).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Configuration.parameters).__module__}.{type(module_0.Configuration.parameters).__qualname__}' == 'builtins.method'
    with pytest.raises(KeyError):
        configuration_0.__getitem__(configuration_0)

def test_case_4():
    configuration_0 = module_0.Configuration()
    assert f'{type(configuration_0).__module__}.{type(configuration_0).__qualname__}' == 'aeneas.configuration.Configuration'
    assert configuration_0.data == {}
    assert configuration_0.types == {}
    assert configuration_0.aliases == {}
    assert configuration_0.desc == {}
    assert module_0.Configuration.TRUE_ALIASES == [True, 'TRUE', 'True', 'true', 'YES', 'Yes', 'yes', '1', 1]
    assert module_0.Configuration.TAG == 'Configuration'
    assert f'{type(module_0.Configuration.config_string).__module__}.{type(module_0.Configuration.config_string).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Configuration.parameters).__module__}.{type(module_0.Configuration.parameters).__qualname__}' == 'builtins.method'
    var_0 = configuration_0.__str__()

def test_case_5():
    configuration_0 = module_0.Configuration()
    assert f'{type(configuration_0).__module__}.{type(configuration_0).__qualname__}' == 'aeneas.configuration.Configuration'
    assert configuration_0.data == {}
    assert configuration_0.types == {}
    assert configuration_0.aliases == {}
    assert configuration_0.desc == {}
    assert module_0.Configuration.TRUE_ALIASES == [True, 'TRUE', 'True', 'true', 'YES', 'Yes', 'yes', '1', 1]
    assert module_0.Configuration.TAG == 'Configuration'
    assert f'{type(module_0.Configuration.config_string).__module__}.{type(module_0.Configuration.config_string).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Configuration.parameters).__module__}.{type(module_0.Configuration.parameters).__qualname__}' == 'builtins.method'
    var_0 = configuration_0.clone()
    configuration_1 = module_0.Configuration()

def test_case_6():
    var_0 = module_1.processor()
    configuration_0 = module_0.Configuration(var_0)
    assert f'{type(configuration_0).__module__}.{type(configuration_0).__qualname__}' == 'aeneas.configuration.Configuration'
    assert configuration_0.data == {}
    assert configuration_0.types == {}
    assert configuration_0.aliases == {}
    assert configuration_0.desc == {}
    assert module_0.Configuration.TRUE_ALIASES == [True, 'TRUE', 'True', 'true', 'YES', 'Yes', 'yes', '1', 1]
    assert module_0.Configuration.TAG == 'Configuration'
    assert f'{type(module_0.Configuration.config_string).__module__}.{type(module_0.Configuration.config_string).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Configuration.parameters).__module__}.{type(module_0.Configuration.parameters).__qualname__}' == 'builtins.method'

def test_case_7():
    var_0 = module_1.python_version_tuple()
    with pytest.raises(TypeError):
        module_0.Configuration(var_0)

def test_case_8():
    var_0 = module_1.release()
    configuration_0 = module_0.Configuration(var_0)
    assert f'{type(configuration_0).__module__}.{type(configuration_0).__qualname__}' == 'aeneas.configuration.Configuration'
    assert configuration_0.data == {}
    assert configuration_0.types == {}
    assert configuration_0.aliases == {}
    assert configuration_0.desc == {}
    assert module_0.Configuration.TRUE_ALIASES == [True, 'TRUE', 'True', 'true', 'YES', 'Yes', 'yes', '1', 1]
    assert module_0.Configuration.TAG == 'Configuration'
    assert f'{type(module_0.Configuration.config_string).__module__}.{type(module_0.Configuration.config_string).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Configuration.parameters).__module__}.{type(module_0.Configuration.parameters).__qualname__}' == 'builtins.method'

def test_case_9():
    var_0 = module_2.custom_tmp_dir()
    configuration_0 = module_0.Configuration(var_0)
    assert f'{type(configuration_0).__module__}.{type(configuration_0).__qualname__}' == 'aeneas.configuration.Configuration'
    assert configuration_0.data == {}
    assert configuration_0.types == {}
    assert configuration_0.aliases == {}
    assert configuration_0.desc == {}
    assert module_0.Configuration.TRUE_ALIASES == [True, 'TRUE', 'True', 'true', 'YES', 'Yes', 'yes', '1', 1]
    assert module_0.Configuration.TAG == 'Configuration'
    assert f'{type(module_0.Configuration.config_string).__module__}.{type(module_0.Configuration.config_string).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Configuration.parameters).__module__}.{type(module_0.Configuration.parameters).__qualname__}' == 'builtins.method'

def test_case_10():
    configuration_0 = module_0.Configuration()
    assert f'{type(configuration_0).__module__}.{type(configuration_0).__qualname__}' == 'aeneas.configuration.Configuration'
    assert configuration_0.data == {}
    assert configuration_0.types == {}
    assert configuration_0.aliases == {}
    assert configuration_0.desc == {}
    assert module_0.Configuration.TRUE_ALIASES == [True, 'TRUE', 'True', 'true', 'YES', 'Yes', 'yes', '1', 1]
    assert module_0.Configuration.TAG == 'Configuration'
    assert f'{type(module_0.Configuration.config_string).__module__}.{type(module_0.Configuration.config_string).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Configuration.parameters).__module__}.{type(module_0.Configuration.parameters).__qualname__}' == 'builtins.method'
    var_0 = configuration_0.__str__()
    var_1 = module_2.print_error(var_0, configuration_0)
    none_type_0 = None
    var_2 = configuration_0.__unicode__()
    var_3 = configuration_0.__contains__(none_type_0)
    assert var_3 is False
    var_4 = var_0.__repr__()
    var_5 = configuration_0.clone()
    var_6 = configuration_0.__unicode__()
    configuration_1 = module_0.Configuration(var_4)
    assert f'{type(configuration_1).__module__}.{type(configuration_1).__qualname__}' == 'aeneas.configuration.Configuration'
    assert configuration_1.data == {}
    assert configuration_1.types == {}
    assert configuration_1.aliases == {}
    assert configuration_1.desc == {}
    var_7 = var_6.split()
    with pytest.raises(KeyError):
        var_5.__getitem__(var_6)