# Automatically generated by Pynguin.
import pytest
import aeneas.textfile as module_0
import aeneas.globalfunctions as module_1
import platform as module_2
import collections as module_3
import re as module_4

def test_case_0():
    text_fragment_0 = module_0.TextFragment()
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_0 = text_fragment_0.__len__()
    assert var_0 == 0

def test_case_1():
    text_fragment_0 = module_0.TextFragment()
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'

def test_case_2():
    text_file_0 = module_0.TextFile()
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    text_file_0 = module_0.TextFile(parameters=none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    text_file_0.add_fragment(text_file_0)

def test_case_4():
    text_filter_transliterate_0 = module_0.TextFilterTransliterate()
    assert f'{type(text_filter_transliterate_0).__module__}.{type(text_filter_transliterate_0).__qualname__}' == 'aeneas.textfile.TextFilterTransliterate'
    assert f'{type(text_filter_transliterate_0.logger).__module__}.{type(text_filter_transliterate_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(text_filter_transliterate_0.logger) == 0
    assert f'{type(text_filter_transliterate_0.rconf).__module__}.{type(text_filter_transliterate_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert text_filter_transliterate_0.filters == []
    assert module_0.TextFilterTransliterate.TAG == 'TextFilterTransliterate'

@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_1.is_windows()
    module_0.TransliterationMap(var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.TransliterationMap(none_type_0)

def test_case_7():
    text_fragment_0 = module_0.TextFragment()
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_0 = text_fragment_0.__str__()
    assert var_0 == 'None '

def test_case_8():
    none_type_0 = None
    text_fragment_0 = module_0.TextFragment(language=none_type_0, lines=none_type_0)
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_0 = text_fragment_0.__len__()
    assert var_0 == 0
    with pytest.raises(ValueError):
        module_0.TextFilterIgnoreRegex(text_fragment_0, none_type_0)

def test_case_9():
    none_type_0 = None
    text_file_0 = module_0.TextFile(none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    var_0 = text_file_0.get_slice()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(var_0) == 0
    var_1 = var_0.__unicode__()
    assert var_1 == ''
    var_2 = var_1.isdecimal()
    module_0.TextFilterTransliterate(var_2, rconf=var_1, logger=var_2)

def test_case_10():
    text_file_0 = module_0.TextFile()
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    var_0 = text_file_0.__unicode__()
    assert var_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_11():
    var_0 = module_1.tmp_file()
    var_1 = var_0.__contains__(var_0)
    module_0.TextFile(file_format=var_0, logger=var_1)

@pytest.mark.xfail(strict=True)
def test_case_12():
    text_file_0 = module_0.TextFile()
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    text_file_0.get_subtree(text_file_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    text_fragment_0 = module_0.TextFragment()
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_0 = module_1.print_warning(text_fragment_0)
    module_0.TextFile(text_fragment_0, var_0, var_0)

def test_case_14():
    text_fragment_0 = module_0.TextFragment()
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    with pytest.raises(TypeError):
        module_0.TextFilterTransliterate(map_object=text_fragment_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    text_file_0 = module_0.TextFile(none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    var_0 = text_file_0.get_slice()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(var_0) == 0
    text_filter_transliterate_0 = module_0.TextFilterTransliterate(logger=text_file_0)
    assert f'{type(text_filter_transliterate_0).__module__}.{type(text_filter_transliterate_0).__qualname__}' == 'aeneas.textfile.TextFilterTransliterate'
    assert f'{type(text_filter_transliterate_0.logger).__module__}.{type(text_filter_transliterate_0.logger).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_filter_transliterate_0.logger) == 0
    assert f'{type(text_filter_transliterate_0.rconf).__module__}.{type(text_filter_transliterate_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert text_filter_transliterate_0.filters == []
    assert module_0.TextFilterTransliterate.TAG == 'TextFilterTransliterate'
    var_1 = var_0.__len__()
    module_0.TextFile(var_1, parameters=var_1, rconf=var_1, logger=text_file_0)

def test_case_16():
    none_type_0 = None
    text_file_0 = module_0.TextFile(none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    var_0 = text_file_0.__unicode__()
    assert var_0 == ''
    var_1 = text_file_0.read_from_list(var_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    var_0 = module_2.python_version_tuple()
    var_1 = var_0.__len__()
    module_0.TextFile(var_1, rconf=var_0)

def test_case_18():
    text_fragment_0 = module_0.TextFragment()
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_0 = text_fragment_0.__unicode__()
    assert var_0 == 'None '
    text_fragment_1 = module_0.TextFragment(var_0, text_fragment_0)
    assert f'{type(text_fragment_1).__module__}.{type(text_fragment_1).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_1) == 0
    with pytest.raises(TypeError):
        module_0.TextFilterTransliterate(map_object=var_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    text_fragment_0 = module_0.TextFragment()
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_0 = text_fragment_0.__len__()
    assert var_0 == 0
    module_0.TextFragment(language=none_type_0, lines=var_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    text_filter_transliterate_0 = module_0.TextFilterTransliterate(map_object=none_type_0)
    assert f'{type(text_filter_transliterate_0).__module__}.{type(text_filter_transliterate_0).__qualname__}' == 'aeneas.textfile.TextFilterTransliterate'
    assert f'{type(text_filter_transliterate_0.logger).__module__}.{type(text_filter_transliterate_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(text_filter_transliterate_0.logger) == 0
    assert f'{type(text_filter_transliterate_0.rconf).__module__}.{type(text_filter_transliterate_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert text_filter_transliterate_0.filters == []
    assert module_0.TextFilterTransliterate.TAG == 'TextFilterTransliterate'
    var_0 = module_2.python_version()
    user_list_0 = module_3.UserList()
    module_0.TextFile(parameters=var_0, rconf=var_0)

def test_case_21():
    text_file_0 = module_0.TextFile()
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    var_0 = text_file_0.set_language(text_file_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = None
    text_file_0 = module_0.TextFile(file_format=none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    text_fragment_0 = module_0.TextFragment()
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_0 = text_file_0.get_slice(end=none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(var_0) == 0
    var_1 = var_0.clear()
    none_type_0.__unicode__()

@pytest.mark.xfail(strict=True)
def test_case_23():
    text_file_0 = module_0.TextFile()
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    var_0 = module_1.delete_directory(text_file_0)
    text_file_0.read_from_list_with_ids(var_0)

def test_case_24():
    none_type_0 = None
    text_file_0 = module_0.TextFile(none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    var_0 = text_file_0.clear()
    text_fragment_0 = module_0.TextFragment(none_type_0, text_file_0, none_type_0)
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_1 = text_fragment_0.__unicode__()
    assert var_1 == 'None '
    with pytest.raises(TypeError):
        module_0.TextFilterTransliterate(text_file_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    var_0 = module_2.uname()
    var_1 = var_0.__hash__()
    module_0.TextFragment(var_1, var_0)

def test_case_26():
    text_filter_0 = module_0.TextFilter()
    assert f'{type(text_filter_0).__module__}.{type(text_filter_0).__qualname__}' == 'aeneas.textfile.TextFilter'
    assert f'{type(text_filter_0.logger).__module__}.{type(text_filter_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(text_filter_0.logger) == 0
    assert f'{type(text_filter_0.rconf).__module__}.{type(text_filter_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert text_filter_0.filters == []
    assert module_0.TextFilter.TAG == 'TextFilter'
    var_0 = text_filter_0.apply_filter(text_filter_0)
    assert len(text_filter_0.logger) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.textfile.TextFilter'
    assert f'{type(var_0.logger).__module__}.{type(var_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(var_0.logger) == 1
    assert f'{type(var_0.rconf).__module__}.{type(var_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert var_0.filters == []

def test_case_27():
    none_type_0 = None
    text_file_0 = module_0.TextFile(none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    var_0 = text_file_0.get_slice()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(var_0) == 0
    text_filter_transliterate_0 = module_0.TextFilterTransliterate(logger=text_file_0)
    assert f'{type(text_filter_transliterate_0).__module__}.{type(text_filter_transliterate_0).__qualname__}' == 'aeneas.textfile.TextFilterTransliterate'
    assert f'{type(text_filter_transliterate_0.logger).__module__}.{type(text_filter_transliterate_0.logger).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_filter_transliterate_0.logger) == 0
    assert f'{type(text_filter_transliterate_0.rconf).__module__}.{type(text_filter_transliterate_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert text_filter_transliterate_0.filters == []
    assert module_0.TextFilterTransliterate.TAG == 'TextFilterTransliterate'
    var_1 = var_0.__len__()

@pytest.mark.xfail(strict=True)
def test_case_28():
    none_type_0 = None
    text_file_0 = module_0.TextFile(file_format=none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    text_fragment_0 = module_0.TextFragment()
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_0 = text_fragment_0.__len__()
    assert var_0 == 0
    var_1 = text_file_0.get_slice(end=var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(var_1) == 0
    var_2 = var_1.clear()
    none_type_0.__unicode__()

def test_case_29():
    none_type_0 = None
    text_file_0 = module_0.TextFile(none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    text_fragment_0 = module_0.TextFragment(filtered_lines=none_type_0)
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_0 = text_file_0.__unicode__()
    assert var_0 == ''
    var_1 = text_file_0.add_fragment(text_fragment_0, text_file_0)
    assert len(text_file_0) == 1
    text_file_1 = module_0.TextFile(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    none_type_0 = None
    text_filter_0 = module_0.TextFilter(none_type_0)
    assert f'{type(text_filter_0).__module__}.{type(text_filter_0).__qualname__}' == 'aeneas.textfile.TextFilter'
    assert f'{type(text_filter_0.logger).__module__}.{type(text_filter_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(text_filter_0.logger) == 0
    assert f'{type(text_filter_0.rconf).__module__}.{type(text_filter_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert text_filter_0.filters == []
    assert module_0.TextFilter.TAG == 'TextFilter'
    text_file_0 = module_0.TextFile(parameters=none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    text_file_0.get_slice(text_file_0)

def test_case_31():
    text_file_0 = module_0.TextFile()
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    text_fragment_0 = module_0.TextFragment(language=text_file_0)
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_0 = text_file_0.__unicode__()
    assert var_0 == ''
    var_1 = text_file_0.add_fragment(text_fragment_0, var_0)
    assert len(text_file_0) == 1
    text_filter_transliterate_0 = module_0.TextFilterTransliterate(map_object=var_1)
    assert f'{type(text_filter_transliterate_0).__module__}.{type(text_filter_transliterate_0).__qualname__}' == 'aeneas.textfile.TextFilterTransliterate'
    assert f'{type(text_filter_transliterate_0.logger).__module__}.{type(text_filter_transliterate_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(text_filter_transliterate_0.logger) == 0
    assert f'{type(text_filter_transliterate_0.rconf).__module__}.{type(text_filter_transliterate_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert text_filter_transliterate_0.filters == []
    assert module_0.TextFilterTransliterate.TAG == 'TextFilterTransliterate'
    var_2 = text_file_0.__unicode__()
    assert var_2 == 'None '

@pytest.mark.xfail(strict=True)
def test_case_32():
    var_0 = module_2.platform()
    text_filter_transliterate_0 = module_0.TextFilterTransliterate()
    assert f'{type(text_filter_transliterate_0).__module__}.{type(text_filter_transliterate_0).__qualname__}' == 'aeneas.textfile.TextFilterTransliterate'
    assert f'{type(text_filter_transliterate_0.logger).__module__}.{type(text_filter_transliterate_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(text_filter_transliterate_0.logger) == 0
    assert f'{type(text_filter_transliterate_0.rconf).__module__}.{type(text_filter_transliterate_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert text_filter_transliterate_0.filters == []
    assert module_0.TextFilterTransliterate.TAG == 'TextFilterTransliterate'
    text_filter_transliterate_0.apply_filter(var_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    none_type_0 = None
    text_file_0 = module_0.TextFile(file_format=none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    var_0 = text_file_0.set_language(text_file_0)
    text_fragment_0 = module_0.TextFragment()
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    text_fragment_1 = module_0.TextFragment(none_type_0, var_0)
    assert len(text_fragment_1) == 0
    var_1 = none_type_0.__repr__()
    var_2 = text_file_0.get_slice()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(var_2) == 0
    var_3 = text_fragment_0.__unicode__()
    assert var_3 == 'None '
    text_filter_transliterate_0 = module_0.TextFilterTransliterate()
    assert f'{type(text_filter_transliterate_0).__module__}.{type(text_filter_transliterate_0).__qualname__}' == 'aeneas.textfile.TextFilterTransliterate'
    assert f'{type(text_filter_transliterate_0.logger).__module__}.{type(text_filter_transliterate_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(text_filter_transliterate_0.logger) == 0
    assert f'{type(text_filter_transliterate_0.rconf).__module__}.{type(text_filter_transliterate_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert text_filter_transliterate_0.filters == []
    assert module_0.TextFilterTransliterate.TAG == 'TextFilterTransliterate'
    var_4 = text_filter_transliterate_0.add_filter(text_filter_transliterate_0)
    assert f'{type(text_filter_transliterate_0.filters).__module__}.{type(text_filter_transliterate_0.filters).__qualname__}' == 'builtins.list'
    assert len(text_filter_transliterate_0.filters) == 1
    var_5 = text_fragment_1.__len__()
    assert var_5 == 0
    module_0.TextFile(file_format=var_1, logger=var_2)

@pytest.mark.xfail(strict=True)
def test_case_34():
    none_type_0 = None
    text_file_0 = module_0.TextFile(logger=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    var_0 = text_file_0.clear()
    text_filter_transliterate_0 = module_0.TextFilterTransliterate()
    assert f'{type(text_filter_transliterate_0).__module__}.{type(text_filter_transliterate_0).__qualname__}' == 'aeneas.textfile.TextFilterTransliterate'
    assert f'{type(text_filter_transliterate_0.logger).__module__}.{type(text_filter_transliterate_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(text_filter_transliterate_0.logger) == 0
    assert f'{type(text_filter_transliterate_0.rconf).__module__}.{type(text_filter_transliterate_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert text_filter_transliterate_0.filters == []
    assert module_0.TextFilterTransliterate.TAG == 'TextFilterTransliterate'
    var_1 = text_filter_transliterate_0.add_filter(var_0, var_0)
    assert text_filter_transliterate_0.filters == [None]
    var_2 = text_file_0.set_language(none_type_0)
    text_fragment_0 = module_0.TextFragment(language=text_file_0)
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_0.__len__()

@pytest.mark.xfail(strict=True)
def test_case_35():
    none_type_0 = None
    text_file_0 = module_0.TextFile(file_format=none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    var_0 = text_file_0.set_language(text_file_0)
    text_fragment_0 = module_0.TextFragment()
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_1 = text_fragment_0.__repr__()
    var_2 = text_file_0.get_slice()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(var_2) == 0
    var_2.read_from_list_with_ids(var_1)

def test_case_36():
    none_type_0 = None
    text_file_0 = module_0.TextFile(file_format=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    var_0 = text_file_0.__unicode__()
    assert var_0 == ''
    var_1 = module_4.compile(var_0)
    var_2 = text_file_0.read_from_list_with_ids(var_0)
    text_file_1 = module_0.TextFile()
    assert len(text_file_1) == 0

@pytest.mark.xfail(strict=True)
def test_case_37():
    none_type_0 = None
    text_file_0 = module_0.TextFile(none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    text_fragment_0 = module_0.TextFragment(filtered_lines=none_type_0)
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_0 = module_2.python_implementation()
    var_1 = text_file_0.set_language(text_fragment_0)
    var_2 = text_file_0.read_from_list(var_0)
    assert len(text_file_0) == 7
    var_2.__unicode__()

@pytest.mark.xfail(strict=True)
def test_case_38():
    none_type_0 = None
    text_file_0 = module_0.TextFile(none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    text_file_1 = module_0.TextFile(parameters=none_type_0, rconf=none_type_0, logger=text_file_0)
    assert f'{type(text_file_1).__module__}.{type(text_file_1).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_1) == 0
    var_0 = text_file_0.set_language(text_file_1)
    text_fragment_0 = module_0.TextFragment()
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_1 = text_fragment_0.__len__()
    assert var_1 == 0
    text_fragment_1 = module_0.TextFragment()
    assert len(text_fragment_1) == 0
    var_2 = text_file_1.get_slice()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(var_2) == 0
    var_3 = var_2.__unicode__()
    text_filter_transliterate_0 = module_0.TextFilterTransliterate(none_type_0, logger=text_file_0)
    assert f'{type(text_filter_transliterate_0).__module__}.{type(text_filter_transliterate_0).__qualname__}' == 'aeneas.textfile.TextFilterTransliterate'
    assert f'{type(text_filter_transliterate_0.logger).__module__}.{type(text_filter_transliterate_0.logger).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_filter_transliterate_0.logger) == 0
    assert f'{type(text_filter_transliterate_0.rconf).__module__}.{type(text_filter_transliterate_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert text_filter_transliterate_0.filters == []
    assert module_0.TextFilterTransliterate.TAG == 'TextFilterTransliterate'
    var_4 = text_filter_transliterate_0.apply_filter(var_3)
    var_5 = var_4.__contains__(text_fragment_1)
    module_0.TextFile(text_filter_transliterate_0, rconf=var_2, logger=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_39():
    none_type_0 = None
    text_file_0 = module_0.TextFile(none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    text_fragment_0 = module_0.TextFragment(filtered_lines=none_type_0)
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_0 = module_2.python_implementation()
    var_1 = text_file_0.set_language(text_fragment_0)
    var_2 = text_file_0.read_from_list(var_0)
    assert len(text_file_0) == 7
    text_filter_transliterate_0 = module_0.TextFilterTransliterate()
    assert f'{type(text_filter_transliterate_0).__module__}.{type(text_filter_transliterate_0).__qualname__}' == 'aeneas.textfile.TextFilterTransliterate'
    assert f'{type(text_filter_transliterate_0.logger).__module__}.{type(text_filter_transliterate_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(text_filter_transliterate_0.logger) == 0
    assert f'{type(text_filter_transliterate_0.rconf).__module__}.{type(text_filter_transliterate_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert text_filter_transliterate_0.filters == []
    assert module_0.TextFilterTransliterate.TAG == 'TextFilterTransliterate'
    var_3 = var_1.__repr__()
    var_4 = text_file_0.get_slice()
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(var_4) == 7
    var_5 = text_fragment_0.__unicode__()
    assert var_5 == 'None '
    text_filter_transliterate_1 = module_0.TextFilterTransliterate(logger=var_3)
    module_0.TextFile(file_format=text_fragment_0, logger=text_filter_transliterate_1)

def test_case_40():
    none_type_0 = None
    text_file_0 = module_0.TextFile(none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    text_fragment_0 = module_0.TextFragment(filtered_lines=none_type_0)
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_0 = module_2.python_implementation()
    var_1 = text_file_0.read_from_list(var_0)
    assert len(text_file_0) == 7
    var_2 = text_fragment_0.__len__()
    assert var_2 == 0
    var_3 = text_fragment_0.__unicode__()
    assert var_3 == 'None '
    var_4 = text_file_0.__str__()
    assert var_4 == 'f000001 C\nf000002 P\nf000003 y\nf000004 t\nf000005 h\nf000006 o\nf000007 n'
    var_5 = var_4.__dir__()
    text_filter_transliterate_0 = module_0.TextFilterTransliterate(rconf=var_5)
    assert f'{type(text_filter_transliterate_0).__module__}.{type(text_filter_transliterate_0).__qualname__}' == 'aeneas.textfile.TextFilterTransliterate'
    assert f'{type(text_filter_transliterate_0.logger).__module__}.{type(text_filter_transliterate_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(text_filter_transliterate_0.logger) == 0
    assert text_filter_transliterate_0.rconf == ['__new__', '__repr__', '__hash__', '__str__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__mod__', '__rmod__', '__len__', '__getitem__', '__add__', '__mul__', '__rmul__', '__contains__', 'encode', 'replace', 'split', 'rsplit', 'join', 'capitalize', 'casefold', 'title', 'center', 'count', 'expandtabs', 'find', 'partition', 'index', 'ljust', 'lower', 'lstrip', 'rfind', 'rindex', 'rjust', 'rstrip', 'rpartition', 'splitlines', 'strip', 'swapcase', 'translate', 'upper', 'startswith', 'endswith', 'removeprefix', 'removesuffix', 'isascii', 'islower', 'isupper', 'istitle', 'isspace', 'isdecimal', 'isdigit', 'isnumeric', 'isalpha', 'isalnum', 'isidentifier', 'isprintable', 'zfill', 'format', 'format_map', '__format__', 'maketrans', '__sizeof__', '__getnewargs__', '__doc__', '__setattr__', '__delattr__', '__init__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__dir__', '__class__']
    assert text_filter_transliterate_0.filters == []
    assert module_0.TextFilterTransliterate.TAG == 'TextFilterTransliterate'
    with pytest.raises(TypeError):
        module_0.TextFilterTransliterate(map_object=text_fragment_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    none_type_0 = None
    text_file_0 = module_0.TextFile(none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    list_0 = [text_file_0, text_file_0]
    module_0.TextFragment(language=list_0, lines=list_0)

def test_case_42():
    none_type_0 = None
    text_file_0 = module_0.TextFile(none_type_0, rconf=none_type_0)
    assert f'{type(text_file_0).__module__}.{type(text_file_0).__qualname__}' == 'aeneas.textfile.TextFile'
    assert len(text_file_0) == 0
    assert module_0.TextFile.DEFAULT_ID_FORMAT == 'f%06d'
    assert module_0.TextFile.TAG == 'TextFile'
    assert f'{type(module_0.TextFile.fragments_tree).__module__}.{type(module_0.TextFile.fragments_tree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.children_not_empty).__module__}.{type(module_0.TextFile.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_path).__module__}.{type(module_0.TextFile.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.file_format).__module__}.{type(module_0.TextFile.file_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.parameters).__module__}.{type(module_0.TextFile.parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.chars).__module__}.{type(module_0.TextFile.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.characters).__module__}.{type(module_0.TextFile.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFile.fragments).__module__}.{type(module_0.TextFile.fragments).__qualname__}' == 'builtins.property'
    text_fragment_0 = module_0.TextFragment(filtered_lines=none_type_0)
    assert f'{type(text_fragment_0).__module__}.{type(text_fragment_0).__qualname__}' == 'aeneas.textfile.TextFragment'
    assert len(text_fragment_0) == 0
    assert module_0.TextFragment.TAG == 'TextFragment'
    assert f'{type(module_0.TextFragment.identifier).__module__}.{type(module_0.TextFragment.identifier).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.language).__module__}.{type(module_0.TextFragment.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.lines).__module__}.{type(module_0.TextFragment.lines).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.text).__module__}.{type(module_0.TextFragment.text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.characters).__module__}.{type(module_0.TextFragment.characters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.chars).__module__}.{type(module_0.TextFragment.chars).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_text).__module__}.{type(module_0.TextFragment.filtered_text).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TextFragment.filtered_characters).__module__}.{type(module_0.TextFragment.filtered_characters).__qualname__}' == 'builtins.property'
    var_0 = module_2.python_implementation()
    var_1 = text_fragment_0.__str__()
    assert var_1 == 'None '
    var_2 = text_file_0.set_language(text_fragment_0)
    var_3 = text_file_0.read_from_list(var_0)
    assert len(text_file_0) == 7
    var_4 = text_file_0.set_language(var_3)
    var_5 = text_fragment_0.__len__()
    assert var_5 == 0
    text_filter_transliterate_0 = module_0.TextFilterTransliterate()
    assert f'{type(text_filter_transliterate_0).__module__}.{type(text_filter_transliterate_0).__qualname__}' == 'aeneas.textfile.TextFilterTransliterate'
    assert f'{type(text_filter_transliterate_0.logger).__module__}.{type(text_filter_transliterate_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(text_filter_transliterate_0.logger) == 0
    assert f'{type(text_filter_transliterate_0.rconf).__module__}.{type(text_filter_transliterate_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert text_filter_transliterate_0.filters == []
    assert module_0.TextFilterTransliterate.TAG == 'TextFilterTransliterate'
    var_6 = text_fragment_0.__unicode__()
    assert var_6 == 'None '
    var_7 = text_fragment_0.__unicode__()
    assert var_7 == 'None '
    var_8 = text_file_0.__str__()
    assert var_8 == 'f000001 C\nf000002 P\nf000003 y\nf000004 t\nf000005 h\nf000006 o\nf000007 n'
    with pytest.raises(TypeError):
        module_0.TextFilterTransliterate(map_object=var_7)

@pytest.mark.xfail(strict=True)
def test_case_43():
    var_0 = module_2.freedesktop_os_release()
    var_1 = module_2.python_branch()
    str_0 = '%)'
    text_filter_ignore_regex_0 = module_0.TextFilterIgnoreRegex(var_1, str_0)
    assert f'{type(text_filter_ignore_regex_0).__module__}.{type(text_filter_ignore_regex_0).__qualname__}' == 'aeneas.textfile.TextFilterIgnoreRegex'
    assert f'{type(text_filter_ignore_regex_0.regex).__module__}.{type(text_filter_ignore_regex_0.regex).__qualname__}' == 're.Pattern'
    assert f'{type(text_filter_ignore_regex_0.logger).__module__}.{type(text_filter_ignore_regex_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(text_filter_ignore_regex_0.logger) == 0
    assert text_filter_ignore_regex_0.rconf == '%)'
    assert text_filter_ignore_regex_0.filters == []
    assert module_0.TextFilterIgnoreRegex.TAG == 'TextFilterIgnoreRegex'
    var_2 = text_filter_ignore_regex_0.apply_filter(var_0)
    var_3 = text_filter_ignore_regex_0.log(var_1)
    assert len(text_filter_ignore_regex_0.logger) == 1
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'datetime.datetime'
    var_4 = var_1.__gt__(str_0)
    var_4.add_fragment(var_4)