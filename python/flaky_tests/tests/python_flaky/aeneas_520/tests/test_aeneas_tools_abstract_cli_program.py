# Automatically generated by Pynguin.
import pytest
import aeneas.tools.abstract_cli_program as module_0
import aeneas.globalfunctions as module_1
import collections as module_2
import re as module_3

def test_case_0():
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram()
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False

def test_case_1():
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram()
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.has_option_with_value(abstract_c_l_i_program_0, abstract_c_l_i_program_0)

def test_case_2():
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram()
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.check_c_extensions(abstract_c_l_i_program_0)
    assert var_0 is False
    assert len(abstract_c_l_i_program_0.logger) == 3

def test_case_3():
    str_0 = ''
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(invoke=str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == ''
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.has_option(abstract_c_l_i_program_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '/'
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys == '/'
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = module_1.file_extension(str_0)
    var_1 = abstract_c_l_i_program_0.check_input_file(var_0)
    var_2 = abstract_c_l_i_program_0.print_success(str_0)
    abstract_c_l_i_program_0.run(str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = ''
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(invoke=str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == ''
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    abstract_c_l_i_program_0.run(str_0)

def test_case_6():
    none_type_0 = None
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(rconf=none_type_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.get_text_file(abstract_c_l_i_program_0, abstract_c_l_i_program_0, none_type_0)
    assert len(abstract_c_l_i_program_0.logger) == 2
    var_1 = abstract_c_l_i_program_0.has_option_with_value(none_type_0)

def test_case_7():
    bool_0 = False
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(logger=bool_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert abstract_c_l_i_program_0.logger is False
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    abstract_c_l_i_program_0.check_input_file(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'Ji{`G9}+a71zl>#B'
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys == 'Ji{`G9}+a71zl>#B'
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    abstract_c_l_i_program_0.run(str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '_TVywT\x0c1l*8X\\z'
    set_0 = {str_0, str_0}
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(rconf=str_0, logger=set_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert abstract_c_l_i_program_0.logger == {'_TVywT\x0c1l*8X\\z'}
    assert abstract_c_l_i_program_0.rconf == '_TVywT\x0c1l*8X\\z'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    abstract_c_l_i_program_0.print_no_dependency_error()

@pytest.mark.xfail(strict=True)
def test_case_10():
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram()
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    abstract_c_l_i_program_0.print_help()

def test_case_11():
    none_type_0 = None
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(none_type_0, rconf=none_type_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is None
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.print_help()

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(invoke=none_type_0, rconf=none_type_0, logger=none_type_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    abstract_c_l_i_program_0.print_name_version()

@pytest.mark.xfail(strict=True)
def test_case_13():
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram()
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    abstract_c_l_i_program_0.run(abstract_c_l_i_program_0)

def test_case_14():
    str_0 = ''
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys == ''
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.run(str_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = ''
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram()
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    abstract_c_l_i_program_0.run(str_0)

def test_case_16():
    none_type_0 = None
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(rconf=none_type_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.has_option_with_value(abstract_c_l_i_program_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram()
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.get_text_file(none_type_0, abstract_c_l_i_program_0, none_type_0)
    var_1 = abstract_c_l_i_program_0.check_output_file(var_0)
    var_0.print_warning(none_type_0)

def test_case_18():
    str_0 = ''
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys == ''
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.check_c_extensions()
    var_1 = abstract_c_l_i_program_0.print_help()

def test_case_19():
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram()
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.check_c_extensions()

@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(rconf=none_type_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    abstract_c_l_i_program_1 = module_0.AbstractCLIProgram(none_type_0, logger=none_type_0)
    abstract_c_l_i_program_0.print_rconf_parameters()

@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(none_type_0, rconf=none_type_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is None
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    abstract_c_l_i_program_1 = module_0.AbstractCLIProgram()
    abstract_c_l_i_program_1.print_info(abstract_c_l_i_program_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = 'H{hp'
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys == 'H{hp'
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.check_output_file(str_0)
    var_1 = abstract_c_l_i_program_0.has_option_with_value(str_0)
    var_0.get(var_1, abstract_c_l_i_program_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = ''
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram()
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    abstract_c_l_i_program_0.run(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = ''
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys == ''
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.check_output_directory(str_0)
    abstract_c_l_i_program_1 = module_0.AbstractCLIProgram(rconf=var_0, logger=var_0)
    var_0.run(str_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = ''
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(logger=str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert abstract_c_l_i_program_0.logger == ''
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is True
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    abstract_c_l_i_program_0.check_input_file_or_directory(str_0)

def test_case_26():
    str_0 = ''
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys == ''
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.print_rconf_parameters()
    var_1 = abstract_c_l_i_program_0.check_c_extensions(str_0)
    deque_0 = module_2.deque()
    var_2 = abstract_c_l_i_program_0.run(str_0)
    var_3 = abstract_c_l_i_program_0.print_no_dependency_error()

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = '{hp'
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys == '{hp'
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = module_1.file_extension(str_0)
    var_1 = abstract_c_l_i_program_0.print_generic(str_0, abstract_c_l_i_program_0)
    var_2 = abstract_c_l_i_program_0.check_input_file(var_1)
    var_3 = abstract_c_l_i_program_0.print_success(str_0)
    abstract_c_l_i_program_0.run(str_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = 'AtYW8Uhg6-'
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys == 'AtYW8Uhg6-'
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    none_type_0 = None
    abstract_c_l_i_program_1 = module_1.split_url(str_0)
    abstract_c_l_i_program_0.run(abstract_c_l_i_program_1, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = ''
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys == ''
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.check_c_extensions(str_0)
    var_1 = abstract_c_l_i_program_0.check_input_file(var_0)
    var_0.run(var_1, var_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = 'l'
    none_type_0 = None
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(none_type_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is None
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.check_output_directory(str_0)
    var_1 = abstract_c_l_i_program_0.print_name_version()
    abstract_c_l_i_program_1 = module_0.AbstractCLIProgram()
    abstract_c_l_i_program_0.run(abstract_c_l_i_program_1)

@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = 'l'
    none_type_0 = None
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(none_type_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is None
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.get_text_file(str_0, abstract_c_l_i_program_0, abstract_c_l_i_program_0)
    var_1 = abstract_c_l_i_program_0.run(str_0)
    var_2 = abstract_c_l_i_program_0.run(str_0, str_0)
    var_1.run(var_1)

@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = 'Hshp'
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys == 'Hshp'
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.has_option(str_0)
    var_1 = abstract_c_l_i_program_0.check_input_file_or_directory(var_0)
    var_2 = abstract_c_l_i_program_0.check_input_file_or_directory(str_0)
    assert var_2 is False
    var_3 = var_1.__lt__(abstract_c_l_i_program_0)
    var_3.subtract(**var_1)

def test_case_33():
    str_0 = '.'
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys == '.'
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.check_output_directory(str_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = ''
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(str_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys == ''
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = module_3.findall(str_0, str_0)
    var_1 = abstract_c_l_i_program_0.get_text_file(str_0, abstract_c_l_i_program_0, var_0)
    var_2 = abstract_c_l_i_program_0.run(str_0)
    var_3 = abstract_c_l_i_program_0.run(str_0, str_0)
    var_4 = module_1.safe_unichr(var_2)
    var_5 = abstract_c_l_i_program_0.check_input_file_or_directory(var_4)
    var_6 = abstract_c_l_i_program_0.has_option(var_0)
    var_7 = abstract_c_l_i_program_0.run(var_4)
    var_2.print_success(var_1)

@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = 'list'
    none_type_0 = None
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(none_type_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is None
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.check_output_directory(str_0)
    abstract_c_l_i_program_0.get_text_file(str_0, abstract_c_l_i_program_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    str_0 = 'l'
    none_type_0 = None
    abstract_c_l_i_program_0 = module_0.AbstractCLIProgram(none_type_0)
    assert f'{type(abstract_c_l_i_program_0).__module__}.{type(abstract_c_l_i_program_0).__qualname__}' == 'aeneas.tools.abstract_cli_program.AbstractCLIProgram'
    assert f'{type(abstract_c_l_i_program_0.logger).__module__}.{type(abstract_c_l_i_program_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(abstract_c_l_i_program_0.logger) == 0
    assert f'{type(abstract_c_l_i_program_0.rconf).__module__}.{type(abstract_c_l_i_program_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert abstract_c_l_i_program_0.invoke == 'python -m aeneas.tools.abstract_cli_program'
    assert abstract_c_l_i_program_0.use_sys is None
    assert abstract_c_l_i_program_0.formal_arguments_raw == []
    assert abstract_c_l_i_program_0.formal_arguments == []
    assert abstract_c_l_i_program_0.actual_arguments == []
    assert abstract_c_l_i_program_0.log_file_path is None
    assert abstract_c_l_i_program_0.verbose is False
    assert abstract_c_l_i_program_0.very_verbose is False
    var_0 = abstract_c_l_i_program_0.check_output_directory(str_0)
    var_1 = abstract_c_l_i_program_0.get_text_file(str_0, abstract_c_l_i_program_0, var_0)
    var_2 = abstract_c_l_i_program_0.check_c_extensions(str_0)
    var_3 = abstract_c_l_i_program_0.run(str_0)
    var_4 = abstract_c_l_i_program_0.check_input_file_or_directory(str_0)
    var_2.zfill(var_0)