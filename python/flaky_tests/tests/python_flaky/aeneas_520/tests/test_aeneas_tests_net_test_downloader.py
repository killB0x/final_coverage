# Automatically generated by Pynguin.
import pytest
import aeneas.tests.net_test_downloader as module_0
import unittest.runner as module_1

def test_case_0():
    test_downloader_0 = module_0.TestDownloader()
    assert module_0.TestDownloader.URL_MALFORMED == 'foo'
    assert module_0.TestDownloader.URL_INVALID == 'aaaaaaaaaaa'
    assert module_0.TestDownloader.URL_VALID == 'https://www.youtube.com/watch?v=rU4a7AA8wM0'
    assert module_0.TestDownloader.OUTPUT_PATH_INVALID == '/foo/bar/baz'

@pytest.mark.xfail(strict=True)
def test_case_1():
    test_downloader_0 = module_0.TestDownloader()
    assert module_0.TestDownloader.URL_MALFORMED == 'foo'
    assert module_0.TestDownloader.URL_INVALID == 'aaaaaaaaaaa'
    assert module_0.TestDownloader.URL_VALID == 'https://www.youtube.com/watch?v=rU4a7AA8wM0'
    assert module_0.TestDownloader.OUTPUT_PATH_INVALID == '/foo/bar/baz'
    test_downloader_0.test_invalid_url()

@pytest.mark.xfail(strict=True)
def test_case_2():
    test_downloader_0 = module_0.TestDownloader()
    assert module_0.TestDownloader.URL_MALFORMED == 'foo'
    assert module_0.TestDownloader.URL_INVALID == 'aaaaaaaaaaa'
    assert module_0.TestDownloader.URL_VALID == 'https://www.youtube.com/watch?v=rU4a7AA8wM0'
    assert module_0.TestDownloader.OUTPUT_PATH_INVALID == '/foo/bar/baz'
    test_downloader_0.test_download_bad_format()

@pytest.mark.xfail(strict=True)
def test_case_3():
    test_downloader_0 = module_0.TestDownloader()
    assert module_0.TestDownloader.URL_MALFORMED == 'foo'
    assert module_0.TestDownloader.URL_INVALID == 'aaaaaaaaaaa'
    assert module_0.TestDownloader.URL_VALID == 'https://www.youtube.com/watch?v=rU4a7AA8wM0'
    assert module_0.TestDownloader.OUTPUT_PATH_INVALID == '/foo/bar/baz'
    test_downloader_1 = module_0.TestDownloader()
    test_downloader_0.test_download_simple()

@pytest.mark.xfail(strict=True)
def test_case_4():
    test_downloader_0 = module_0.TestDownloader()
    assert module_0.TestDownloader.URL_MALFORMED == 'foo'
    assert module_0.TestDownloader.URL_INVALID == 'aaaaaaaaaaa'
    assert module_0.TestDownloader.URL_VALID == 'https://www.youtube.com/watch?v=rU4a7AA8wM0'
    assert module_0.TestDownloader.OUTPUT_PATH_INVALID == '/foo/bar/baz'
    test_downloader_0.test_download_list()

@pytest.mark.xfail(strict=True)
def test_case_5():
    test_downloader_0 = module_0.TestDownloader()
    assert module_0.TestDownloader.URL_MALFORMED == 'foo'
    assert module_0.TestDownloader.URL_INVALID == 'aaaaaaaaaaa'
    assert module_0.TestDownloader.URL_VALID == 'https://www.youtube.com/watch?v=rU4a7AA8wM0'
    assert module_0.TestDownloader.OUTPUT_PATH_INVALID == '/foo/bar/baz'
    test_downloader_0.test_download_smallest()

@pytest.mark.xfail(strict=True)
def test_case_6():
    test_downloader_0 = module_0.TestDownloader()
    assert module_0.TestDownloader.URL_MALFORMED == 'foo'
    assert module_0.TestDownloader.URL_INVALID == 'aaaaaaaaaaa'
    assert module_0.TestDownloader.URL_VALID == 'https://www.youtube.com/watch?v=rU4a7AA8wM0'
    assert module_0.TestDownloader.OUTPUT_PATH_INVALID == '/foo/bar/baz'
    var_0 = module_1._WritelnDecorator(test_downloader_0)
    test_downloader_0.test_download_format()

@pytest.mark.xfail(strict=True)
def test_case_7():
    test_downloader_0 = module_0.TestDownloader()
    assert module_0.TestDownloader.URL_MALFORMED == 'foo'
    assert module_0.TestDownloader.URL_INVALID == 'aaaaaaaaaaa'
    assert module_0.TestDownloader.URL_VALID == 'https://www.youtube.com/watch?v=rU4a7AA8wM0'
    assert module_0.TestDownloader.OUTPUT_PATH_INVALID == '/foo/bar/baz'
    test_downloader_0.test_malformed_url()

@pytest.mark.xfail(strict=True)
def test_case_8():
    test_downloader_0 = module_0.TestDownloader()
    assert module_0.TestDownloader.URL_MALFORMED == 'foo'
    assert module_0.TestDownloader.URL_INVALID == 'aaaaaaaaaaa'
    assert module_0.TestDownloader.URL_VALID == 'https://www.youtube.com/watch?v=rU4a7AA8wM0'
    assert module_0.TestDownloader.OUTPUT_PATH_INVALID == '/foo/bar/baz'
    var_0 = test_downloader_0.countTestCases()
    test_downloader_0.test_download_format_smallest()

@pytest.mark.xfail(strict=True)
def test_case_9():
    test_downloader_0 = module_0.TestDownloader()
    assert module_0.TestDownloader.URL_MALFORMED == 'foo'
    assert module_0.TestDownloader.URL_INVALID == 'aaaaaaaaaaa'
    assert module_0.TestDownloader.URL_VALID == 'https://www.youtube.com/watch?v=rU4a7AA8wM0'
    assert module_0.TestDownloader.OUTPUT_PATH_INVALID == '/foo/bar/baz'
    test_downloader_0.test_invalid_output_file()