# Automatically generated by Pynguin.
import pytest
import aeneas.syncmap.smfgsubtitles as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    sync_map_format_generic_subtitles_0 = module_0.SyncMapFormatGenericSubtitles()
    assert f'{type(sync_map_format_generic_subtitles_0.logger).__module__}.{type(sync_map_format_generic_subtitles_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(sync_map_format_generic_subtitles_0.logger) == 0
    assert f'{type(sync_map_format_generic_subtitles_0.rconf).__module__}.{type(sync_map_format_generic_subtitles_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert sync_map_format_generic_subtitles_0.variant == 'subtitles'
    assert sync_map_format_generic_subtitles_0.parameters is None
    assert sync_map_format_generic_subtitles_0.header_string is None
    assert sync_map_format_generic_subtitles_0.header_might_not_have_trailing_blank_line is False
    assert sync_map_format_generic_subtitles_0.footer_string is None
    assert sync_map_format_generic_subtitles_0.cue_has_identifier is True
    assert sync_map_format_generic_subtitles_0.cue_has_optional_identifier is False
    assert sync_map_format_generic_subtitles_0.time_values_separator == ' --> '
    assert sync_map_format_generic_subtitles_0.line_break_symbol == '\n'
    assert module_0.SyncMapFormatGenericSubtitles.TAG == 'SyncMapFormatGenericSubtitles'
    assert module_0.SyncMapFormatGenericSubtitles.DEFAULT == 'subtitles'
    sync_map_format_generic_subtitles_0.format(sync_map_format_generic_subtitles_0)

def test_case_1():
    sync_map_format_generic_subtitles_0 = module_0.SyncMapFormatGenericSubtitles()
    assert f'{type(sync_map_format_generic_subtitles_0.logger).__module__}.{type(sync_map_format_generic_subtitles_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(sync_map_format_generic_subtitles_0.logger) == 0
    assert f'{type(sync_map_format_generic_subtitles_0.rconf).__module__}.{type(sync_map_format_generic_subtitles_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert sync_map_format_generic_subtitles_0.variant == 'subtitles'
    assert sync_map_format_generic_subtitles_0.parameters is None
    assert sync_map_format_generic_subtitles_0.header_string is None
    assert sync_map_format_generic_subtitles_0.header_might_not_have_trailing_blank_line is False
    assert sync_map_format_generic_subtitles_0.footer_string is None
    assert sync_map_format_generic_subtitles_0.cue_has_identifier is True
    assert sync_map_format_generic_subtitles_0.cue_has_optional_identifier is False
    assert sync_map_format_generic_subtitles_0.time_values_separator == ' --> '
    assert sync_map_format_generic_subtitles_0.line_break_symbol == '\n'
    assert module_0.SyncMapFormatGenericSubtitles.TAG == 'SyncMapFormatGenericSubtitles'
    assert module_0.SyncMapFormatGenericSubtitles.DEFAULT == 'subtitles'

@pytest.mark.xfail(strict=True)
def test_case_2():
    sync_map_format_generic_subtitles_0 = module_0.SyncMapFormatGenericSubtitles()
    assert f'{type(sync_map_format_generic_subtitles_0.logger).__module__}.{type(sync_map_format_generic_subtitles_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(sync_map_format_generic_subtitles_0.logger) == 0
    assert f'{type(sync_map_format_generic_subtitles_0.rconf).__module__}.{type(sync_map_format_generic_subtitles_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert sync_map_format_generic_subtitles_0.variant == 'subtitles'
    assert sync_map_format_generic_subtitles_0.parameters is None
    assert sync_map_format_generic_subtitles_0.header_string is None
    assert sync_map_format_generic_subtitles_0.header_might_not_have_trailing_blank_line is False
    assert sync_map_format_generic_subtitles_0.footer_string is None
    assert sync_map_format_generic_subtitles_0.cue_has_identifier is True
    assert sync_map_format_generic_subtitles_0.cue_has_optional_identifier is False
    assert sync_map_format_generic_subtitles_0.time_values_separator == ' --> '
    assert sync_map_format_generic_subtitles_0.line_break_symbol == '\n'
    assert module_0.SyncMapFormatGenericSubtitles.TAG == 'SyncMapFormatGenericSubtitles'
    assert module_0.SyncMapFormatGenericSubtitles.DEFAULT == 'subtitles'
    str_0 = '\n    Convert a given configuration string ::\n\n        key_1=value_1|key_2=value_2|...|key_n=value_n\n\n    into the corresponding dictionary ::,\n        dictionary[key_1] = value_1\n        d\tctionary[key_2] = value_2\n        ...\n        dictionary[key_n] = value_n\n\n    :param string string: the configuration string\n    :rtype: dict\n    '
    sync_map_format_generic_subtitles_0.parse(str_0, sync_map_format_generic_subtitles_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    sync_map_format_generic_subtitles_0 = module_0.SyncMapFormatGenericSubtitles()
    assert f'{type(sync_map_format_generic_subtitles_0.logger).__module__}.{type(sync_map_format_generic_subtitles_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(sync_map_format_generic_subtitles_0.logger) == 0
    assert f'{type(sync_map_format_generic_subtitles_0.rconf).__module__}.{type(sync_map_format_generic_subtitles_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert sync_map_format_generic_subtitles_0.variant == 'subtitles'
    assert sync_map_format_generic_subtitles_0.parameters is None
    assert sync_map_format_generic_subtitles_0.header_string is None
    assert sync_map_format_generic_subtitles_0.header_might_not_have_trailing_blank_line is False
    assert sync_map_format_generic_subtitles_0.footer_string is None
    assert sync_map_format_generic_subtitles_0.cue_has_identifier is True
    assert sync_map_format_generic_subtitles_0.cue_has_optional_identifier is False
    assert sync_map_format_generic_subtitles_0.time_values_separator == ' --> '
    assert sync_map_format_generic_subtitles_0.line_break_symbol == '\n'
    assert module_0.SyncMapFormatGenericSubtitles.TAG == 'SyncMapFormatGenericSubtitles'
    assert module_0.SyncMapFormatGenericSubtitles.DEFAULT == 'subtitles'
    str_0 = 'L1T0qxYLt'
    sync_map_format_generic_subtitles_0.parse(str_0, str_0)

def test_case_4():
    sync_map_format_generic_subtitles_0 = module_0.SyncMapFormatGenericSubtitles()
    assert f'{type(sync_map_format_generic_subtitles_0.logger).__module__}.{type(sync_map_format_generic_subtitles_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(sync_map_format_generic_subtitles_0.logger) == 0
    assert f'{type(sync_map_format_generic_subtitles_0.rconf).__module__}.{type(sync_map_format_generic_subtitles_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert sync_map_format_generic_subtitles_0.variant == 'subtitles'
    assert sync_map_format_generic_subtitles_0.parameters is None
    assert sync_map_format_generic_subtitles_0.header_string is None
    assert sync_map_format_generic_subtitles_0.header_might_not_have_trailing_blank_line is False
    assert sync_map_format_generic_subtitles_0.footer_string is None
    assert sync_map_format_generic_subtitles_0.cue_has_identifier is True
    assert sync_map_format_generic_subtitles_0.cue_has_optional_identifier is False
    assert sync_map_format_generic_subtitles_0.time_values_separator == ' --> '
    assert sync_map_format_generic_subtitles_0.line_break_symbol == '\n'
    assert module_0.SyncMapFormatGenericSubtitles.TAG == 'SyncMapFormatGenericSubtitles'
    assert module_0.SyncMapFormatGenericSubtitles.DEFAULT == 'subtitles'
    str_0 = ''
    var_0 = sync_map_format_generic_subtitles_0.parse(str_0, sync_map_format_generic_subtitles_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    sync_map_format_generic_subtitles_0 = module_0.SyncMapFormatGenericSubtitles()
    assert f'{type(sync_map_format_generic_subtitles_0.logger).__module__}.{type(sync_map_format_generic_subtitles_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(sync_map_format_generic_subtitles_0.logger) == 0
    assert f'{type(sync_map_format_generic_subtitles_0.rconf).__module__}.{type(sync_map_format_generic_subtitles_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert sync_map_format_generic_subtitles_0.variant == 'subtitles'
    assert sync_map_format_generic_subtitles_0.parameters is None
    assert sync_map_format_generic_subtitles_0.header_string is None
    assert sync_map_format_generic_subtitles_0.header_might_not_have_trailing_blank_line is False
    assert sync_map_format_generic_subtitles_0.footer_string is None
    assert sync_map_format_generic_subtitles_0.cue_has_identifier is True
    assert sync_map_format_generic_subtitles_0.cue_has_optional_identifier is False
    assert sync_map_format_generic_subtitles_0.time_values_separator == ' --> '
    assert sync_map_format_generic_subtitles_0.line_break_symbol == '\n'
    assert module_0.SyncMapFormatGenericSubtitles.TAG == 'SyncMapFormatGenericSubtitles'
    assert module_0.SyncMapFormatGenericSubtitles.DEFAULT == 'subtitles'
    str_0 = '\n        Fix fragments with zero length,\n        enlarging them to have length ``duration``,\n        reclaiming the difference from the next fragment(s),\n        or moving the next fragment(s) forward.\n\n        This function assumes the fragments to be adjacent.\n\n        :param duration: set the zero length fragments to have this duration\n        :type  duration: :class:`~aeneas.exacttiming.TimeValue`\n        :param int min_index: examine fragments with index greater than or equal to this index (i.e., included)\n        :param int max_index: examine fragments with index smaller than this index (i.e., excluded)\n        :raises ValueError: if ``min_index`` is negative or ``max_index``\n                            is bigger than the current number of fragments\n        '
    sync_map_format_generic_subtitles_0.parse(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    sync_map_format_generic_subtitles_0 = module_0.SyncMapFormatGenericSubtitles()
    assert f'{type(sync_map_format_generic_subtitles_0.logger).__module__}.{type(sync_map_format_generic_subtitles_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(sync_map_format_generic_subtitles_0.logger) == 0
    assert f'{type(sync_map_format_generic_subtitles_0.rconf).__module__}.{type(sync_map_format_generic_subtitles_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert sync_map_format_generic_subtitles_0.variant == 'subtitles'
    assert sync_map_format_generic_subtitles_0.parameters is None
    assert sync_map_format_generic_subtitles_0.header_string is None
    assert sync_map_format_generic_subtitles_0.header_might_not_have_trailing_blank_line is False
    assert sync_map_format_generic_subtitles_0.footer_string is None
    assert sync_map_format_generic_subtitles_0.cue_has_identifier is True
    assert sync_map_format_generic_subtitles_0.cue_has_optional_identifier is False
    assert sync_map_format_generic_subtitles_0.time_values_separator == ' --> '
    assert sync_map_format_generic_subtitles_0.line_break_symbol == '\n'
    assert module_0.SyncMapFormatGenericSubtitles.TAG == 'SyncMapFormatGenericSubtitles'
    assert module_0.SyncMapFormatGenericSubtitles.DEFAULT == 'subtitles'
    str_0 = '\x0b\n lW/1$\rm1cVYIvTG'
    sync_map_format_generic_subtitles_0.parse(str_0, sync_map_format_generic_subtitles_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    sync_map_format_generic_subtitles_0 = module_0.SyncMapFormatGenericSubtitles()
    assert f'{type(sync_map_format_generic_subtitles_0.logger).__module__}.{type(sync_map_format_generic_subtitles_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(sync_map_format_generic_subtitles_0.logger) == 0
    assert f'{type(sync_map_format_generic_subtitles_0.rconf).__module__}.{type(sync_map_format_generic_subtitles_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert sync_map_format_generic_subtitles_0.variant == 'subtitles'
    assert sync_map_format_generic_subtitles_0.parameters is None
    assert sync_map_format_generic_subtitles_0.header_string is None
    assert sync_map_format_generic_subtitles_0.header_might_not_have_trailing_blank_line is False
    assert sync_map_format_generic_subtitles_0.footer_string is None
    assert sync_map_format_generic_subtitles_0.cue_has_identifier is True
    assert sync_map_format_generic_subtitles_0.cue_has_optional_identifier is False
    assert sync_map_format_generic_subtitles_0.time_values_separator == ' --> '
    assert sync_map_format_generic_subtitles_0.line_break_symbol == '\n'
    assert module_0.SyncMapFormatGenericSubtitles.TAG == 'SyncMapFormatGenericSubtitles'
    assert module_0.SyncMapFormatGenericSubtitles.DEFAULT == 'subtitles'
    str_0 = '|\r~]Fr3\n\n\r'
    sync_map_format_generic_subtitles_0.parse(str_0, str_0)

def test_case_8():
    sync_map_format_generic_subtitles_0 = module_0.SyncMapFormatGenericSubtitles()
    assert f'{type(sync_map_format_generic_subtitles_0.logger).__module__}.{type(sync_map_format_generic_subtitles_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(sync_map_format_generic_subtitles_0.logger) == 0
    assert f'{type(sync_map_format_generic_subtitles_0.rconf).__module__}.{type(sync_map_format_generic_subtitles_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert sync_map_format_generic_subtitles_0.variant == 'subtitles'
    assert sync_map_format_generic_subtitles_0.parameters is None
    assert sync_map_format_generic_subtitles_0.header_string is None
    assert sync_map_format_generic_subtitles_0.header_might_not_have_trailing_blank_line is False
    assert sync_map_format_generic_subtitles_0.footer_string is None
    assert sync_map_format_generic_subtitles_0.cue_has_identifier is True
    assert sync_map_format_generic_subtitles_0.cue_has_optional_identifier is False
    assert sync_map_format_generic_subtitles_0.time_values_separator == ' --> '
    assert sync_map_format_generic_subtitles_0.line_break_symbol == '\n'
    assert module_0.SyncMapFormatGenericSubtitles.TAG == 'SyncMapFormatGenericSubtitles'
    assert module_0.SyncMapFormatGenericSubtitles.DEFAULT == 'subtitles'
    str_0 = '\n\x0b '
    var_0 = sync_map_format_generic_subtitles_0.parse(str_0, str_0)