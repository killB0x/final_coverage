# Automatically generated by Pynguin.
import pytest
import aeneas.runtimeconfiguration as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    runtime_configuration_0 = module_0.RuntimeConfiguration()
    assert f'{type(runtime_configuration_0.data).__module__}.{type(runtime_configuration_0.data).__qualname__}' == 'builtins.dict'
    assert len(runtime_configuration_0.data) == 65
    assert f'{type(runtime_configuration_0.types).__module__}.{type(runtime_configuration_0.types).__qualname__}' == 'builtins.dict'
    assert len(runtime_configuration_0.types) == 65
    assert runtime_configuration_0.aliases == {}
    assert runtime_configuration_0.desc == {'aba_nonspeech_tolerance': 'adjust nonspeech tolerance, in s', 'aba_no_zero_duration': 'add this shift to zero length fragments, in s', 'allow_unlisted_languages': 'if True, allow languages not listed', 'c_extensions': 'run C/C++ extensions', 'cdtw': 'run C extension cdtw', 'cew': 'run C extension cew', 'cfw': 'run C++ extension cfw', 'cmfcc': 'run C extension cmfcc', 'cew_subprocess_enabled': 'run cew in separate subprocess', 'cew_subprocess_path': 'path to python executable', 'dtw_algorithm': 'DTW algorithm (stripe, exact)', 'dtw_margin': 'DTW margin, in s', 'downloader_sleep': 'sleep between Downloader calls, in s', 'downloader_retry_attempts': 'number of retries for a failed Downloader call', 'ffmpeg_path': 'path to ffmpeg executable', 'ffmpeg_sample_rate': 'ffmpeg sample rate', 'ffprobe_path': 'path to ffprobe executable', 'job_max_tasks': 'max number of tasks per job (0 to disable)', 'mfcc_filters': 'number of MFCC filters', 'mfcc_size': 'number of MFCC', 'mfcc_fft_order': 'FFT order for computing MFCC', 'mfcc_lower_frequency': 'MFCC lower frequency cutoff, in Hz', 'mfcc_upper_frequency': 'MFCC upper frequency cutoff, in Hz', 'mfcc_emphasis_factor': 'MFCC emphasis factor', 'mfcc_mask_nonspeech': 'if True, mask MFCC nonspeech frames', 'mfcc_window_length': 'MFCC window length, in s', 'mfcc_window_shift': 'MFCC window shift, in s', 'mfcc_mask_extend_speech_after': 'when masking MFCC, extend speech interval after, in frames', 'mfcc_mask_extend_speech_before': 'when masking MFCC, extend speech interval before, in frames', 'mfcc_mask_log_energy_threshold': 'when masking MFCC, log energy threshold for speech', 'mfcc_mask_min_nonspeech_length': 'when masking MFCC, min nonspeech interval length, in frames', 'dtw_margin_l1': 'level 1 (para) DTW margin, in s', 'mfcc_mask_nonspeech_l1': 'if True, mask MFCC nonspeech frames on level 1 (para)', 'mfcc_window_length_l1': 'level 1 (para) MFCC window length, in s', 'mfcc_window_shift_l1': 'level 1 (para) MFCC window shift, in s', 'dtw_margin_l2': 'level 2 (sent) DTW margin, in s', 'mfcc_mask_nonspeech_l2': 'if True, mask MFCC nonspeech frames on level 2 (sent)', 'mfcc_window_length_l2': 'level 2 (sent) MFCC window length, in s', 'mfcc_window_shift_l2': 'level 2 (sent) MFCC window shift, in s', 'dtw_margin_l3': 'level 3 (word) DTW margin, in s', 'mfcc_mask_nonspeech_l3': 'if True, mask MFCC nonspeech frames on level 3 (word)', 'mfcc_window_length_l3': 'level 3 (word) MFCC window length, in s', 'mfcc_window_shift_l3': 'level 3 (word) MFCC window shift, in s', 'nuance_tts_api_id': 'Nuance Developer API ID', 'nuance_tts_api_key': 'Nuance Developer API Key', 'safety_checks': 'if True, always perform safety checks', 'task_max_audio_length': 'max length of single audio file, in s (0 to disable)', 'task_max_text_length': 'max length of single text file, in fragments (0 to disable)', 'tmp_path': 'path to the temporary dir', 'tts': 'TTS wrapper to use', 'tts_path': 'path of the TTS executable/wrapper', 'tts_voice_code': 'overrides TTS voice code selected by language with this value', 'tts_cache': 'if True, cache synthesized audio files', 'tts_api_sleep': 'sleep between TTS API calls, in s', 'tts_api_retry_attempts': 'number of retries for a failed TTS API call', 'tts_l1': 'TTS wrapper to use at level 1 (para)', 'tts_path_l1': 'path to level 1 (para) TTS executable/wrapper', 'tts_l2': 'TTS wrapper to use at level 2 (sent)', 'tts_path_l2': 'path to level 2 (sent) TTS executable/wrapper', 'tts_l3': 'TTS wrapper to use at level 3 (word)', 'tts_path_l3': 'path to level 3 (word) TTS executable/wrapper', 'vad_extend_speech_after': 'extend speech interval after, in s', 'vad_extend_speech_before': 'extend speech interval before, in s', 'vad_log_energy_threshold': 'log energy threshold for speech', 'vad_min_nonspeech_length': 'min nonspeech interval length, in s'}
    assert module_0.RuntimeConfiguration.ABA_NONSPEECH_TOLERANCE == 'aba_nonspeech_tolerance'
    assert module_0.RuntimeConfiguration.ABA_NO_ZERO_DURATION == 'aba_no_zero_duration'
    assert module_0.RuntimeConfiguration.ALLOW_UNLISTED_LANGUAGES == 'allow_unlisted_languages'
    assert module_0.RuntimeConfiguration.C_EXTENSIONS == 'c_extensions'
    assert module_0.RuntimeConfiguration.CDTW == 'cdtw'
    assert module_0.RuntimeConfiguration.CEW == 'cew'
    assert module_0.RuntimeConfiguration.CFW == 'cfw'
    assert module_0.RuntimeConfiguration.CEW_SUBPROCESS_ENABLED == 'cew_subprocess_enabled'
    assert module_0.RuntimeConfiguration.CEW_SUBPROCESS_PATH == 'cew_subprocess_path'
    assert module_0.RuntimeConfiguration.CMFCC == 'cmfcc'
    assert module_0.RuntimeConfiguration.DOWNLOADER_SLEEP == 'downloader_sleep'
    assert module_0.RuntimeConfiguration.DOWNLOADER_RETRY_ATTEMPTS == 'downloader_retry_attempts'
    assert module_0.RuntimeConfiguration.DTW_ALGORITHM == 'dtw_algorithm'
    assert module_0.RuntimeConfiguration.DTW_MARGIN == 'dtw_margin'
    assert module_0.RuntimeConfiguration.DTW_MARGIN_L1 == 'dtw_margin_l1'
    assert module_0.RuntimeConfiguration.DTW_MARGIN_L2 == 'dtw_margin_l2'
    assert module_0.RuntimeConfiguration.DTW_MARGIN_L3 == 'dtw_margin_l3'
    assert module_0.RuntimeConfiguration.FFMPEG_PATH == 'ffmpeg_path'
    assert module_0.RuntimeConfiguration.FFMPEG_SAMPLE_RATE == 'ffmpeg_sample_rate'
    assert module_0.RuntimeConfiguration.FFPROBE_PATH == 'ffprobe_path'
    assert module_0.RuntimeConfiguration.JOB_MAX_TASKS == 'job_max_tasks'
    assert module_0.RuntimeConfiguration.MFCC_FILTERS == 'mfcc_filters'
    assert module_0.RuntimeConfiguration.MFCC_SIZE == 'mfcc_size'
    assert module_0.RuntimeConfiguration.MFCC_FFT_ORDER == 'mfcc_fft_order'
    assert module_0.RuntimeConfiguration.MFCC_LOWER_FREQUENCY == 'mfcc_lower_frequency'
    assert module_0.RuntimeConfiguration.MFCC_UPPER_FREQUENCY == 'mfcc_upper_frequency'
    assert module_0.RuntimeConfiguration.MFCC_EMPHASIS_FACTOR == 'mfcc_emphasis_factor'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH == 'mfcc_mask_nonspeech'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH == 'mfcc_window_length'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT == 'mfcc_window_shift'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH_L1 == 'mfcc_mask_nonspeech_l1'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH_L1 == 'mfcc_window_length_l1'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT_L1 == 'mfcc_window_shift_l1'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH_L2 == 'mfcc_mask_nonspeech_l2'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH_L2 == 'mfcc_window_length_l2'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT_L2 == 'mfcc_window_shift_l2'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH_L3 == 'mfcc_mask_nonspeech_l3'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH_L3 == 'mfcc_window_length_l3'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT_L3 == 'mfcc_window_shift_l3'
    assert module_0.RuntimeConfiguration.MFCC_GRANULARITY_MAP == {1: ('dtw_margin_l1', 'mfcc_mask_nonspeech_l1', 'mfcc_window_length_l1', 'mfcc_window_shift_l1'), 2: ('dtw_margin_l2', 'mfcc_mask_nonspeech_l2', 'mfcc_window_length_l2', 'mfcc_window_shift_l2'), 3: ('dtw_margin_l3', 'mfcc_mask_nonspeech_l3', 'mfcc_window_length_l3', 'mfcc_window_shift_l3')}
    assert module_0.RuntimeConfiguration.MFCC_MASK_EXTEND_SPEECH_INTERVAL_AFTER == 'mfcc_mask_extend_speech_after'
    assert module_0.RuntimeConfiguration.MFCC_MASK_EXTEND_SPEECH_INTERVAL_BEFORE == 'mfcc_mask_extend_speech_before'
    assert module_0.RuntimeConfiguration.MFCC_MASK_LOG_ENERGY_THRESHOLD == 'mfcc_mask_log_energy_threshold'
    assert module_0.RuntimeConfiguration.MFCC_MASK_MIN_NONSPEECH_LENGTH == 'mfcc_mask_min_nonspeech_length'
    assert module_0.RuntimeConfiguration.NUANCE_TTS_API_ID == 'nuance_tts_api_id'
    assert module_0.RuntimeConfiguration.NUANCE_TTS_API_KEY == 'nuance_tts_api_key'
    assert module_0.RuntimeConfiguration.SAFETY_CHECKS == 'safety_checks'
    assert module_0.RuntimeConfiguration.TASK_MAX_AUDIO_LENGTH == 'task_max_audio_length'
    assert module_0.RuntimeConfiguration.TASK_MAX_TEXT_LENGTH == 'task_max_text_length'
    assert module_0.RuntimeConfiguration.TMP_PATH == 'tmp_path'
    assert module_0.RuntimeConfiguration.TTS == 'tts'
    assert module_0.RuntimeConfiguration.TTS_PATH == 'tts_path'
    assert module_0.RuntimeConfiguration.TTS_VOICE_CODE == 'tts_voice_code'
    assert module_0.RuntimeConfiguration.TTS_CACHE == 'tts_cache'
    assert module_0.RuntimeConfiguration.TTS_API_SLEEP == 'tts_api_sleep'
    assert module_0.RuntimeConfiguration.TTS_API_RETRY_ATTEMPTS == 'tts_api_retry_attempts'
    assert module_0.RuntimeConfiguration.TTS_L1 == 'tts_l1'
    assert module_0.RuntimeConfiguration.TTS_PATH_L1 == 'tts_path_l1'
    assert module_0.RuntimeConfiguration.TTS_L2 == 'tts_l2'
    assert module_0.RuntimeConfiguration.TTS_PATH_L2 == 'tts_path_l2'
    assert module_0.RuntimeConfiguration.TTS_L3 == 'tts_l3'
    assert module_0.RuntimeConfiguration.TTS_PATH_L3 == 'tts_path_l3'
    assert module_0.RuntimeConfiguration.TTS_GRANULARITY_MAP == {1: ('tts_l1', 'tts_path_l1'), 2: ('tts_l2', 'tts_path_l2'), 3: ('tts_l3', 'tts_path_l3')}
    assert module_0.RuntimeConfiguration.VAD_EXTEND_SPEECH_INTERVAL_AFTER == 'vad_extend_speech_after'
    assert module_0.RuntimeConfiguration.VAD_EXTEND_SPEECH_INTERVAL_BEFORE == 'vad_extend_speech_before'
    assert module_0.RuntimeConfiguration.VAD_LOG_ENERGY_THRESHOLD == 'vad_log_energy_threshold'
    assert module_0.RuntimeConfiguration.VAD_MIN_NONSPEECH_LENGTH == 'vad_min_nonspeech_length'
    assert len(module_0.RuntimeConfiguration.FIELDS) == 65
    assert module_0.RuntimeConfiguration.TAG == 'RuntimeConfiguration'
    assert f'{type(module_0.RuntimeConfiguration.safety_checks).__module__}.{type(module_0.RuntimeConfiguration.safety_checks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.sample_rate).__module__}.{type(module_0.RuntimeConfiguration.sample_rate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.dtw_margin).__module__}.{type(module_0.RuntimeConfiguration.dtw_margin).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.mmn).__module__}.{type(module_0.RuntimeConfiguration.mmn).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.mws).__module__}.{type(module_0.RuntimeConfiguration.mws).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.mwl).__module__}.{type(module_0.RuntimeConfiguration.mwl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.tts).__module__}.{type(module_0.RuntimeConfiguration.tts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.tts_path).__module__}.{type(module_0.RuntimeConfiguration.tts_path).__qualname__}' == 'builtins.property'
    var_0 = runtime_configuration_0.__unicode__()
    assert var_0 == "aba_no_zero_duration: '0.001'\naba_nonspeech_tolerance: '0.080'\nallow_unlisted_languages: 'False'\nc_extensions: 'True'\ncdtw: 'True'\ncew: 'True'\ncew_subprocess_enabled: 'False'\ncew_subprocess_path: 'python'\ncfw: 'True'\ncmfcc: 'True'\ndownloader_retry_attempts: '5'\ndownloader_sleep: '1.000'\ndtw_algorithm: 'stripe'\ndtw_margin: '60.000'\ndtw_margin_l1: '60.000'\ndtw_margin_l2: '30.000'\ndtw_margin_l3: '10.000'\nffmpeg_path: 'ffmpeg'\nffmpeg_sample_rate: '16000'\nffprobe_path: 'ffprobe'\njob_max_tasks: '0'\nmfcc_emphasis_factor: '0.97'\nmfcc_fft_order: '512'\nmfcc_filters: '40'\nmfcc_lower_frequency: '133.3333'\nmfcc_mask_extend_speech_after: '0'\nmfcc_mask_extend_speech_before: '0'\nmfcc_mask_log_energy_threshold: '0.699'\nmfcc_mask_min_nonspeech_length: '1'\nmfcc_mask_nonspeech: 'False'\nmfcc_mask_nonspeech_l1: 'False'\nmfcc_mask_nonspeech_l2: 'False'\nmfcc_mask_nonspeech_l3: 'False'\nmfcc_size: '13'\nmfcc_upper_frequency: '6855.4976'\nmfcc_window_length: '0.100'\nmfcc_window_length_l1: '0.100'\nmfcc_window_length_l2: '0.050'\nmfcc_window_length_l3: '0.020'\nmfcc_window_shift: '0.040'\nmfcc_window_shift_l1: '0.040'\nmfcc_window_shift_l2: '0.020'\nmfcc_window_shift_l3: '0.005'\nnuance_tts_api_id: 'None'\nnuance_tts_api_key: 'None'\nsafety_checks: 'True'\ntask_max_audio_length: '0'\ntask_max_text_length: '0'\ntmp_path: 'None'\ntts: 'espeak'\ntts_api_retry_attempts: '5'\ntts_api_sleep: '1.000'\ntts_cache: 'False'\ntts_l1: 'espeak'\ntts_l2: 'espeak'\ntts_l3: 'espeak'\ntts_path: 'None'\ntts_path_l1: 'None'\ntts_path_l2: 'None'\ntts_path_l3: 'None'\ntts_voice_code: 'None'\nvad_extend_speech_after: '0.000'\nvad_extend_speech_before: '0.000'\nvad_log_energy_threshold: '0.699'\nvad_min_nonspeech_length: '0.200'"
    bool_0 = True
    var_1 = runtime_configuration_0.set_granularity(bool_0)
    module_0.RuntimeConfiguration(runtime_configuration_0)

def test_case_1():
    runtime_configuration_0 = module_0.RuntimeConfiguration()
    assert f'{type(runtime_configuration_0.data).__module__}.{type(runtime_configuration_0.data).__qualname__}' == 'builtins.dict'
    assert len(runtime_configuration_0.data) == 65
    assert f'{type(runtime_configuration_0.types).__module__}.{type(runtime_configuration_0.types).__qualname__}' == 'builtins.dict'
    assert len(runtime_configuration_0.types) == 65
    assert runtime_configuration_0.aliases == {}
    assert runtime_configuration_0.desc == {'aba_nonspeech_tolerance': 'adjust nonspeech tolerance, in s', 'aba_no_zero_duration': 'add this shift to zero length fragments, in s', 'allow_unlisted_languages': 'if True, allow languages not listed', 'c_extensions': 'run C/C++ extensions', 'cdtw': 'run C extension cdtw', 'cew': 'run C extension cew', 'cfw': 'run C++ extension cfw', 'cmfcc': 'run C extension cmfcc', 'cew_subprocess_enabled': 'run cew in separate subprocess', 'cew_subprocess_path': 'path to python executable', 'dtw_algorithm': 'DTW algorithm (stripe, exact)', 'dtw_margin': 'DTW margin, in s', 'downloader_sleep': 'sleep between Downloader calls, in s', 'downloader_retry_attempts': 'number of retries for a failed Downloader call', 'ffmpeg_path': 'path to ffmpeg executable', 'ffmpeg_sample_rate': 'ffmpeg sample rate', 'ffprobe_path': 'path to ffprobe executable', 'job_max_tasks': 'max number of tasks per job (0 to disable)', 'mfcc_filters': 'number of MFCC filters', 'mfcc_size': 'number of MFCC', 'mfcc_fft_order': 'FFT order for computing MFCC', 'mfcc_lower_frequency': 'MFCC lower frequency cutoff, in Hz', 'mfcc_upper_frequency': 'MFCC upper frequency cutoff, in Hz', 'mfcc_emphasis_factor': 'MFCC emphasis factor', 'mfcc_mask_nonspeech': 'if True, mask MFCC nonspeech frames', 'mfcc_window_length': 'MFCC window length, in s', 'mfcc_window_shift': 'MFCC window shift, in s', 'mfcc_mask_extend_speech_after': 'when masking MFCC, extend speech interval after, in frames', 'mfcc_mask_extend_speech_before': 'when masking MFCC, extend speech interval before, in frames', 'mfcc_mask_log_energy_threshold': 'when masking MFCC, log energy threshold for speech', 'mfcc_mask_min_nonspeech_length': 'when masking MFCC, min nonspeech interval length, in frames', 'dtw_margin_l1': 'level 1 (para) DTW margin, in s', 'mfcc_mask_nonspeech_l1': 'if True, mask MFCC nonspeech frames on level 1 (para)', 'mfcc_window_length_l1': 'level 1 (para) MFCC window length, in s', 'mfcc_window_shift_l1': 'level 1 (para) MFCC window shift, in s', 'dtw_margin_l2': 'level 2 (sent) DTW margin, in s', 'mfcc_mask_nonspeech_l2': 'if True, mask MFCC nonspeech frames on level 2 (sent)', 'mfcc_window_length_l2': 'level 2 (sent) MFCC window length, in s', 'mfcc_window_shift_l2': 'level 2 (sent) MFCC window shift, in s', 'dtw_margin_l3': 'level 3 (word) DTW margin, in s', 'mfcc_mask_nonspeech_l3': 'if True, mask MFCC nonspeech frames on level 3 (word)', 'mfcc_window_length_l3': 'level 3 (word) MFCC window length, in s', 'mfcc_window_shift_l3': 'level 3 (word) MFCC window shift, in s', 'nuance_tts_api_id': 'Nuance Developer API ID', 'nuance_tts_api_key': 'Nuance Developer API Key', 'safety_checks': 'if True, always perform safety checks', 'task_max_audio_length': 'max length of single audio file, in s (0 to disable)', 'task_max_text_length': 'max length of single text file, in fragments (0 to disable)', 'tmp_path': 'path to the temporary dir', 'tts': 'TTS wrapper to use', 'tts_path': 'path of the TTS executable/wrapper', 'tts_voice_code': 'overrides TTS voice code selected by language with this value', 'tts_cache': 'if True, cache synthesized audio files', 'tts_api_sleep': 'sleep between TTS API calls, in s', 'tts_api_retry_attempts': 'number of retries for a failed TTS API call', 'tts_l1': 'TTS wrapper to use at level 1 (para)', 'tts_path_l1': 'path to level 1 (para) TTS executable/wrapper', 'tts_l2': 'TTS wrapper to use at level 2 (sent)', 'tts_path_l2': 'path to level 2 (sent) TTS executable/wrapper', 'tts_l3': 'TTS wrapper to use at level 3 (word)', 'tts_path_l3': 'path to level 3 (word) TTS executable/wrapper', 'vad_extend_speech_after': 'extend speech interval after, in s', 'vad_extend_speech_before': 'extend speech interval before, in s', 'vad_log_energy_threshold': 'log energy threshold for speech', 'vad_min_nonspeech_length': 'min nonspeech interval length, in s'}
    assert module_0.RuntimeConfiguration.ABA_NONSPEECH_TOLERANCE == 'aba_nonspeech_tolerance'
    assert module_0.RuntimeConfiguration.ABA_NO_ZERO_DURATION == 'aba_no_zero_duration'
    assert module_0.RuntimeConfiguration.ALLOW_UNLISTED_LANGUAGES == 'allow_unlisted_languages'
    assert module_0.RuntimeConfiguration.C_EXTENSIONS == 'c_extensions'
    assert module_0.RuntimeConfiguration.CDTW == 'cdtw'
    assert module_0.RuntimeConfiguration.CEW == 'cew'
    assert module_0.RuntimeConfiguration.CFW == 'cfw'
    assert module_0.RuntimeConfiguration.CEW_SUBPROCESS_ENABLED == 'cew_subprocess_enabled'
    assert module_0.RuntimeConfiguration.CEW_SUBPROCESS_PATH == 'cew_subprocess_path'
    assert module_0.RuntimeConfiguration.CMFCC == 'cmfcc'
    assert module_0.RuntimeConfiguration.DOWNLOADER_SLEEP == 'downloader_sleep'
    assert module_0.RuntimeConfiguration.DOWNLOADER_RETRY_ATTEMPTS == 'downloader_retry_attempts'
    assert module_0.RuntimeConfiguration.DTW_ALGORITHM == 'dtw_algorithm'
    assert module_0.RuntimeConfiguration.DTW_MARGIN == 'dtw_margin'
    assert module_0.RuntimeConfiguration.DTW_MARGIN_L1 == 'dtw_margin_l1'
    assert module_0.RuntimeConfiguration.DTW_MARGIN_L2 == 'dtw_margin_l2'
    assert module_0.RuntimeConfiguration.DTW_MARGIN_L3 == 'dtw_margin_l3'
    assert module_0.RuntimeConfiguration.FFMPEG_PATH == 'ffmpeg_path'
    assert module_0.RuntimeConfiguration.FFMPEG_SAMPLE_RATE == 'ffmpeg_sample_rate'
    assert module_0.RuntimeConfiguration.FFPROBE_PATH == 'ffprobe_path'
    assert module_0.RuntimeConfiguration.JOB_MAX_TASKS == 'job_max_tasks'
    assert module_0.RuntimeConfiguration.MFCC_FILTERS == 'mfcc_filters'
    assert module_0.RuntimeConfiguration.MFCC_SIZE == 'mfcc_size'
    assert module_0.RuntimeConfiguration.MFCC_FFT_ORDER == 'mfcc_fft_order'
    assert module_0.RuntimeConfiguration.MFCC_LOWER_FREQUENCY == 'mfcc_lower_frequency'
    assert module_0.RuntimeConfiguration.MFCC_UPPER_FREQUENCY == 'mfcc_upper_frequency'
    assert module_0.RuntimeConfiguration.MFCC_EMPHASIS_FACTOR == 'mfcc_emphasis_factor'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH == 'mfcc_mask_nonspeech'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH == 'mfcc_window_length'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT == 'mfcc_window_shift'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH_L1 == 'mfcc_mask_nonspeech_l1'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH_L1 == 'mfcc_window_length_l1'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT_L1 == 'mfcc_window_shift_l1'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH_L2 == 'mfcc_mask_nonspeech_l2'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH_L2 == 'mfcc_window_length_l2'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT_L2 == 'mfcc_window_shift_l2'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH_L3 == 'mfcc_mask_nonspeech_l3'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH_L3 == 'mfcc_window_length_l3'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT_L3 == 'mfcc_window_shift_l3'
    assert module_0.RuntimeConfiguration.MFCC_GRANULARITY_MAP == {1: ('dtw_margin_l1', 'mfcc_mask_nonspeech_l1', 'mfcc_window_length_l1', 'mfcc_window_shift_l1'), 2: ('dtw_margin_l2', 'mfcc_mask_nonspeech_l2', 'mfcc_window_length_l2', 'mfcc_window_shift_l2'), 3: ('dtw_margin_l3', 'mfcc_mask_nonspeech_l3', 'mfcc_window_length_l3', 'mfcc_window_shift_l3')}
    assert module_0.RuntimeConfiguration.MFCC_MASK_EXTEND_SPEECH_INTERVAL_AFTER == 'mfcc_mask_extend_speech_after'
    assert module_0.RuntimeConfiguration.MFCC_MASK_EXTEND_SPEECH_INTERVAL_BEFORE == 'mfcc_mask_extend_speech_before'
    assert module_0.RuntimeConfiguration.MFCC_MASK_LOG_ENERGY_THRESHOLD == 'mfcc_mask_log_energy_threshold'
    assert module_0.RuntimeConfiguration.MFCC_MASK_MIN_NONSPEECH_LENGTH == 'mfcc_mask_min_nonspeech_length'
    assert module_0.RuntimeConfiguration.NUANCE_TTS_API_ID == 'nuance_tts_api_id'
    assert module_0.RuntimeConfiguration.NUANCE_TTS_API_KEY == 'nuance_tts_api_key'
    assert module_0.RuntimeConfiguration.SAFETY_CHECKS == 'safety_checks'
    assert module_0.RuntimeConfiguration.TASK_MAX_AUDIO_LENGTH == 'task_max_audio_length'
    assert module_0.RuntimeConfiguration.TASK_MAX_TEXT_LENGTH == 'task_max_text_length'
    assert module_0.RuntimeConfiguration.TMP_PATH == 'tmp_path'
    assert module_0.RuntimeConfiguration.TTS == 'tts'
    assert module_0.RuntimeConfiguration.TTS_PATH == 'tts_path'
    assert module_0.RuntimeConfiguration.TTS_VOICE_CODE == 'tts_voice_code'
    assert module_0.RuntimeConfiguration.TTS_CACHE == 'tts_cache'
    assert module_0.RuntimeConfiguration.TTS_API_SLEEP == 'tts_api_sleep'
    assert module_0.RuntimeConfiguration.TTS_API_RETRY_ATTEMPTS == 'tts_api_retry_attempts'
    assert module_0.RuntimeConfiguration.TTS_L1 == 'tts_l1'
    assert module_0.RuntimeConfiguration.TTS_PATH_L1 == 'tts_path_l1'
    assert module_0.RuntimeConfiguration.TTS_L2 == 'tts_l2'
    assert module_0.RuntimeConfiguration.TTS_PATH_L2 == 'tts_path_l2'
    assert module_0.RuntimeConfiguration.TTS_L3 == 'tts_l3'
    assert module_0.RuntimeConfiguration.TTS_PATH_L3 == 'tts_path_l3'
    assert module_0.RuntimeConfiguration.TTS_GRANULARITY_MAP == {1: ('tts_l1', 'tts_path_l1'), 2: ('tts_l2', 'tts_path_l2'), 3: ('tts_l3', 'tts_path_l3')}
    assert module_0.RuntimeConfiguration.VAD_EXTEND_SPEECH_INTERVAL_AFTER == 'vad_extend_speech_after'
    assert module_0.RuntimeConfiguration.VAD_EXTEND_SPEECH_INTERVAL_BEFORE == 'vad_extend_speech_before'
    assert module_0.RuntimeConfiguration.VAD_LOG_ENERGY_THRESHOLD == 'vad_log_energy_threshold'
    assert module_0.RuntimeConfiguration.VAD_MIN_NONSPEECH_LENGTH == 'vad_min_nonspeech_length'
    assert len(module_0.RuntimeConfiguration.FIELDS) == 65
    assert module_0.RuntimeConfiguration.TAG == 'RuntimeConfiguration'
    assert f'{type(module_0.RuntimeConfiguration.safety_checks).__module__}.{type(module_0.RuntimeConfiguration.safety_checks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.sample_rate).__module__}.{type(module_0.RuntimeConfiguration.sample_rate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.dtw_margin).__module__}.{type(module_0.RuntimeConfiguration.dtw_margin).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.mmn).__module__}.{type(module_0.RuntimeConfiguration.mmn).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.mws).__module__}.{type(module_0.RuntimeConfiguration.mws).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.mwl).__module__}.{type(module_0.RuntimeConfiguration.mwl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.tts).__module__}.{type(module_0.RuntimeConfiguration.tts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.tts_path).__module__}.{type(module_0.RuntimeConfiguration.tts_path).__qualname__}' == 'builtins.property'
    runtime_configuration_1 = module_0.RuntimeConfiguration()
    assert f'{type(runtime_configuration_1.data).__module__}.{type(runtime_configuration_1.data).__qualname__}' == 'builtins.dict'
    assert len(runtime_configuration_1.data) == 65
    assert f'{type(runtime_configuration_1.types).__module__}.{type(runtime_configuration_1.types).__qualname__}' == 'builtins.dict'
    assert len(runtime_configuration_1.types) == 65
    assert runtime_configuration_1.aliases == {}
    assert runtime_configuration_1.desc == {'aba_nonspeech_tolerance': 'adjust nonspeech tolerance, in s', 'aba_no_zero_duration': 'add this shift to zero length fragments, in s', 'allow_unlisted_languages': 'if True, allow languages not listed', 'c_extensions': 'run C/C++ extensions', 'cdtw': 'run C extension cdtw', 'cew': 'run C extension cew', 'cfw': 'run C++ extension cfw', 'cmfcc': 'run C extension cmfcc', 'cew_subprocess_enabled': 'run cew in separate subprocess', 'cew_subprocess_path': 'path to python executable', 'dtw_algorithm': 'DTW algorithm (stripe, exact)', 'dtw_margin': 'DTW margin, in s', 'downloader_sleep': 'sleep between Downloader calls, in s', 'downloader_retry_attempts': 'number of retries for a failed Downloader call', 'ffmpeg_path': 'path to ffmpeg executable', 'ffmpeg_sample_rate': 'ffmpeg sample rate', 'ffprobe_path': 'path to ffprobe executable', 'job_max_tasks': 'max number of tasks per job (0 to disable)', 'mfcc_filters': 'number of MFCC filters', 'mfcc_size': 'number of MFCC', 'mfcc_fft_order': 'FFT order for computing MFCC', 'mfcc_lower_frequency': 'MFCC lower frequency cutoff, in Hz', 'mfcc_upper_frequency': 'MFCC upper frequency cutoff, in Hz', 'mfcc_emphasis_factor': 'MFCC emphasis factor', 'mfcc_mask_nonspeech': 'if True, mask MFCC nonspeech frames', 'mfcc_window_length': 'MFCC window length, in s', 'mfcc_window_shift': 'MFCC window shift, in s', 'mfcc_mask_extend_speech_after': 'when masking MFCC, extend speech interval after, in frames', 'mfcc_mask_extend_speech_before': 'when masking MFCC, extend speech interval before, in frames', 'mfcc_mask_log_energy_threshold': 'when masking MFCC, log energy threshold for speech', 'mfcc_mask_min_nonspeech_length': 'when masking MFCC, min nonspeech interval length, in frames', 'dtw_margin_l1': 'level 1 (para) DTW margin, in s', 'mfcc_mask_nonspeech_l1': 'if True, mask MFCC nonspeech frames on level 1 (para)', 'mfcc_window_length_l1': 'level 1 (para) MFCC window length, in s', 'mfcc_window_shift_l1': 'level 1 (para) MFCC window shift, in s', 'dtw_margin_l2': 'level 2 (sent) DTW margin, in s', 'mfcc_mask_nonspeech_l2': 'if True, mask MFCC nonspeech frames on level 2 (sent)', 'mfcc_window_length_l2': 'level 2 (sent) MFCC window length, in s', 'mfcc_window_shift_l2': 'level 2 (sent) MFCC window shift, in s', 'dtw_margin_l3': 'level 3 (word) DTW margin, in s', 'mfcc_mask_nonspeech_l3': 'if True, mask MFCC nonspeech frames on level 3 (word)', 'mfcc_window_length_l3': 'level 3 (word) MFCC window length, in s', 'mfcc_window_shift_l3': 'level 3 (word) MFCC window shift, in s', 'nuance_tts_api_id': 'Nuance Developer API ID', 'nuance_tts_api_key': 'Nuance Developer API Key', 'safety_checks': 'if True, always perform safety checks', 'task_max_audio_length': 'max length of single audio file, in s (0 to disable)', 'task_max_text_length': 'max length of single text file, in fragments (0 to disable)', 'tmp_path': 'path to the temporary dir', 'tts': 'TTS wrapper to use', 'tts_path': 'path of the TTS executable/wrapper', 'tts_voice_code': 'overrides TTS voice code selected by language with this value', 'tts_cache': 'if True, cache synthesized audio files', 'tts_api_sleep': 'sleep between TTS API calls, in s', 'tts_api_retry_attempts': 'number of retries for a failed TTS API call', 'tts_l1': 'TTS wrapper to use at level 1 (para)', 'tts_path_l1': 'path to level 1 (para) TTS executable/wrapper', 'tts_l2': 'TTS wrapper to use at level 2 (sent)', 'tts_path_l2': 'path to level 2 (sent) TTS executable/wrapper', 'tts_l3': 'TTS wrapper to use at level 3 (word)', 'tts_path_l3': 'path to level 3 (word) TTS executable/wrapper', 'vad_extend_speech_after': 'extend speech interval after, in s', 'vad_extend_speech_before': 'extend speech interval before, in s', 'vad_log_energy_threshold': 'log energy threshold for speech', 'vad_min_nonspeech_length': 'min nonspeech interval length, in s'}
    none_type_0 = None
    var_0 = runtime_configuration_1.set_granularity(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    runtime_configuration_0 = module_0.RuntimeConfiguration()
    assert f'{type(runtime_configuration_0.data).__module__}.{type(runtime_configuration_0.data).__qualname__}' == 'builtins.dict'
    assert len(runtime_configuration_0.data) == 65
    assert f'{type(runtime_configuration_0.types).__module__}.{type(runtime_configuration_0.types).__qualname__}' == 'builtins.dict'
    assert len(runtime_configuration_0.types) == 65
    assert runtime_configuration_0.aliases == {}
    assert runtime_configuration_0.desc == {'aba_nonspeech_tolerance': 'adjust nonspeech tolerance, in s', 'aba_no_zero_duration': 'add this shift to zero length fragments, in s', 'allow_unlisted_languages': 'if True, allow languages not listed', 'c_extensions': 'run C/C++ extensions', 'cdtw': 'run C extension cdtw', 'cew': 'run C extension cew', 'cfw': 'run C++ extension cfw', 'cmfcc': 'run C extension cmfcc', 'cew_subprocess_enabled': 'run cew in separate subprocess', 'cew_subprocess_path': 'path to python executable', 'dtw_algorithm': 'DTW algorithm (stripe, exact)', 'dtw_margin': 'DTW margin, in s', 'downloader_sleep': 'sleep between Downloader calls, in s', 'downloader_retry_attempts': 'number of retries for a failed Downloader call', 'ffmpeg_path': 'path to ffmpeg executable', 'ffmpeg_sample_rate': 'ffmpeg sample rate', 'ffprobe_path': 'path to ffprobe executable', 'job_max_tasks': 'max number of tasks per job (0 to disable)', 'mfcc_filters': 'number of MFCC filters', 'mfcc_size': 'number of MFCC', 'mfcc_fft_order': 'FFT order for computing MFCC', 'mfcc_lower_frequency': 'MFCC lower frequency cutoff, in Hz', 'mfcc_upper_frequency': 'MFCC upper frequency cutoff, in Hz', 'mfcc_emphasis_factor': 'MFCC emphasis factor', 'mfcc_mask_nonspeech': 'if True, mask MFCC nonspeech frames', 'mfcc_window_length': 'MFCC window length, in s', 'mfcc_window_shift': 'MFCC window shift, in s', 'mfcc_mask_extend_speech_after': 'when masking MFCC, extend speech interval after, in frames', 'mfcc_mask_extend_speech_before': 'when masking MFCC, extend speech interval before, in frames', 'mfcc_mask_log_energy_threshold': 'when masking MFCC, log energy threshold for speech', 'mfcc_mask_min_nonspeech_length': 'when masking MFCC, min nonspeech interval length, in frames', 'dtw_margin_l1': 'level 1 (para) DTW margin, in s', 'mfcc_mask_nonspeech_l1': 'if True, mask MFCC nonspeech frames on level 1 (para)', 'mfcc_window_length_l1': 'level 1 (para) MFCC window length, in s', 'mfcc_window_shift_l1': 'level 1 (para) MFCC window shift, in s', 'dtw_margin_l2': 'level 2 (sent) DTW margin, in s', 'mfcc_mask_nonspeech_l2': 'if True, mask MFCC nonspeech frames on level 2 (sent)', 'mfcc_window_length_l2': 'level 2 (sent) MFCC window length, in s', 'mfcc_window_shift_l2': 'level 2 (sent) MFCC window shift, in s', 'dtw_margin_l3': 'level 3 (word) DTW margin, in s', 'mfcc_mask_nonspeech_l3': 'if True, mask MFCC nonspeech frames on level 3 (word)', 'mfcc_window_length_l3': 'level 3 (word) MFCC window length, in s', 'mfcc_window_shift_l3': 'level 3 (word) MFCC window shift, in s', 'nuance_tts_api_id': 'Nuance Developer API ID', 'nuance_tts_api_key': 'Nuance Developer API Key', 'safety_checks': 'if True, always perform safety checks', 'task_max_audio_length': 'max length of single audio file, in s (0 to disable)', 'task_max_text_length': 'max length of single text file, in fragments (0 to disable)', 'tmp_path': 'path to the temporary dir', 'tts': 'TTS wrapper to use', 'tts_path': 'path of the TTS executable/wrapper', 'tts_voice_code': 'overrides TTS voice code selected by language with this value', 'tts_cache': 'if True, cache synthesized audio files', 'tts_api_sleep': 'sleep between TTS API calls, in s', 'tts_api_retry_attempts': 'number of retries for a failed TTS API call', 'tts_l1': 'TTS wrapper to use at level 1 (para)', 'tts_path_l1': 'path to level 1 (para) TTS executable/wrapper', 'tts_l2': 'TTS wrapper to use at level 2 (sent)', 'tts_path_l2': 'path to level 2 (sent) TTS executable/wrapper', 'tts_l3': 'TTS wrapper to use at level 3 (word)', 'tts_path_l3': 'path to level 3 (word) TTS executable/wrapper', 'vad_extend_speech_after': 'extend speech interval after, in s', 'vad_extend_speech_before': 'extend speech interval before, in s', 'vad_log_energy_threshold': 'log energy threshold for speech', 'vad_min_nonspeech_length': 'min nonspeech interval length, in s'}
    assert module_0.RuntimeConfiguration.ABA_NONSPEECH_TOLERANCE == 'aba_nonspeech_tolerance'
    assert module_0.RuntimeConfiguration.ABA_NO_ZERO_DURATION == 'aba_no_zero_duration'
    assert module_0.RuntimeConfiguration.ALLOW_UNLISTED_LANGUAGES == 'allow_unlisted_languages'
    assert module_0.RuntimeConfiguration.C_EXTENSIONS == 'c_extensions'
    assert module_0.RuntimeConfiguration.CDTW == 'cdtw'
    assert module_0.RuntimeConfiguration.CEW == 'cew'
    assert module_0.RuntimeConfiguration.CFW == 'cfw'
    assert module_0.RuntimeConfiguration.CEW_SUBPROCESS_ENABLED == 'cew_subprocess_enabled'
    assert module_0.RuntimeConfiguration.CEW_SUBPROCESS_PATH == 'cew_subprocess_path'
    assert module_0.RuntimeConfiguration.CMFCC == 'cmfcc'
    assert module_0.RuntimeConfiguration.DOWNLOADER_SLEEP == 'downloader_sleep'
    assert module_0.RuntimeConfiguration.DOWNLOADER_RETRY_ATTEMPTS == 'downloader_retry_attempts'
    assert module_0.RuntimeConfiguration.DTW_ALGORITHM == 'dtw_algorithm'
    assert module_0.RuntimeConfiguration.DTW_MARGIN == 'dtw_margin'
    assert module_0.RuntimeConfiguration.DTW_MARGIN_L1 == 'dtw_margin_l1'
    assert module_0.RuntimeConfiguration.DTW_MARGIN_L2 == 'dtw_margin_l2'
    assert module_0.RuntimeConfiguration.DTW_MARGIN_L3 == 'dtw_margin_l3'
    assert module_0.RuntimeConfiguration.FFMPEG_PATH == 'ffmpeg_path'
    assert module_0.RuntimeConfiguration.FFMPEG_SAMPLE_RATE == 'ffmpeg_sample_rate'
    assert module_0.RuntimeConfiguration.FFPROBE_PATH == 'ffprobe_path'
    assert module_0.RuntimeConfiguration.JOB_MAX_TASKS == 'job_max_tasks'
    assert module_0.RuntimeConfiguration.MFCC_FILTERS == 'mfcc_filters'
    assert module_0.RuntimeConfiguration.MFCC_SIZE == 'mfcc_size'
    assert module_0.RuntimeConfiguration.MFCC_FFT_ORDER == 'mfcc_fft_order'
    assert module_0.RuntimeConfiguration.MFCC_LOWER_FREQUENCY == 'mfcc_lower_frequency'
    assert module_0.RuntimeConfiguration.MFCC_UPPER_FREQUENCY == 'mfcc_upper_frequency'
    assert module_0.RuntimeConfiguration.MFCC_EMPHASIS_FACTOR == 'mfcc_emphasis_factor'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH == 'mfcc_mask_nonspeech'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH == 'mfcc_window_length'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT == 'mfcc_window_shift'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH_L1 == 'mfcc_mask_nonspeech_l1'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH_L1 == 'mfcc_window_length_l1'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT_L1 == 'mfcc_window_shift_l1'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH_L2 == 'mfcc_mask_nonspeech_l2'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH_L2 == 'mfcc_window_length_l2'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT_L2 == 'mfcc_window_shift_l2'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH_L3 == 'mfcc_mask_nonspeech_l3'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH_L3 == 'mfcc_window_length_l3'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT_L3 == 'mfcc_window_shift_l3'
    assert module_0.RuntimeConfiguration.MFCC_GRANULARITY_MAP == {1: ('dtw_margin_l1', 'mfcc_mask_nonspeech_l1', 'mfcc_window_length_l1', 'mfcc_window_shift_l1'), 2: ('dtw_margin_l2', 'mfcc_mask_nonspeech_l2', 'mfcc_window_length_l2', 'mfcc_window_shift_l2'), 3: ('dtw_margin_l3', 'mfcc_mask_nonspeech_l3', 'mfcc_window_length_l3', 'mfcc_window_shift_l3')}
    assert module_0.RuntimeConfiguration.MFCC_MASK_EXTEND_SPEECH_INTERVAL_AFTER == 'mfcc_mask_extend_speech_after'
    assert module_0.RuntimeConfiguration.MFCC_MASK_EXTEND_SPEECH_INTERVAL_BEFORE == 'mfcc_mask_extend_speech_before'
    assert module_0.RuntimeConfiguration.MFCC_MASK_LOG_ENERGY_THRESHOLD == 'mfcc_mask_log_energy_threshold'
    assert module_0.RuntimeConfiguration.MFCC_MASK_MIN_NONSPEECH_LENGTH == 'mfcc_mask_min_nonspeech_length'
    assert module_0.RuntimeConfiguration.NUANCE_TTS_API_ID == 'nuance_tts_api_id'
    assert module_0.RuntimeConfiguration.NUANCE_TTS_API_KEY == 'nuance_tts_api_key'
    assert module_0.RuntimeConfiguration.SAFETY_CHECKS == 'safety_checks'
    assert module_0.RuntimeConfiguration.TASK_MAX_AUDIO_LENGTH == 'task_max_audio_length'
    assert module_0.RuntimeConfiguration.TASK_MAX_TEXT_LENGTH == 'task_max_text_length'
    assert module_0.RuntimeConfiguration.TMP_PATH == 'tmp_path'
    assert module_0.RuntimeConfiguration.TTS == 'tts'
    assert module_0.RuntimeConfiguration.TTS_PATH == 'tts_path'
    assert module_0.RuntimeConfiguration.TTS_VOICE_CODE == 'tts_voice_code'
    assert module_0.RuntimeConfiguration.TTS_CACHE == 'tts_cache'
    assert module_0.RuntimeConfiguration.TTS_API_SLEEP == 'tts_api_sleep'
    assert module_0.RuntimeConfiguration.TTS_API_RETRY_ATTEMPTS == 'tts_api_retry_attempts'
    assert module_0.RuntimeConfiguration.TTS_L1 == 'tts_l1'
    assert module_0.RuntimeConfiguration.TTS_PATH_L1 == 'tts_path_l1'
    assert module_0.RuntimeConfiguration.TTS_L2 == 'tts_l2'
    assert module_0.RuntimeConfiguration.TTS_PATH_L2 == 'tts_path_l2'
    assert module_0.RuntimeConfiguration.TTS_L3 == 'tts_l3'
    assert module_0.RuntimeConfiguration.TTS_PATH_L3 == 'tts_path_l3'
    assert module_0.RuntimeConfiguration.TTS_GRANULARITY_MAP == {1: ('tts_l1', 'tts_path_l1'), 2: ('tts_l2', 'tts_path_l2'), 3: ('tts_l3', 'tts_path_l3')}
    assert module_0.RuntimeConfiguration.VAD_EXTEND_SPEECH_INTERVAL_AFTER == 'vad_extend_speech_after'
    assert module_0.RuntimeConfiguration.VAD_EXTEND_SPEECH_INTERVAL_BEFORE == 'vad_extend_speech_before'
    assert module_0.RuntimeConfiguration.VAD_LOG_ENERGY_THRESHOLD == 'vad_log_energy_threshold'
    assert module_0.RuntimeConfiguration.VAD_MIN_NONSPEECH_LENGTH == 'vad_min_nonspeech_length'
    assert len(module_0.RuntimeConfiguration.FIELDS) == 65
    assert module_0.RuntimeConfiguration.TAG == 'RuntimeConfiguration'
    assert f'{type(module_0.RuntimeConfiguration.safety_checks).__module__}.{type(module_0.RuntimeConfiguration.safety_checks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.sample_rate).__module__}.{type(module_0.RuntimeConfiguration.sample_rate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.dtw_margin).__module__}.{type(module_0.RuntimeConfiguration.dtw_margin).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.mmn).__module__}.{type(module_0.RuntimeConfiguration.mmn).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.mws).__module__}.{type(module_0.RuntimeConfiguration.mws).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.mwl).__module__}.{type(module_0.RuntimeConfiguration.mwl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.tts).__module__}.{type(module_0.RuntimeConfiguration.tts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.tts_path).__module__}.{type(module_0.RuntimeConfiguration.tts_path).__qualname__}' == 'builtins.property'
    var_0 = runtime_configuration_0.__contains__(runtime_configuration_0)
    assert var_0 is False
    var_1 = runtime_configuration_0.set_tts(bool_0)
    var_2 = runtime_configuration_0.set_tts(bool_0)
    var_3 = runtime_configuration_0.set_tts(runtime_configuration_0)
    var_2.set_granularity(var_2)

@pytest.mark.xfail(strict=True)
def test_case_3():
    runtime_configuration_0 = module_0.RuntimeConfiguration()
    assert f'{type(runtime_configuration_0.data).__module__}.{type(runtime_configuration_0.data).__qualname__}' == 'builtins.dict'
    assert len(runtime_configuration_0.data) == 65
    assert f'{type(runtime_configuration_0.types).__module__}.{type(runtime_configuration_0.types).__qualname__}' == 'builtins.dict'
    assert len(runtime_configuration_0.types) == 65
    assert runtime_configuration_0.aliases == {}
    assert runtime_configuration_0.desc == {'aba_nonspeech_tolerance': 'adjust nonspeech tolerance, in s', 'aba_no_zero_duration': 'add this shift to zero length fragments, in s', 'allow_unlisted_languages': 'if True, allow languages not listed', 'c_extensions': 'run C/C++ extensions', 'cdtw': 'run C extension cdtw', 'cew': 'run C extension cew', 'cfw': 'run C++ extension cfw', 'cmfcc': 'run C extension cmfcc', 'cew_subprocess_enabled': 'run cew in separate subprocess', 'cew_subprocess_path': 'path to python executable', 'dtw_algorithm': 'DTW algorithm (stripe, exact)', 'dtw_margin': 'DTW margin, in s', 'downloader_sleep': 'sleep between Downloader calls, in s', 'downloader_retry_attempts': 'number of retries for a failed Downloader call', 'ffmpeg_path': 'path to ffmpeg executable', 'ffmpeg_sample_rate': 'ffmpeg sample rate', 'ffprobe_path': 'path to ffprobe executable', 'job_max_tasks': 'max number of tasks per job (0 to disable)', 'mfcc_filters': 'number of MFCC filters', 'mfcc_size': 'number of MFCC', 'mfcc_fft_order': 'FFT order for computing MFCC', 'mfcc_lower_frequency': 'MFCC lower frequency cutoff, in Hz', 'mfcc_upper_frequency': 'MFCC upper frequency cutoff, in Hz', 'mfcc_emphasis_factor': 'MFCC emphasis factor', 'mfcc_mask_nonspeech': 'if True, mask MFCC nonspeech frames', 'mfcc_window_length': 'MFCC window length, in s', 'mfcc_window_shift': 'MFCC window shift, in s', 'mfcc_mask_extend_speech_after': 'when masking MFCC, extend speech interval after, in frames', 'mfcc_mask_extend_speech_before': 'when masking MFCC, extend speech interval before, in frames', 'mfcc_mask_log_energy_threshold': 'when masking MFCC, log energy threshold for speech', 'mfcc_mask_min_nonspeech_length': 'when masking MFCC, min nonspeech interval length, in frames', 'dtw_margin_l1': 'level 1 (para) DTW margin, in s', 'mfcc_mask_nonspeech_l1': 'if True, mask MFCC nonspeech frames on level 1 (para)', 'mfcc_window_length_l1': 'level 1 (para) MFCC window length, in s', 'mfcc_window_shift_l1': 'level 1 (para) MFCC window shift, in s', 'dtw_margin_l2': 'level 2 (sent) DTW margin, in s', 'mfcc_mask_nonspeech_l2': 'if True, mask MFCC nonspeech frames on level 2 (sent)', 'mfcc_window_length_l2': 'level 2 (sent) MFCC window length, in s', 'mfcc_window_shift_l2': 'level 2 (sent) MFCC window shift, in s', 'dtw_margin_l3': 'level 3 (word) DTW margin, in s', 'mfcc_mask_nonspeech_l3': 'if True, mask MFCC nonspeech frames on level 3 (word)', 'mfcc_window_length_l3': 'level 3 (word) MFCC window length, in s', 'mfcc_window_shift_l3': 'level 3 (word) MFCC window shift, in s', 'nuance_tts_api_id': 'Nuance Developer API ID', 'nuance_tts_api_key': 'Nuance Developer API Key', 'safety_checks': 'if True, always perform safety checks', 'task_max_audio_length': 'max length of single audio file, in s (0 to disable)', 'task_max_text_length': 'max length of single text file, in fragments (0 to disable)', 'tmp_path': 'path to the temporary dir', 'tts': 'TTS wrapper to use', 'tts_path': 'path of the TTS executable/wrapper', 'tts_voice_code': 'overrides TTS voice code selected by language with this value', 'tts_cache': 'if True, cache synthesized audio files', 'tts_api_sleep': 'sleep between TTS API calls, in s', 'tts_api_retry_attempts': 'number of retries for a failed TTS API call', 'tts_l1': 'TTS wrapper to use at level 1 (para)', 'tts_path_l1': 'path to level 1 (para) TTS executable/wrapper', 'tts_l2': 'TTS wrapper to use at level 2 (sent)', 'tts_path_l2': 'path to level 2 (sent) TTS executable/wrapper', 'tts_l3': 'TTS wrapper to use at level 3 (word)', 'tts_path_l3': 'path to level 3 (word) TTS executable/wrapper', 'vad_extend_speech_after': 'extend speech interval after, in s', 'vad_extend_speech_before': 'extend speech interval before, in s', 'vad_log_energy_threshold': 'log energy threshold for speech', 'vad_min_nonspeech_length': 'min nonspeech interval length, in s'}
    assert module_0.RuntimeConfiguration.ABA_NONSPEECH_TOLERANCE == 'aba_nonspeech_tolerance'
    assert module_0.RuntimeConfiguration.ABA_NO_ZERO_DURATION == 'aba_no_zero_duration'
    assert module_0.RuntimeConfiguration.ALLOW_UNLISTED_LANGUAGES == 'allow_unlisted_languages'
    assert module_0.RuntimeConfiguration.C_EXTENSIONS == 'c_extensions'
    assert module_0.RuntimeConfiguration.CDTW == 'cdtw'
    assert module_0.RuntimeConfiguration.CEW == 'cew'
    assert module_0.RuntimeConfiguration.CFW == 'cfw'
    assert module_0.RuntimeConfiguration.CEW_SUBPROCESS_ENABLED == 'cew_subprocess_enabled'
    assert module_0.RuntimeConfiguration.CEW_SUBPROCESS_PATH == 'cew_subprocess_path'
    assert module_0.RuntimeConfiguration.CMFCC == 'cmfcc'
    assert module_0.RuntimeConfiguration.DOWNLOADER_SLEEP == 'downloader_sleep'
    assert module_0.RuntimeConfiguration.DOWNLOADER_RETRY_ATTEMPTS == 'downloader_retry_attempts'
    assert module_0.RuntimeConfiguration.DTW_ALGORITHM == 'dtw_algorithm'
    assert module_0.RuntimeConfiguration.DTW_MARGIN == 'dtw_margin'
    assert module_0.RuntimeConfiguration.DTW_MARGIN_L1 == 'dtw_margin_l1'
    assert module_0.RuntimeConfiguration.DTW_MARGIN_L2 == 'dtw_margin_l2'
    assert module_0.RuntimeConfiguration.DTW_MARGIN_L3 == 'dtw_margin_l3'
    assert module_0.RuntimeConfiguration.FFMPEG_PATH == 'ffmpeg_path'
    assert module_0.RuntimeConfiguration.FFMPEG_SAMPLE_RATE == 'ffmpeg_sample_rate'
    assert module_0.RuntimeConfiguration.FFPROBE_PATH == 'ffprobe_path'
    assert module_0.RuntimeConfiguration.JOB_MAX_TASKS == 'job_max_tasks'
    assert module_0.RuntimeConfiguration.MFCC_FILTERS == 'mfcc_filters'
    assert module_0.RuntimeConfiguration.MFCC_SIZE == 'mfcc_size'
    assert module_0.RuntimeConfiguration.MFCC_FFT_ORDER == 'mfcc_fft_order'
    assert module_0.RuntimeConfiguration.MFCC_LOWER_FREQUENCY == 'mfcc_lower_frequency'
    assert module_0.RuntimeConfiguration.MFCC_UPPER_FREQUENCY == 'mfcc_upper_frequency'
    assert module_0.RuntimeConfiguration.MFCC_EMPHASIS_FACTOR == 'mfcc_emphasis_factor'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH == 'mfcc_mask_nonspeech'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH == 'mfcc_window_length'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT == 'mfcc_window_shift'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH_L1 == 'mfcc_mask_nonspeech_l1'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH_L1 == 'mfcc_window_length_l1'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT_L1 == 'mfcc_window_shift_l1'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH_L2 == 'mfcc_mask_nonspeech_l2'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH_L2 == 'mfcc_window_length_l2'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT_L2 == 'mfcc_window_shift_l2'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH_L3 == 'mfcc_mask_nonspeech_l3'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH_L3 == 'mfcc_window_length_l3'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT_L3 == 'mfcc_window_shift_l3'
    assert module_0.RuntimeConfiguration.MFCC_GRANULARITY_MAP == {1: ('dtw_margin_l1', 'mfcc_mask_nonspeech_l1', 'mfcc_window_length_l1', 'mfcc_window_shift_l1'), 2: ('dtw_margin_l2', 'mfcc_mask_nonspeech_l2', 'mfcc_window_length_l2', 'mfcc_window_shift_l2'), 3: ('dtw_margin_l3', 'mfcc_mask_nonspeech_l3', 'mfcc_window_length_l3', 'mfcc_window_shift_l3')}
    assert module_0.RuntimeConfiguration.MFCC_MASK_EXTEND_SPEECH_INTERVAL_AFTER == 'mfcc_mask_extend_speech_after'
    assert module_0.RuntimeConfiguration.MFCC_MASK_EXTEND_SPEECH_INTERVAL_BEFORE == 'mfcc_mask_extend_speech_before'
    assert module_0.RuntimeConfiguration.MFCC_MASK_LOG_ENERGY_THRESHOLD == 'mfcc_mask_log_energy_threshold'
    assert module_0.RuntimeConfiguration.MFCC_MASK_MIN_NONSPEECH_LENGTH == 'mfcc_mask_min_nonspeech_length'
    assert module_0.RuntimeConfiguration.NUANCE_TTS_API_ID == 'nuance_tts_api_id'
    assert module_0.RuntimeConfiguration.NUANCE_TTS_API_KEY == 'nuance_tts_api_key'
    assert module_0.RuntimeConfiguration.SAFETY_CHECKS == 'safety_checks'
    assert module_0.RuntimeConfiguration.TASK_MAX_AUDIO_LENGTH == 'task_max_audio_length'
    assert module_0.RuntimeConfiguration.TASK_MAX_TEXT_LENGTH == 'task_max_text_length'
    assert module_0.RuntimeConfiguration.TMP_PATH == 'tmp_path'
    assert module_0.RuntimeConfiguration.TTS == 'tts'
    assert module_0.RuntimeConfiguration.TTS_PATH == 'tts_path'
    assert module_0.RuntimeConfiguration.TTS_VOICE_CODE == 'tts_voice_code'
    assert module_0.RuntimeConfiguration.TTS_CACHE == 'tts_cache'
    assert module_0.RuntimeConfiguration.TTS_API_SLEEP == 'tts_api_sleep'
    assert module_0.RuntimeConfiguration.TTS_API_RETRY_ATTEMPTS == 'tts_api_retry_attempts'
    assert module_0.RuntimeConfiguration.TTS_L1 == 'tts_l1'
    assert module_0.RuntimeConfiguration.TTS_PATH_L1 == 'tts_path_l1'
    assert module_0.RuntimeConfiguration.TTS_L2 == 'tts_l2'
    assert module_0.RuntimeConfiguration.TTS_PATH_L2 == 'tts_path_l2'
    assert module_0.RuntimeConfiguration.TTS_L3 == 'tts_l3'
    assert module_0.RuntimeConfiguration.TTS_PATH_L3 == 'tts_path_l3'
    assert module_0.RuntimeConfiguration.TTS_GRANULARITY_MAP == {1: ('tts_l1', 'tts_path_l1'), 2: ('tts_l2', 'tts_path_l2'), 3: ('tts_l3', 'tts_path_l3')}
    assert module_0.RuntimeConfiguration.VAD_EXTEND_SPEECH_INTERVAL_AFTER == 'vad_extend_speech_after'
    assert module_0.RuntimeConfiguration.VAD_EXTEND_SPEECH_INTERVAL_BEFORE == 'vad_extend_speech_before'
    assert module_0.RuntimeConfiguration.VAD_LOG_ENERGY_THRESHOLD == 'vad_log_energy_threshold'
    assert module_0.RuntimeConfiguration.VAD_MIN_NONSPEECH_LENGTH == 'vad_min_nonspeech_length'
    assert len(module_0.RuntimeConfiguration.FIELDS) == 65
    assert module_0.RuntimeConfiguration.TAG == 'RuntimeConfiguration'
    assert f'{type(module_0.RuntimeConfiguration.safety_checks).__module__}.{type(module_0.RuntimeConfiguration.safety_checks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.sample_rate).__module__}.{type(module_0.RuntimeConfiguration.sample_rate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.dtw_margin).__module__}.{type(module_0.RuntimeConfiguration.dtw_margin).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.mmn).__module__}.{type(module_0.RuntimeConfiguration.mmn).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.mws).__module__}.{type(module_0.RuntimeConfiguration.mws).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.mwl).__module__}.{type(module_0.RuntimeConfiguration.mwl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.tts).__module__}.{type(module_0.RuntimeConfiguration.tts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.tts_path).__module__}.{type(module_0.RuntimeConfiguration.tts_path).__qualname__}' == 'builtins.property'
    var_0 = runtime_configuration_0.clone()
    assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'builtins.dict'
    assert len(var_0.data) == 65
    assert f'{type(var_0.types).__module__}.{type(var_0.types).__qualname__}' == 'builtins.dict'
    assert len(var_0.types) == 65
    assert var_0.aliases == {}
    assert var_0.desc == {'aba_nonspeech_tolerance': 'adjust nonspeech tolerance, in s', 'aba_no_zero_duration': 'add this shift to zero length fragments, in s', 'allow_unlisted_languages': 'if True, allow languages not listed', 'c_extensions': 'run C/C++ extensions', 'cdtw': 'run C extension cdtw', 'cew': 'run C extension cew', 'cfw': 'run C++ extension cfw', 'cmfcc': 'run C extension cmfcc', 'cew_subprocess_enabled': 'run cew in separate subprocess', 'cew_subprocess_path': 'path to python executable', 'dtw_algorithm': 'DTW algorithm (stripe, exact)', 'dtw_margin': 'DTW margin, in s', 'downloader_sleep': 'sleep between Downloader calls, in s', 'downloader_retry_attempts': 'number of retries for a failed Downloader call', 'ffmpeg_path': 'path to ffmpeg executable', 'ffmpeg_sample_rate': 'ffmpeg sample rate', 'ffprobe_path': 'path to ffprobe executable', 'job_max_tasks': 'max number of tasks per job (0 to disable)', 'mfcc_filters': 'number of MFCC filters', 'mfcc_size': 'number of MFCC', 'mfcc_fft_order': 'FFT order for computing MFCC', 'mfcc_lower_frequency': 'MFCC lower frequency cutoff, in Hz', 'mfcc_upper_frequency': 'MFCC upper frequency cutoff, in Hz', 'mfcc_emphasis_factor': 'MFCC emphasis factor', 'mfcc_mask_nonspeech': 'if True, mask MFCC nonspeech frames', 'mfcc_window_length': 'MFCC window length, in s', 'mfcc_window_shift': 'MFCC window shift, in s', 'mfcc_mask_extend_speech_after': 'when masking MFCC, extend speech interval after, in frames', 'mfcc_mask_extend_speech_before': 'when masking MFCC, extend speech interval before, in frames', 'mfcc_mask_log_energy_threshold': 'when masking MFCC, log energy threshold for speech', 'mfcc_mask_min_nonspeech_length': 'when masking MFCC, min nonspeech interval length, in frames', 'dtw_margin_l1': 'level 1 (para) DTW margin, in s', 'mfcc_mask_nonspeech_l1': 'if True, mask MFCC nonspeech frames on level 1 (para)', 'mfcc_window_length_l1': 'level 1 (para) MFCC window length, in s', 'mfcc_window_shift_l1': 'level 1 (para) MFCC window shift, in s', 'dtw_margin_l2': 'level 2 (sent) DTW margin, in s', 'mfcc_mask_nonspeech_l2': 'if True, mask MFCC nonspeech frames on level 2 (sent)', 'mfcc_window_length_l2': 'level 2 (sent) MFCC window length, in s', 'mfcc_window_shift_l2': 'level 2 (sent) MFCC window shift, in s', 'dtw_margin_l3': 'level 3 (word) DTW margin, in s', 'mfcc_mask_nonspeech_l3': 'if True, mask MFCC nonspeech frames on level 3 (word)', 'mfcc_window_length_l3': 'level 3 (word) MFCC window length, in s', 'mfcc_window_shift_l3': 'level 3 (word) MFCC window shift, in s', 'nuance_tts_api_id': 'Nuance Developer API ID', 'nuance_tts_api_key': 'Nuance Developer API Key', 'safety_checks': 'if True, always perform safety checks', 'task_max_audio_length': 'max length of single audio file, in s (0 to disable)', 'task_max_text_length': 'max length of single text file, in fragments (0 to disable)', 'tmp_path': 'path to the temporary dir', 'tts': 'TTS wrapper to use', 'tts_path': 'path of the TTS executable/wrapper', 'tts_voice_code': 'overrides TTS voice code selected by language with this value', 'tts_cache': 'if True, cache synthesized audio files', 'tts_api_sleep': 'sleep between TTS API calls, in s', 'tts_api_retry_attempts': 'number of retries for a failed TTS API call', 'tts_l1': 'TTS wrapper to use at level 1 (para)', 'tts_path_l1': 'path to level 1 (para) TTS executable/wrapper', 'tts_l2': 'TTS wrapper to use at level 2 (sent)', 'tts_path_l2': 'path to level 2 (sent) TTS executable/wrapper', 'tts_l3': 'TTS wrapper to use at level 3 (word)', 'tts_path_l3': 'path to level 3 (word) TTS executable/wrapper', 'vad_extend_speech_after': 'extend speech interval after, in s', 'vad_extend_speech_before': 'extend speech interval before, in s', 'vad_log_energy_threshold': 'log energy threshold for speech', 'vad_min_nonspeech_length': 'min nonspeech interval length, in s'}
    var_1 = var_0.set_tts(var_0)
    module_0.RuntimeConfiguration(runtime_configuration_0)

def test_case_4():
    runtime_configuration_0 = module_0.RuntimeConfiguration()
    assert f'{type(runtime_configuration_0.data).__module__}.{type(runtime_configuration_0.data).__qualname__}' == 'builtins.dict'
    assert len(runtime_configuration_0.data) == 65
    assert f'{type(runtime_configuration_0.types).__module__}.{type(runtime_configuration_0.types).__qualname__}' == 'builtins.dict'
    assert len(runtime_configuration_0.types) == 65
    assert runtime_configuration_0.aliases == {}
    assert runtime_configuration_0.desc == {'aba_nonspeech_tolerance': 'adjust nonspeech tolerance, in s', 'aba_no_zero_duration': 'add this shift to zero length fragments, in s', 'allow_unlisted_languages': 'if True, allow languages not listed', 'c_extensions': 'run C/C++ extensions', 'cdtw': 'run C extension cdtw', 'cew': 'run C extension cew', 'cfw': 'run C++ extension cfw', 'cmfcc': 'run C extension cmfcc', 'cew_subprocess_enabled': 'run cew in separate subprocess', 'cew_subprocess_path': 'path to python executable', 'dtw_algorithm': 'DTW algorithm (stripe, exact)', 'dtw_margin': 'DTW margin, in s', 'downloader_sleep': 'sleep between Downloader calls, in s', 'downloader_retry_attempts': 'number of retries for a failed Downloader call', 'ffmpeg_path': 'path to ffmpeg executable', 'ffmpeg_sample_rate': 'ffmpeg sample rate', 'ffprobe_path': 'path to ffprobe executable', 'job_max_tasks': 'max number of tasks per job (0 to disable)', 'mfcc_filters': 'number of MFCC filters', 'mfcc_size': 'number of MFCC', 'mfcc_fft_order': 'FFT order for computing MFCC', 'mfcc_lower_frequency': 'MFCC lower frequency cutoff, in Hz', 'mfcc_upper_frequency': 'MFCC upper frequency cutoff, in Hz', 'mfcc_emphasis_factor': 'MFCC emphasis factor', 'mfcc_mask_nonspeech': 'if True, mask MFCC nonspeech frames', 'mfcc_window_length': 'MFCC window length, in s', 'mfcc_window_shift': 'MFCC window shift, in s', 'mfcc_mask_extend_speech_after': 'when masking MFCC, extend speech interval after, in frames', 'mfcc_mask_extend_speech_before': 'when masking MFCC, extend speech interval before, in frames', 'mfcc_mask_log_energy_threshold': 'when masking MFCC, log energy threshold for speech', 'mfcc_mask_min_nonspeech_length': 'when masking MFCC, min nonspeech interval length, in frames', 'dtw_margin_l1': 'level 1 (para) DTW margin, in s', 'mfcc_mask_nonspeech_l1': 'if True, mask MFCC nonspeech frames on level 1 (para)', 'mfcc_window_length_l1': 'level 1 (para) MFCC window length, in s', 'mfcc_window_shift_l1': 'level 1 (para) MFCC window shift, in s', 'dtw_margin_l2': 'level 2 (sent) DTW margin, in s', 'mfcc_mask_nonspeech_l2': 'if True, mask MFCC nonspeech frames on level 2 (sent)', 'mfcc_window_length_l2': 'level 2 (sent) MFCC window length, in s', 'mfcc_window_shift_l2': 'level 2 (sent) MFCC window shift, in s', 'dtw_margin_l3': 'level 3 (word) DTW margin, in s', 'mfcc_mask_nonspeech_l3': 'if True, mask MFCC nonspeech frames on level 3 (word)', 'mfcc_window_length_l3': 'level 3 (word) MFCC window length, in s', 'mfcc_window_shift_l3': 'level 3 (word) MFCC window shift, in s', 'nuance_tts_api_id': 'Nuance Developer API ID', 'nuance_tts_api_key': 'Nuance Developer API Key', 'safety_checks': 'if True, always perform safety checks', 'task_max_audio_length': 'max length of single audio file, in s (0 to disable)', 'task_max_text_length': 'max length of single text file, in fragments (0 to disable)', 'tmp_path': 'path to the temporary dir', 'tts': 'TTS wrapper to use', 'tts_path': 'path of the TTS executable/wrapper', 'tts_voice_code': 'overrides TTS voice code selected by language with this value', 'tts_cache': 'if True, cache synthesized audio files', 'tts_api_sleep': 'sleep between TTS API calls, in s', 'tts_api_retry_attempts': 'number of retries for a failed TTS API call', 'tts_l1': 'TTS wrapper to use at level 1 (para)', 'tts_path_l1': 'path to level 1 (para) TTS executable/wrapper', 'tts_l2': 'TTS wrapper to use at level 2 (sent)', 'tts_path_l2': 'path to level 2 (sent) TTS executable/wrapper', 'tts_l3': 'TTS wrapper to use at level 3 (word)', 'tts_path_l3': 'path to level 3 (word) TTS executable/wrapper', 'vad_extend_speech_after': 'extend speech interval after, in s', 'vad_extend_speech_before': 'extend speech interval before, in s', 'vad_log_energy_threshold': 'log energy threshold for speech', 'vad_min_nonspeech_length': 'min nonspeech interval length, in s'}
    assert module_0.RuntimeConfiguration.ABA_NONSPEECH_TOLERANCE == 'aba_nonspeech_tolerance'
    assert module_0.RuntimeConfiguration.ABA_NO_ZERO_DURATION == 'aba_no_zero_duration'
    assert module_0.RuntimeConfiguration.ALLOW_UNLISTED_LANGUAGES == 'allow_unlisted_languages'
    assert module_0.RuntimeConfiguration.C_EXTENSIONS == 'c_extensions'
    assert module_0.RuntimeConfiguration.CDTW == 'cdtw'
    assert module_0.RuntimeConfiguration.CEW == 'cew'
    assert module_0.RuntimeConfiguration.CFW == 'cfw'
    assert module_0.RuntimeConfiguration.CEW_SUBPROCESS_ENABLED == 'cew_subprocess_enabled'
    assert module_0.RuntimeConfiguration.CEW_SUBPROCESS_PATH == 'cew_subprocess_path'
    assert module_0.RuntimeConfiguration.CMFCC == 'cmfcc'
    assert module_0.RuntimeConfiguration.DOWNLOADER_SLEEP == 'downloader_sleep'
    assert module_0.RuntimeConfiguration.DOWNLOADER_RETRY_ATTEMPTS == 'downloader_retry_attempts'
    assert module_0.RuntimeConfiguration.DTW_ALGORITHM == 'dtw_algorithm'
    assert module_0.RuntimeConfiguration.DTW_MARGIN == 'dtw_margin'
    assert module_0.RuntimeConfiguration.DTW_MARGIN_L1 == 'dtw_margin_l1'
    assert module_0.RuntimeConfiguration.DTW_MARGIN_L2 == 'dtw_margin_l2'
    assert module_0.RuntimeConfiguration.DTW_MARGIN_L3 == 'dtw_margin_l3'
    assert module_0.RuntimeConfiguration.FFMPEG_PATH == 'ffmpeg_path'
    assert module_0.RuntimeConfiguration.FFMPEG_SAMPLE_RATE == 'ffmpeg_sample_rate'
    assert module_0.RuntimeConfiguration.FFPROBE_PATH == 'ffprobe_path'
    assert module_0.RuntimeConfiguration.JOB_MAX_TASKS == 'job_max_tasks'
    assert module_0.RuntimeConfiguration.MFCC_FILTERS == 'mfcc_filters'
    assert module_0.RuntimeConfiguration.MFCC_SIZE == 'mfcc_size'
    assert module_0.RuntimeConfiguration.MFCC_FFT_ORDER == 'mfcc_fft_order'
    assert module_0.RuntimeConfiguration.MFCC_LOWER_FREQUENCY == 'mfcc_lower_frequency'
    assert module_0.RuntimeConfiguration.MFCC_UPPER_FREQUENCY == 'mfcc_upper_frequency'
    assert module_0.RuntimeConfiguration.MFCC_EMPHASIS_FACTOR == 'mfcc_emphasis_factor'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH == 'mfcc_mask_nonspeech'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH == 'mfcc_window_length'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT == 'mfcc_window_shift'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH_L1 == 'mfcc_mask_nonspeech_l1'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH_L1 == 'mfcc_window_length_l1'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT_L1 == 'mfcc_window_shift_l1'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH_L2 == 'mfcc_mask_nonspeech_l2'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH_L2 == 'mfcc_window_length_l2'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT_L2 == 'mfcc_window_shift_l2'
    assert module_0.RuntimeConfiguration.MFCC_MASK_NONSPEECH_L3 == 'mfcc_mask_nonspeech_l3'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_LENGTH_L3 == 'mfcc_window_length_l3'
    assert module_0.RuntimeConfiguration.MFCC_WINDOW_SHIFT_L3 == 'mfcc_window_shift_l3'
    assert module_0.RuntimeConfiguration.MFCC_GRANULARITY_MAP == {1: ('dtw_margin_l1', 'mfcc_mask_nonspeech_l1', 'mfcc_window_length_l1', 'mfcc_window_shift_l1'), 2: ('dtw_margin_l2', 'mfcc_mask_nonspeech_l2', 'mfcc_window_length_l2', 'mfcc_window_shift_l2'), 3: ('dtw_margin_l3', 'mfcc_mask_nonspeech_l3', 'mfcc_window_length_l3', 'mfcc_window_shift_l3')}
    assert module_0.RuntimeConfiguration.MFCC_MASK_EXTEND_SPEECH_INTERVAL_AFTER == 'mfcc_mask_extend_speech_after'
    assert module_0.RuntimeConfiguration.MFCC_MASK_EXTEND_SPEECH_INTERVAL_BEFORE == 'mfcc_mask_extend_speech_before'
    assert module_0.RuntimeConfiguration.MFCC_MASK_LOG_ENERGY_THRESHOLD == 'mfcc_mask_log_energy_threshold'
    assert module_0.RuntimeConfiguration.MFCC_MASK_MIN_NONSPEECH_LENGTH == 'mfcc_mask_min_nonspeech_length'
    assert module_0.RuntimeConfiguration.NUANCE_TTS_API_ID == 'nuance_tts_api_id'
    assert module_0.RuntimeConfiguration.NUANCE_TTS_API_KEY == 'nuance_tts_api_key'
    assert module_0.RuntimeConfiguration.SAFETY_CHECKS == 'safety_checks'
    assert module_0.RuntimeConfiguration.TASK_MAX_AUDIO_LENGTH == 'task_max_audio_length'
    assert module_0.RuntimeConfiguration.TASK_MAX_TEXT_LENGTH == 'task_max_text_length'
    assert module_0.RuntimeConfiguration.TMP_PATH == 'tmp_path'
    assert module_0.RuntimeConfiguration.TTS == 'tts'
    assert module_0.RuntimeConfiguration.TTS_PATH == 'tts_path'
    assert module_0.RuntimeConfiguration.TTS_VOICE_CODE == 'tts_voice_code'
    assert module_0.RuntimeConfiguration.TTS_CACHE == 'tts_cache'
    assert module_0.RuntimeConfiguration.TTS_API_SLEEP == 'tts_api_sleep'
    assert module_0.RuntimeConfiguration.TTS_API_RETRY_ATTEMPTS == 'tts_api_retry_attempts'
    assert module_0.RuntimeConfiguration.TTS_L1 == 'tts_l1'
    assert module_0.RuntimeConfiguration.TTS_PATH_L1 == 'tts_path_l1'
    assert module_0.RuntimeConfiguration.TTS_L2 == 'tts_l2'
    assert module_0.RuntimeConfiguration.TTS_PATH_L2 == 'tts_path_l2'
    assert module_0.RuntimeConfiguration.TTS_L3 == 'tts_l3'
    assert module_0.RuntimeConfiguration.TTS_PATH_L3 == 'tts_path_l3'
    assert module_0.RuntimeConfiguration.TTS_GRANULARITY_MAP == {1: ('tts_l1', 'tts_path_l1'), 2: ('tts_l2', 'tts_path_l2'), 3: ('tts_l3', 'tts_path_l3')}
    assert module_0.RuntimeConfiguration.VAD_EXTEND_SPEECH_INTERVAL_AFTER == 'vad_extend_speech_after'
    assert module_0.RuntimeConfiguration.VAD_EXTEND_SPEECH_INTERVAL_BEFORE == 'vad_extend_speech_before'
    assert module_0.RuntimeConfiguration.VAD_LOG_ENERGY_THRESHOLD == 'vad_log_energy_threshold'
    assert module_0.RuntimeConfiguration.VAD_MIN_NONSPEECH_LENGTH == 'vad_min_nonspeech_length'
    assert len(module_0.RuntimeConfiguration.FIELDS) == 65
    assert module_0.RuntimeConfiguration.TAG == 'RuntimeConfiguration'
    assert f'{type(module_0.RuntimeConfiguration.safety_checks).__module__}.{type(module_0.RuntimeConfiguration.safety_checks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.sample_rate).__module__}.{type(module_0.RuntimeConfiguration.sample_rate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.dtw_margin).__module__}.{type(module_0.RuntimeConfiguration.dtw_margin).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.mmn).__module__}.{type(module_0.RuntimeConfiguration.mmn).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.mws).__module__}.{type(module_0.RuntimeConfiguration.mws).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.mwl).__module__}.{type(module_0.RuntimeConfiguration.mwl).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.tts).__module__}.{type(module_0.RuntimeConfiguration.tts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RuntimeConfiguration.tts_path).__module__}.{type(module_0.RuntimeConfiguration.tts_path).__qualname__}' == 'builtins.property'