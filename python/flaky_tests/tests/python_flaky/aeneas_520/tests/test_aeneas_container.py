# Automatically generated by Pynguin.
import pytest
import aeneas.globalfunctions as module_0
import aeneas.container as module_1
import platform as module_2

def test_case_0():
    var_0 = module_0.custom_tmp_dir()
    container_0 = module_1.Container(var_0, rconf=var_0)
    assert f'{type(container_0).__module__}.{type(container_0).__qualname__}' == 'aeneas.container.Container'
    assert f'{type(container_0.logger).__module__}.{type(container_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_0.logger) == 7
    assert container_0.rconf == '/tmp/'
    assert f'{type(container_0.actual_container).__module__}.{type(container_0.actual_container).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert module_1.Container.TAG == 'Container'
    assert f'{type(module_1.Container.file_path).__module__}.{type(module_1.Container.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.container_format).__module__}.{type(module_1.Container.container_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_xml).__module__}.{type(module_1.Container.has_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_xml).__module__}.{type(module_1.Container.entry_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_txt).__module__}.{type(module_1.Container.has_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_txt).__module__}.{type(module_1.Container.entry_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.is_safe).__module__}.{type(module_1.Container.is_safe).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entries).__module__}.{type(module_1.Container.entries).__qualname__}' == 'builtins.property'
    var_1 = container_0.read_entry(var_0)
    assert len(container_0.logger) == 9
    with pytest.raises(TypeError):
        module_1.Container(var_1)

def test_case_1():
    var_0 = module_0.custom_tmp_dir()
    container_0 = module_1.Container(var_0)
    assert f'{type(container_0).__module__}.{type(container_0).__qualname__}' == 'aeneas.container.Container'
    assert f'{type(container_0.logger).__module__}.{type(container_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_0.logger) == 7
    assert f'{type(container_0.rconf).__module__}.{type(container_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert f'{type(container_0.actual_container).__module__}.{type(container_0.actual_container).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert module_1.Container.TAG == 'Container'
    assert f'{type(module_1.Container.file_path).__module__}.{type(module_1.Container.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.container_format).__module__}.{type(module_1.Container.container_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_xml).__module__}.{type(module_1.Container.has_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_xml).__module__}.{type(module_1.Container.entry_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_txt).__module__}.{type(module_1.Container.has_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_txt).__module__}.{type(module_1.Container.entry_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.is_safe).__module__}.{type(module_1.Container.is_safe).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entries).__module__}.{type(module_1.Container.entries).__qualname__}' == 'builtins.property'

def test_case_2():
    container_format_0 = module_1.ContainerFormat()
    assert module_1.ContainerFormat.EPUB == 'epub'
    assert module_1.ContainerFormat.TAR == 'tar'
    assert module_1.ContainerFormat.TAR_GZ == 'tar.gz'
    assert module_1.ContainerFormat.TAR_BZ2 == 'tar.bz2'
    assert module_1.ContainerFormat.UNPACKED == 'unpacked'
    assert module_1.ContainerFormat.ZIP == 'zip'
    assert module_1.ContainerFormat.ALLOWED_FILE_VALUES == ['epub', 'tar', 'tar.gz', 'tar.bz2', 'zip']
    assert module_1.ContainerFormat.ALLOWED_VALUES == ['epub', 'tar', 'tar.gz', 'tar.bz2', 'unpacked', 'zip']

def test_case_3():
    var_0 = module_2.python_revision()
    container_t_a_r_0 = module_1._ContainerTAR(var_0, var_0)
    assert f'{type(container_t_a_r_0).__module__}.{type(container_t_a_r_0).__qualname__}' == 'aeneas.container._ContainerTAR'
    assert f'{type(container_t_a_r_0.logger).__module__}.{type(container_t_a_r_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_t_a_r_0.logger) == 0
    assert f'{type(container_t_a_r_0.rconf).__module__}.{type(container_t_a_r_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_t_a_r_0.file_path == ''
    assert container_t_a_r_0.variant == ''
    assert module_1._ContainerTAR.TAG == 'ContainerTAR'
    assert f'{type(module_1._ContainerTAR.entries).__module__}.{type(module_1._ContainerTAR.entries).__qualname__}' == 'builtins.property'
    with pytest.raises(ValueError):
        module_1.Container(var_0, var_0)

def test_case_4():
    var_0 = module_2.version()
    container_z_i_p_0 = module_1._ContainerZIP(var_0)
    assert f'{type(container_z_i_p_0).__module__}.{type(container_z_i_p_0).__qualname__}' == 'aeneas.container._ContainerZIP'
    assert f'{type(container_z_i_p_0.logger).__module__}.{type(container_z_i_p_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_z_i_p_0.logger) == 0
    assert f'{type(container_z_i_p_0.rconf).__module__}.{type(container_z_i_p_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_z_i_p_0.file_path == '#1 SMP Debian 5.10.140-1 (2022-09-02)'
    assert module_1._ContainerZIP.TAG == 'ContainerZIP'
    assert f'{type(module_1._ContainerZIP.entries).__module__}.{type(module_1._ContainerZIP.entries).__qualname__}' == 'builtins.property'
    var_1 = container_z_i_p_0.compress(var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_2.python_revision()
    container_t_a_r_0 = module_1._ContainerTAR(var_0, var_0)
    assert f'{type(container_t_a_r_0).__module__}.{type(container_t_a_r_0).__qualname__}' == 'aeneas.container._ContainerTAR'
    assert f'{type(container_t_a_r_0.logger).__module__}.{type(container_t_a_r_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_t_a_r_0.logger) == 0
    assert f'{type(container_t_a_r_0.rconf).__module__}.{type(container_t_a_r_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_t_a_r_0.file_path == ''
    assert container_t_a_r_0.variant == ''
    assert module_1._ContainerTAR.TAG == 'ContainerTAR'
    assert f'{type(module_1._ContainerTAR.entries).__module__}.{type(module_1._ContainerTAR.entries).__qualname__}' == 'builtins.property'
    container_t_a_r_0.decompress(container_t_a_r_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    container_unpacked_0 = module_1._ContainerUnpacked(none_type_0, none_type_0)
    assert f'{type(container_unpacked_0).__module__}.{type(container_unpacked_0).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert f'{type(container_unpacked_0.logger).__module__}.{type(container_unpacked_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_unpacked_0.logger) == 0
    assert f'{type(container_unpacked_0.rconf).__module__}.{type(container_unpacked_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_unpacked_0.file_path is None
    assert module_1._ContainerUnpacked.TAG == 'ContainerUnpacked'
    assert f'{type(module_1._ContainerUnpacked.entries).__module__}.{type(module_1._ContainerUnpacked.entries).__qualname__}' == 'builtins.property'
    container_unpacked_0.compress(container_unpacked_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_0.custom_tmp_dir()
    container_0 = module_1.Container(var_0, rconf=var_0)
    assert f'{type(container_0).__module__}.{type(container_0).__qualname__}' == 'aeneas.container.Container'
    assert f'{type(container_0.logger).__module__}.{type(container_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_0.logger) == 7
    assert container_0.rconf == '/tmp/'
    assert f'{type(container_0.actual_container).__module__}.{type(container_0.actual_container).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert module_1.Container.TAG == 'Container'
    assert f'{type(module_1.Container.file_path).__module__}.{type(module_1.Container.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.container_format).__module__}.{type(module_1.Container.container_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_xml).__module__}.{type(module_1.Container.has_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_xml).__module__}.{type(module_1.Container.entry_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_txt).__module__}.{type(module_1.Container.has_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_txt).__module__}.{type(module_1.Container.entry_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.is_safe).__module__}.{type(module_1.Container.is_safe).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entries).__module__}.{type(module_1.Container.entries).__qualname__}' == 'builtins.property'
    container_0.decompress(var_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_0.custom_tmp_dir()
    container_0 = module_1.Container(var_0, rconf=var_0)
    assert f'{type(container_0).__module__}.{type(container_0).__qualname__}' == 'aeneas.container.Container'
    assert f'{type(container_0.logger).__module__}.{type(container_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_0.logger) == 7
    assert container_0.rconf == '/tmp/'
    assert f'{type(container_0.actual_container).__module__}.{type(container_0.actual_container).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert module_1.Container.TAG == 'Container'
    assert f'{type(module_1.Container.file_path).__module__}.{type(module_1.Container.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.container_format).__module__}.{type(module_1.Container.container_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_xml).__module__}.{type(module_1.Container.has_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_xml).__module__}.{type(module_1.Container.entry_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_txt).__module__}.{type(module_1.Container.has_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_txt).__module__}.{type(module_1.Container.entry_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.is_safe).__module__}.{type(module_1.Container.is_safe).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entries).__module__}.{type(module_1.Container.entries).__qualname__}' == 'builtins.property'
    container_0.find_entry(var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_2.python_revision()
    container_0 = module_1.Container(var_0)
    assert f'{type(container_0).__module__}.{type(container_0).__qualname__}' == 'aeneas.container.Container'
    assert f'{type(container_0.logger).__module__}.{type(container_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_0.logger) == 7
    assert f'{type(container_0.rconf).__module__}.{type(container_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert f'{type(container_0.actual_container).__module__}.{type(container_0.actual_container).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert module_1.Container.TAG == 'Container'
    assert f'{type(module_1.Container.file_path).__module__}.{type(module_1.Container.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.container_format).__module__}.{type(module_1.Container.container_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_xml).__module__}.{type(module_1.Container.has_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_xml).__module__}.{type(module_1.Container.entry_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_txt).__module__}.{type(module_1.Container.has_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_txt).__module__}.{type(module_1.Container.entry_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.is_safe).__module__}.{type(module_1.Container.is_safe).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entries).__module__}.{type(module_1.Container.entries).__qualname__}' == 'builtins.property'
    container_0.read_entry(var_0)

def test_case_10():
    var_0 = module_2.python_branch()
    with pytest.raises(ValueError):
        module_1.Container(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    var_0 = module_2.system()
    container_0 = module_1.Container(var_0, rconf=var_0)
    assert f'{type(container_0).__module__}.{type(container_0).__qualname__}' == 'aeneas.container.Container'
    assert f'{type(container_0.logger).__module__}.{type(container_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_0.logger) == 7
    assert container_0.rconf == 'Linux'
    assert f'{type(container_0.actual_container).__module__}.{type(container_0.actual_container).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert module_1.Container.TAG == 'Container'
    assert f'{type(module_1.Container.file_path).__module__}.{type(module_1.Container.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.container_format).__module__}.{type(module_1.Container.container_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_xml).__module__}.{type(module_1.Container.has_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_xml).__module__}.{type(module_1.Container.entry_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_txt).__module__}.{type(module_1.Container.has_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_txt).__module__}.{type(module_1.Container.entry_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.is_safe).__module__}.{type(module_1.Container.is_safe).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entries).__module__}.{type(module_1.Container.entries).__qualname__}' == 'builtins.property'
    container_0.compress(var_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    var_0 = module_0.custom_tmp_dir()
    container_0 = module_1.Container(var_0, rconf=var_0)
    assert f'{type(container_0).__module__}.{type(container_0).__qualname__}' == 'aeneas.container.Container'
    assert f'{type(container_0.logger).__module__}.{type(container_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_0.logger) == 7
    assert container_0.rconf == '/tmp/'
    assert f'{type(container_0.actual_container).__module__}.{type(container_0.actual_container).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert module_1.Container.TAG == 'Container'
    assert f'{type(module_1.Container.file_path).__module__}.{type(module_1.Container.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.container_format).__module__}.{type(module_1.Container.container_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_xml).__module__}.{type(module_1.Container.has_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_xml).__module__}.{type(module_1.Container.entry_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_txt).__module__}.{type(module_1.Container.has_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_txt).__module__}.{type(module_1.Container.entry_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.is_safe).__module__}.{type(module_1.Container.is_safe).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entries).__module__}.{type(module_1.Container.entries).__qualname__}' == 'builtins.property'
    var_1 = container_0.read_entry(var_0)
    assert len(container_0.logger) == 9
    container_0.compress(var_0)
    var_2 = container_0.decompress(var_0)
    container_unpacked_0 = module_1._ContainerUnpacked(var_1, var_3)
    var_4 = container_unpacked_0.compress(container_0)

def test_case_13():
    var_0 = module_2.version()
    container_unpacked_0 = module_1._ContainerUnpacked(var_0)
    assert f'{type(container_unpacked_0).__module__}.{type(container_unpacked_0).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert f'{type(container_unpacked_0.logger).__module__}.{type(container_unpacked_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_unpacked_0.logger) == 0
    assert f'{type(container_unpacked_0.rconf).__module__}.{type(container_unpacked_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_unpacked_0.file_path == '#1 SMP Debian 5.10.140-1 (2022-09-02)'
    assert module_1._ContainerUnpacked.TAG == 'ContainerUnpacked'
    assert f'{type(module_1._ContainerUnpacked.entries).__module__}.{type(module_1._ContainerUnpacked.entries).__qualname__}' == 'builtins.property'
    var_1 = container_unpacked_0.compress(var_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    container_z_i_p_0 = module_1._ContainerZIP(none_type_0)
    assert f'{type(container_z_i_p_0).__module__}.{type(container_z_i_p_0).__qualname__}' == 'aeneas.container._ContainerZIP'
    assert f'{type(container_z_i_p_0.logger).__module__}.{type(container_z_i_p_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_z_i_p_0.logger) == 0
    assert f'{type(container_z_i_p_0.rconf).__module__}.{type(container_z_i_p_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_z_i_p_0.file_path is None
    assert module_1._ContainerZIP.TAG == 'ContainerZIP'
    assert f'{type(module_1._ContainerZIP.entries).__module__}.{type(module_1._ContainerZIP.entries).__qualname__}' == 'builtins.property'
    container_z_i_p_0.read_entry(container_z_i_p_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    var_0 = module_2.python_revision()
    container_t_a_r_0 = module_1._ContainerTAR(var_0, var_0)
    assert f'{type(container_t_a_r_0).__module__}.{type(container_t_a_r_0).__qualname__}' == 'aeneas.container._ContainerTAR'
    assert f'{type(container_t_a_r_0.logger).__module__}.{type(container_t_a_r_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_t_a_r_0.logger) == 0
    assert f'{type(container_t_a_r_0.rconf).__module__}.{type(container_t_a_r_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_t_a_r_0.file_path == ''
    assert container_t_a_r_0.variant == ''
    assert module_1._ContainerTAR.TAG == 'ContainerTAR'
    assert f'{type(module_1._ContainerTAR.entries).__module__}.{type(module_1._ContainerTAR.entries).__qualname__}' == 'builtins.property'
    container_t_a_r_0.compress(var_0)

def test_case_16():
    var_0 = module_2.version()
    container_0 = module_1.Container(var_0, rconf=var_0)
    assert f'{type(container_0).__module__}.{type(container_0).__qualname__}' == 'aeneas.container.Container'
    assert f'{type(container_0.logger).__module__}.{type(container_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_0.logger) == 7
    assert container_0.rconf == '#1 SMP Debian 5.10.140-1 (2022-09-02)'
    assert f'{type(container_0.actual_container).__module__}.{type(container_0.actual_container).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert module_1.Container.TAG == 'Container'
    assert f'{type(module_1.Container.file_path).__module__}.{type(module_1.Container.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.container_format).__module__}.{type(module_1.Container.container_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_xml).__module__}.{type(module_1.Container.has_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_xml).__module__}.{type(module_1.Container.entry_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_txt).__module__}.{type(module_1.Container.has_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_txt).__module__}.{type(module_1.Container.entry_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.is_safe).__module__}.{type(module_1.Container.is_safe).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entries).__module__}.{type(module_1.Container.entries).__qualname__}' == 'builtins.property'
    var_1 = container_0.read_entry(var_0)
    assert len(container_0.logger) == 10

@pytest.mark.xfail(strict=True)
def test_case_17():
    var_0 = module_2.version()
    container_0 = module_1.Container(var_0, rconf=var_0)
    assert f'{type(container_0).__module__}.{type(container_0).__qualname__}' == 'aeneas.container.Container'
    assert f'{type(container_0.logger).__module__}.{type(container_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_0.logger) == 7
    assert container_0.rconf == '#1 SMP Debian 5.10.140-1 (2022-09-02)'
    assert f'{type(container_0.actual_container).__module__}.{type(container_0.actual_container).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert module_1.Container.TAG == 'Container'
    assert f'{type(module_1.Container.file_path).__module__}.{type(module_1.Container.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.container_format).__module__}.{type(module_1.Container.container_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_xml).__module__}.{type(module_1.Container.has_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_xml).__module__}.{type(module_1.Container.entry_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_txt).__module__}.{type(module_1.Container.has_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_txt).__module__}.{type(module_1.Container.entry_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.is_safe).__module__}.{type(module_1.Container.is_safe).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entries).__module__}.{type(module_1.Container.entries).__qualname__}' == 'builtins.property'
    container_0.decompress(container_0)

def test_case_18():
    var_0 = module_2.release()
    container_unpacked_0 = module_1._ContainerUnpacked(var_0)
    assert f'{type(container_unpacked_0).__module__}.{type(container_unpacked_0).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert f'{type(container_unpacked_0.logger).__module__}.{type(container_unpacked_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_unpacked_0.logger) == 0
    assert f'{type(container_unpacked_0.rconf).__module__}.{type(container_unpacked_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_unpacked_0.file_path == '5.10.0-18-amd64'
    assert module_1._ContainerUnpacked.TAG == 'ContainerUnpacked'
    assert f'{type(module_1._ContainerUnpacked.entries).__module__}.{type(module_1._ContainerUnpacked.entries).__qualname__}' == 'builtins.property'
    var_1 = container_unpacked_0.decompress(var_0)
    var_2 = module_2.release()

def test_case_19():
    var_0 = module_2.version()
    container_0 = module_1.Container(var_0, rconf=var_0)
    assert f'{type(container_0).__module__}.{type(container_0).__qualname__}' == 'aeneas.container.Container'
    assert f'{type(container_0.logger).__module__}.{type(container_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_0.logger) == 7
    assert container_0.rconf == '#1 SMP Debian 5.10.140-1 (2022-09-02)'
    assert f'{type(container_0.actual_container).__module__}.{type(container_0.actual_container).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert module_1.Container.TAG == 'Container'
    assert f'{type(module_1.Container.file_path).__module__}.{type(module_1.Container.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.container_format).__module__}.{type(module_1.Container.container_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_xml).__module__}.{type(module_1.Container.has_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_xml).__module__}.{type(module_1.Container.entry_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_txt).__module__}.{type(module_1.Container.has_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_txt).__module__}.{type(module_1.Container.entry_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.is_safe).__module__}.{type(module_1.Container.is_safe).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entries).__module__}.{type(module_1.Container.entries).__qualname__}' == 'builtins.property'
    var_1 = container_0.find_entry(container_0)
    assert len(container_0.logger) == 10

@pytest.mark.xfail(strict=True)
def test_case_20():
    var_0 = module_2.version()
    container_0 = module_1.Container(var_0, rconf=var_0)
    assert f'{type(container_0).__module__}.{type(container_0).__qualname__}' == 'aeneas.container.Container'
    assert f'{type(container_0.logger).__module__}.{type(container_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_0.logger) == 7
    assert container_0.rconf == '#1 SMP Debian 5.10.140-1 (2022-09-02)'
    assert f'{type(container_0.actual_container).__module__}.{type(container_0.actual_container).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert module_1.Container.TAG == 'Container'
    assert f'{type(module_1.Container.file_path).__module__}.{type(module_1.Container.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.container_format).__module__}.{type(module_1.Container.container_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_xml).__module__}.{type(module_1.Container.has_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_xml).__module__}.{type(module_1.Container.entry_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_txt).__module__}.{type(module_1.Container.has_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_txt).__module__}.{type(module_1.Container.entry_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.is_safe).__module__}.{type(module_1.Container.is_safe).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entries).__module__}.{type(module_1.Container.entries).__qualname__}' == 'builtins.property'
    container_0.decompress(var_0)

def test_case_21():
    var_0 = module_0.custom_tmp_dir()
    container_0 = module_1.Container(var_0, rconf=var_0)
    assert f'{type(container_0).__module__}.{type(container_0).__qualname__}' == 'aeneas.container.Container'
    assert f'{type(container_0.logger).__module__}.{type(container_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_0.logger) == 7
    assert container_0.rconf == '/tmp/'
    assert f'{type(container_0.actual_container).__module__}.{type(container_0.actual_container).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert module_1.Container.TAG == 'Container'
    assert f'{type(module_1.Container.file_path).__module__}.{type(module_1.Container.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.container_format).__module__}.{type(module_1.Container.container_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_xml).__module__}.{type(module_1.Container.has_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_xml).__module__}.{type(module_1.Container.entry_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_txt).__module__}.{type(module_1.Container.has_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_txt).__module__}.{type(module_1.Container.entry_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.is_safe).__module__}.{type(module_1.Container.is_safe).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entries).__module__}.{type(module_1.Container.entries).__qualname__}' == 'builtins.property'
    var_1 = container_0.read_entry(var_0)
    assert len(container_0.logger) == 9

def test_case_22():
    var_0 = module_2.version()
    container_0 = module_1.Container(var_0, rconf=var_0)
    assert f'{type(container_0).__module__}.{type(container_0).__qualname__}' == 'aeneas.container.Container'
    assert f'{type(container_0.logger).__module__}.{type(container_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_0.logger) == 7
    assert container_0.rconf == '#1 SMP Debian 5.10.140-1 (2022-09-02)'
    assert f'{type(container_0.actual_container).__module__}.{type(container_0.actual_container).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert module_1.Container.TAG == 'Container'
    assert f'{type(module_1.Container.file_path).__module__}.{type(module_1.Container.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.container_format).__module__}.{type(module_1.Container.container_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_xml).__module__}.{type(module_1.Container.has_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_xml).__module__}.{type(module_1.Container.entry_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_txt).__module__}.{type(module_1.Container.has_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_txt).__module__}.{type(module_1.Container.entry_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.is_safe).__module__}.{type(module_1.Container.is_safe).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entries).__module__}.{type(module_1.Container.entries).__qualname__}' == 'builtins.property'
    var_1 = container_0.read_entry(var_0)
    assert len(container_0.logger) == 10
    var_2 = container_0.find_entry(var_1, var_1)
    assert len(container_0.logger) == 13

@pytest.mark.xfail(strict=True)
def test_case_23():
    var_0 = module_0.custom_tmp_dir()
    container_0 = module_1.Container(var_0, rconf=var_0)
    assert f'{type(container_0).__module__}.{type(container_0).__qualname__}' == 'aeneas.container.Container'
    assert f'{type(container_0.logger).__module__}.{type(container_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_0.logger) == 7
    assert container_0.rconf == '/tmp/'
    assert f'{type(container_0.actual_container).__module__}.{type(container_0.actual_container).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert module_1.Container.TAG == 'Container'
    assert f'{type(module_1.Container.file_path).__module__}.{type(module_1.Container.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.container_format).__module__}.{type(module_1.Container.container_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_xml).__module__}.{type(module_1.Container.has_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_xml).__module__}.{type(module_1.Container.entry_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_txt).__module__}.{type(module_1.Container.has_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_txt).__module__}.{type(module_1.Container.entry_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.is_safe).__module__}.{type(module_1.Container.is_safe).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entries).__module__}.{type(module_1.Container.entries).__qualname__}' == 'builtins.property'
    var_1 = container_0.read_entry(var_0)
    assert len(container_0.logger) == 9
    container_0.find_entry(container_0)
    none_type_0 = None
    var_2 = container_0.find_entry(container_0, none_type_0)
    var_3 = var_2.compress(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    container_unpacked_0 = module_1._ContainerUnpacked(none_type_0, none_type_0)
    assert f'{type(container_unpacked_0).__module__}.{type(container_unpacked_0).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert f'{type(container_unpacked_0.logger).__module__}.{type(container_unpacked_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_unpacked_0.logger) == 0
    assert f'{type(container_unpacked_0.rconf).__module__}.{type(container_unpacked_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_unpacked_0.file_path is None
    assert module_1._ContainerUnpacked.TAG == 'ContainerUnpacked'
    assert f'{type(module_1._ContainerUnpacked.entries).__module__}.{type(module_1._ContainerUnpacked.entries).__qualname__}' == 'builtins.property'
    container_unpacked_0.decompress(container_unpacked_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    none_type_0 = None
    container_unpacked_0 = module_1._ContainerUnpacked(none_type_0, none_type_0)
    assert f'{type(container_unpacked_0).__module__}.{type(container_unpacked_0).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert f'{type(container_unpacked_0.logger).__module__}.{type(container_unpacked_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_unpacked_0.logger) == 0
    assert f'{type(container_unpacked_0.rconf).__module__}.{type(container_unpacked_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_unpacked_0.file_path is None
    assert module_1._ContainerUnpacked.TAG == 'ContainerUnpacked'
    assert f'{type(module_1._ContainerUnpacked.entries).__module__}.{type(module_1._ContainerUnpacked.entries).__qualname__}' == 'builtins.property'
    container_unpacked_0.read_entry(container_unpacked_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    var_0 = module_2.system()
    container_t_a_r_0 = module_1._ContainerTAR(var_0, var_0, var_0)
    assert f'{type(container_t_a_r_0).__module__}.{type(container_t_a_r_0).__qualname__}' == 'aeneas.container._ContainerTAR'
    assert f'{type(container_t_a_r_0.logger).__module__}.{type(container_t_a_r_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_t_a_r_0.logger) == 0
    assert container_t_a_r_0.rconf == 'Linux'
    assert container_t_a_r_0.file_path == 'Linux'
    assert container_t_a_r_0.variant == 'Linux'
    assert module_1._ContainerTAR.TAG == 'ContainerTAR'
    assert f'{type(module_1._ContainerTAR.entries).__module__}.{type(module_1._ContainerTAR.entries).__qualname__}' == 'builtins.property'
    container_t_a_r_0.read_entry(container_t_a_r_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    var_0 = module_2.python_build()
    container_z_i_p_0 = module_1._ContainerZIP(var_0)
    assert f'{type(container_z_i_p_0).__module__}.{type(container_z_i_p_0).__qualname__}' == 'aeneas.container._ContainerZIP'
    assert f'{type(container_z_i_p_0.logger).__module__}.{type(container_z_i_p_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_z_i_p_0.logger) == 0
    assert f'{type(container_z_i_p_0.rconf).__module__}.{type(container_z_i_p_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_z_i_p_0.file_path == ('main', 'Aug 23 2022 08:36:38')
    assert module_1._ContainerZIP.TAG == 'ContainerZIP'
    assert f'{type(module_1._ContainerZIP.entries).__module__}.{type(module_1._ContainerZIP.entries).__qualname__}' == 'builtins.property'
    container_z_i_p_0.compress(container_z_i_p_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    var_0 = module_2.system()
    container_z_i_p_0 = module_1._ContainerZIP(var_0)
    assert f'{type(container_z_i_p_0).__module__}.{type(container_z_i_p_0).__qualname__}' == 'aeneas.container._ContainerZIP'
    assert f'{type(container_z_i_p_0.logger).__module__}.{type(container_z_i_p_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_z_i_p_0.logger) == 0
    assert f'{type(container_z_i_p_0.rconf).__module__}.{type(container_z_i_p_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_z_i_p_0.file_path == 'Linux'
    assert module_1._ContainerZIP.TAG == 'ContainerZIP'
    assert f'{type(module_1._ContainerZIP.entries).__module__}.{type(module_1._ContainerZIP.entries).__qualname__}' == 'builtins.property'
    container_z_i_p_0.read_entry(var_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    var_0 = module_0.custom_tmp_dir()
    container_z_i_p_0 = module_1._ContainerZIP(var_0)
    assert f'{type(container_z_i_p_0).__module__}.{type(container_z_i_p_0).__qualname__}' == 'aeneas.container._ContainerZIP'
    assert f'{type(container_z_i_p_0.logger).__module__}.{type(container_z_i_p_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_z_i_p_0.logger) == 0
    assert f'{type(container_z_i_p_0.rconf).__module__}.{type(container_z_i_p_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_z_i_p_0.file_path == '/tmp/'
    assert module_1._ContainerZIP.TAG == 'ContainerZIP'
    assert f'{type(module_1._ContainerZIP.entries).__module__}.{type(module_1._ContainerZIP.entries).__qualname__}' == 'builtins.property'
    container_z_i_p_0.decompress(var_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    var_0 = module_2.version()
    container_z_i_p_0 = module_1._ContainerZIP(var_0)
    assert f'{type(container_z_i_p_0).__module__}.{type(container_z_i_p_0).__qualname__}' == 'aeneas.container._ContainerZIP'
    assert f'{type(container_z_i_p_0.logger).__module__}.{type(container_z_i_p_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_z_i_p_0.logger) == 0
    assert f'{type(container_z_i_p_0.rconf).__module__}.{type(container_z_i_p_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_z_i_p_0.file_path == '#1 SMP Debian 5.10.140-1 (2022-09-02)'
    assert module_1._ContainerZIP.TAG == 'ContainerZIP'
    assert f'{type(module_1._ContainerZIP.entries).__module__}.{type(module_1._ContainerZIP.entries).__qualname__}' == 'builtins.property'
    container_z_i_p_0.compress(container_z_i_p_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    container_format_0 = module_1.ContainerFormat()
    assert module_1.ContainerFormat.EPUB == 'epub'
    assert module_1.ContainerFormat.TAR == 'tar'
    assert module_1.ContainerFormat.TAR_GZ == 'tar.gz'
    assert module_1.ContainerFormat.TAR_BZ2 == 'tar.bz2'
    assert module_1.ContainerFormat.UNPACKED == 'unpacked'
    assert module_1.ContainerFormat.ZIP == 'zip'
    assert module_1.ContainerFormat.ALLOWED_FILE_VALUES == ['epub', 'tar', 'tar.gz', 'tar.bz2', 'zip']
    assert module_1.ContainerFormat.ALLOWED_VALUES == ['epub', 'tar', 'tar.gz', 'tar.bz2', 'unpacked', 'zip']
    var_0 = module_2.python_revision()
    var_1 = module_2.release()
    container_unpacked_0 = module_1._ContainerUnpacked(var_0, var_0, logger=var_0)
    assert f'{type(container_unpacked_0).__module__}.{type(container_unpacked_0).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert container_unpacked_0.logger == ''
    assert f'{type(container_unpacked_0.rconf).__module__}.{type(container_unpacked_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_unpacked_0.file_path == ''
    assert module_1._ContainerUnpacked.TAG == 'ContainerUnpacked'
    assert f'{type(module_1._ContainerUnpacked.entries).__module__}.{type(module_1._ContainerUnpacked.entries).__qualname__}' == 'builtins.property'
    container_unpacked_0.decompress(var_1)

@pytest.mark.xfail(strict=True)
def test_case_32():
    var_0 = module_2.release()
    container_z_i_p_0 = module_1._ContainerZIP(var_0)
    assert f'{type(container_z_i_p_0).__module__}.{type(container_z_i_p_0).__qualname__}' == 'aeneas.container._ContainerZIP'
    assert f'{type(container_z_i_p_0.logger).__module__}.{type(container_z_i_p_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_z_i_p_0.logger) == 0
    assert f'{type(container_z_i_p_0.rconf).__module__}.{type(container_z_i_p_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_z_i_p_0.file_path == '5.10.0-18-amd64'
    assert module_1._ContainerZIP.TAG == 'ContainerZIP'
    assert f'{type(module_1._ContainerZIP.entries).__module__}.{type(module_1._ContainerZIP.entries).__qualname__}' == 'builtins.property'
    container_z_i_p_0.decompress(container_z_i_p_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    var_0 = module_0.custom_tmp_dir()
    container_unpacked_0 = module_1._ContainerUnpacked(var_0, logger=var_0)
    assert f'{type(container_unpacked_0).__module__}.{type(container_unpacked_0).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert container_unpacked_0.logger == '/tmp/'
    assert f'{type(container_unpacked_0.rconf).__module__}.{type(container_unpacked_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert container_unpacked_0.file_path == '/tmp/'
    assert module_1._ContainerUnpacked.TAG == 'ContainerUnpacked'
    assert f'{type(module_1._ContainerUnpacked.entries).__module__}.{type(module_1._ContainerUnpacked.entries).__qualname__}' == 'builtins.property'
    container_0 = module_1.Container(var_0, rconf=var_0)
    assert f'{type(container_0).__module__}.{type(container_0).__qualname__}' == 'aeneas.container.Container'
    assert f'{type(container_0.logger).__module__}.{type(container_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(container_0.logger) == 7
    assert container_0.rconf == '/tmp/'
    assert f'{type(container_0.actual_container).__module__}.{type(container_0.actual_container).__qualname__}' == 'aeneas.container._ContainerUnpacked'
    assert module_1.Container.TAG == 'Container'
    assert f'{type(module_1.Container.file_path).__module__}.{type(module_1.Container.file_path).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.container_format).__module__}.{type(module_1.Container.container_format).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_xml).__module__}.{type(module_1.Container.has_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_xml).__module__}.{type(module_1.Container.entry_config_xml).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.has_config_txt).__module__}.{type(module_1.Container.has_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entry_config_txt).__module__}.{type(module_1.Container.entry_config_txt).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.is_safe).__module__}.{type(module_1.Container.is_safe).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Container.entries).__module__}.{type(module_1.Container.entries).__qualname__}' == 'builtins.property'
    var_1 = container_0.read_entry(var_0)
    assert len(container_0.logger) == 9
    var_2 = var_1.__repr__()
    container_unpacked_0.compress(var_2)