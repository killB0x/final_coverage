# Automatically generated by Pynguin.
import pytest
import aeneas.executejob as module_0
import aeneas.globalfunctions as module_1

def test_case_0():
    execute_job_0 = module_0.ExecuteJob()
    assert f'{type(execute_job_0).__module__}.{type(execute_job_0).__qualname__}' == 'aeneas.executejob.ExecuteJob'
    assert f'{type(execute_job_0.logger).__module__}.{type(execute_job_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(execute_job_0.logger) == 0
    assert f'{type(execute_job_0.rconf).__module__}.{type(execute_job_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert execute_job_0.job is None
    assert execute_job_0.working_directory is None
    assert execute_job_0.tmp_directory is None
    assert module_0.ExecuteJob.TAG == 'ExecuteJob'

@pytest.mark.xfail(strict=True)
def test_case_1():
    execute_job_input_error_0 = module_0.ExecuteJobInputError()
    module_0.ExecuteJob(execute_job_input_error_0, logger=execute_job_input_error_0)

def test_case_2():
    execute_job_input_error_0 = module_0.ExecuteJobInputError()

@pytest.mark.xfail(strict=True)
def test_case_3():
    execute_job_0 = module_0.ExecuteJob()
    assert f'{type(execute_job_0).__module__}.{type(execute_job_0).__qualname__}' == 'aeneas.executejob.ExecuteJob'
    assert f'{type(execute_job_0.logger).__module__}.{type(execute_job_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(execute_job_0.logger) == 0
    assert f'{type(execute_job_0.rconf).__module__}.{type(execute_job_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert execute_job_0.job is None
    assert execute_job_0.working_directory is None
    assert execute_job_0.tmp_directory is None
    assert module_0.ExecuteJob.TAG == 'ExecuteJob'
    execute_job_0.load_job_from_container(execute_job_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    execute_job_0 = module_0.ExecuteJob()
    assert f'{type(execute_job_0).__module__}.{type(execute_job_0).__qualname__}' == 'aeneas.executejob.ExecuteJob'
    assert f'{type(execute_job_0.logger).__module__}.{type(execute_job_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(execute_job_0.logger) == 0
    assert f'{type(execute_job_0.rconf).__module__}.{type(execute_job_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert execute_job_0.job is None
    assert execute_job_0.working_directory is None
    assert execute_job_0.tmp_directory is None
    assert module_0.ExecuteJob.TAG == 'ExecuteJob'
    execute_job_0.execute()

@pytest.mark.xfail(strict=True)
def test_case_5():
    execute_job_0 = module_0.ExecuteJob()
    assert f'{type(execute_job_0).__module__}.{type(execute_job_0).__qualname__}' == 'aeneas.executejob.ExecuteJob'
    assert f'{type(execute_job_0.logger).__module__}.{type(execute_job_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(execute_job_0.logger) == 0
    assert f'{type(execute_job_0.rconf).__module__}.{type(execute_job_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert execute_job_0.job is None
    assert execute_job_0.working_directory is None
    assert execute_job_0.tmp_directory is None
    assert module_0.ExecuteJob.TAG == 'ExecuteJob'
    execute_job_0.write_output_container(execute_job_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    execute_job_0 = module_0.ExecuteJob()
    assert f'{type(execute_job_0).__module__}.{type(execute_job_0).__qualname__}' == 'aeneas.executejob.ExecuteJob'
    assert f'{type(execute_job_0.logger).__module__}.{type(execute_job_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(execute_job_0.logger) == 0
    assert f'{type(execute_job_0.rconf).__module__}.{type(execute_job_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert execute_job_0.job is None
    assert execute_job_0.working_directory is None
    assert execute_job_0.tmp_directory is None
    assert module_0.ExecuteJob.TAG == 'ExecuteJob'
    none_type_0 = None
    var_0 = execute_job_0.clean(none_type_0)
    assert len(execute_job_0.logger) == 2
    execute_job_0.load_job_from_container(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    execute_job_0 = module_0.ExecuteJob()
    assert f'{type(execute_job_0).__module__}.{type(execute_job_0).__qualname__}' == 'aeneas.executejob.ExecuteJob'
    assert f'{type(execute_job_0.logger).__module__}.{type(execute_job_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(execute_job_0.logger) == 0
    assert f'{type(execute_job_0.rconf).__module__}.{type(execute_job_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert execute_job_0.job is None
    assert execute_job_0.working_directory is None
    assert execute_job_0.tmp_directory is None
    assert module_0.ExecuteJob.TAG == 'ExecuteJob'
    var_0 = module_1.tmp_directory()
    execute_job_0.load_job_from_container(var_0)