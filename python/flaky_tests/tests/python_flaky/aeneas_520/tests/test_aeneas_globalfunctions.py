# Automatically generated by Pynguin.
import pytest
import aeneas.globalfunctions as module_0
import platform as module_1
import re as module_2

def test_case_0():
    var_0 = module_0.can_run_c_extension()
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.print_success(var_0)

def test_case_1():
    var_0 = module_0.uuid_string()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.print_warning(var_0, var_0)

def test_case_2():
    var_0 = module_0.tmp_file()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_3():
    var_0 = module_0.tmp_directory()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    module_0.file_extension(bool_0)

def test_case_5():
    var_0 = module_0.datetime_string()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_6():
    tuple_0 = ()
    var_0 = module_0.safe_float(tuple_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_7():
    var_0 = module_1.processor()
    var_1 = module_0.safe_int(var_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_8():
    var_0 = module_1.node()
    var_1 = module_0.norm_join(var_0, var_0)
    assert var_1 == 'e48cc23da754/e48cc23da754'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_2 = module_0.config_txt_to_string(var_0)
    assert var_2 == 'e48cc23da754'

def test_case_9():
    none_type_0 = None
    var_0 = module_0.config_string_to_dict(none_type_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.file_can_be_read(none_type_0)
    assert var_1 is False
    var_2 = module_0.safe_int(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    var_0 = module_0.config_xml_to_dict(none_type_0, none_type_0, none_type_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.delete_file(none_type_0, none_type_0)
    module_0.copytree(var_0, none_type_0)

def test_case_11():
    bytes_0 = b'\xc4\x1c\x0fY;A2'
    none_type_0 = None
    var_0 = module_0.relative_path(none_type_0, bytes_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.config_xml_to_dict(bytes_0, none_type_0)
    var_2 = module_0.fix_slash(bytes_0)
    assert var_2 == b'\xc4\x1c\x0fY;A2'

@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b'l\x8c\x06\xf3'
    var_0 = module_0.copytree(bytes_0, bytes_0)

def test_case_13():
    var_0 = module_2.purge()
    var_1 = module_0.time_from_ssmmm(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.exacttiming.TimeValue'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_2 = module_1.processor()
    var_3 = module_0.can_run_c_extension(var_2)
    assert var_3 is False
    var_4 = module_0.is_py2_narrow_build()

@pytest.mark.xfail(strict=True)
def test_case_14():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.relative_path(var_0, var_0)
    assert var_1 == '../tmp'
    module_0.time_from_ssmmm(var_0)

def test_case_15():
    var_0 = module_0.uuid_string()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.time_from_srt(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.exacttiming.TimeValue'

def test_case_16():
    bool_0 = True
    var_0 = module_0.file_can_be_read(bool_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.safe_unichr(bool_0)
    assert var_1 == '\x01'
    var_2 = module_0.time_to_hhmmssmmm(bool_0, bool_0)
    assert var_2 == '00:00:01True000'

def test_case_17():
    var_0 = module_0.is_osx()
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_18():
    var_0 = module_0.is_py2_narrow_build()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_19():
    bytes_0 = b'\xc4\x1c\x0fY;A2'
    var_0 = module_0.fix_slash(bytes_0)
    assert var_0 == b'\xc4\x1c\x0fY;A2'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_20():
    var_0 = module_0.can_run_c_extension()
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_21():
    bytes_0 = b'\xd3\x1c\x0fY;A2'
    var_0 = module_0.file_can_be_written(bytes_0)
    assert var_0 is True
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = None
    var_0 = module_0.file_exists(none_type_0)
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.file_can_be_read(none_type_0)
    assert var_1 is False
    var_2 = module_0.safe_unichr(var_1)
    assert var_2 == '\x00'
    module_0.ensure_parent_directory(var_2, var_1)

def test_case_23():
    var_0 = module_0.bundle_directory()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.is_windows()
    assert var_1 is False
    bool_0 = False
    var_2 = module_0.file_exists(bool_0)
    assert var_2 is False

@pytest.mark.xfail(strict=True)
def test_case_24():
    var_0 = module_1.python_compiler()
    var_1 = module_0.time_from_hhmmssmmm(var_0, var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.exacttiming.TimeValue'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    module_0.file_size(var_1)

def test_case_25():
    bool_0 = True
    var_0 = module_0.delete_directory(bool_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.uuid_string()

def test_case_26():
    str_0 = 'SlS\n\'\\Gbv="9u\''
    var_0 = module_0.close_file_handler(str_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.config_string_to_dict(str_0)

def test_case_27():
    none_type_0 = None
    var_0 = module_0.file_can_be_read(none_type_0)
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.file_can_be_read(var_0)
    var_2 = module_0.delete_file(var_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.safe_float(var_0)
    var_2 = module_0.object_to_unicode(var_1)
    assert var_2 == 'None'
    var_3 = module_0.relative_path(var_1, var_1)
    module_0.copytree(var_2, var_0)

def test_case_29():
    none_type_0 = None
    var_0 = module_0.safe_bytes(none_type_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    dict_0 = {var_0: var_0, none_type_0: var_0, none_type_0: none_type_0}
    var_1 = module_0.absolute_path(none_type_0, var_0)
    var_2 = module_0.safe_get(dict_0, var_0, dict_0)
    var_3 = module_0.safe_unicode_stdin(var_0)
    var_4 = module_0.file_can_be_written(var_2)
    assert var_4 is False

@pytest.mark.xfail(strict=True)
def test_case_30():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    module_0.human_readable_number(var_0)

def test_case_31():
    var_0 = module_1.python_version()
    var_1 = module_0.is_unicode(var_0)
    assert var_1 is True
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_32():
    var_0 = module_0.uuid_string()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_33():
    bool_0 = True
    var_0 = module_0.safe_str(bool_0)
    assert var_0 is True
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_34():
    bool_0 = True
    var_0 = module_0.safe_unichr(bool_0)
    assert var_0 == '\x01'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_35():
    var_0 = module_0.can_run_c_extension()
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.safe_bytes(var_0)
    assert var_1 is False

def test_case_36():
    bytes_0 = b'\xc4\x1c\x0fY;A2'
    var_0 = module_0.object_to_unicode(bytes_0)
    assert var_0 == "b'\\xc4\\x1c\\x0fY;A2'"
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_37():
    var_0 = module_1.processor()
    var_1 = module_0.object_to_bytes(var_0)
    assert var_1 == b''
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_38():
    var_0 = module_0.bundle_directory()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_39():
    bytes_0 = b'l\x8c\x06\xf3'
    var_0 = module_0.print_info(bytes_0, bytes_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_40():
    bytes_0 = b'\xc4\x1c\x0f\xdeA'
    var_0 = module_0.print_error(bytes_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.time_to_srt(var_0)
    assert var_1 == '00:00:00,000'
    var_2 = module_0.pairs_to_dict(var_1)

def test_case_41():
    var_0 = module_0.is_windows()
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

@pytest.mark.xfail(strict=True)
def test_case_42():
    var_0 = module_1.python_build()
    module_0.file_can_be_written(var_0)

@pytest.mark.xfail(strict=True)
def test_case_43():
    bytes_0 = b"\xca8\x19\xb0\xda'\xa0\xc1\xfb\xda[\xa3"
    module_0.safe_unicode(bytes_0)

def test_case_44():
    var_0 = module_1.processor()
    var_1 = module_0.safe_bytes(var_0)
    assert var_1 == b''
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

@pytest.mark.xfail(strict=True)
def test_case_45():
    var_0 = module_0.tmp_directory()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.safe_bytes(var_0)
    var_2 = module_0.file_can_be_written(var_0)
    assert var_2 is False
    var_3 = module_0.safe_int(var_0)
    module_0.norm_join(var_2, var_3)

def test_case_46():
    var_0 = module_1.processor()
    var_1 = module_0.object_to_bytes(var_0)
    assert var_1 == b''
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_2 = module_0.print_success(var_1, var_1)

def test_case_47():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.mimetype_from_path(var_0)

def test_case_48():
    var_0 = module_0.uuid_string()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.relative_path(var_0, var_0)
    var_2 = module_0.file_name_without_extension(var_1)

def test_case_49():
    var_0 = module_0.uuid_string()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.file_can_be_written(var_0)
    assert var_1 is True
    var_2 = module_0.datetime_string(var_1)
    var_3 = module_0.safe_get(var_0, var_1, var_0)

def test_case_50():
    tuple_0 = module_1.node()
    var_0 = module_0.safe_get(tuple_0, tuple_0, tuple_0)
    assert var_0 == 'e48cc23da754'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

@pytest.mark.xfail(strict=True)
def test_case_51():
    str_0 = 'md)q'
    var_0 = module_0.can_run_c_extension(str_0)
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    module_0.config_xml_to_dict(var_0, var_0)

def test_case_52():
    var_0 = module_1.node()
    var_1 = module_0.pairs_to_dict(var_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_53():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.time_from_hhmmssmmm(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.exacttiming.TimeValue'

@pytest.mark.xfail(strict=True)
def test_case_54():
    none_type_0 = None
    var_0 = module_0.split_url(none_type_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.datetime_string()
    bytes_0 = b'l\x8c\x06\xf3'
    var_2 = module_0.copytree(bytes_0, bytes_0)

def test_case_55():
    var_0 = module_0.bundle_directory()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.directory_exists(var_0)
    assert var_1 is False
    var_2 = module_0.safe_unicode_stdin(var_1)
    assert var_2 is False
    var_3 = module_0.fix_slash(var_0)

def test_case_56():
    var_0 = module_0.is_osx()
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.file_size(var_0)
    assert var_1 == -1

@pytest.mark.xfail(strict=True)
def test_case_57():
    bytes_0 = b'\xc40\x0f[\xdeA'
    module_0.relative_path(bytes_0, bytes_0)

def test_case_58():
    var_0 = module_1.processor()
    var_1 = module_0.safe_bytes(var_0)
    assert var_1 == b''
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_2 = module_0.file_exists(var_0)
    assert var_2 is False
    var_3 = module_0.time_from_ssmmm(var_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'aeneas.exacttiming.TimeValue'
    var_4 = module_0.fix_slash(var_0)
    var_5 = module_0.safe_unicode_stdin(var_3)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'aeneas.exacttiming.TimeValue'

def test_case_59():
    var_0 = module_1.processor()
    var_1 = module_0.safe_float(var_0, var_0)
    assert var_1 == ''
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_60():
    str_0 = 'SlS\n\'\\Gbv="9u\''
    var_0 = module_0.config_string_to_dict(str_0, str_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_61():
    bool_0 = False
    var_0 = module_0.safe_unichr(bool_0)
    assert var_0 == '\x00'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.time_to_ssmmm(bool_0)
    assert var_1 == '0.000'

def test_case_62():
    var_0 = module_1.platform()
    var_1 = module_0.split_url(var_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_2 = module_0.safe_get(var_1, var_1, var_1)

def test_case_63():
    var_0 = module_1.processor()
    var_1 = module_0.file_can_be_read(var_0)
    assert var_1 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_64():
    bool_0 = False
    var_0 = module_0.safe_bytes(bool_0)
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.directory_exists(var_0)
    assert var_1 is False

def test_case_65():
    bytes_0 = b'\xc4\x1c\x0fY;A2'
    var_0 = module_0.safe_unicode_stdin(bytes_0)
    assert var_0 == '�\x1c\x0fY;A2'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_66():
    var_0 = module_0.is_linux()
    assert var_0 is True
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.safe_unicode_stdin(var_0)
    assert var_1 is True

def test_case_67():
    var_0 = module_0.is_linux()
    assert var_0 is True
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_68():
    bool_0 = True
    var_0 = module_0.file_can_be_written(bool_0)
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_69():
    var_0 = module_2.purge()
    var_1 = module_0.mimetype_from_path(var_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

@pytest.mark.xfail(strict=True)
def test_case_70():
    var_0 = module_1.processor()
    module_0.safe_int(var_0, var_0)

def test_case_71():
    str_0 = 'SlS\n\'\\Gbv="9u\''
    var_0 = module_0.print_warning(str_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.is_linux()
    assert var_1 is True
    var_2 = module_0.safe_str(var_0)
    var_3 = module_0.safe_unicode_stdin(str_0)
    assert var_3 == 'SlS\n\'\\Gbv="9u\''

def test_case_72():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    none_type_0 = None
    var_1 = module_0.norm_join(none_type_0, var_0)
    assert var_1 == '/tmp'
    var_2 = module_0.mimetype_from_path(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_73():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.safe_int(var_0)
    var_2 = module_0.norm_join(var_1, var_1)
    assert var_2 == '.'
    var_3 = module_0.can_run_c_extension(var_0)
    assert var_3 is False
    module_0.copytree(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_74():
    bool_0 = False
    var_0 = module_0.safe_unichr(bool_0)
    assert var_0 == '\x00'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    module_0.config_dict_to_string(var_0)

def test_case_75():
    var_0 = module_0.bundle_directory()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.safe_unicode_stdin(var_0)

def test_case_76():
    str_0 = 'm\x0bq'
    var_0 = module_0.can_run_c_extension(str_0)
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.time_to_hhmmssmmm(var_0)
    assert var_1 == '00:00:00.000'
    var_2 = module_0.file_exists(var_0)

def test_case_77():
    var_0 = module_0.uuid_string()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.print_error(var_0)
    var_2 = module_0.config_txt_to_string(var_1)

def test_case_78():
    var_0 = module_0.bundle_directory()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.file_can_be_read(var_0)
    assert var_1 is False

@pytest.mark.xfail(strict=True)
def test_case_79():
    bool_0 = False
    var_0 = module_0.print_error(bool_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    module_0.is_utf8_encoded(var_0)

@pytest.mark.xfail(strict=True)
def test_case_80():
    var_0 = module_1.python_build()
    module_0.file_can_be_read(var_0)

def test_case_81():
    var_0 = module_0.uuid_string()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.print_error(var_0)

def test_case_82():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.safe_float(var_0)
    var_2 = module_0.print_error(var_1, var_1)

def test_case_83():
    var_0 = module_1.processor()
    var_1 = module_0.is_linux()
    assert var_1 is True
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_2 = module_0.print_error(var_0)
    var_3 = module_0.safe_bytes(var_2)

def test_case_84():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.config_txt_to_string(var_0)
    assert var_1 == '/tmp/'

def test_case_85():
    var_0 = module_0.can_run_c_extension()
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.time_to_ttml(var_0)
    assert var_1 == '0.000s'
    var_2 = var_1.__ge__(var_1)

def test_case_86():
    none_type_0 = None
    bool_0 = True
    var_0 = module_0.safe_get(none_type_0, none_type_0, bool_0, bool_0)
    assert var_0 is True
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.can_run_c_extension()
    assert var_1 is False
    var_2 = module_0.directory_exists(var_0)
    assert var_2 is False
    var_3 = module_0.safe_unichr(var_0)
    assert var_3 == '\x01'
    var_4 = module_0.time_to_ssmmm(none_type_0)
    assert var_4 == '0.000'

@pytest.mark.xfail(strict=True)
def test_case_87():
    var_0 = module_0.can_run_c_extension()
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.time_to_ttml(var_0)
    assert var_1 == '0.000s'
    var_2 = module_1.platform()
    module_0.tmp_directory(var_1)

def test_case_88():
    var_0 = module_1.python_implementation()
    var_1 = module_0.object_to_unicode(var_0)
    assert var_1 == 'CPython'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_2 = module_0.fix_slash(var_1)
    var_3 = module_0.mimetype_from_path(var_1)
    var_4 = module_0.file_name_without_extension(var_3)

def test_case_89():
    var_0 = module_0.can_run_c_extension()
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.human_readable_number(var_0)
    assert var_1 == '0.0'

def test_case_90():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.print_success(var_0, var_0)
    var_2 = module_0.directory_exists(var_0)
    assert var_2 is True
    var_3 = module_0.file_can_be_read(var_0)
    assert var_3 is False

@pytest.mark.xfail(strict=True)
def test_case_91():
    bool_0 = True
    var_0 = module_0.safe_unichr(bool_0)
    assert var_0 == '\x01'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    module_0.time_from_ttml(bool_0)

def test_case_92():
    none_type_0 = None
    var_0 = module_0.print_warning(none_type_0, none_type_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.can_run_c_extension()
    assert var_1 is False

@pytest.mark.xfail(strict=True)
def test_case_93():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    module_0.pairs_to_dict(var_0, var_0)

def test_case_94():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.safe_int(var_0)
    var_2 = module_0.tmp_file(root=var_0)
    var_3 = var_2.__le__(var_1)
    var_4 = module_0.can_run_c_extension(var_0)
    assert var_4 is False
    var_5 = module_0.relative_path(var_0, var_0)
    assert var_5 == '../tmp'

def test_case_95():
    none_type_0 = None
    var_0 = module_0.file_can_be_written(none_type_0)
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_96():
    var_0 = module_1.python_version()
    var_1 = module_0.ensure_parent_directory(var_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_97():
    bytes_0 = b'\xc4\x1c\x0fY;A2'
    none_type_0 = None
    var_0 = module_0.is_unicode(none_type_0)
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.time_from_ttml(none_type_0)
    assert var_1 == 0
    var_2 = module_0.safe_unicode_stdin(bytes_0)
    assert var_2 == '�\x1c\x0fY;A2'

@pytest.mark.xfail(strict=True)
def test_case_98():
    bytes_0 = b'\xc4\x1c\x0fY;A2'
    module_0.time_from_ttml(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_99():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    module_0.copytree(var_0, var_0)
    var_2 = module_0.time_to_ttml(var_1)
    var_3 = module_0.time_from_hhmmssmmm(var_0)

def test_case_100():
    bytes_0 = b'\xc4\x1c\x0f\xdeA'
    var_0 = module_0.file_can_be_written(bytes_0)
    assert var_0 is True
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.safe_get(bytes_0, var_0, bytes_0)
    assert var_1 == 28

def test_case_101():
    var_0 = module_1.processor()
    var_1 = var_0.rstrip()
    var_2 = module_0.bundle_directory()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_3 = module_0.can_run_c_extension(var_0)
    assert var_3 is False
    var_4 = module_0.config_dict_to_string(var_0)

def test_case_102():
    bytes_0 = b'\xc40\x0f\xde'
    var_0 = module_0.directory_exists(bytes_0)
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.bundle_directory()
    var_2 = module_0.is_utf8_encoded(bytes_0)
    assert var_2 is False
    var_3 = module_0.safe_get(bytes_0, var_2, var_1)
    assert var_3 == 196
    var_4 = module_0.fix_slash(bytes_0)
    assert var_4 == b'\xc40\x0f\xde'
    var_5 = module_0.safe_unicode_stdin(var_4)
    assert var_5 == '�0\x0f�'

@pytest.mark.xfail(strict=True)
def test_case_103():
    bytes_0 = b'\xd8\xf3\xf2\x9dJ\xe7\xd7\xc8\xaf\x8f=Da'
    var_0 = module_0.print_error(bytes_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.delete_directory(var_0)
    module_0.object_to_bytes(var_1)

@pytest.mark.xfail(strict=True)
def test_case_104():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    module_0.copytree(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_105():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    module_0.copytree(var_0, var_0, var_0)

def test_case_106():
    var_0 = module_1.processor()
    var_1 = module_0.config_string_to_dict(var_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_2 = module_0.pairs_to_dict(var_1)

def test_case_107():
    var_0 = module_1.platform()
    var_1 = module_0.mimetype_from_path(var_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_108():
    bytes_0 = b'\x1c'
    var_0 = module_0.safe_unicode_stdin(bytes_0)
    assert var_0 == '\x1c'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.config_txt_to_string(var_0)
    assert var_1 == ''

@pytest.mark.xfail(strict=True)
def test_case_109():
    var_0 = module_1.processor()
    var_1 = module_0.file_can_be_written(var_0)
    assert var_1 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    dict_0 = {var_0: var_1}
    module_0.safe_get(var_0, var_1, dict_0)

def test_case_110():
    var_0 = module_1.version()
    var_1 = module_0.split_url(var_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_2 = module_0.safe_get(var_1, var_1, var_1)

@pytest.mark.xfail(strict=True)
def test_case_111():
    var_0 = module_1.processor()
    var_1 = module_0.can_run_c_extension(var_0)
    assert var_1 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_2 = module_0.time_from_ttml(var_0)
    assert var_2 == 0
    var_3 = module_0.safe_unicode(var_0)
    assert var_3 == ''
    var_4 = module_0.file_can_be_written(var_1)
    assert var_4 is True
    module_0.copytree(var_3, var_3)

@pytest.mark.xfail(strict=True)
def test_case_112():
    bool_0 = True
    var_0 = module_0.object_to_unicode(bool_0)
    assert var_0 == 'True'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    str_0 = 'm)q'
    module_0.copytree(str_0, var_0, bool_0)

def test_case_113():
    none_type_0 = None
    var_0 = module_0.safe_unicode(none_type_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

@pytest.mark.xfail(strict=True)
def test_case_114():
    int_0 = 2030
    var_0 = module_0.human_readable_number(int_0, int_0)
    assert var_0 == '2.0K2030'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    module_0.safe_unichr(var_0)

def test_case_115():
    str_0 = '*IH'
    var_0 = module_0.mimetype_from_path(str_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.ensure_parent_directory(str_0, var_0)

def test_case_116():
    var_0 = module_0.custom_tmp_dir()
    assert var_0 == '/tmp/'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    str_0 = '*IH'
    var_1 = module_0.mimetype_from_path(var_0)
    var_2 = module_0.ensure_parent_directory(str_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_117():
    str_0 = 'SlS\n\'\\Gbv="9u\''
    var_0 = module_0.print_warning(str_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.pairs_to_dict(str_0)
    var_2 = var_0.__repr__()
    var_3 = module_0.safe_float(var_2)
    module_0.safe_unichr(var_2)

@pytest.mark.xfail(strict=True)
def test_case_118():
    bool_0 = False
    var_0 = module_0.time_to_srt(bool_0)
    assert var_0 == '00:00:00,000'
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.time_from_srt(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.exacttiming.TimeValue'
    var_2 = module_0.pairs_to_dict(var_0)
    var_3 = module_0.time_from_ssmmm(var_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'aeneas.exacttiming.TimeValue'
    var_4 = var_1.__add__(var_1)
    module_0.file_size(var_1)

@pytest.mark.xfail(strict=True)
def test_case_119():
    none_type_0 = None
    var_0 = module_0.file_can_be_read(none_type_0)
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.safe_unichr(var_0)
    assert var_1 == '\x00'
    module_0.ensure_parent_directory(var_1, var_0)

@pytest.mark.xfail(strict=True)
def test_case_120():
    str_0 = '�Jg���Q='
    module_0.config_string_to_dict(str_0, str_0)

def test_case_121():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0, none_type_0: none_type_0, none_type_0: none_type_0}
    var_0 = module_0.safe_get(dict_0, none_type_0, dict_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False

def test_case_122():
    var_0 = module_0.is_osx()
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = module_0.print_warning(var_0)

def test_case_123():
    var_0 = module_0.uuid_string()
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    var_1 = var_0.join(var_0)
    var_2 = module_0.file_can_be_read(var_0)
    assert var_2 is False
    with pytest.raises(OSError):
        module_0.ensure_parent_directory(var_1, var_2)

def test_case_124():
    none_type_0 = None
    var_0 = module_0.safe_bytes(none_type_0)
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False
    dict_0 = {var_0: var_0, none_type_0: var_0, none_type_0: none_type_0}
    var_1 = var_0.__gt__(var_0)
    var_2 = module_0.close_file_handler(dict_0)
    var_3 = module_0.absolute_path(none_type_0, var_0)
    var_4 = module_0.safe_get(dict_0, none_type_0, none_type_0, none_type_0)
    var_5 = module_0.safe_unicode_stdin(var_0)
    var_6 = module_0.file_can_be_written(var_4)
    assert var_6 is False

def test_case_125():
    str_0 = 'cfw'
    var_0 = module_0.can_run_c_extension(str_0)
    assert var_0 is False
    assert module_0.ANSI_END == '\x1b[0m'
    assert module_0.ANSI_ERROR == '\x1b[91m'
    assert module_0.ANSI_OK == '\x1b[92m'
    assert module_0.ANSI_WARNING == '\x1b[93m'
    assert module_0.PY2 is False