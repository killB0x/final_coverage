# Automatically generated by Pynguin.
import pytest
import aeneas.adjustboundaryalgorithm as module_0
import aeneas.tree as module_1
import aeneas.textfile as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    adjust_boundary_algorithm_0 = module_0.AdjustBoundaryAlgorithm()
    assert f'{type(adjust_boundary_algorithm_0).__module__}.{type(adjust_boundary_algorithm_0).__qualname__}' == 'aeneas.adjustboundaryalgorithm.AdjustBoundaryAlgorithm'
    assert f'{type(adjust_boundary_algorithm_0.logger).__module__}.{type(adjust_boundary_algorithm_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(adjust_boundary_algorithm_0.logger) == 0
    assert f'{type(adjust_boundary_algorithm_0.rconf).__module__}.{type(adjust_boundary_algorithm_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert adjust_boundary_algorithm_0.smflist is None
    assert f'{type(adjust_boundary_algorithm_0.mws).__module__}.{type(adjust_boundary_algorithm_0.mws).__qualname__}' == 'aeneas.exacttiming.TimeValue'
    assert module_0.AdjustBoundaryAlgorithm.AFTERCURRENT == 'aftercurrent'
    assert module_0.AdjustBoundaryAlgorithm.AUTO == 'auto'
    assert module_0.AdjustBoundaryAlgorithm.BEFORENEXT == 'beforenext'
    assert module_0.AdjustBoundaryAlgorithm.OFFSET == 'offset'
    assert module_0.AdjustBoundaryAlgorithm.PERCENT == 'percent'
    assert module_0.AdjustBoundaryAlgorithm.RATE == 'rate'
    assert module_0.AdjustBoundaryAlgorithm.RATEAGGRESSIVE == 'rateaggressive'
    assert module_0.AdjustBoundaryAlgorithm.ALLOWED_VALUES == ['aftercurrent', 'auto', 'beforenext', 'offset', 'percent', 'rate', 'rateaggressive']
    assert module_0.AdjustBoundaryAlgorithm.TAG == 'AdjustBoundaryAlgorithm'
    adjust_boundary_algorithm_0.adjust(adjust_boundary_algorithm_0, adjust_boundary_algorithm_0, adjust_boundary_algorithm_0, adjust_boundary_algorithm_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    adjust_boundary_algorithm_0 = module_0.AdjustBoundaryAlgorithm()
    assert f'{type(adjust_boundary_algorithm_0).__module__}.{type(adjust_boundary_algorithm_0).__qualname__}' == 'aeneas.adjustboundaryalgorithm.AdjustBoundaryAlgorithm'
    assert f'{type(adjust_boundary_algorithm_0.logger).__module__}.{type(adjust_boundary_algorithm_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(adjust_boundary_algorithm_0.logger) == 0
    assert f'{type(adjust_boundary_algorithm_0.rconf).__module__}.{type(adjust_boundary_algorithm_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert adjust_boundary_algorithm_0.smflist is None
    assert f'{type(adjust_boundary_algorithm_0.mws).__module__}.{type(adjust_boundary_algorithm_0.mws).__qualname__}' == 'aeneas.exacttiming.TimeValue'
    assert module_0.AdjustBoundaryAlgorithm.AFTERCURRENT == 'aftercurrent'
    assert module_0.AdjustBoundaryAlgorithm.AUTO == 'auto'
    assert module_0.AdjustBoundaryAlgorithm.BEFORENEXT == 'beforenext'
    assert module_0.AdjustBoundaryAlgorithm.OFFSET == 'offset'
    assert module_0.AdjustBoundaryAlgorithm.PERCENT == 'percent'
    assert module_0.AdjustBoundaryAlgorithm.RATE == 'rate'
    assert module_0.AdjustBoundaryAlgorithm.RATEAGGRESSIVE == 'rateaggressive'
    assert module_0.AdjustBoundaryAlgorithm.ALLOWED_VALUES == ['aftercurrent', 'auto', 'beforenext', 'offset', 'percent', 'rate', 'rateaggressive']
    assert module_0.AdjustBoundaryAlgorithm.TAG == 'AdjustBoundaryAlgorithm'
    adjust_boundary_algorithm_0.intervals_to_fragment_list(adjust_boundary_algorithm_0, adjust_boundary_algorithm_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    adjust_boundary_algorithm_0 = module_0.AdjustBoundaryAlgorithm()
    assert f'{type(adjust_boundary_algorithm_0).__module__}.{type(adjust_boundary_algorithm_0).__qualname__}' == 'aeneas.adjustboundaryalgorithm.AdjustBoundaryAlgorithm'
    assert f'{type(adjust_boundary_algorithm_0.logger).__module__}.{type(adjust_boundary_algorithm_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(adjust_boundary_algorithm_0.logger) == 0
    assert f'{type(adjust_boundary_algorithm_0.rconf).__module__}.{type(adjust_boundary_algorithm_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert adjust_boundary_algorithm_0.smflist is None
    assert f'{type(adjust_boundary_algorithm_0.mws).__module__}.{type(adjust_boundary_algorithm_0.mws).__qualname__}' == 'aeneas.exacttiming.TimeValue'
    assert module_0.AdjustBoundaryAlgorithm.AFTERCURRENT == 'aftercurrent'
    assert module_0.AdjustBoundaryAlgorithm.AUTO == 'auto'
    assert module_0.AdjustBoundaryAlgorithm.BEFORENEXT == 'beforenext'
    assert module_0.AdjustBoundaryAlgorithm.OFFSET == 'offset'
    assert module_0.AdjustBoundaryAlgorithm.PERCENT == 'percent'
    assert module_0.AdjustBoundaryAlgorithm.RATE == 'rate'
    assert module_0.AdjustBoundaryAlgorithm.RATEAGGRESSIVE == 'rateaggressive'
    assert module_0.AdjustBoundaryAlgorithm.ALLOWED_VALUES == ['aftercurrent', 'auto', 'beforenext', 'offset', 'percent', 'rate', 'rateaggressive']
    assert module_0.AdjustBoundaryAlgorithm.TAG == 'AdjustBoundaryAlgorithm'
    adjust_boundary_algorithm_0.append_fragment_list_to_sync_root(adjust_boundary_algorithm_0)

def test_case_3():
    adjust_boundary_algorithm_0 = module_0.AdjustBoundaryAlgorithm()
    assert f'{type(adjust_boundary_algorithm_0).__module__}.{type(adjust_boundary_algorithm_0).__qualname__}' == 'aeneas.adjustboundaryalgorithm.AdjustBoundaryAlgorithm'
    assert f'{type(adjust_boundary_algorithm_0.logger).__module__}.{type(adjust_boundary_algorithm_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(adjust_boundary_algorithm_0.logger) == 0
    assert f'{type(adjust_boundary_algorithm_0.rconf).__module__}.{type(adjust_boundary_algorithm_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert adjust_boundary_algorithm_0.smflist is None
    assert f'{type(adjust_boundary_algorithm_0.mws).__module__}.{type(adjust_boundary_algorithm_0.mws).__qualname__}' == 'aeneas.exacttiming.TimeValue'
    assert module_0.AdjustBoundaryAlgorithm.AFTERCURRENT == 'aftercurrent'
    assert module_0.AdjustBoundaryAlgorithm.AUTO == 'auto'
    assert module_0.AdjustBoundaryAlgorithm.BEFORENEXT == 'beforenext'
    assert module_0.AdjustBoundaryAlgorithm.OFFSET == 'offset'
    assert module_0.AdjustBoundaryAlgorithm.PERCENT == 'percent'
    assert module_0.AdjustBoundaryAlgorithm.RATE == 'rate'
    assert module_0.AdjustBoundaryAlgorithm.RATEAGGRESSIVE == 'rateaggressive'
    assert module_0.AdjustBoundaryAlgorithm.ALLOWED_VALUES == ['aftercurrent', 'auto', 'beforenext', 'offset', 'percent', 'rate', 'rateaggressive']
    assert module_0.AdjustBoundaryAlgorithm.TAG == 'AdjustBoundaryAlgorithm'

@pytest.mark.xfail(strict=True)
def test_case_4():
    adjust_boundary_algorithm_0 = module_0.AdjustBoundaryAlgorithm()
    assert f'{type(adjust_boundary_algorithm_0).__module__}.{type(adjust_boundary_algorithm_0).__qualname__}' == 'aeneas.adjustboundaryalgorithm.AdjustBoundaryAlgorithm'
    assert f'{type(adjust_boundary_algorithm_0.logger).__module__}.{type(adjust_boundary_algorithm_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(adjust_boundary_algorithm_0.logger) == 0
    assert f'{type(adjust_boundary_algorithm_0.rconf).__module__}.{type(adjust_boundary_algorithm_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert adjust_boundary_algorithm_0.smflist is None
    assert f'{type(adjust_boundary_algorithm_0.mws).__module__}.{type(adjust_boundary_algorithm_0.mws).__qualname__}' == 'aeneas.exacttiming.TimeValue'
    assert module_0.AdjustBoundaryAlgorithm.AFTERCURRENT == 'aftercurrent'
    assert module_0.AdjustBoundaryAlgorithm.AUTO == 'auto'
    assert module_0.AdjustBoundaryAlgorithm.BEFORENEXT == 'beforenext'
    assert module_0.AdjustBoundaryAlgorithm.OFFSET == 'offset'
    assert module_0.AdjustBoundaryAlgorithm.PERCENT == 'percent'
    assert module_0.AdjustBoundaryAlgorithm.RATE == 'rate'
    assert module_0.AdjustBoundaryAlgorithm.RATEAGGRESSIVE == 'rateaggressive'
    assert module_0.AdjustBoundaryAlgorithm.ALLOWED_VALUES == ['aftercurrent', 'auto', 'beforenext', 'offset', 'percent', 'rate', 'rateaggressive']
    assert module_0.AdjustBoundaryAlgorithm.TAG == 'AdjustBoundaryAlgorithm'
    none_type_0 = None
    adjust_boundary_algorithm_0.adjust(adjust_boundary_algorithm_0, none_type_0, adjust_boundary_algorithm_0, adjust_boundary_algorithm_0, adjust_boundary_algorithm_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    adjust_boundary_algorithm_0 = module_0.AdjustBoundaryAlgorithm()
    assert f'{type(adjust_boundary_algorithm_0).__module__}.{type(adjust_boundary_algorithm_0).__qualname__}' == 'aeneas.adjustboundaryalgorithm.AdjustBoundaryAlgorithm'
    assert f'{type(adjust_boundary_algorithm_0.logger).__module__}.{type(adjust_boundary_algorithm_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(adjust_boundary_algorithm_0.logger) == 0
    assert f'{type(adjust_boundary_algorithm_0.rconf).__module__}.{type(adjust_boundary_algorithm_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert adjust_boundary_algorithm_0.smflist is None
    assert f'{type(adjust_boundary_algorithm_0.mws).__module__}.{type(adjust_boundary_algorithm_0.mws).__qualname__}' == 'aeneas.exacttiming.TimeValue'
    assert module_0.AdjustBoundaryAlgorithm.AFTERCURRENT == 'aftercurrent'
    assert module_0.AdjustBoundaryAlgorithm.AUTO == 'auto'
    assert module_0.AdjustBoundaryAlgorithm.BEFORENEXT == 'beforenext'
    assert module_0.AdjustBoundaryAlgorithm.OFFSET == 'offset'
    assert module_0.AdjustBoundaryAlgorithm.PERCENT == 'percent'
    assert module_0.AdjustBoundaryAlgorithm.RATE == 'rate'
    assert module_0.AdjustBoundaryAlgorithm.RATEAGGRESSIVE == 'rateaggressive'
    assert module_0.AdjustBoundaryAlgorithm.ALLOWED_VALUES == ['aftercurrent', 'auto', 'beforenext', 'offset', 'percent', 'rate', 'rateaggressive']
    assert module_0.AdjustBoundaryAlgorithm.TAG == 'AdjustBoundaryAlgorithm'
    tree_0 = module_1.Tree(logger=adjust_boundary_algorithm_0)
    adjust_boundary_algorithm_0.append_fragment_list_to_sync_root(tree_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    adjust_boundary_algorithm_0 = module_0.AdjustBoundaryAlgorithm()
    assert f'{type(adjust_boundary_algorithm_0).__module__}.{type(adjust_boundary_algorithm_0).__qualname__}' == 'aeneas.adjustboundaryalgorithm.AdjustBoundaryAlgorithm'
    assert f'{type(adjust_boundary_algorithm_0.logger).__module__}.{type(adjust_boundary_algorithm_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(adjust_boundary_algorithm_0.logger) == 0
    assert f'{type(adjust_boundary_algorithm_0.rconf).__module__}.{type(adjust_boundary_algorithm_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert adjust_boundary_algorithm_0.smflist is None
    assert f'{type(adjust_boundary_algorithm_0.mws).__module__}.{type(adjust_boundary_algorithm_0.mws).__qualname__}' == 'aeneas.exacttiming.TimeValue'
    assert module_0.AdjustBoundaryAlgorithm.AFTERCURRENT == 'aftercurrent'
    assert module_0.AdjustBoundaryAlgorithm.AUTO == 'auto'
    assert module_0.AdjustBoundaryAlgorithm.BEFORENEXT == 'beforenext'
    assert module_0.AdjustBoundaryAlgorithm.OFFSET == 'offset'
    assert module_0.AdjustBoundaryAlgorithm.PERCENT == 'percent'
    assert module_0.AdjustBoundaryAlgorithm.RATE == 'rate'
    assert module_0.AdjustBoundaryAlgorithm.RATEAGGRESSIVE == 'rateaggressive'
    assert module_0.AdjustBoundaryAlgorithm.ALLOWED_VALUES == ['aftercurrent', 'auto', 'beforenext', 'offset', 'percent', 'rate', 'rateaggressive']
    assert module_0.AdjustBoundaryAlgorithm.TAG == 'AdjustBoundaryAlgorithm'
    none_type_0 = None
    text_file_0 = module_2.TextFile(file_format=none_type_0, logger=none_type_0)
    adjust_boundary_algorithm_0.intervals_to_fragment_list(text_file_0, adjust_boundary_algorithm_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    adjust_boundary_algorithm_0 = module_0.AdjustBoundaryAlgorithm()
    assert f'{type(adjust_boundary_algorithm_0).__module__}.{type(adjust_boundary_algorithm_0).__qualname__}' == 'aeneas.adjustboundaryalgorithm.AdjustBoundaryAlgorithm'
    assert f'{type(adjust_boundary_algorithm_0.logger).__module__}.{type(adjust_boundary_algorithm_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(adjust_boundary_algorithm_0.logger) == 0
    assert f'{type(adjust_boundary_algorithm_0.rconf).__module__}.{type(adjust_boundary_algorithm_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert adjust_boundary_algorithm_0.smflist is None
    assert f'{type(adjust_boundary_algorithm_0.mws).__module__}.{type(adjust_boundary_algorithm_0.mws).__qualname__}' == 'aeneas.exacttiming.TimeValue'
    assert module_0.AdjustBoundaryAlgorithm.AFTERCURRENT == 'aftercurrent'
    assert module_0.AdjustBoundaryAlgorithm.AUTO == 'auto'
    assert module_0.AdjustBoundaryAlgorithm.BEFORENEXT == 'beforenext'
    assert module_0.AdjustBoundaryAlgorithm.OFFSET == 'offset'
    assert module_0.AdjustBoundaryAlgorithm.PERCENT == 'percent'
    assert module_0.AdjustBoundaryAlgorithm.RATE == 'rate'
    assert module_0.AdjustBoundaryAlgorithm.RATEAGGRESSIVE == 'rateaggressive'
    assert module_0.AdjustBoundaryAlgorithm.ALLOWED_VALUES == ['aftercurrent', 'auto', 'beforenext', 'offset', 'percent', 'rate', 'rateaggressive']
    assert module_0.AdjustBoundaryAlgorithm.TAG == 'AdjustBoundaryAlgorithm'
    none_type_0 = None
    text_file_0 = module_2.TextFile(file_format=none_type_0, logger=none_type_0)
    list_0 = [adjust_boundary_algorithm_0, none_type_0, none_type_0, text_file_0]
    adjust_boundary_algorithm_0.intervals_to_fragment_list(text_file_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    adjust_boundary_algorithm_0 = module_0.AdjustBoundaryAlgorithm()
    assert f'{type(adjust_boundary_algorithm_0).__module__}.{type(adjust_boundary_algorithm_0).__qualname__}' == 'aeneas.adjustboundaryalgorithm.AdjustBoundaryAlgorithm'
    assert f'{type(adjust_boundary_algorithm_0.logger).__module__}.{type(adjust_boundary_algorithm_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(adjust_boundary_algorithm_0.logger) == 0
    assert f'{type(adjust_boundary_algorithm_0.rconf).__module__}.{type(adjust_boundary_algorithm_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert adjust_boundary_algorithm_0.smflist is None
    assert f'{type(adjust_boundary_algorithm_0.mws).__module__}.{type(adjust_boundary_algorithm_0.mws).__qualname__}' == 'aeneas.exacttiming.TimeValue'
    assert module_0.AdjustBoundaryAlgorithm.AFTERCURRENT == 'aftercurrent'
    assert module_0.AdjustBoundaryAlgorithm.AUTO == 'auto'
    assert module_0.AdjustBoundaryAlgorithm.BEFORENEXT == 'beforenext'
    assert module_0.AdjustBoundaryAlgorithm.OFFSET == 'offset'
    assert module_0.AdjustBoundaryAlgorithm.PERCENT == 'percent'
    assert module_0.AdjustBoundaryAlgorithm.RATE == 'rate'
    assert module_0.AdjustBoundaryAlgorithm.RATEAGGRESSIVE == 'rateaggressive'
    assert module_0.AdjustBoundaryAlgorithm.ALLOWED_VALUES == ['aftercurrent', 'auto', 'beforenext', 'offset', 'percent', 'rate', 'rateaggressive']
    assert module_0.AdjustBoundaryAlgorithm.TAG == 'AdjustBoundaryAlgorithm'
    none_type_0 = None
    text_file_0 = module_2.TextFile(file_format=none_type_0, logger=none_type_0)
    list_0 = [adjust_boundary_algorithm_0, none_type_0, text_file_0]
    adjust_boundary_algorithm_0.intervals_to_fragment_list(text_file_0, list_0)