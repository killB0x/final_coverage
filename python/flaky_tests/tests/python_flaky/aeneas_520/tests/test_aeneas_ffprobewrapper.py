# Automatically generated by Pynguin.
import pytest
import platform as module_0
import aeneas.ffprobewrapper as module_1
import aeneas.globalfunctions as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.release()
    f_f_p_r_o_b_e_wrapper_0 = module_1.FFPROBEWrapper()
    assert module_1.FFPROBEWrapper.FFPROBE_PARAMETERS == ['-select_streams', 'a', '-show_streams']
    assert module_1.FFPROBEWrapper.STDOUT_BEGIN_STREAM == '[STREAM]'
    assert module_1.FFPROBEWrapper.STDOUT_CHANNELS == 'channels'
    assert module_1.FFPROBEWrapper.STDOUT_CODEC_NAME == 'codec_name'
    assert module_1.FFPROBEWrapper.STDOUT_END_STREAM == '[/STREAM]'
    assert module_1.FFPROBEWrapper.STDOUT_DURATION == 'duration'
    assert module_1.FFPROBEWrapper.STDOUT_SAMPLE_RATE == 'sample_rate'
    assert module_1.FFPROBEWrapper.TAG == 'FFPROBEWrapper'
    f_f_p_r_o_b_e_wrapper_0.read_properties(var_0)

def test_case_1():
    list_0 = []
    f_f_p_r_o_b_e_path_error_0 = module_1.FFPROBEPathError(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    f_f_p_r_o_b_e_parsing_error_0 = module_1.FFPROBEParsingError()
    dict_0 = {}
    f_f_p_r_o_b_e_wrapper_0 = module_1.FFPROBEWrapper(rconf=dict_0)
    assert module_1.FFPROBEWrapper.FFPROBE_PARAMETERS == ['-select_streams', 'a', '-show_streams']
    assert module_1.FFPROBEWrapper.STDOUT_BEGIN_STREAM == '[STREAM]'
    assert module_1.FFPROBEWrapper.STDOUT_CHANNELS == 'channels'
    assert module_1.FFPROBEWrapper.STDOUT_CODEC_NAME == 'codec_name'
    assert module_1.FFPROBEWrapper.STDOUT_END_STREAM == '[/STREAM]'
    assert module_1.FFPROBEWrapper.STDOUT_DURATION == 'duration'
    assert module_1.FFPROBEWrapper.STDOUT_SAMPLE_RATE == 'sample_rate'
    assert module_1.FFPROBEWrapper.TAG == 'FFPROBEWrapper'
    list_0 = []
    f_f_p_r_o_b_e_parsing_error_1 = module_1.FFPROBEParsingError(*list_0)
    f_f_p_r_o_b_e_unsupported_format_error_0 = module_1.FFPROBEUnsupportedFormatError(**dict_0)
    f_f_p_r_o_b_e_wrapper_1 = module_1.FFPROBEWrapper()
    var_0 = module_2.bundle_directory()
    f_f_p_r_o_b_e_wrapper_1.read_properties(var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '{ ]^HLpB:<D|'
    f_f_p_r_o_b_e_wrapper_0 = module_1.FFPROBEWrapper(str_0, str_0)
    assert module_1.FFPROBEWrapper.FFPROBE_PARAMETERS == ['-select_streams', 'a', '-show_streams']
    assert module_1.FFPROBEWrapper.STDOUT_BEGIN_STREAM == '[STREAM]'
    assert module_1.FFPROBEWrapper.STDOUT_CHANNELS == 'channels'
    assert module_1.FFPROBEWrapper.STDOUT_CODEC_NAME == 'codec_name'
    assert module_1.FFPROBEWrapper.STDOUT_END_STREAM == '[/STREAM]'
    assert module_1.FFPROBEWrapper.STDOUT_DURATION == 'duration'
    assert module_1.FFPROBEWrapper.STDOUT_SAMPLE_RATE == 'sample_rate'
    assert module_1.FFPROBEWrapper.TAG == 'FFPROBEWrapper'
    f_f_p_r_o_b_e_wrapper_0.read_properties(str_0)

def test_case_4():
    var_0 = module_2.is_py2_narrow_build()
    f_f_p_r_o_b_e_wrapper_0 = module_1.FFPROBEWrapper()
    assert module_1.FFPROBEWrapper.FFPROBE_PARAMETERS == ['-select_streams', 'a', '-show_streams']
    assert module_1.FFPROBEWrapper.STDOUT_BEGIN_STREAM == '[STREAM]'
    assert module_1.FFPROBEWrapper.STDOUT_CHANNELS == 'channels'
    assert module_1.FFPROBEWrapper.STDOUT_CODEC_NAME == 'codec_name'
    assert module_1.FFPROBEWrapper.STDOUT_END_STREAM == '[/STREAM]'
    assert module_1.FFPROBEWrapper.STDOUT_DURATION == 'duration'
    assert module_1.FFPROBEWrapper.STDOUT_SAMPLE_RATE == 'sample_rate'
    assert module_1.FFPROBEWrapper.TAG == 'FFPROBEWrapper'
    f_f_p_r_o_b_e_wrapper_0.read_properties(var_0)