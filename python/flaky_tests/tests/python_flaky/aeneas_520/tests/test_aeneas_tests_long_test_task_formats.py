# Automatically generated by Pynguin.
import pytest
import aeneas.tests.long_test_task_formats as module_0
import tokenize as module_1

def test_case_0():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False

@pytest.mark.xfail(strict=True)
def test_case_1():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_rbse()

@pytest.mark.xfail(strict=True)
def test_case_2():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_smil()

@pytest.mark.xfail(strict=True)
def test_case_3():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_tsvm()

@pytest.mark.xfail(strict=True)
def test_case_4():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    var_0 = test_execute_task_c_l_i_0.doCleanups()
    test_execute_task_c_l_i_0.test_exec_csv()

@pytest.mark.xfail(strict=True)
def test_case_5():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_ttml()

@pytest.mark.xfail(strict=True)
def test_case_6():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_audh()

@pytest.mark.xfail(strict=True)
def test_case_7():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    var_0 = test_execute_task_c_l_i_0.doCleanups()
    test_execute_task_c_l_i_0.test_exec_txth()

@pytest.mark.xfail(strict=True)
def test_case_8():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_tab()

@pytest.mark.xfail(strict=True)
def test_case_9():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_tsvh()

@pytest.mark.xfail(strict=True)
def test_case_10():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_dfxp()

@pytest.mark.xfail(strict=True)
def test_case_11():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_txt()

@pytest.mark.xfail(strict=True)
def test_case_12():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_smilm()

@pytest.mark.xfail(strict=True)
def test_case_13():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_ssv()

@pytest.mark.xfail(strict=True)
def test_case_14():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_txtm()

@pytest.mark.xfail(strict=True)
def test_case_15():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_aud()

@pytest.mark.xfail(strict=True)
def test_case_16():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_sbv()

@pytest.mark.xfail(strict=True)
def test_case_17():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_textgrid_long()

@pytest.mark.xfail(strict=True)
def test_case_18():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    var_0 = module_1.generate_tokens(test_execute_task_c_l_i_0)
    test_execute_task_c_l_i_0.test_exec_csvh()

@pytest.mark.xfail(strict=True)
def test_case_19():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_audm()

@pytest.mark.xfail(strict=True)
def test_case_20():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_smilh()

@pytest.mark.xfail(strict=True)
def test_case_21():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_tsv()

@pytest.mark.xfail(strict=True)
def test_case_22():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_srt()

@pytest.mark.xfail(strict=True)
def test_case_23():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    var_0 = test_execute_task_c_l_i_0.assertTrue(test_execute_task_c_l_i_0)
    test_execute_task_c_l_i_0.test_exec_ssvm()

@pytest.mark.xfail(strict=True)
def test_case_24():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_sub()

@pytest.mark.xfail(strict=True)
def test_case_25():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_ssvh()

@pytest.mark.xfail(strict=True)
def test_case_26():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_xml_legacy()

@pytest.mark.xfail(strict=True)
def test_case_27():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_eaf()

@pytest.mark.xfail(strict=True)
def test_case_28():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_vtt()

@pytest.mark.xfail(strict=True)
def test_case_29():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_textgrid()

@pytest.mark.xfail(strict=True)
def test_case_30():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    var_0 = test_execute_task_c_l_i_0.assertTrue(test_execute_task_c_l_i_0)
    test_execute_task_c_l_i_0.test_exec_json()

@pytest.mark.xfail(strict=True)
def test_case_31():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    test_execute_task_c_l_i_0.test_exec_textgrid_short()

@pytest.mark.xfail(strict=True)
def test_case_32():
    test_execute_task_c_l_i_0 = module_0.TestExecuteTaskCLI()
    assert module_0.EXTRA_TESTS is False
    var_0 = module_1.generate_tokens(test_execute_task_c_l_i_0)
    test_execute_task_c_l_i_0.test_exec_xml()