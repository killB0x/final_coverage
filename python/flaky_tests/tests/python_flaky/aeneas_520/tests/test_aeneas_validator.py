# Automatically generated by Pynguin.
import pytest
import aeneas.validator as module_0
import platform as module_1
import aeneas.globalfunctions as module_2
import collections as module_3

def test_case_0():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    var_0 = validator_0.check_raw_string(validator_0)
    assert len(validator_0.logger) == 3
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    validator_0.check_config_txt(validator_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    validator_0.check_container(validator_0)

def test_case_3():
    validator_result_0 = module_0.ValidatorResult()
    assert f'{type(validator_result_0).__module__}.{type(validator_result_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    var_0 = validator_result_0.__str__()
    assert var_0 == 'Passed: True\n'

@pytest.mark.xfail(strict=True)
def test_case_4():
    validator_result_0 = module_0.ValidatorResult()
    assert f'{type(validator_result_0).__module__}.{type(validator_result_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    var_0 = validator_result_0.pretty_print()
    assert var_0 == ''
    var_0.check_config_xml(var_0)

def test_case_5():
    validator_result_0 = module_0.ValidatorResult()
    assert f'{type(validator_result_0).__module__}.{type(validator_result_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'

def test_case_6():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'

def test_case_7():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    bytes_0 = b'I='
    var_0 = validator_0.check_configuration_string(bytes_0)
    assert len(validator_0.logger) == 9
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_8():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    validator_0.check_config_txt(validator_0, validator_0)

def test_case_9():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    var_0 = validator_0.check_config_xml(validator_0)
    assert len(validator_0.logger) == 5
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_10():
    validator_result_0 = module_0.ValidatorResult()
    assert f'{type(validator_result_0).__module__}.{type(validator_result_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    var_0 = validator_result_0.pretty_print()
    assert var_0 == ''
    var_1 = validator_result_0.add_error(validator_result_0)
    validator_result_0.__str__()

def test_case_11():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    none_type_0 = None
    var_0 = validator_0.check_container(none_type_0, config_string=none_type_0)
    assert len(validator_0.logger) == 3
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    validator_result_0 = module_0.ValidatorResult()
    var_1 = validator_0.check_config_xml(validator_0)
    assert len(validator_0.logger) == 8
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.validator.ValidatorResult'

@pytest.mark.xfail(strict=True)
def test_case_12():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    validator_0.check_file_encoding(validator_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    validator_0.check_configuration_string(validator_0, external_name=validator_0)

def test_case_14():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    var_0 = module_1.system()
    var_1 = validator_0.check_config_xml(var_0)
    assert len(validator_0.logger) == 8
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_15():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    var_0 = module_1.python_build()
    str_0 = '\n    Length of the window for extracting MFCCs, in seconds.\n    It is usual to set it between 1.5 and 4 times\n    the value of ``MFCC_WINDOW_SHIFT``.\n\n    Default: ``0.100``.\n\n    .. versionadded:: 1.4.1\n    '
    str_1 = 'xP'
    str_2 = "J7neE'06*_e,8Xzrl"
    var_1 = validator_0.check_config_txt(str_0, str_1)
    assert len(validator_0.logger) == 7
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    var_2 = var_1.__unicode__()
    assert var_2 == "Passed: False\nWarnings:\n  Invalid key=value string: '\n    Length of the window for extracting MFCCs, in seconds.\n    It is usual to set it between 1.5 and 4 times\n    the value of ``MFCC_WINDOW_SHIFT``.\n\n    Default: ``0.100``.\n\n    .. versionadded:: 1.4.1\n    '\nErrors:\n  No parameters supplied."
    dict_0 = {str_0: var_0, str_1: var_0, str_2: str_2}
    var_0.subtract(**dict_0)

def test_case_16():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    none_type_0 = None
    var_0 = validator_0.check_configuration_string(none_type_0, none_type_0, none_type_0)
    assert len(validator_0.logger) == 7
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    var_1 = var_0.pretty_print()
    assert var_1 == 'Errors:\n  No parameters supplied.'
    var_2 = validator_0.check_container(var_1)
    assert len(validator_0.logger) == 12
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'aeneas.validator.ValidatorResult'

def test_case_17():
    var_0 = module_2.bundle_directory()
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    var_1 = validator_0.check_file_encoding(var_0)
    assert len(validator_0.logger) == 3
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_18():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    none_type_0 = None
    var_0 = validator_0.check_configuration_string(none_type_0)
    assert len(validator_0.logger) == 7
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    var_1 = validator_0.check_container(none_type_0, config_string=none_type_0)
    assert len(validator_0.logger) == 10
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.validator.ValidatorResult'
    validator_0.check_raw_string(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    none_type_0 = None
    bytes_0 = b''
    var_0 = validator_0.check_config_xml(bytes_0)
    assert len(validator_0.logger) == 5
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    var_1 = module_1.node()
    var_2 = validator_0.check_container(none_type_0)
    assert len(validator_0.logger) == 8
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_3 = validator_0.check_config_txt(none_type_0)
    assert len(validator_0.logger) == 16
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_4 = validator_0.check_config_xml(var_1)
    assert len(validator_0.logger) == 24
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_5 = var_3.pretty_print()
    assert var_5 == 'Errors:\n  No parameters supplied.'
    var_6 = validator_0.check_container(var_5)
    assert len(validator_0.logger) == 29
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'aeneas.validator.ValidatorResult'
    bytes_1 = b'lhu!F=X'
    var_7 = validator_0.check_configuration_string(bytes_1)
    assert len(validator_0.logger) == 39
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_8 = validator_0.check_file_encoding(none_type_0)
    assert len(validator_0.logger) == 42
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'aeneas.validator.ValidatorResult'
    validator_0.check_container(var_5, config_string=var_3)

def test_case_20():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    none_type_0 = None
    var_0 = validator_0.check_file_encoding(none_type_0)
    assert len(validator_0.logger) == 3
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    var_1 = validator_0.check_configuration_string(none_type_0, none_type_0, none_type_0)
    assert len(validator_0.logger) == 10
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_2 = validator_0.check_container(none_type_0)
    assert len(validator_0.logger) == 13
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_3 = validator_0.check_config_xml(var_1)
    assert len(validator_0.logger) == 18
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_4 = module_2.is_linux()
    var_5 = validator_0.check_file_encoding(var_4)

def test_case_21():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    none_type_0 = None
    var_0 = validator_0.check_config_txt(none_type_0)
    assert len(validator_0.logger) == 8
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    var_1 = var_0.pretty_print()
    assert var_1 == 'Errors:\n  No parameters supplied.'
    var_2 = validator_0.check_container(var_1, config_string=var_1)
    assert len(validator_0.logger) == 19
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'aeneas.validator.ValidatorResult'

@pytest.mark.xfail(strict=True)
def test_case_22():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    none_type_0 = None
    var_0 = validator_0.check_configuration_string(none_type_0, none_type_0, none_type_0)
    assert len(validator_0.logger) == 7
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    var_1 = validator_0.check_config_xml(var_0)
    assert len(validator_0.logger) == 12
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_2 = validator_0.check_config_txt(none_type_0)
    assert len(validator_0.logger) == 20
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_3 = module_2.is_windows()
    validator_0.check_container(var_3, config_string=var_3)

@pytest.mark.xfail(strict=True)
def test_case_23():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    none_type_0 = None
    var_0 = validator_0.check_configuration_string(none_type_0, none_type_0, none_type_0)
    assert len(validator_0.logger) == 7
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    var_1 = validator_0.check_configuration_string(none_type_0, none_type_0, var_0)
    assert len(validator_0.logger) == 14
    var_0.check_config_xml(none_type_0)

def test_case_24():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    bytes_0 = b'RIF=X'
    var_0 = validator_0.check_configuration_string(bytes_0)
    assert len(validator_0.logger) == 10
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_25():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    none_type_0 = None
    var_0 = validator_0.check_file_encoding(none_type_0)
    assert len(validator_0.logger) == 3
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    var_1 = validator_0.check_configuration_string(none_type_0, none_type_0, none_type_0)
    assert len(validator_0.logger) == 10
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_2 = validator_0.check_container(none_type_0)
    assert len(validator_0.logger) == 13
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_3 = var_1.pretty_print()
    assert var_3 == 'Errors:\n  No parameters supplied.'
    var_4 = validator_0.check_config_xml(var_1)
    assert len(validator_0.logger) == 18
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_5 = validator_0.check_config_txt(none_type_0)
    assert len(validator_0.logger) == 26
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_6 = var_5.pretty_print()
    assert var_6 == 'Errors:\n  No parameters supplied.'
    var_7 = validator_0.check_config_xml(var_6)
    assert len(validator_0.logger) == 34
    bytes_0 = b'\x1d{m\x13~J\x07\xe9\xb2\x8e\xab\xc4\xc8\xc0P;\xe3\x8c'
    var_8 = validator_0.check_container(var_3, config_string=bytes_0)
    assert len(validator_0.logger) == 43
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_9 = var_7.__unicode__()
    assert var_9 == 'Passed: False\nErrors:\n  An error occurred while parsing XML file\n  No parameters supplied.'
    validator_1 = module_0.Validator()
    assert validator_1.result is None
    var_5.check_container(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    bytes_0 = b'\xb8]\xc4\x0c\xc6'
    var_0 = validator_0.check_configuration_string(bytes_0)
    assert len(validator_0.logger) == 5
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    var_0.check_container(var_0, config_string=validator_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    none_type_0 = None
    var_0 = validator_0.check_config_txt(none_type_0)
    assert len(validator_0.logger) == 8
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    var_1 = var_0.pretty_print()
    assert var_1 == 'Errors:\n  No parameters supplied.'
    validator_0.check_container(var_1, config_string=var_0)

def test_case_28():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    none_type_0 = None
    validator_1 = module_0.Validator(none_type_0, none_type_0)
    assert f'{type(validator_1.logger).__module__}.{type(validator_1.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_1.logger) == 0
    assert f'{type(validator_1.rconf).__module__}.{type(validator_1.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_1.result is None
    none_type_1 = None
    var_0 = validator_0.check_configuration_string(none_type_1, none_type_1, none_type_1)
    assert len(validator_0.logger) == 7
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'
    var_1 = validator_0.check_container(none_type_1)
    assert len(validator_0.logger) == 10
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_2 = validator_0.check_config_xml(var_0)
    assert len(validator_0.logger) == 15
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_3 = validator_0.check_config_txt(none_type_1)
    assert len(validator_0.logger) == 23
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_4 = var_3.pretty_print()
    assert var_4 == 'Errors:\n  No parameters supplied.'
    var_5 = validator_0.check_container(var_4)
    assert len(validator_0.logger) == 28
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_6 = validator_0.check_container(var_4, config_string=var_4)
    assert len(validator_0.logger) == 39
    bytes_0 = b'l\x0bF~=X'
    var_7 = validator_0.check_configuration_string(bytes_0)
    assert len(validator_0.logger) == 44
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_8 = validator_0.check_file_encoding(none_type_1)
    assert len(validator_0.logger) == 47
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'aeneas.validator.ValidatorResult'
    var_9 = module_3._OrderedDictKeysView(var_4)
    assert len(var_9) == 33
    with pytest.raises(TypeError):
        module_3.namedtuple(var_7, var_5, module=bytes_0)

def test_case_29():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'aeneas.validator.Validator'
    assert f'{type(validator_0.logger).__module__}.{type(validator_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(validator_0.logger) == 0
    assert f'{type(validator_0.rconf).__module__}.{type(validator_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert validator_0.result is None
    assert module_0.Validator.TAG == 'Validator'
    bytes_0 = b'lhu!F=X'
    var_0 = validator_0.check_config_txt(bytes_0)
    assert len(validator_0.logger) == 11
    assert f'{type(validator_0.result).__module__}.{type(validator_0.result).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'aeneas.validator.ValidatorResult'
    assert module_0.ValidatorResult.TAG == 'ValidatorResult'
    assert f'{type(module_0.ValidatorResult.passed).__module__}.{type(module_0.ValidatorResult.passed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.warnings).__module__}.{type(module_0.ValidatorResult.warnings).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ValidatorResult.errors).__module__}.{type(module_0.ValidatorResult.errors).__qualname__}' == 'builtins.property'