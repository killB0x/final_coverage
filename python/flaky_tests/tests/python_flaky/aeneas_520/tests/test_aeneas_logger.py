# Automatically generated by Pynguin.
import pytest
import aeneas.logger as module_0
import platform as module_1
import aeneas.globalfunctions as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    loggable_0 = module_0.Loggable()
    assert f'{type(loggable_0).__module__}.{type(loggable_0).__qualname__}' == 'aeneas.logger.Loggable'
    assert f'{type(loggable_0.logger).__module__}.{type(loggable_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(loggable_0.logger) == 0
    assert f'{type(loggable_0.rconf).__module__}.{type(loggable_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert module_0.Loggable.TAG == 'Loggable'
    loggable_0.log_info(loggable_0)

def test_case_1():
    loggable_0 = module_0.Loggable()
    assert f'{type(loggable_0).__module__}.{type(loggable_0).__qualname__}' == 'aeneas.logger.Loggable'
    assert f'{type(loggable_0.logger).__module__}.{type(loggable_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(loggable_0.logger) == 0
    assert f'{type(loggable_0.rconf).__module__}.{type(loggable_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert module_0.Loggable.TAG == 'Loggable'

@pytest.mark.xfail(strict=True)
def test_case_2():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'aeneas.logger.Logger'
    assert len(logger_0) == 0
    assert module_0.Logger.DEBUG == 'DEBU'
    assert module_0.Logger.INFO == 'INFO'
    assert module_0.Logger.WARNING == 'WARN'
    assert module_0.Logger.CRITICAL == 'CRIT'
    assert module_0.Logger.ERROR == 'ERRO'
    assert module_0.Logger.SUCCESS == 'SUCC'
    assert f'{type(module_0.Logger.tee).__module__}.{type(module_0.Logger.tee).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.tee_show_datetime).__module__}.{type(module_0.Logger.tee_show_datetime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.indentation).__module__}.{type(module_0.Logger.indentation).__qualname__}' == 'builtins.property'
    var_0 = logger_0.clear()
    var_0.get_OpenVMS()

def test_case_3():
    loggable_0 = module_0.Loggable()
    assert f'{type(loggable_0).__module__}.{type(loggable_0).__qualname__}' == 'aeneas.logger.Loggable'
    assert f'{type(loggable_0.logger).__module__}.{type(loggable_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(loggable_0.logger) == 0
    assert f'{type(loggable_0.rconf).__module__}.{type(loggable_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert module_0.Loggable.TAG == 'Loggable'
    var_0 = loggable_0.__str__()
    var_1 = loggable_0.log_warn(var_0)
    assert len(loggable_0.logger) == 1
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'datetime.datetime'
    var_2 = var_0.__repr__()
    var_3 = loggable_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_1.python_revision()
    loggable_0 = module_0.Loggable()
    assert f'{type(loggable_0).__module__}.{type(loggable_0).__qualname__}' == 'aeneas.logger.Loggable'
    assert f'{type(loggable_0.logger).__module__}.{type(loggable_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(loggable_0.logger) == 0
    assert f'{type(loggable_0.rconf).__module__}.{type(loggable_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert module_0.Loggable.TAG == 'Loggable'
    loggable_0.log_exc(var_0, var_0, raise_type=loggable_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = 3221.4
    logger_0 = module_0.Logger(float_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'aeneas.logger.Logger'
    assert len(logger_0) == 0
    assert module_0.Logger.DEBUG == 'DEBU'
    assert module_0.Logger.INFO == 'INFO'
    assert module_0.Logger.WARNING == 'WARN'
    assert module_0.Logger.CRITICAL == 'CRIT'
    assert module_0.Logger.ERROR == 'ERRO'
    assert module_0.Logger.SUCCESS == 'SUCC'
    assert f'{type(module_0.Logger.tee).__module__}.{type(module_0.Logger.tee).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.tee_show_datetime).__module__}.{type(module_0.Logger.tee_show_datetime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.indentation).__module__}.{type(module_0.Logger.indentation).__qualname__}' == 'builtins.property'
    var_0 = logger_0.__str__()
    assert var_0 == ''
    var_1 = logger_0.log(var_0)
    assert len(logger_0) == 1
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'datetime.datetime'
    var_0.__contains__(logger_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    set_0 = set()
    loggable_0 = module_0.Loggable(set_0, set_0)
    assert f'{type(loggable_0).__module__}.{type(loggable_0).__qualname__}' == 'aeneas.logger.Loggable'
    assert loggable_0.logger == {*()}
    assert loggable_0.rconf == {*()}
    assert module_0.Loggable.TAG == 'Loggable'
    module_2.norm_join(set_0, set_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    loggable_0 = module_0.Loggable()
    assert f'{type(loggable_0).__module__}.{type(loggable_0).__qualname__}' == 'aeneas.logger.Loggable'
    assert f'{type(loggable_0.logger).__module__}.{type(loggable_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(loggable_0.logger) == 0
    assert f'{type(loggable_0.rconf).__module__}.{type(loggable_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert module_0.Loggable.TAG == 'Loggable'
    var_0 = module_1.python_revision()
    var_1 = var_0.isidentifier()
    var_2 = loggable_0.log_exc(var_0, var_0)
    assert len(loggable_0.logger) == 2
    loggable_0.log_crit(loggable_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    float_0 = 3221.4
    logger_0 = module_0.Logger(float_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'aeneas.logger.Logger'
    assert len(logger_0) == 0
    assert module_0.Logger.DEBUG == 'DEBU'
    assert module_0.Logger.INFO == 'INFO'
    assert module_0.Logger.WARNING == 'WARN'
    assert module_0.Logger.CRITICAL == 'CRIT'
    assert module_0.Logger.ERROR == 'ERRO'
    assert module_0.Logger.SUCCESS == 'SUCC'
    assert f'{type(module_0.Logger.tee).__module__}.{type(module_0.Logger.tee).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.tee_show_datetime).__module__}.{type(module_0.Logger.tee_show_datetime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.indentation).__module__}.{type(module_0.Logger.indentation).__qualname__}' == 'builtins.property'
    loggable_0 = module_0.Loggable()
    assert module_0.Loggable.TAG == 'Loggable'
    var_0 = logger_0.__str__()
    assert var_0 == ''
    var_1 = loggable_0.log(var_0)
    assert len(loggable_0.logger) == 1
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'datetime.datetime'
    loggable_0.log_exc(var_0, var_0, raise_type=var_0)

def test_case_9():
    str_0 = 'mNxsT\re'
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'aeneas.logger.Logger'
    assert len(logger_0) == 0
    assert module_0.Logger.DEBUG == 'DEBU'
    assert module_0.Logger.INFO == 'INFO'
    assert module_0.Logger.WARNING == 'WARN'
    assert module_0.Logger.CRITICAL == 'CRIT'
    assert module_0.Logger.ERROR == 'ERRO'
    assert module_0.Logger.SUCCESS == 'SUCC'
    assert f'{type(module_0.Logger.tee).__module__}.{type(module_0.Logger.tee).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.tee_show_datetime).__module__}.{type(module_0.Logger.tee_show_datetime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.indentation).__module__}.{type(module_0.Logger.indentation).__qualname__}' == 'builtins.property'
    var_0 = logger_0.__unicode__()
    assert var_0 == ''
    var_1 = module_2.fix_slash(str_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    loggable_0 = module_0.Loggable()
    assert f'{type(loggable_0).__module__}.{type(loggable_0).__qualname__}' == 'aeneas.logger.Loggable'
    assert f'{type(loggable_0.logger).__module__}.{type(loggable_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(loggable_0.logger) == 0
    assert f'{type(loggable_0.rconf).__module__}.{type(loggable_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert module_0.Loggable.TAG == 'Loggable'
    var_0 = module_1.python_revision()
    var_1 = var_0.isidentifier()
    loggable_0.log_exc(var_1, critical=var_1)

@pytest.mark.xfail(strict=True)
def test_case_11():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'aeneas.logger.Logger'
    assert len(logger_0) == 0
    assert module_0.Logger.DEBUG == 'DEBU'
    assert module_0.Logger.INFO == 'INFO'
    assert module_0.Logger.WARNING == 'WARN'
    assert module_0.Logger.CRITICAL == 'CRIT'
    assert module_0.Logger.ERROR == 'ERRO'
    assert module_0.Logger.SUCCESS == 'SUCC'
    assert f'{type(module_0.Logger.tee).__module__}.{type(module_0.Logger.tee).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.tee_show_datetime).__module__}.{type(module_0.Logger.tee_show_datetime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.indentation).__module__}.{type(module_0.Logger.indentation).__qualname__}' == 'builtins.property'
    var_0 = logger_0.__repr__()
    assert var_0 == 'Logger(tee=False, indentation=0, tee_show_datetime=True)'
    log_entry_0 = module_0._LogEntry(var_0, var_0, logger_0, var_0, logger_0)
    assert f'{type(module_0._LogEntry.message).__module__}.{type(module_0._LogEntry.message).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._LogEntry.severity).__module__}.{type(module_0._LogEntry.severity).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._LogEntry.tag).__module__}.{type(module_0._LogEntry.tag).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._LogEntry.indentation).__module__}.{type(module_0._LogEntry.indentation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._LogEntry.time).__module__}.{type(module_0._LogEntry.time).__qualname__}' == 'builtins.property'
    logger_0.write(logger_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    float_0 = 3221.4
    logger_0 = module_0.Logger(float_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'aeneas.logger.Logger'
    assert len(logger_0) == 0
    assert module_0.Logger.DEBUG == 'DEBU'
    assert module_0.Logger.INFO == 'INFO'
    assert module_0.Logger.WARNING == 'WARN'
    assert module_0.Logger.CRITICAL == 'CRIT'
    assert module_0.Logger.ERROR == 'ERRO'
    assert module_0.Logger.SUCCESS == 'SUCC'
    assert f'{type(module_0.Logger.tee).__module__}.{type(module_0.Logger.tee).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.tee_show_datetime).__module__}.{type(module_0.Logger.tee_show_datetime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.indentation).__module__}.{type(module_0.Logger.indentation).__qualname__}' == 'builtins.property'
    var_0 = logger_0.__len__()
    loggable_0 = module_0.Loggable()
    assert module_0.Loggable.TAG == 'Loggable'
    var_1 = logger_0.__unicode__()
    assert var_1 == ''
    var_2 = module_1.python_revision()
    var_3 = logger_0.__str__()
    assert var_3 == ''
    var_4 = logger_0.log(var_3)
    assert len(logger_0) == 1
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'datetime.datetime'
    var_5 = var_3.__contains__(var_1)
    assert var_5 is True
    var_6 = var_1.__eq__(var_3)
    var_5.log_crit(var_1)

@pytest.mark.xfail(strict=True)
def test_case_13():
    loggable_0 = module_0.Loggable()
    assert f'{type(loggable_0).__module__}.{type(loggable_0).__qualname__}' == 'aeneas.logger.Loggable'
    assert f'{type(loggable_0.logger).__module__}.{type(loggable_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(loggable_0.logger) == 0
    assert f'{type(loggable_0.rconf).__module__}.{type(loggable_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert module_0.Loggable.TAG == 'Loggable'
    var_0 = module_1.processor()
    var_1 = var_0.__str__()
    var_2 = var_1.isidentifier()
    var_3 = loggable_0.log_exc(var_0, critical=var_0)
    assert len(loggable_0.logger) == 1
    var_3.__unicode__()

@pytest.mark.xfail(strict=True)
def test_case_14():
    loggable_0 = module_0.Loggable()
    assert f'{type(loggable_0).__module__}.{type(loggable_0).__qualname__}' == 'aeneas.logger.Loggable'
    assert f'{type(loggable_0.logger).__module__}.{type(loggable_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(loggable_0.logger) == 0
    assert f'{type(loggable_0.rconf).__module__}.{type(loggable_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert module_0.Loggable.TAG == 'Loggable'
    var_0 = loggable_0.__str__()
    var_1 = var_0.isidentifier()
    loggable_0.log_exc(var_0, raise_type=var_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'aeneas.logger.Logger'
    assert len(logger_0) == 0
    assert module_0.Logger.DEBUG == 'DEBU'
    assert module_0.Logger.INFO == 'INFO'
    assert module_0.Logger.WARNING == 'WARN'
    assert module_0.Logger.CRITICAL == 'CRIT'
    assert module_0.Logger.ERROR == 'ERRO'
    assert module_0.Logger.SUCCESS == 'SUCC'
    assert f'{type(module_0.Logger.tee).__module__}.{type(module_0.Logger.tee).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.tee_show_datetime).__module__}.{type(module_0.Logger.tee_show_datetime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.indentation).__module__}.{type(module_0.Logger.indentation).__qualname__}' == 'builtins.property'
    var_0 = logger_0.pretty_print()
    assert var_0 == ''
    var_1 = var_0.__repr__()
    assert var_1 == "''"
    var_2 = module_1.python_branch()
    var_3 = logger_0.pretty_print(var_1, var_2)
    var_4 = logger_0.__len__()
    logger_0.log(var_4)

@pytest.mark.xfail(strict=True)
def test_case_16():
    float_0 = 3221.4
    logger_0 = module_0.Logger(float_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'aeneas.logger.Logger'
    assert len(logger_0) == 0
    assert module_0.Logger.DEBUG == 'DEBU'
    assert module_0.Logger.INFO == 'INFO'
    assert module_0.Logger.WARNING == 'WARN'
    assert module_0.Logger.CRITICAL == 'CRIT'
    assert module_0.Logger.ERROR == 'ERRO'
    assert module_0.Logger.SUCCESS == 'SUCC'
    assert f'{type(module_0.Logger.tee).__module__}.{type(module_0.Logger.tee).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.tee_show_datetime).__module__}.{type(module_0.Logger.tee_show_datetime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.indentation).__module__}.{type(module_0.Logger.indentation).__qualname__}' == 'builtins.property'
    loggable_0 = module_0.Loggable()
    assert module_0.Loggable.TAG == 'Loggable'
    var_0 = logger_0.__unicode__()
    assert var_0 == ''
    var_1 = module_1.python_revision()
    var_2 = logger_0.__str__()
    assert var_2 == ''
    var_3 = logger_0.log(var_2)
    assert len(logger_0) == 1
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'datetime.datetime'
    var_4 = var_2.__contains__(var_0)
    assert var_4 is True
    var_5 = logger_0.__str__()
    loggable_1 = module_0.Loggable()
    loggable_2 = module_0.Loggable(rconf=var_4)
    assert loggable_2.rconf is True
    var_2.log(var_1, tag=var_4)

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = ''
    log_entry_0 = module_0._LogEntry(str_0, str_0, str_0, str_0, str_0)
    assert f'{type(log_entry_0).__module__}.{type(log_entry_0).__qualname__}' == 'aeneas.logger._LogEntry'
    assert f'{type(module_0._LogEntry.message).__module__}.{type(module_0._LogEntry.message).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._LogEntry.severity).__module__}.{type(module_0._LogEntry.severity).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._LogEntry.tag).__module__}.{type(module_0._LogEntry.tag).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._LogEntry.indentation).__module__}.{type(module_0._LogEntry.indentation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._LogEntry.time).__module__}.{type(module_0._LogEntry.time).__qualname__}' == 'builtins.property'
    none_type_0 = None
    log_entry_0.pretty_print(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    float_0 = 3221.4
    logger_0 = module_0.Logger(float_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'aeneas.logger.Logger'
    assert len(logger_0) == 0
    assert module_0.Logger.DEBUG == 'DEBU'
    assert module_0.Logger.INFO == 'INFO'
    assert module_0.Logger.WARNING == 'WARN'
    assert module_0.Logger.CRITICAL == 'CRIT'
    assert module_0.Logger.ERROR == 'ERRO'
    assert module_0.Logger.SUCCESS == 'SUCC'
    assert f'{type(module_0.Logger.tee).__module__}.{type(module_0.Logger.tee).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.tee_show_datetime).__module__}.{type(module_0.Logger.tee_show_datetime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.indentation).__module__}.{type(module_0.Logger.indentation).__qualname__}' == 'builtins.property'
    loggable_0 = module_0.Loggable()
    assert module_0.Loggable.TAG == 'Loggable'
    var_0 = logger_0.__unicode__()
    assert var_0 == ''
    var_1 = module_1.python_revision()
    var_2 = logger_0.__repr__()
    assert var_2 == 'Logger(tee=3221.4, indentation=0, tee_show_datetime=True)'
    var_3 = var_1.splitlines()
    var_4 = logger_0.log(var_3)
    assert len(logger_0) == 1
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'datetime.datetime'
    var_5 = var_3.__contains__(var_0)
    loggable_0.log_exc(var_1, var_1, raise_type=var_5)

@pytest.mark.xfail(strict=True)
def test_case_19():
    float_0 = 3221.4
    logger_0 = module_0.Logger(float_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'aeneas.logger.Logger'
    assert len(logger_0) == 0
    assert module_0.Logger.DEBUG == 'DEBU'
    assert module_0.Logger.INFO == 'INFO'
    assert module_0.Logger.WARNING == 'WARN'
    assert module_0.Logger.CRITICAL == 'CRIT'
    assert module_0.Logger.ERROR == 'ERRO'
    assert module_0.Logger.SUCCESS == 'SUCC'
    assert f'{type(module_0.Logger.tee).__module__}.{type(module_0.Logger.tee).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.tee_show_datetime).__module__}.{type(module_0.Logger.tee_show_datetime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Logger.indentation).__module__}.{type(module_0.Logger.indentation).__qualname__}' == 'builtins.property'
    loggable_0 = module_0.Loggable()
    assert module_0.Loggable.TAG == 'Loggable'
    var_0 = logger_0.__unicode__()
    assert var_0 == ''
    var_1 = logger_0.__repr__()
    assert var_1 == 'Logger(tee=3221.4, indentation=0, tee_show_datetime=True)'
    var_2 = var_1.__iter__()
    var_3 = var_1.splitlines()
    var_4 = logger_0.log(var_3)
    assert len(logger_0) == 1
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'datetime.datetime'
    var_5 = var_3.__contains__(var_0)
    loggable_0.log_exc(loggable_0, loggable_0, raise_type=var_5)