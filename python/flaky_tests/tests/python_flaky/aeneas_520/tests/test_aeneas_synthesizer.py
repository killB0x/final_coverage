# Automatically generated by Pynguin.
import pytest
import aeneas.synthesizer as module_0
import platform as module_1
import aeneas.textfile as module_2

def test_case_0():
    synthesizer_0 = module_0.Synthesizer()
    assert f'{type(synthesizer_0).__module__}.{type(synthesizer_0).__qualname__}' == 'aeneas.synthesizer.Synthesizer'
    assert f'{type(synthesizer_0.logger).__module__}.{type(synthesizer_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(synthesizer_0.logger) == 10
    assert f'{type(synthesizer_0.rconf).__module__}.{type(synthesizer_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert f'{type(synthesizer_0.tts_engine).__module__}.{type(synthesizer_0.tts_engine).__qualname__}' == 'aeneas.ttswrappers.espeakttswrapper.ESPEAKTTSWrapper'
    assert module_0.Synthesizer.AWS == 'aws'
    assert module_0.Synthesizer.CUSTOM == 'custom'
    assert module_0.Synthesizer.ESPEAK == 'espeak'
    assert module_0.Synthesizer.ESPEAKNG == 'espeak-ng'
    assert module_0.Synthesizer.FESTIVAL == 'festival'
    assert module_0.Synthesizer.MACOS == 'macos'
    assert module_0.Synthesizer.NUANCE == 'nuance'
    assert module_0.Synthesizer.ALLOWED_VALUES == ['aws', 'custom', 'espeak', 'espeak-ng', 'festival', 'macos', 'nuance']
    assert module_0.Synthesizer.TAG == 'Synthesizer'
    assert f'{type(module_0.Synthesizer.output_audio_format).__module__}.{type(module_0.Synthesizer.output_audio_format).__qualname__}' == 'builtins.property'

def test_case_1():
    synthesizer_0 = module_0.Synthesizer()
    assert f'{type(synthesizer_0).__module__}.{type(synthesizer_0).__qualname__}' == 'aeneas.synthesizer.Synthesizer'
    assert f'{type(synthesizer_0.logger).__module__}.{type(synthesizer_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(synthesizer_0.logger) == 10
    assert f'{type(synthesizer_0.rconf).__module__}.{type(synthesizer_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert f'{type(synthesizer_0.tts_engine).__module__}.{type(synthesizer_0.tts_engine).__qualname__}' == 'aeneas.ttswrappers.espeakttswrapper.ESPEAKTTSWrapper'
    assert module_0.Synthesizer.AWS == 'aws'
    assert module_0.Synthesizer.CUSTOM == 'custom'
    assert module_0.Synthesizer.ESPEAK == 'espeak'
    assert module_0.Synthesizer.ESPEAKNG == 'espeak-ng'
    assert module_0.Synthesizer.FESTIVAL == 'festival'
    assert module_0.Synthesizer.MACOS == 'macos'
    assert module_0.Synthesizer.NUANCE == 'nuance'
    assert module_0.Synthesizer.ALLOWED_VALUES == ['aws', 'custom', 'espeak', 'espeak-ng', 'festival', 'macos', 'nuance']
    assert module_0.Synthesizer.TAG == 'Synthesizer'
    assert f'{type(module_0.Synthesizer.output_audio_format).__module__}.{type(module_0.Synthesizer.output_audio_format).__qualname__}' == 'builtins.property'
    var_0 = synthesizer_0.clear_cache()

@pytest.mark.xfail(strict=True)
def test_case_2():
    synthesizer_0 = module_0.Synthesizer()
    assert f'{type(synthesizer_0).__module__}.{type(synthesizer_0).__qualname__}' == 'aeneas.synthesizer.Synthesizer'
    assert f'{type(synthesizer_0.logger).__module__}.{type(synthesizer_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(synthesizer_0.logger) == 10
    assert f'{type(synthesizer_0.rconf).__module__}.{type(synthesizer_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert f'{type(synthesizer_0.tts_engine).__module__}.{type(synthesizer_0.tts_engine).__qualname__}' == 'aeneas.ttswrappers.espeakttswrapper.ESPEAKTTSWrapper'
    assert module_0.Synthesizer.AWS == 'aws'
    assert module_0.Synthesizer.CUSTOM == 'custom'
    assert module_0.Synthesizer.ESPEAK == 'espeak'
    assert module_0.Synthesizer.ESPEAKNG == 'espeak-ng'
    assert module_0.Synthesizer.FESTIVAL == 'festival'
    assert module_0.Synthesizer.MACOS == 'macos'
    assert module_0.Synthesizer.NUANCE == 'nuance'
    assert module_0.Synthesizer.ALLOWED_VALUES == ['aws', 'custom', 'espeak', 'espeak-ng', 'festival', 'macos', 'nuance']
    assert module_0.Synthesizer.TAG == 'Synthesizer'
    assert f'{type(module_0.Synthesizer.output_audio_format).__module__}.{type(module_0.Synthesizer.output_audio_format).__qualname__}' == 'builtins.property'
    synthesizer_0.synthesize(synthesizer_0, synthesizer_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    synthesizer_0 = module_0.Synthesizer()
    assert f'{type(synthesizer_0).__module__}.{type(synthesizer_0).__qualname__}' == 'aeneas.synthesizer.Synthesizer'
    assert f'{type(synthesizer_0.logger).__module__}.{type(synthesizer_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(synthesizer_0.logger) == 10
    assert f'{type(synthesizer_0.rconf).__module__}.{type(synthesizer_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert f'{type(synthesizer_0.tts_engine).__module__}.{type(synthesizer_0.tts_engine).__qualname__}' == 'aeneas.ttswrappers.espeakttswrapper.ESPEAKTTSWrapper'
    assert module_0.Synthesizer.AWS == 'aws'
    assert module_0.Synthesizer.CUSTOM == 'custom'
    assert module_0.Synthesizer.ESPEAK == 'espeak'
    assert module_0.Synthesizer.ESPEAKNG == 'espeak-ng'
    assert module_0.Synthesizer.FESTIVAL == 'festival'
    assert module_0.Synthesizer.MACOS == 'macos'
    assert module_0.Synthesizer.NUANCE == 'nuance'
    assert module_0.Synthesizer.ALLOWED_VALUES == ['aws', 'custom', 'espeak', 'espeak-ng', 'festival', 'macos', 'nuance']
    assert module_0.Synthesizer.TAG == 'Synthesizer'
    assert f'{type(module_0.Synthesizer.output_audio_format).__module__}.{type(module_0.Synthesizer.output_audio_format).__qualname__}' == 'builtins.property'
    var_0 = synthesizer_0.clear_cache()
    var_1 = module_1.python_version()
    synthesizer_0.synthesize(var_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_4():
    synthesizer_0 = module_0.Synthesizer()
    assert f'{type(synthesizer_0).__module__}.{type(synthesizer_0).__qualname__}' == 'aeneas.synthesizer.Synthesizer'
    assert f'{type(synthesizer_0.logger).__module__}.{type(synthesizer_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(synthesizer_0.logger) == 10
    assert f'{type(synthesizer_0.rconf).__module__}.{type(synthesizer_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert f'{type(synthesizer_0.tts_engine).__module__}.{type(synthesizer_0.tts_engine).__qualname__}' == 'aeneas.ttswrappers.espeakttswrapper.ESPEAKTTSWrapper'
    assert module_0.Synthesizer.AWS == 'aws'
    assert module_0.Synthesizer.CUSTOM == 'custom'
    assert module_0.Synthesizer.ESPEAK == 'espeak'
    assert module_0.Synthesizer.ESPEAKNG == 'espeak-ng'
    assert module_0.Synthesizer.FESTIVAL == 'festival'
    assert module_0.Synthesizer.MACOS == 'macos'
    assert module_0.Synthesizer.NUANCE == 'nuance'
    assert module_0.Synthesizer.ALLOWED_VALUES == ['aws', 'custom', 'espeak', 'espeak-ng', 'festival', 'macos', 'nuance']
    assert module_0.Synthesizer.TAG == 'Synthesizer'
    assert f'{type(module_0.Synthesizer.output_audio_format).__module__}.{type(module_0.Synthesizer.output_audio_format).__qualname__}' == 'builtins.property'
    var_0 = module_1.python_version()
    text_file_0 = module_2.TextFile(logger=var_0)
    synthesizer_0.synthesize(text_file_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    synthesizer_0 = module_0.Synthesizer()
    assert f'{type(synthesizer_0).__module__}.{type(synthesizer_0).__qualname__}' == 'aeneas.synthesizer.Synthesizer'
    assert f'{type(synthesizer_0.logger).__module__}.{type(synthesizer_0.logger).__qualname__}' == 'aeneas.logger.Logger'
    assert len(synthesizer_0.logger) == 10
    assert f'{type(synthesizer_0.rconf).__module__}.{type(synthesizer_0.rconf).__qualname__}' == 'aeneas.runtimeconfiguration.RuntimeConfiguration'
    assert f'{type(synthesizer_0.tts_engine).__module__}.{type(synthesizer_0.tts_engine).__qualname__}' == 'aeneas.ttswrappers.espeakttswrapper.ESPEAKTTSWrapper'
    assert module_0.Synthesizer.AWS == 'aws'
    assert module_0.Synthesizer.CUSTOM == 'custom'
    assert module_0.Synthesizer.ESPEAK == 'espeak'
    assert module_0.Synthesizer.ESPEAKNG == 'espeak-ng'
    assert module_0.Synthesizer.FESTIVAL == 'festival'
    assert module_0.Synthesizer.MACOS == 'macos'
    assert module_0.Synthesizer.NUANCE == 'nuance'
    assert module_0.Synthesizer.ALLOWED_VALUES == ['aws', 'custom', 'espeak', 'espeak-ng', 'festival', 'macos', 'nuance']
    assert module_0.Synthesizer.TAG == 'Synthesizer'
    assert f'{type(module_0.Synthesizer.output_audio_format).__module__}.{type(module_0.Synthesizer.output_audio_format).__qualname__}' == 'builtins.property'
    none_type_0 = None
    text_file_0 = module_2.TextFile(file_format=none_type_0, rconf=synthesizer_0)
    synthesizer_0.synthesize(text_file_0, none_type_0)