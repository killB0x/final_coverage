# Automatically generated by Pynguin.
import pytest
import aeneas.tests.base_ttswrapper as module_0

def test_case_0():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'

def test_case_1():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.synthesize(test_base_t_t_s_wrapper_0, backwards=test_base_t_t_s_wrapper_0)

def test_case_2():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.test_unicode_unicode()

def test_case_3():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.test_not_implemented()

def test_case_4():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.test_use_cache()

def test_case_5():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.test_variation_language()

@pytest.mark.xfail(strict=True)
def test_case_6():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.test_variation_language()
    var_1 = test_base_t_t_s_wrapper_0.test_variation_language()
    var_2 = test_base_t_t_s_wrapper_0.test_tfl_none()
    var_1.test_unicode_unicode()

def test_case_7():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.test_invalid_output_path()

def test_case_8():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.test_empty_mixed()

def test_case_9():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.test_empty_mixed_fragments()

def test_case_10():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.test_invalid_language()

def test_case_11():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.test_unicode_ascii()

def test_case_12():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.test_empty_fragments()

def test_case_13():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.test_no_fragments()

def test_case_14():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.test_empty_multiline()

def test_case_15():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.test_clear_cache()

def test_case_16():
    test_base_t_t_s_wrapper_0 = module_0.TestBaseTTSWrapper()
    assert module_0.TestBaseTTSWrapper.TTS == ''
    assert module_0.TestBaseTTSWrapper.TTS_PATH == ''
    assert module_0.TestBaseTTSWrapper.TTS_LANGUAGE == 'eng'
    var_0 = test_base_t_t_s_wrapper_0.test_empty()