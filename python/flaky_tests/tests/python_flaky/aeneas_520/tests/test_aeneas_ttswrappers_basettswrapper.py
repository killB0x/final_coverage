# Automatically generated by Pynguin.
import pytest
import aeneas.ttswrappers.basettswrapper as module_0
import aeneas.globalfunctions as module_1

def test_case_0():
    with pytest.raises(NotImplementedError):
        module_0.BaseTTSWrapper()

def test_case_1():
    t_t_s_cache_0 = module_0.TTSCache()
    assert f'{type(t_t_s_cache_0).__module__}.{type(t_t_s_cache_0).__qualname__}' == 'aeneas.ttswrappers.basettswrapper.TTSCache'
    assert len(t_t_s_cache_0) == 0
    assert module_0.TTSCache.TAG == 'TTSCache'

@pytest.mark.xfail(strict=True)
def test_case_2():
    t_t_s_cache_0 = module_0.TTSCache()
    assert f'{type(t_t_s_cache_0).__module__}.{type(t_t_s_cache_0).__qualname__}' == 'aeneas.ttswrappers.basettswrapper.TTSCache'
    assert len(t_t_s_cache_0) == 0
    assert module_0.TTSCache.TAG == 'TTSCache'
    var_0 = t_t_s_cache_0.keys()
    var_0.log_exc(var_0, raise_type=t_t_s_cache_0)

def test_case_3():
    t_t_s_cache_0 = module_0.TTSCache()
    assert f'{type(t_t_s_cache_0).__module__}.{type(t_t_s_cache_0).__qualname__}' == 'aeneas.ttswrappers.basettswrapper.TTSCache'
    assert len(t_t_s_cache_0) == 0
    assert module_0.TTSCache.TAG == 'TTSCache'
    with pytest.raises(KeyError):
        t_t_s_cache_0.get(t_t_s_cache_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    t_t_s_cache_0 = module_0.TTSCache()
    assert f'{type(t_t_s_cache_0).__module__}.{type(t_t_s_cache_0).__qualname__}' == 'aeneas.ttswrappers.basettswrapper.TTSCache'
    assert len(t_t_s_cache_0) == 0
    assert module_0.TTSCache.TAG == 'TTSCache'
    var_0 = t_t_s_cache_0.__len__()
    assert var_0 == 0
    module_0.TTSCache(logger=t_t_s_cache_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    t_t_s_cache_0 = module_0.TTSCache()
    assert f'{type(t_t_s_cache_0).__module__}.{type(t_t_s_cache_0).__qualname__}' == 'aeneas.ttswrappers.basettswrapper.TTSCache'
    assert len(t_t_s_cache_0) == 0
    assert module_0.TTSCache.TAG == 'TTSCache'
    var_0 = t_t_s_cache_0.is_cached(t_t_s_cache_0)
    assert var_0 is False
    var_1 = t_t_s_cache_0.clear()
    module_1.file_size(t_t_s_cache_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    t_t_s_cache_0 = module_0.TTSCache()
    assert f'{type(t_t_s_cache_0).__module__}.{type(t_t_s_cache_0).__qualname__}' == 'aeneas.ttswrappers.basettswrapper.TTSCache'
    assert len(t_t_s_cache_0) == 0
    assert module_0.TTSCache.TAG == 'TTSCache'
    var_0 = t_t_s_cache_0.add(t_t_s_cache_0, t_t_s_cache_0)
    assert len(t_t_s_cache_0) == 1
    var_1 = t_t_s_cache_0.keys()
    var_0.log_exc(var_1, raise_type=t_t_s_cache_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    t_t_s_cache_0 = module_0.TTSCache()
    assert f'{type(t_t_s_cache_0).__module__}.{type(t_t_s_cache_0).__qualname__}' == 'aeneas.ttswrappers.basettswrapper.TTSCache'
    assert len(t_t_s_cache_0) == 0
    assert module_0.TTSCache.TAG == 'TTSCache'
    var_0 = t_t_s_cache_0.add(t_t_s_cache_0, t_t_s_cache_0)
    assert len(t_t_s_cache_0) == 1
    var_1 = t_t_s_cache_0.is_cached(t_t_s_cache_0)
    t_t_s_cache_0.clear()

def test_case_8():
    t_t_s_cache_0 = module_0.TTSCache()
    assert f'{type(t_t_s_cache_0).__module__}.{type(t_t_s_cache_0).__qualname__}' == 'aeneas.ttswrappers.basettswrapper.TTSCache'
    assert len(t_t_s_cache_0) == 0
    assert module_0.TTSCache.TAG == 'TTSCache'
    var_0 = t_t_s_cache_0.add(t_t_s_cache_0, t_t_s_cache_0)
    assert len(t_t_s_cache_0) == 1
    with pytest.raises(ValueError):
        t_t_s_cache_0.add(t_t_s_cache_0, t_t_s_cache_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    t_t_s_cache_0 = module_0.TTSCache()
    assert f'{type(t_t_s_cache_0).__module__}.{type(t_t_s_cache_0).__qualname__}' == 'aeneas.ttswrappers.basettswrapper.TTSCache'
    assert len(t_t_s_cache_0) == 0
    assert module_0.TTSCache.TAG == 'TTSCache'
    var_0 = t_t_s_cache_0.add(t_t_s_cache_0, t_t_s_cache_0)
    assert len(t_t_s_cache_0) == 1
    var_1 = t_t_s_cache_0.get(t_t_s_cache_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.ttswrappers.basettswrapper.TTSCache'
    assert len(var_1) == 1
    var_2 = t_t_s_cache_0.keys()
    var_3 = var_1.is_cached(t_t_s_cache_0)
    var_2.log_exc(var_2, raise_type=t_t_s_cache_0)