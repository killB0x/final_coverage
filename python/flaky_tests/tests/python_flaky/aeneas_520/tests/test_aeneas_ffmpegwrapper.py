# Automatically generated by Pynguin.
import pytest
import aeneas.ffmpegwrapper as module_0
import aeneas.globalfunctions as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    f_f_m_p_e_g_wrapper_0 = module_0.FFMPEGWrapper()
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_8000 == ['-ar', '8000']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_16000 == ['-ar', '16000']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_22050 == ['-ar', '22050']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_44100 == ['-ar', '44100']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_48000 == ['-ar', '48000']
    assert module_0.FFMPEGWrapper.FFMPEG_MONO == ['-ac', '1']
    assert module_0.FFMPEGWrapper.FFMPEG_STEREO == ['-ac', '2']
    assert module_0.FFMPEGWrapper.FFMPEG_OVERWRITE == ['-y']
    assert module_0.FFMPEGWrapper.FFMPEG_PLAIN_HEADER == ['-map_metadata', '-1', '-flags', '+bitexact']
    assert module_0.FFMPEGWrapper.FFMPEG_FORMAT_WAVE == ['-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_KEEP == ['-ac', '1', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_8000 == ['-ac', '1', '-ar', '8000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_16000 == ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_22050 == ['-ac', '1', '-ar', '22050', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_44100 == ['-ac', '1', '-ar', '44100', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_48000 == ['-ac', '1', '-ar', '48000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_MAP == {8000: ['-ac', '1', '-ar', '8000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 16000: ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 22050: ['-ac', '1', '-ar', '22050', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 44100: ['-ac', '1', '-ar', '44100', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 48000: ['-ac', '1', '-ar', '48000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']}
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_DEFAULT == ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.TAG == 'FFMPEGWrapper'
    none_type_0 = None
    f_f_m_p_e_g_wrapper_0.convert(bool_0, none_type_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    f_f_m_p_e_g_wrapper_0 = module_0.FFMPEGWrapper()
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_8000 == ['-ar', '8000']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_16000 == ['-ar', '16000']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_22050 == ['-ar', '22050']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_44100 == ['-ar', '44100']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_48000 == ['-ar', '48000']
    assert module_0.FFMPEGWrapper.FFMPEG_MONO == ['-ac', '1']
    assert module_0.FFMPEGWrapper.FFMPEG_STEREO == ['-ac', '2']
    assert module_0.FFMPEGWrapper.FFMPEG_OVERWRITE == ['-y']
    assert module_0.FFMPEGWrapper.FFMPEG_PLAIN_HEADER == ['-map_metadata', '-1', '-flags', '+bitexact']
    assert module_0.FFMPEGWrapper.FFMPEG_FORMAT_WAVE == ['-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_KEEP == ['-ac', '1', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_8000 == ['-ac', '1', '-ar', '8000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_16000 == ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_22050 == ['-ac', '1', '-ar', '22050', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_44100 == ['-ac', '1', '-ar', '44100', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_48000 == ['-ac', '1', '-ar', '48000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_MAP == {8000: ['-ac', '1', '-ar', '8000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 16000: ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 22050: ['-ac', '1', '-ar', '22050', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 44100: ['-ac', '1', '-ar', '44100', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 48000: ['-ac', '1', '-ar', '48000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']}
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_DEFAULT == ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.TAG == 'FFMPEGWrapper'
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    f_f_m_p_e_g_path_error_0 = module_0.FFMPEGPathError(*list_1)
    none_type_0 = None
    f_f_m_p_e_g_wrapper_0.convert(none_type_0, none_type_0)

def test_case_2():
    f_f_m_p_e_g_wrapper_0 = module_0.FFMPEGWrapper()
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_8000 == ['-ar', '8000']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_16000 == ['-ar', '16000']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_22050 == ['-ar', '22050']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_44100 == ['-ar', '44100']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_48000 == ['-ar', '48000']
    assert module_0.FFMPEGWrapper.FFMPEG_MONO == ['-ac', '1']
    assert module_0.FFMPEGWrapper.FFMPEG_STEREO == ['-ac', '2']
    assert module_0.FFMPEGWrapper.FFMPEG_OVERWRITE == ['-y']
    assert module_0.FFMPEGWrapper.FFMPEG_PLAIN_HEADER == ['-map_metadata', '-1', '-flags', '+bitexact']
    assert module_0.FFMPEGWrapper.FFMPEG_FORMAT_WAVE == ['-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_KEEP == ['-ac', '1', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_8000 == ['-ac', '1', '-ar', '8000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_16000 == ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_22050 == ['-ac', '1', '-ar', '22050', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_44100 == ['-ac', '1', '-ar', '44100', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_48000 == ['-ac', '1', '-ar', '48000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_MAP == {8000: ['-ac', '1', '-ar', '8000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 16000: ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 22050: ['-ac', '1', '-ar', '22050', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 44100: ['-ac', '1', '-ar', '44100', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 48000: ['-ac', '1', '-ar', '48000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']}
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_DEFAULT == ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.TAG == 'FFMPEGWrapper'

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_1.datetime_string(bool_0)
    assert var_0 == '2022-10-13T02:18:40'
    f_f_m_p_e_g_wrapper_0 = module_0.FFMPEGWrapper()
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_8000 == ['-ar', '8000']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_16000 == ['-ar', '16000']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_22050 == ['-ar', '22050']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_44100 == ['-ar', '44100']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_48000 == ['-ar', '48000']
    assert module_0.FFMPEGWrapper.FFMPEG_MONO == ['-ac', '1']
    assert module_0.FFMPEGWrapper.FFMPEG_STEREO == ['-ac', '2']
    assert module_0.FFMPEGWrapper.FFMPEG_OVERWRITE == ['-y']
    assert module_0.FFMPEGWrapper.FFMPEG_PLAIN_HEADER == ['-map_metadata', '-1', '-flags', '+bitexact']
    assert module_0.FFMPEGWrapper.FFMPEG_FORMAT_WAVE == ['-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_KEEP == ['-ac', '1', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_8000 == ['-ac', '1', '-ar', '8000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_16000 == ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_22050 == ['-ac', '1', '-ar', '22050', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_44100 == ['-ac', '1', '-ar', '44100', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_48000 == ['-ac', '1', '-ar', '48000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_MAP == {8000: ['-ac', '1', '-ar', '8000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 16000: ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 22050: ['-ac', '1', '-ar', '22050', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 44100: ['-ac', '1', '-ar', '44100', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 48000: ['-ac', '1', '-ar', '48000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']}
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_DEFAULT == ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.TAG == 'FFMPEGWrapper'
    f_f_m_p_e_g_wrapper_0.convert(bool_0, var_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    var_0 = module_1.datetime_string(bool_0)
    assert var_0 == '2022-10-13T02:18:40+00:00'
    f_f_m_p_e_g_wrapper_0 = module_0.FFMPEGWrapper()
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_8000 == ['-ar', '8000']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_16000 == ['-ar', '16000']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_22050 == ['-ar', '22050']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_44100 == ['-ar', '44100']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_48000 == ['-ar', '48000']
    assert module_0.FFMPEGWrapper.FFMPEG_MONO == ['-ac', '1']
    assert module_0.FFMPEGWrapper.FFMPEG_STEREO == ['-ac', '2']
    assert module_0.FFMPEGWrapper.FFMPEG_OVERWRITE == ['-y']
    assert module_0.FFMPEGWrapper.FFMPEG_PLAIN_HEADER == ['-map_metadata', '-1', '-flags', '+bitexact']
    assert module_0.FFMPEGWrapper.FFMPEG_FORMAT_WAVE == ['-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_KEEP == ['-ac', '1', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_8000 == ['-ac', '1', '-ar', '8000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_16000 == ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_22050 == ['-ac', '1', '-ar', '22050', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_44100 == ['-ac', '1', '-ar', '44100', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_48000 == ['-ac', '1', '-ar', '48000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_MAP == {8000: ['-ac', '1', '-ar', '8000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 16000: ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 22050: ['-ac', '1', '-ar', '22050', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 44100: ['-ac', '1', '-ar', '44100', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 48000: ['-ac', '1', '-ar', '48000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']}
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_DEFAULT == ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.TAG == 'FFMPEGWrapper'
    none_type_0 = None
    f_f_m_p_e_g_wrapper_0.convert(bool_0, var_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    f_f_m_p_e_g_wrapper_0 = module_0.FFMPEGWrapper()
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_8000 == ['-ar', '8000']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_16000 == ['-ar', '16000']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_22050 == ['-ar', '22050']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_44100 == ['-ar', '44100']
    assert module_0.FFMPEGWrapper.FFMPEG_SAMPLE_48000 == ['-ar', '48000']
    assert module_0.FFMPEGWrapper.FFMPEG_MONO == ['-ac', '1']
    assert module_0.FFMPEGWrapper.FFMPEG_STEREO == ['-ac', '2']
    assert module_0.FFMPEGWrapper.FFMPEG_OVERWRITE == ['-y']
    assert module_0.FFMPEGWrapper.FFMPEG_PLAIN_HEADER == ['-map_metadata', '-1', '-flags', '+bitexact']
    assert module_0.FFMPEGWrapper.FFMPEG_FORMAT_WAVE == ['-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_KEEP == ['-ac', '1', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_8000 == ['-ac', '1', '-ar', '8000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_16000 == ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_22050 == ['-ac', '1', '-ar', '22050', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_44100 == ['-ac', '1', '-ar', '44100', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_SAMPLE_48000 == ['-ac', '1', '-ar', '48000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_MAP == {8000: ['-ac', '1', '-ar', '8000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 16000: ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 22050: ['-ac', '1', '-ar', '22050', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 44100: ['-ac', '1', '-ar', '44100', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav'], 48000: ['-ac', '1', '-ar', '48000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']}
    assert module_0.FFMPEGWrapper.FFMPEG_PARAMETERS_DEFAULT == ['-ac', '1', '-ar', '16000', '-y', '-map_metadata', '-1', '-flags', '+bitexact', '-f', 'wav']
    assert module_0.FFMPEGWrapper.TAG == 'FFMPEGWrapper'
    bool_0 = False
    var_0 = module_1.file_exists(bool_0)
    f_f_m_p_e_g_wrapper_1 = module_0.FFMPEGWrapper()
    f_f_m_p_e_g_wrapper_1.convert(bool_0, var_0, process_length=f_f_m_p_e_g_wrapper_0)