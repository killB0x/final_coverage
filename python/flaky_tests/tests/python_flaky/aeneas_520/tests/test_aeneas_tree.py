# Automatically generated by Pynguin.
import pytest
import aeneas.tree as module_0
import aeneas.globalfunctions as module_1
import re as module_2
import uuid as module_3

def test_case_0():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = tree_0.remove()

def test_case_1():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_2():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = tree_0.__unicode__()
    assert var_0 == 'None (l: 0, c: 0)'
    tree_0.log_crit(tree_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = tree_0.clone()
    assert len(var_0) == 0
    tree_0.ancestor(tree_0)

def test_case_4():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = tree_0.remove_children()

@pytest.mark.xfail(strict=True)
def test_case_5():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = tree_0.remove_children()
    var_1 = var_0.__gt__(tree_0)
    var_2 = tree_0.remove()
    var_3 = module_1.file_exists(var_0)
    var_4 = tree_0.vlevel_at_index(var_3)
    tree_0.get_child(var_2)

@pytest.mark.xfail(strict=True)
def test_case_6():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = tree_0.__unicode__()
    assert var_0 == 'None (l: 0, c: 0)'
    var_1 = module_1.is_osx()
    var_2 = tree_0.remove_child(var_1)
    var_3 = tree_0.ancestor(var_1)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'aeneas.tree.Tree'
    assert len(var_3) == 0
    var_4 = var_1.__rmod__(var_3)
    var_5 = tree_0.remove_children()
    var_6 = tree_0.remove()
    var_7 = module_1.file_exists(var_6)
    var_8 = tree_0.vlevel_at_index(var_7)
    var_9 = var_8.pop()
    var_10 = tree_0.keep_levels(var_8)
    tree_0.get_vchild(var_7)

@pytest.mark.xfail(strict=True)
def test_case_7():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    tree_0.ancestor(tree_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_1.is_linux()
    tree_0 = module_0.Tree(rconf=var_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_1 = tree_0.__str__()
    assert var_1 == 'None (l: 0, c: 0)'
    var_1.get_child(tree_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_1.is_linux()
    tree_0 = module_0.Tree(rconf=var_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    tree_0.level_at_index(tree_0)

def test_case_10():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = tree_0.remove_children()
    var_1 = module_1.file_exists(var_0)
    var_2 = tree_0.vlevel_at_index(var_1)

@pytest.mark.xfail(strict=True)
def test_case_11():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = tree_0.__len__()
    assert var_0 == 0
    var_1 = tree_0.__unicode__()
    assert var_1 == 'None (l: 0, c: 0)'
    var_2 = var_1.__gt__(var_1)
    tree_0.add_child(var_2)

@pytest.mark.xfail(strict=True)
def test_case_12():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    tree_0.add_child(tree_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    tree_0.keep_levels(tree_0)

def test_case_14():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = tree_0.remove()
    var_1 = module_1.file_exists(var_0)
    var_2 = tree_0.vlevel_at_index(var_1)
    var_3 = var_2.pop()
    var_4 = tree_0.keep_levels(var_2)

@pytest.mark.xfail(strict=True)
def test_case_15():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = tree_0.remove_children()
    var_1 = var_0.__gt__(tree_0)
    var_2 = tree_0.__unicode__()
    assert var_2 == 'None (l: 0, c: 0)'
    var_3 = tree_0.remove()
    var_4 = module_2.RegexFlag.DEBUG
    tree_0.vlevel_at_index(var_4)

@pytest.mark.xfail(strict=True)
def test_case_16():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = tree_0.remove_children()
    tree_0.add_child(tree_0, tree_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = tree_0.remove()
    var_1 = module_1.file_exists(var_0)
    var_2 = tree_0.vlevel_at_index(var_1)
    tree_0.keep_levels(var_2)

@pytest.mark.xfail(strict=True)
def test_case_18():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = module_1.is_osx()
    var_1 = tree_0.ancestor(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'aeneas.tree.Tree'
    assert len(var_1) == 0
    tree_0.__contains__(tree_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = module_1.is_osx()
    var_1 = tree_0.remove_child(var_0)
    var_2 = tree_0.ancestor(var_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'aeneas.tree.Tree'
    assert len(var_2) == 0
    tree_0.vlevel_at_index(tree_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = tree_0.__eq__(tree_0)
    var_1 = tree_0.ancestor(var_0)
    var_2 = tree_0.remove_children()
    var_3 = tree_0.remove()
    var_4 = module_1.file_exists(var_3)
    var_5 = tree_0.vlevel_at_index(var_4)
    tree_0.keep_levels(var_5)

@pytest.mark.xfail(strict=True)
def test_case_21():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = module_3.getnode()
    var_1 = tree_0.remove_child(var_0)
    var_2 = tree_0.ancestor(var_0)
    var_3 = tree_0.remove_children()
    var_4 = tree_0.remove()
    var_5 = module_1.file_exists(var_4)
    var_6 = tree_0.vlevel_at_index(var_5)
    tree_0.keep_levels(var_6)

@pytest.mark.xfail(strict=True)
def test_case_22():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    var_0 = tree_0.__unicode__()
    assert var_0 == 'None (l: 0, c: 0)'
    var_1 = module_1.file_size(var_0)
    var_2 = tree_0.remove_child(var_1)
    tree_0.ancestor(var_1)

@pytest.mark.xfail(strict=True)
def test_case_23():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    tree_1 = module_0.Tree()
    assert len(tree_1) == 0
    var_0 = tree_1.add_child(tree_0)
    assert len(tree_1) == 1
    tree_1.get_child(tree_1)

@pytest.mark.xfail(strict=True)
def test_case_24():
    tree_0 = module_0.Tree()
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'aeneas.tree.Tree'
    assert len(tree_0) == 0
    assert module_0.Tree.TAG == 'Tree'
    assert f'{type(module_0.Tree.value).__module__}.{type(module_0.Tree.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children).__module__}.{type(module_0.Tree.children).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren).__module__}.{type(module_0.Tree.vchildren).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.children_not_empty).__module__}.{type(module_0.Tree.children_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vchildren_not_empty).__module__}.{type(module_0.Tree.vchildren_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_leaf).__module__}.{type(module_0.Tree.is_leaf).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_empty).__module__}.{type(module_0.Tree.is_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.parent).__module__}.{type(module_0.Tree.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_root).__module__}.{type(module_0.Tree.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.level).__module__}.{type(module_0.Tree.level).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.is_pleasant).__module__}.{type(module_0.Tree.is_pleasant).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.subtree).__module__}.{type(module_0.Tree.subtree).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves).__module__}.{type(module_0.Tree.leaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves).__module__}.{type(module_0.Tree.vleaves).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.leaves_not_empty).__module__}.{type(module_0.Tree.leaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vleaves_not_empty).__module__}.{type(module_0.Tree.vleaves_not_empty).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.height).__module__}.{type(module_0.Tree.height).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.dfs).__module__}.{type(module_0.Tree.dfs).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.pre).__module__}.{type(module_0.Tree.pre).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.levels).__module__}.{type(module_0.Tree.levels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tree.vlevels).__module__}.{type(module_0.Tree.vlevels).__qualname__}' == 'builtins.property'
    int_0 = -772
    tree_0.vlevel_at_index(int_0)