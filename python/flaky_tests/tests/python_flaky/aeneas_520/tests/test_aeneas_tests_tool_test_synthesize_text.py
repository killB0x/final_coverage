# Automatically generated by Pynguin.
import pytest
import unittest.util as module_0
import aeneas.tests.tool_test_synthesize_text as module_1
import ast as module_2
import difflib as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.Mismatch()

@pytest.mark.xfail(strict=True)
def test_case_1():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    test_synthesize_text_c_l_i_0.test_synt_plain_backwards_quit()

@pytest.mark.xfail(strict=True)
def test_case_2():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    var_0 = test_synthesize_text_c_l_i_0.test_help()
    test_synthesize_text_c_l_i_0.assertGreaterEqual(var_0, test_synthesize_text_c_l_i_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    var_0 = test_synthesize_text_c_l_i_0.shortDescription()
    test_synthesize_text_c_l_i_0.test_synt_list()

@pytest.mark.xfail(strict=True)
def test_case_4():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    test_synthesize_text_c_l_i_0.test_synt_unparsed_id_regex()

@pytest.mark.xfail(strict=True)
def test_case_5():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    var_0 = test_synthesize_text_c_l_i_0.assertEqual(test_synthesize_text_c_l_i_0, test_synthesize_text_c_l_i_0)
    var_1 = test_synthesize_text_c_l_i_0.test_synt_missing_1()
    var_2 = test_synthesize_text_c_l_i_0.test_synt_missing_1()
    test_synthesize_text_c_l_i_0.test_synt_unparsed_class_regex()

@pytest.mark.xfail(strict=True)
def test_case_6():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    var_0 = test_synthesize_text_c_l_i_0.assertLogs(test_synthesize_text_c_l_i_0)
    test_synthesize_text_c_l_i_0.test_synt_plain_no_cew()

def test_case_7():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    var_0 = test_synthesize_text_c_l_i_0.test_synt_path()

@pytest.mark.xfail(strict=True)
def test_case_8():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    test_synthesize_text_c_l_i_0.test_synt_parsed()

@pytest.mark.xfail(strict=True)
def test_case_9():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    test_synthesize_text_c_l_i_0.test_synt_plain_pure()

@pytest.mark.xfail(strict=True)
def test_case_10():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    var_0 = test_synthesize_text_c_l_i_0.test_synt_missing_4()
    test_synthesize_text_c_l_i_0.test_synt_plain_start_end()

@pytest.mark.xfail(strict=True)
def test_case_11():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    test_synthesize_text_c_l_i_0.test_synt_unparsed_sort_lexicographic()

@pytest.mark.xfail(strict=True)
def test_case_12():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    test_synthesize_text_c_l_i_0.test_synt_plain_end()

@pytest.mark.xfail(strict=True)
def test_case_13():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    var_0 = test_synthesize_text_c_l_i_0.test_synt_path_bad()
    module_2.copy_location(var_0, test_synthesize_text_c_l_i_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    var_0 = test_synthesize_text_c_l_i_0.setUp()
    var_1 = test_synthesize_text_c_l_i_0.test_synt_missing_4()
    test_synthesize_text_c_l_i_0.test_synt_plain()

@pytest.mark.xfail(strict=True)
def test_case_15():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    var_0 = module_3.HtmlDiff()
    var_1 = test_synthesize_text_c_l_i_0.test_synt_missing_3()
    var_1.test_help()

@pytest.mark.xfail(strict=True)
def test_case_16():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    test_synthesize_text_c_l_i_0.test_synt_plain_backwards()

@pytest.mark.xfail(strict=True)
def test_case_17():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    test_synthesize_text_c_l_i_0.test_synt_plain_quit()

@pytest.mark.xfail(strict=True)
def test_case_18():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    var_0 = test_synthesize_text_c_l_i_0.assertLogs(test_synthesize_text_c_l_i_0)
    var_1 = test_synthesize_text_c_l_i_0.test_synt_cannot_read()
    var_2 = test_synthesize_text_c_l_i_0.test_synt_path()
    var_0.test_synt_plain_backwards_quit()

@pytest.mark.xfail(strict=True)
def test_case_19():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    test_synthesize_text_c_l_i_0.test_synt_plain_start()

@pytest.mark.xfail(strict=True)
def test_case_20():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    var_0 = test_synthesize_text_c_l_i_0.test_synt_path()
    var_1 = test_synthesize_text_c_l_i_0.setUp()
    test_synthesize_text_c_l_i_0.test_synt_plain_cew_subprocess()

@pytest.mark.xfail(strict=True)
def test_case_21():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    var_0 = test_synthesize_text_c_l_i_0.test_help()
    var_1 = test_synthesize_text_c_l_i_0.test_synt_missing_2()
    var_0.isprintable()

@pytest.mark.xfail(strict=True)
def test_case_22():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    var_0 = test_synthesize_text_c_l_i_0.test_synt_path()
    var_1 = var_0.__eq__(var_0)
    test_synthesize_text_c_l_i_0.test_synt_subtitles()

@pytest.mark.xfail(strict=True)
def test_case_23():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    test_synthesize_text_c_l_i_0.test_synt_unparsed_sort_numeric()

@pytest.mark.xfail(strict=True)
def test_case_24():
    test_synthesize_text_c_l_i_0 = module_1.TestSynthesizeTextCLI()
    var_0 = test_synthesize_text_c_l_i_0.test_synt_unparsed_missing()
    var_1 = test_synthesize_text_c_l_i_0.test_synt_missing_1()
    var_2 = test_synthesize_text_c_l_i_0.test_synt_path()
    var_2.visit_Match(test_synthesize_text_c_l_i_0)