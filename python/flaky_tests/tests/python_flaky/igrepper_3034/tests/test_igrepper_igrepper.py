# Automatically generated by Pynguin.
import pytest
import igrepper.igrepper as module_0
import curses as module_1
import re as module_2

def test_case_0():
    list_0 = module_0.grep_cmd()

def test_case_1():
    list_0 = module_0.clipboard_cmd()

@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    i_grepper_0 = module_0.IGrepper(list_0)
    assert f'{type(i_grepper_0).__module__}.{type(i_grepper_0).__qualname__}' == 'igrepper.igrepper.IGrepper'
    assert f'{type(i_grepper_0.win).__module__}.{type(i_grepper_0.win).__qualname__}' == '_curses.window'
    assert i_grepper_0.regex == ''
    assert i_grepper_0.input_lines == []
    assert i_grepper_0.display_mode == module_0.DisplayMode.show_default
    assert i_grepper_0.pager_ypos == 0
    assert i_grepper_0.pager_xpos == 0
    assert f'{type(i_grepper_0.search).__module__}.{type(i_grepper_0.search).__qualname__}' == 'igrepper.igrepper.Search'
    assert i_grepper_0.quit is False
    none_type_0 = None
    module_0.copy_to_clipboard(none_type_0)

def test_case_3():
    str_0 = 'j{h8,ez'
    str_1 = 'HNy'
    list_0 = [str_0, str_1, str_0, str_1]
    search_0 = module_0.Search(list_0)
    assert f'{type(search_0).__module__}.{type(search_0).__qualname__}' == 'igrepper.igrepper.Search'
    assert search_0.valid is True
    assert search_0.lines == []
    assert search_0.match_count == 0
    assert search_0.number_of_matched_lines == 0
    assert search_0.unique_match_count == 0
    assert search_0.selected_match == 0
    assert search_0.unique_matches == []
    assert search_0.previous_searches == []
    assert search_0.ignore_case is True
    assert search_0.regex == ''
    assert search_0.output_lines == []
    assert search_0.context == 0
    var_0 = search_0.update(str_1)
    list_1 = module_0.clipboard_cmd()

def test_case_4():
    list_0 = module_0.grep_cmd()
    str_0 = 'darwin'
    list_1 = module_0.clipboard_cmd()
    line_0 = module_0.Line(list_0, str_0, list_0, str_0)

def test_case_5():
    str_0 = '9$-!6|V\\-r]AMH _-'
    list_0 = [str_0]
    i_grepper_0 = module_0.IGrepper(list_0, list_0)
    assert f'{type(i_grepper_0).__module__}.{type(i_grepper_0).__qualname__}' == 'igrepper.igrepper.IGrepper'
    assert f'{type(i_grepper_0.win).__module__}.{type(i_grepper_0.win).__qualname__}' == '_curses.window'
    assert i_grepper_0.regex == ['9$-!6|V\\-r]AMH _-']
    assert i_grepper_0.input_lines == ['9$-!6|V\\-r]AMH _-']
    assert i_grepper_0.display_mode == module_0.DisplayMode.show_default
    assert i_grepper_0.pager_ypos == 0
    assert i_grepper_0.pager_xpos == 0
    assert f'{type(i_grepper_0.search).__module__}.{type(i_grepper_0.search).__qualname__}' == 'igrepper.igrepper.Search'
    assert i_grepper_0.quit is False

@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = module_0.grep_cmd()
    logger_0 = module_0.Logger()
    i_grepper_0 = module_0.IGrepper(list_0, initial_context=logger_0)
    list_1 = module_0.clipboard_cmd()
    var_0 = i_grepper_0.get_number_of_pager_lines()
    var_1 = module_1.start_color()
    var_1.endwin()

@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 14
    i_grepper_0 = module_0.IGrepper(int_0)
    assert f'{type(i_grepper_0).__module__}.{type(i_grepper_0).__qualname__}' == 'igrepper.igrepper.IGrepper'
    assert f'{type(i_grepper_0.win).__module__}.{type(i_grepper_0.win).__qualname__}' == '_curses.window'
    assert i_grepper_0.regex == ''
    assert i_grepper_0.input_lines == 14
    assert i_grepper_0.display_mode == module_0.DisplayMode.show_default
    assert i_grepper_0.pager_ypos == 0
    assert i_grepper_0.pager_xpos == 0
    assert f'{type(i_grepper_0.search).__module__}.{type(i_grepper_0.search).__qualname__}' == 'igrepper.igrepper.Search'
    assert i_grepper_0.quit is False
    logger_0 = module_0.Logger()
    var_0 = i_grepper_0.toggle_display_mode()
    i_grepper_0.run()

def test_case_8():
    list_0 = module_0.grep_cmd()
    search_0 = module_0.Search(list_0)
    var_0 = search_0.prev_match()
    i_grepper_0 = module_0.IGrepper(var_0)
    list_1 = module_0.clipboard_cmd()
    var_1 = i_grepper_0.toggle_display_mode()
    var_2 = i_grepper_0.toggle_display_mode()
    var_3 = i_grepper_0.toggle_display_mode()

@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = module_0.grep_cmd()
    int_0 = 14
    str_0 = "$%`c+a'"
    line_0 = module_0.Line(int_0, str_0, list_0)
    logger_0 = module_0.Logger()
    i_grepper_0 = module_0.IGrepper(list_0, initial_context=logger_0)
    list_1 = module_0.clipboard_cmd()
    i_grepper_0.endwin()

@pytest.mark.xfail(strict=True)
def test_case_10():
    list_0 = module_0.clipboard_cmd()
    str_0 = '\x0c_ub(P\t#\x0bSvsG)6Qe'
    i_grepper_0 = module_0.IGrepper(list_0, initial_context=str_0)
    i_grepper_0.run()

@pytest.mark.xfail(strict=True)
def test_case_11():
    list_0 = module_1.start_color()
    search_0 = module_0.Search(list_0)
    assert f'{type(search_0).__module__}.{type(search_0).__qualname__}' == 'igrepper.igrepper.Search'
    assert search_0.valid is True
    assert search_0.lines == []
    assert search_0.match_count == 0
    assert search_0.number_of_matched_lines == 0
    assert search_0.unique_match_count == 0
    assert search_0.selected_match == 0
    assert search_0.unique_matches == []
    assert search_0.previous_searches == []
    assert search_0.ignore_case is True
    assert search_0.regex == ''
    assert search_0.output_lines == []
    assert search_0.context == 0
    var_0 = search_0.next_match()
    line_0 = module_0.Line(var_0, var_0, list_0)
    logger_0 = module_0.Logger()
    module_2.match(var_0, list_0)

def test_case_12():
    list_0 = module_0.grep_cmd()
    search_0 = module_0.Search(list_0)
    str_0 = '\x0c_ub(P\t#\x0bSvsG)6Qe'
    var_0 = search_0.update(str_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    display_mode_0 = module_0.DisplayMode.show_default
    list_0 = module_0.grep_cmd()
    search_0 = module_0.Search(list_0)
    logger_0 = module_0.Logger()
    i_grepper_0 = module_0.IGrepper(display_mode_0, list_0)
    i_grepper_0.run()

def test_case_14():
    display_mode_0 = module_0.DisplayMode.show_only_unique
    list_0 = module_0.grep_cmd()
    search_0 = module_0.Search(list_0)
    var_0 = module_1.start_color()
    var_1 = search_0.prev_match()
    i_grepper_0 = module_0.IGrepper(display_mode_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    display_mode_0 = module_0.DisplayMode.show_default
    list_0 = module_0.grep_cmd()
    search_0 = module_0.Search(list_0)
    int_0 = 14
    str_0 = 'cz*1>X`3aA(.4\x0c1:aKS9'
    var_0 = search_0.update(str_0)
    str_1 = '$g`PVav'
    line_0 = module_0.Line(int_0, str_1, list_0)
    i_grepper_0 = module_0.IGrepper(int_0)
    logger_0 = module_0.Logger()
    var_1 = search_0.prev_match()
    i_grepper_1 = module_0.IGrepper(display_mode_0, list_0)
    i_grepper_0.run()

@pytest.mark.xfail(strict=True)
def test_case_16():
    display_mode_0 = module_0.DisplayMode.show_default
    var_0 = module_0.log_with_debugging(display_mode_0)
    var_0.__call__(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    list_0 = module_0.grep_cmd()
    str_0 = 'j{h8,ez'
    str_1 = '/r(*xY9[B_RSw:>W<'
    str_2 = 'HNy'
    list_1 = [str_0, str_1, str_0, str_2]
    search_0 = module_0.Search(list_1)
    list_2 = module_0.clipboard_cmd()
    var_0 = search_0.update(str_2)
    i_grepper_0 = module_0.IGrepper(var_0)
    logger_0 = module_0.Logger()
    var_1 = search_0.prev_match()
    i_grepper_1 = module_0.IGrepper(var_0)
    i_grepper_0.run()

@pytest.mark.xfail(strict=True)
def test_case_18():
    list_0 = module_0.grep_cmd()
    str_0 = 'j{h8,ez'
    str_1 = '/r(*xY9[B_RSw:>W<'
    str_2 = '\x0cJ6\x0c}|'
    str_3 = 'HNy'
    list_1 = [str_0, str_1, str_2, str_3]
    search_0 = module_0.Search(list_1)
    list_2 = module_2.escape(str_1)
    var_0 = search_0.update(str_3)
    var_1 = search_0.next_match()
    list_3 = module_0.clipboard_cmd()
    list_4 = module_0.clipboard_cmd()
    var_0.toggle_display_mode()