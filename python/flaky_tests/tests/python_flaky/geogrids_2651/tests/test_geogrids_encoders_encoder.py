# Automatically generated by Pynguin.
import pytest
import geogrids.encoders.encoder as module_0

def test_case_0():
    bool_0 = True
    encoder_0 = module_0.Encoder()
    assert encoder_0.separator == ' '
    var_0 = encoder_0.hash_to_string(bool_0, bool_0)
    assert var_0 == 'arse'
    str_0 = ']|{e@iQ`3+LSI'
    with pytest.raises(module_0.DecodingError):
        encoder_0.string_to_hash(str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    encoder_0 = module_0.Encoder()
    assert encoder_0.separator == ' '
    encoder_1 = module_0.Encoder()
    assert encoder_1.separator == ' '
    int_0 = -2565
    var_0 = encoder_1.hash_to_string(encoder_1, int_0)
    module_0.DecodingWarning(*var_0, **var_0)

def test_case_2():
    encoder_0 = module_0.Encoder()
    assert encoder_0.separator == ' '
    str_0 = ']|{e@iQ`3+LSI'
    with pytest.raises(module_0.DecodingError):
        encoder_0.string_to_hash(str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '\n        Given a location, return its human-readable hash\n\n        Returns\n        -------\n        readable_hash : str\n            human-readable hash\n        '
    str_1 = 'f\\ ,9*dmhlJ}W&B'
    encoder_0 = module_0.Encoder(str_1)
    assert encoder_0.separator == ' '
    assert encoder_0.precisions == [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57]
    var_0 = encoder_0.string_to_hash(str_1)
    var_0.string_to_hash(str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 90
    decoding_error_0 = module_0.DecodingError(int_0, int_0)
    assert f'{type(decoding_error_0).__module__}.{type(decoding_error_0).__qualname__}' == 'geogrids.encoders.encoder.DecodingError'
    assert decoding_error_0.word == 90
    assert decoding_error_0.wordlist == 90
    assert decoding_error_0.message == "Could not match '90' in wordlist"
    bool_0 = True
    bool_1 = True
    int_1 = -939
    int_2 = -3297
    encoder_0 = module_0.Encoder()
    assert encoder_0.separator == ' '
    var_0 = encoder_0.hash_to_string(int_1, int_2)
    bool_2 = True
    tuple_0 = (var_0, var_0, var_0, var_0)
    decoding_error_1 = module_0.DecodingError(bool_2, tuple_0)
    assert decoding_error_1.word is True
    assert decoding_error_1.wordlist == ('', '', '', '')
    assert decoding_error_1.message == "Could not match 'True' in wordlist"
    encoder_1 = module_0.Encoder(separator=var_0)
    decoding_error_2 = module_0.DecodingError(var_0, int_2)
    assert decoding_error_2.word == ''
    assert decoding_error_2.wordlist == -3297
    assert decoding_error_2.message == "Could not match '' in wordlist"
    decoding_error_3 = module_0.DecodingError(bool_0, decoding_error_2)
    assert decoding_error_3.word is True
    assert f'{type(decoding_error_3.wordlist).__module__}.{type(decoding_error_3.wordlist).__qualname__}' == 'geogrids.encoders.encoder.DecodingError'
    assert decoding_error_3.message == "Could not match 'True' in wordlist"
    var_1 = encoder_1.hash_to_string(bool_0, bool_1)
    assert var_1 == 'arse'
    var_2 = encoder_1.string_to_hash(var_0)
    var_1.hash_to_string(var_2, bool_0)

def test_case_5():
    encoder_0 = module_0.Encoder()
    assert encoder_0.separator == ' '

def test_case_6():
    bool_0 = True
    none_type_0 = None
    decoding_error_0 = module_0.DecodingError(bool_0, none_type_0)
    assert f'{type(decoding_error_0).__module__}.{type(decoding_error_0).__qualname__}' == 'geogrids.encoders.encoder.DecodingError'
    assert decoding_error_0.word is True
    assert decoding_error_0.wordlist is None
    assert decoding_error_0.message == "Could not match 'True' in wordlist"

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    bool_1 = False
    bool_2 = True
    int_0 = 1194
    encoder_0 = module_0.Encoder()
    assert encoder_0.separator == ' '
    var_0 = encoder_0.hash_to_string(bool_2, int_0)
    assert var_0 == 'arse anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus anus'
    var_0.hash_to_string(bool_0, bool_1)

def test_case_8():
    str_0 = '47'
    encoder_0 = module_0.Encoder(str_0)
    assert encoder_0.separator == ' '
    assert encoder_0.precisions == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]
    str_1 = ' ivCB|pdBo!`E:1Z\rz'
    var_0 = encoder_0.string_to_hash(str_1)
    str_2 = '`3[\\mt<ObL\tzve'
    with pytest.raises(module_0.DecodingError):
        encoder_0.string_to_hash(str_2)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'L\\]|{&diQ`3+L)I'
    bytes_0 = b'\xb0SM\x14\x8c`'
    encoder_0 = module_0.Encoder(bytes_0)
    assert encoder_0.separator == ' '
    assert encoder_0.precisions == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]
    encoder_0.string_to_hash(str_0)