# Automatically generated by Pynguin.
import pytest
import geogrids.gdgg.oqtm as module_0

def test_case_0():
    with pytest.raises(ValueError):
        module_0.Location()

def test_case_1():
    float_0 = 1e-12
    var_0 = module_0.latitude_longitude_to_numeric_hash(float_0, float_0)
    assert var_0 == 22369618
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

def test_case_2():
    bool_0 = False
    var_0 = module_0.latitude_longitude_to_numeric_hash(bool_0, bool_0, bool_0)
    assert var_0 == 6
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

def test_case_3():
    float_0 = -2047.40349
    var_0 = module_0.latitude_longitude_to_numeric_hash(float_0, float_0)
    assert var_0 == 11184812
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

def test_case_4():
    bool_0 = False
    var_0 = module_0.numeric_hash_to_area(bool_0, bool_0)
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

def test_case_5():
    float_0 = 1e-12
    var_0 = module_0.numeric_hash_to_latitude_longitude(float_0)
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

def test_case_6():
    bool_0 = False
    var_0 = module_0.latitude_longitude_to_readable_hash(bool_0, bool_0)
    assert var_0 == '622222222222'
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

def test_case_7():
    bytes_0 = b'F\xf4d^i,\xc0\xb4\x96\xaf[:\xfc-Z49l'
    var_0 = module_0.readable_hash_to_area(bytes_0)
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b'\xa9\xa6Q\xf0\x8bPF'
    none_type_0 = None
    module_0.numeric_hash_to_latitude_longitude(bytes_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_0.readable_hash_to_area(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    list_0 = []
    module_0.readable_hash_to_latitude_longitude(list_0)

def test_case_11():
    float_0 = 2618.725466532109
    var_0 = module_0.numeric_hash_to_latitude_longitude(float_0)
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]
    with pytest.raises(ValueError):
        module_0.Location(float_0, y=var_0)

def test_case_12():
    float_0 = -2.938012331018993
    var_0 = module_0.latitude_longitude_to_numeric_hash(float_0, float_0)
    assert var_0 == 4186621
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

def test_case_13():
    int_0 = 788
    var_0 = module_0.numeric_hash_to_latitude_longitude(int_0)
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

def test_case_14():
    float_0 = 3.1093453709386396
    var_0 = module_0.numeric_hash_to_area(float_0)
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

def test_case_15():
    float_0 = 2618.0
    var_0 = module_0.numeric_hash_to_latitude_longitude(float_0)
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.Location(longitude=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    int_0 = 6
    bool_0 = True
    var_0 = module_0.latitude_longitude_to_numeric_hash(int_0, bool_0, bool_0)
    assert var_0 == 2
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]
    int_1 = 1548
    var_1 = module_0.latitude_longitude_to_readable_hash(var_0, int_1)
    assert var_1 == '322332131103'
    var_1.compute_level()

def test_case_17():
    float_0 = -2.938
    var_0 = module_0.numeric_hash_to_area(float_0)
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

def test_case_18():
    int_0 = -266
    var_0 = module_0.numeric_hash_to_latitude_longitude(int_0)
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = 87
    var_0 = module_0.latitude_longitude_to_numeric_hash(int_0, int_0)
    assert var_0 == 23247530
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]
    bool_0 = True
    var_1 = module_0.numeric_hash_to_area(bool_0)
    var_2 = var_1.__repr__()
    assert var_2 == '[<Location [100000000000]>, <Location [100000000000]>, <Location [100000000000]>]'
    var_3 = var_2.__repr__()
    assert var_3 == "'[<Location [100000000000]>, <Location [100000000000]>, <Location [100000000000]>]'"
    var_2.location_to_readable_hash()

def test_case_20():
    int_0 = -217
    var_0 = module_0.numeric_hash_to_area(int_0)
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

def test_case_21():
    bool_0 = True
    var_0 = module_0.numeric_hash_to_area(bool_0, bool_0)
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = False
    var_0 = module_0.latitude_longitude_to_numeric_hash(bool_0, bool_0)
    assert var_0 == 22369622
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]
    var_1 = module_0.latitude_longitude_to_numeric_hash(bool_0, var_0)
    assert var_1 == 22536055
    var_2 = module_0.numeric_hash_to_latitude_longitude(var_1)
    module_0.readable_hash_to_area(bool_0)

def test_case_23():
    int_0 = 795
    var_0 = module_0.numeric_hash_to_latitude_longitude(int_0)
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = True
    int_0 = -849
    var_0 = module_0.latitude_longitude_to_numeric_hash(bool_0, int_0, bool_0)
    assert var_0 == 0
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]
    var_0.compute_level()

def test_case_25():
    int_0 = 805
    var_0 = module_0.numeric_hash_to_area(int_0)
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]

def test_case_26():
    float_0 = -2.938012331018993
    float_1 = 0.17777777777777778
    var_0 = module_0.latitude_longitude_to_numeric_hash(float_1, float_0)
    assert var_0 == 30406649
    assert module_0.HASH_PRECISIONS == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]