# Automatically generated by Pynguin.
import pytest
import snippy.storage.database as module_0
import collections as module_1

def test_case_0():
    psycopg2_0 = module_0.psycopg2()
    assert f'{type(psycopg2_0).__module__}.{type(psycopg2_0).__qualname__}' == 'snippy.storage.database.psycopg2'

def test_case_1():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    var_0 = database_0.disconnect()

@pytest.mark.xfail(strict=True)
def test_case_2():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    var_0 = database_0.select_distinct(database_0, database_0, database_0, database_0, database_0)
    var_1 = database_0.insert(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'snippy.content.collection.Collection'
    assert len(var_1) == 0
    user_string_0 = module_1.UserString(var_1)
    database_0.insert(user_string_0)

def test_case_3():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    database_1 = module_0.Database()
    var_0 = database_0.disconnect()
    var_1 = database_0.select(database_0, search_filter=database_1, uuid=database_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'snippy.content.collection.Collection'
    assert len(var_1) == 0
    var_2 = database_0.insert(var_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'snippy.content.collection.Collection'
    assert len(var_2) == 0

def test_case_4():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    var_0 = database_0.select_all(database_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'snippy.content.collection.Collection'
    assert len(var_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_5():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    var_0 = database_0.select_distinct(database_0, database_0, database_0, database_0, database_0)
    database_0.update(database_0, database_0)

def test_case_6():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    database_1 = module_0.Database()
    var_0 = database_0.disconnect()
    var_1 = database_1.update(database_1, var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'snippy.content.collection.Collection'
    assert len(var_1) == 0
    var_2 = database_1.select_distinct(database_0, var_1, var_1, database_1, database_1)
    var_3 = database_0.delete(database_1)
    var_4 = database_0.select(sgrp=var_3, uuid=database_1, identity=var_1, data=database_0)

def test_case_7():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    var_0 = database_0.delete(database_0)

def test_case_8():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    var_0 = database_0.select()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'snippy.content.collection.Collection'
    assert len(var_0) == 0

def test_case_9():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'

def test_case_10():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    str_0 = ''
    var_0 = database_0.select(sgrp=str_0, identity=str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'snippy.content.collection.Collection'
    assert len(var_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_11():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    database_1 = module_0.Database()
    var_0 = database_1.disconnect()
    var_1 = database_1.select_distinct(database_1, database_0, var_0, database_0, database_0)
    var_2 = database_0.delete(var_1)
    database_0.select(stag=var_2, identity=var_0, data=database_0)

def test_case_12():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    var_0 = database_0.select_distinct(database_0, database_0, database_0, database_0, database_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    database_0.select(database_0, sgrp=database_0, data=database_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    database_0.select(sgrp=database_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    psycopg2_0 = module_0.psycopg2()
    assert f'{type(psycopg2_0).__module__}.{type(psycopg2_0).__qualname__}' == 'snippy.storage.database.psycopg2'
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    database_1 = module_0.Database()
    var_0 = database_0.delete(database_0)
    var_1 = database_0.select_all(var_0)
    database_0.select(database_0, database_0, uuid=database_0, data=database_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    database_0.select(digest=database_0)

def test_case_17():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    var_0 = database_0.select(search_filter=database_0, uuid=database_0, identity=database_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'snippy.content.collection.Collection'
    assert len(var_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = '_C\x0bXpK|?hv'
    str_1 = '=B<CQ\x0bS~$'
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    var_0 = database_0.delete(database_0)
    var_1 = database_0.select_all(str_1)
    var_2 = database_0.select(uuid=str_0, identity=str_1)
    dict_0 = {str_0: str_0, str_1: str_1}
    database_0.select(sall=str_1, stag=var_0, sgrp=dict_0, search_filter=var_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    str_0 = 'Llk\nPKTFe'
    database_0.select(sgrp=str_0, identity=str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    database_0.select(stag=database_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    var_0 = database_0.select_all(database_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'snippy.content.collection.Collection'
    assert len(var_0) == 0
    var_1 = var_0.__iter__()
    database_0.insert(var_1)

@pytest.mark.xfail(strict=True)
def test_case_22():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    database_1 = module_0.Database()
    database_2 = module_0.Database()
    var_0 = database_0.disconnect()
    var_1 = database_0.select(sgrp=var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'snippy.content.collection.Collection'
    assert len(var_1) == 0
    none_type_0 = None
    var_2 = var_1.load(database_1, var_0, none_type_0)
    var_3 = database_1.select_distinct(database_0, var_0, var_0, var_0, database_0)
    var_4 = database_0.insert(var_3)
    var_5 = database_1.update(database_1, var_0)
    str_0 = 'Llk1PKToe'
    var_6 = database_0.select(sgrp=var_3, uuid=database_1, identity=var_5, data=var_4)
    var_7 = database_2.select(var_5, search_filter=database_2, digest=var_2, data=str_0)
    database_0.update(var_1, database_2)

@pytest.mark.xfail(strict=True)
def test_case_23():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    database_1 = module_0.Database()
    var_0 = database_1.select_all(database_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'snippy.content.collection.Collection'
    assert len(var_0) == 0
    database_2 = module_0.Database()
    var_1 = database_0.disconnect()
    var_2 = database_1.select_distinct(database_0, var_1, var_1, var_1, database_0)
    var_3 = database_0.insert(var_2)
    var_4 = database_1.update(database_1, var_1)
    str_0 = 'Llk1PKToe'
    var_5 = database_0.delete(database_1)
    var_6 = database_0.select(sgrp=var_2, uuid=database_1, identity=var_4, data=var_3)
    var_7 = database_2.select(var_0, search_filter=database_2, digest=str_0, data=str_0)
    database_1.select(sgrp=database_0, identity=str_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    database_0 = module_0.Database()
    assert module_0.Database.QUERY_TYPE_REGEX == 'regex'
    assert module_0.Database.QUERY_TYPE_TOTAL == 'total'
    assert module_0.Database.QUERY_TYPE_FIELD == 'field'
    str_0 = 'total'
    database_0.select(str_0, stag=str_0, digest=database_0)