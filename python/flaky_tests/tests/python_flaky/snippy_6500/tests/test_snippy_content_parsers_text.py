# Automatically generated by Pynguin.
import pytest
import snippy.content.parsers.text as module_0

def test_case_0():
    none_type_0 = None
    content_parser_text_0 = module_0.ContentParserText(none_type_0, none_type_0, none_type_0)
    assert f'{type(content_parser_text_0).__module__}.{type(content_parser_text_0).__qualname__}' == 'snippy.content.parsers.text.ContentParserText'
    assert module_0.ContentParserText.DATA == {'snippet': '# Add mandatory snippet below.\n', 'reference': '# Add mandatory snippet below.\n', 'solution': '## BRIEF  :'}
    assert module_0.ContentParserText.BRIEF == {'snippet': '# Add optional brief description below.\n', 'reference': '# Add optional brief description below.\n', 'solution': '## BRIEF  :'}
    assert module_0.ContentParserText.DESCRIPTION == {'snippet': '# Add optional description below.\n', 'reference': '# Add optional description below.\n', 'solution': '## DESCRIPTION  :'}
    assert module_0.ContentParserText.NAME == {'snippet': '# Add optional name below.\n', 'reference': '# Add optional name below.\n'}
    assert module_0.ContentParserText.GROUPS == {'snippet': '# Add optional comma separated list of groups below.\n', 'reference': '# Add optional comma separated list of groups below.\n', 'solution': '## GROUPS :'}
    assert module_0.ContentParserText.TAGS == {'snippet': '# Add optional comma separated list of tags below.\n', 'reference': '# Add optional comma separated list of tags below.\n', 'solution': '## TAGS   :'}
    assert module_0.ContentParserText.LINKS == {'snippet': '# Add optional links below one link per line.\n', 'reference': '# Add mandatory links below one link per line.\n'}
    assert module_0.ContentParserText.SOURCE == {'snippet': '# Add optional source reference below.\n', 'reference': '# Add optional source reference below.\n'}
    assert module_0.ContentParserText.VERSIONS == {'snippet': '# Add optional comma separated list of key-value versions below.\n', 'reference': '# Add optional comma separated list of key-value versions below.\n'}
    assert module_0.ContentParserText.LANGUAGES == {'snippet': '# Add optional comma separated list of languages below.\n', 'reference': '# Add optional comma separated list of languages below.\n'}
    assert module_0.ContentParserText.FILENAME == {'snippet': '# Add optional filename below.\n', 'reference': '# Add optional filename below.\n', 'solution': '## FILE   :'}

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '8h]>E?f oMv"W'
    content_parser_text_0 = module_0.ContentParserText(str_0, str_0, str_0)
    assert f'{type(content_parser_text_0).__module__}.{type(content_parser_text_0).__qualname__}' == 'snippy.content.parsers.text.ContentParserText'
    assert module_0.ContentParserText.DATA == {'snippet': '# Add mandatory snippet below.\n', 'reference': '# Add mandatory snippet below.\n', 'solution': '## BRIEF  :'}
    assert module_0.ContentParserText.BRIEF == {'snippet': '# Add optional brief description below.\n', 'reference': '# Add optional brief description below.\n', 'solution': '## BRIEF  :'}
    assert module_0.ContentParserText.DESCRIPTION == {'snippet': '# Add optional description below.\n', 'reference': '# Add optional description below.\n', 'solution': '## DESCRIPTION  :'}
    assert module_0.ContentParserText.NAME == {'snippet': '# Add optional name below.\n', 'reference': '# Add optional name below.\n'}
    assert module_0.ContentParserText.GROUPS == {'snippet': '# Add optional comma separated list of groups below.\n', 'reference': '# Add optional comma separated list of groups below.\n', 'solution': '## GROUPS :'}
    assert module_0.ContentParserText.TAGS == {'snippet': '# Add optional comma separated list of tags below.\n', 'reference': '# Add optional comma separated list of tags below.\n', 'solution': '## TAGS   :'}
    assert module_0.ContentParserText.LINKS == {'snippet': '# Add optional links below one link per line.\n', 'reference': '# Add mandatory links below one link per line.\n'}
    assert module_0.ContentParserText.SOURCE == {'snippet': '# Add optional source reference below.\n', 'reference': '# Add optional source reference below.\n'}
    assert module_0.ContentParserText.VERSIONS == {'snippet': '# Add optional comma separated list of key-value versions below.\n', 'reference': '# Add optional comma separated list of key-value versions below.\n'}
    assert module_0.ContentParserText.LANGUAGES == {'snippet': '# Add optional comma separated list of languages below.\n', 'reference': '# Add optional comma separated list of languages below.\n'}
    assert module_0.ContentParserText.FILENAME == {'snippet': '# Add optional filename below.\n', 'reference': '# Add optional filename below.\n', 'solution': '## FILE   :'}
    content_parser_text_0.read_collection()

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '# Add mandatory snippet below.\n'
    content_parser_text_0 = module_0.ContentParserText(str_0, str_0, str_0)
    assert f'{type(content_parser_text_0).__module__}.{type(content_parser_text_0).__qualname__}' == 'snippy.content.parsers.text.ContentParserText'
    assert module_0.ContentParserText.DATA == {'snippet': '# Add mandatory snippet below.\n', 'reference': '# Add mandatory snippet below.\n', 'solution': '## BRIEF  :'}
    assert module_0.ContentParserText.BRIEF == {'snippet': '# Add optional brief description below.\n', 'reference': '# Add optional brief description below.\n', 'solution': '## BRIEF  :'}
    assert module_0.ContentParserText.DESCRIPTION == {'snippet': '# Add optional description below.\n', 'reference': '# Add optional description below.\n', 'solution': '## DESCRIPTION  :'}
    assert module_0.ContentParserText.NAME == {'snippet': '# Add optional name below.\n', 'reference': '# Add optional name below.\n'}
    assert module_0.ContentParserText.GROUPS == {'snippet': '# Add optional comma separated list of groups below.\n', 'reference': '# Add optional comma separated list of groups below.\n', 'solution': '## GROUPS :'}
    assert module_0.ContentParserText.TAGS == {'snippet': '# Add optional comma separated list of tags below.\n', 'reference': '# Add optional comma separated list of tags below.\n', 'solution': '## TAGS   :'}
    assert module_0.ContentParserText.LINKS == {'snippet': '# Add optional links below one link per line.\n', 'reference': '# Add mandatory links below one link per line.\n'}
    assert module_0.ContentParserText.SOURCE == {'snippet': '# Add optional source reference below.\n', 'reference': '# Add optional source reference below.\n'}
    assert module_0.ContentParserText.VERSIONS == {'snippet': '# Add optional comma separated list of key-value versions below.\n', 'reference': '# Add optional comma separated list of key-value versions below.\n'}
    assert module_0.ContentParserText.LANGUAGES == {'snippet': '# Add optional comma separated list of languages below.\n', 'reference': '# Add optional comma separated list of languages below.\n'}
    assert module_0.ContentParserText.FILENAME == {'snippet': '# Add optional filename below.\n', 'reference': '# Add optional filename below.\n', 'solution': '## FILE   :'}
    content_parser_text_0.read_collection()