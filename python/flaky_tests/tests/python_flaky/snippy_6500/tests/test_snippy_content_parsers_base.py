# Automatically generated by Pynguin.
import pytest
import snippy.content.parsers.base as module_0

def test_case_0():
    content_parser_base_0 = module_0.ContentParserBase()
    assert module_0.ContentParserBase.TEXT_TAG_DATA == '<data>'
    assert module_0.ContentParserBase.TEXT_TAG_BRIEF == '<brief>'
    assert module_0.ContentParserBase.TEXT_TAG_DESCRIPTION == '<description>'
    assert module_0.ContentParserBase.TEXT_TAG_NAME == '<name>'
    assert module_0.ContentParserBase.TEXT_TAG_GROUPS == '<groups>'
    assert module_0.ContentParserBase.TEXT_TAG_TAGS == '<tags>'
    assert module_0.ContentParserBase.TEXT_TAG_LINKS == '<links>'
    assert module_0.ContentParserBase.TEXT_TAG_SOURCE == '<source>'
    assert module_0.ContentParserBase.TEXT_TAG_VERSIONS == '<versions>'
    assert module_0.ContentParserBase.TEXT_TAG_LANGUAGES == '<languages>'
    assert module_0.ContentParserBase.TEXT_TAG_FILENAME == '<filename>'
    assert module_0.ContentParserBase.EXAMPLE_DATA == 'Markdown commands are defined between backtics and prefixed by a dollar sign'
    assert module_0.ContentParserBase.EXAMPLE_BRIEF == 'Add brief title for content'
    assert module_0.ContentParserBase.EXAMPLE_DESCRIPTION == 'Add a description that defines the content in one chapter.'
    assert module_0.ContentParserBase.EXAMPLE_NAME == 'example content handle'
    assert module_0.ContentParserBase.EXAMPLE_GROUPS == 'groups'
    assert module_0.ContentParserBase.EXAMPLE_TAGS == 'example,tags'
    assert module_0.ContentParserBase.EXAMPLE_LINKS == 'https://www.example.com/add-links-here.html'
    assert module_0.ContentParserBase.EXAMPLE_SOURCE == 'https://www.example.com/source.md'
    assert module_0.ContentParserBase.EXAMPLE_VERSIONS == 'example=3.9.0,python>=3'
    assert module_0.ContentParserBase.EXAMPLE_LANGUAGES == 'example-language'
    assert module_0.ContentParserBase.EXAMPLE_FILENAME == 'example-content.md'
    assert module_0.ContentParserBase.TITLE_TEXT_GROUPS == '# Add optional comma separated list of groups below.\n'
    assert module_0.ContentParserBase.SNIPPET_DEFAULT_COMMENT == '<not documented>'
    assert f'{type(module_0.ContentParserBase.format_data).__module__}.{type(module_0.ContentParserBase.format_data).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_string).__module__}.{type(module_0.ContentParserBase.format_string).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_search_keywords).__module__}.{type(module_0.ContentParserBase.format_search_keywords).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_list).__module__}.{type(module_0.ContentParserBase.format_list).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_links).__module__}.{type(module_0.ContentParserBase.format_links).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_filenames).__module__}.{type(module_0.ContentParserBase.format_filenames).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_versions).__module__}.{type(module_0.ContentParserBase.format_versions).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_groups).__module__}.{type(module_0.ContentParserBase.parse_groups).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_links).__module__}.{type(module_0.ContentParserBase.parse_links).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_versions).__module__}.{type(module_0.ContentParserBase.parse_versions).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.remove_template_fillers).__module__}.{type(module_0.ContentParserBase.remove_template_fillers).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.to_unicode).__module__}.{type(module_0.ContentParserBase.to_unicode).__qualname__}' == 'builtins.method'
    var_0 = content_parser_base_0.read_description(content_parser_base_0, content_parser_base_0)
    assert var_0 == ''

def test_case_1():
    content_parser_base_0 = module_0.ContentParserBase()
    assert module_0.ContentParserBase.TEXT_TAG_DATA == '<data>'
    assert module_0.ContentParserBase.TEXT_TAG_BRIEF == '<brief>'
    assert module_0.ContentParserBase.TEXT_TAG_DESCRIPTION == '<description>'
    assert module_0.ContentParserBase.TEXT_TAG_NAME == '<name>'
    assert module_0.ContentParserBase.TEXT_TAG_GROUPS == '<groups>'
    assert module_0.ContentParserBase.TEXT_TAG_TAGS == '<tags>'
    assert module_0.ContentParserBase.TEXT_TAG_LINKS == '<links>'
    assert module_0.ContentParserBase.TEXT_TAG_SOURCE == '<source>'
    assert module_0.ContentParserBase.TEXT_TAG_VERSIONS == '<versions>'
    assert module_0.ContentParserBase.TEXT_TAG_LANGUAGES == '<languages>'
    assert module_0.ContentParserBase.TEXT_TAG_FILENAME == '<filename>'
    assert module_0.ContentParserBase.EXAMPLE_DATA == 'Markdown commands are defined between backtics and prefixed by a dollar sign'
    assert module_0.ContentParserBase.EXAMPLE_BRIEF == 'Add brief title for content'
    assert module_0.ContentParserBase.EXAMPLE_DESCRIPTION == 'Add a description that defines the content in one chapter.'
    assert module_0.ContentParserBase.EXAMPLE_NAME == 'example content handle'
    assert module_0.ContentParserBase.EXAMPLE_GROUPS == 'groups'
    assert module_0.ContentParserBase.EXAMPLE_TAGS == 'example,tags'
    assert module_0.ContentParserBase.EXAMPLE_LINKS == 'https://www.example.com/add-links-here.html'
    assert module_0.ContentParserBase.EXAMPLE_SOURCE == 'https://www.example.com/source.md'
    assert module_0.ContentParserBase.EXAMPLE_VERSIONS == 'example=3.9.0,python>=3'
    assert module_0.ContentParserBase.EXAMPLE_LANGUAGES == 'example-language'
    assert module_0.ContentParserBase.EXAMPLE_FILENAME == 'example-content.md'
    assert module_0.ContentParserBase.TITLE_TEXT_GROUPS == '# Add optional comma separated list of groups below.\n'
    assert module_0.ContentParserBase.SNIPPET_DEFAULT_COMMENT == '<not documented>'
    assert f'{type(module_0.ContentParserBase.format_data).__module__}.{type(module_0.ContentParserBase.format_data).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_string).__module__}.{type(module_0.ContentParserBase.format_string).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_search_keywords).__module__}.{type(module_0.ContentParserBase.format_search_keywords).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_list).__module__}.{type(module_0.ContentParserBase.format_list).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_links).__module__}.{type(module_0.ContentParserBase.format_links).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_filenames).__module__}.{type(module_0.ContentParserBase.format_filenames).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_versions).__module__}.{type(module_0.ContentParserBase.format_versions).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_groups).__module__}.{type(module_0.ContentParserBase.parse_groups).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_links).__module__}.{type(module_0.ContentParserBase.parse_links).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_versions).__module__}.{type(module_0.ContentParserBase.parse_versions).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.remove_template_fillers).__module__}.{type(module_0.ContentParserBase.remove_template_fillers).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.to_unicode).__module__}.{type(module_0.ContentParserBase.to_unicode).__qualname__}' == 'builtins.method'
    var_0 = content_parser_base_0.read_meta_value(content_parser_base_0, content_parser_base_0, content_parser_base_0)
    assert var_0 == ''

def test_case_2():
    content_parser_base_0 = module_0.ContentParserBase()
    assert module_0.ContentParserBase.TEXT_TAG_DATA == '<data>'
    assert module_0.ContentParserBase.TEXT_TAG_BRIEF == '<brief>'
    assert module_0.ContentParserBase.TEXT_TAG_DESCRIPTION == '<description>'
    assert module_0.ContentParserBase.TEXT_TAG_NAME == '<name>'
    assert module_0.ContentParserBase.TEXT_TAG_GROUPS == '<groups>'
    assert module_0.ContentParserBase.TEXT_TAG_TAGS == '<tags>'
    assert module_0.ContentParserBase.TEXT_TAG_LINKS == '<links>'
    assert module_0.ContentParserBase.TEXT_TAG_SOURCE == '<source>'
    assert module_0.ContentParserBase.TEXT_TAG_VERSIONS == '<versions>'
    assert module_0.ContentParserBase.TEXT_TAG_LANGUAGES == '<languages>'
    assert module_0.ContentParserBase.TEXT_TAG_FILENAME == '<filename>'
    assert module_0.ContentParserBase.EXAMPLE_DATA == 'Markdown commands are defined between backtics and prefixed by a dollar sign'
    assert module_0.ContentParserBase.EXAMPLE_BRIEF == 'Add brief title for content'
    assert module_0.ContentParserBase.EXAMPLE_DESCRIPTION == 'Add a description that defines the content in one chapter.'
    assert module_0.ContentParserBase.EXAMPLE_NAME == 'example content handle'
    assert module_0.ContentParserBase.EXAMPLE_GROUPS == 'groups'
    assert module_0.ContentParserBase.EXAMPLE_TAGS == 'example,tags'
    assert module_0.ContentParserBase.EXAMPLE_LINKS == 'https://www.example.com/add-links-here.html'
    assert module_0.ContentParserBase.EXAMPLE_SOURCE == 'https://www.example.com/source.md'
    assert module_0.ContentParserBase.EXAMPLE_VERSIONS == 'example=3.9.0,python>=3'
    assert module_0.ContentParserBase.EXAMPLE_LANGUAGES == 'example-language'
    assert module_0.ContentParserBase.EXAMPLE_FILENAME == 'example-content.md'
    assert module_0.ContentParserBase.TITLE_TEXT_GROUPS == '# Add optional comma separated list of groups below.\n'
    assert module_0.ContentParserBase.SNIPPET_DEFAULT_COMMENT == '<not documented>'
    assert f'{type(module_0.ContentParserBase.format_data).__module__}.{type(module_0.ContentParserBase.format_data).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_string).__module__}.{type(module_0.ContentParserBase.format_string).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_search_keywords).__module__}.{type(module_0.ContentParserBase.format_search_keywords).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_list).__module__}.{type(module_0.ContentParserBase.format_list).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_links).__module__}.{type(module_0.ContentParserBase.format_links).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_filenames).__module__}.{type(module_0.ContentParserBase.format_filenames).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_versions).__module__}.{type(module_0.ContentParserBase.format_versions).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_groups).__module__}.{type(module_0.ContentParserBase.parse_groups).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_links).__module__}.{type(module_0.ContentParserBase.parse_links).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_versions).__module__}.{type(module_0.ContentParserBase.parse_versions).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.remove_template_fillers).__module__}.{type(module_0.ContentParserBase.remove_template_fillers).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.to_unicode).__module__}.{type(module_0.ContentParserBase.to_unicode).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_3():
    content_parser_base_0 = module_0.ContentParserBase()
    assert module_0.ContentParserBase.TEXT_TAG_DATA == '<data>'
    assert module_0.ContentParserBase.TEXT_TAG_BRIEF == '<brief>'
    assert module_0.ContentParserBase.TEXT_TAG_DESCRIPTION == '<description>'
    assert module_0.ContentParserBase.TEXT_TAG_NAME == '<name>'
    assert module_0.ContentParserBase.TEXT_TAG_GROUPS == '<groups>'
    assert module_0.ContentParserBase.TEXT_TAG_TAGS == '<tags>'
    assert module_0.ContentParserBase.TEXT_TAG_LINKS == '<links>'
    assert module_0.ContentParserBase.TEXT_TAG_SOURCE == '<source>'
    assert module_0.ContentParserBase.TEXT_TAG_VERSIONS == '<versions>'
    assert module_0.ContentParserBase.TEXT_TAG_LANGUAGES == '<languages>'
    assert module_0.ContentParserBase.TEXT_TAG_FILENAME == '<filename>'
    assert module_0.ContentParserBase.EXAMPLE_DATA == 'Markdown commands are defined between backtics and prefixed by a dollar sign'
    assert module_0.ContentParserBase.EXAMPLE_BRIEF == 'Add brief title for content'
    assert module_0.ContentParserBase.EXAMPLE_DESCRIPTION == 'Add a description that defines the content in one chapter.'
    assert module_0.ContentParserBase.EXAMPLE_NAME == 'example content handle'
    assert module_0.ContentParserBase.EXAMPLE_GROUPS == 'groups'
    assert module_0.ContentParserBase.EXAMPLE_TAGS == 'example,tags'
    assert module_0.ContentParserBase.EXAMPLE_LINKS == 'https://www.example.com/add-links-here.html'
    assert module_0.ContentParserBase.EXAMPLE_SOURCE == 'https://www.example.com/source.md'
    assert module_0.ContentParserBase.EXAMPLE_VERSIONS == 'example=3.9.0,python>=3'
    assert module_0.ContentParserBase.EXAMPLE_LANGUAGES == 'example-language'
    assert module_0.ContentParserBase.EXAMPLE_FILENAME == 'example-content.md'
    assert module_0.ContentParserBase.TITLE_TEXT_GROUPS == '# Add optional comma separated list of groups below.\n'
    assert module_0.ContentParserBase.SNIPPET_DEFAULT_COMMENT == '<not documented>'
    assert f'{type(module_0.ContentParserBase.format_data).__module__}.{type(module_0.ContentParserBase.format_data).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_string).__module__}.{type(module_0.ContentParserBase.format_string).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_search_keywords).__module__}.{type(module_0.ContentParserBase.format_search_keywords).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_list).__module__}.{type(module_0.ContentParserBase.format_list).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_links).__module__}.{type(module_0.ContentParserBase.format_links).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_filenames).__module__}.{type(module_0.ContentParserBase.format_filenames).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_versions).__module__}.{type(module_0.ContentParserBase.format_versions).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_groups).__module__}.{type(module_0.ContentParserBase.parse_groups).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_links).__module__}.{type(module_0.ContentParserBase.parse_links).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_versions).__module__}.{type(module_0.ContentParserBase.parse_versions).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.remove_template_fillers).__module__}.{type(module_0.ContentParserBase.remove_template_fillers).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.to_unicode).__module__}.{type(module_0.ContentParserBase.to_unicode).__qualname__}' == 'builtins.method'
    var_0 = content_parser_base_0.read_description(content_parser_base_0, content_parser_base_0)
    assert var_0 == ''
    var_1 = content_parser_base_0.read_meta_value(var_0, var_0, var_0)
    assert var_1 == ''
    content_parser_base_0.read_links(content_parser_base_0, content_parser_base_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    content_parser_base_0 = module_0.ContentParserBase()
    assert module_0.ContentParserBase.TEXT_TAG_DATA == '<data>'
    assert module_0.ContentParserBase.TEXT_TAG_BRIEF == '<brief>'
    assert module_0.ContentParserBase.TEXT_TAG_DESCRIPTION == '<description>'
    assert module_0.ContentParserBase.TEXT_TAG_NAME == '<name>'
    assert module_0.ContentParserBase.TEXT_TAG_GROUPS == '<groups>'
    assert module_0.ContentParserBase.TEXT_TAG_TAGS == '<tags>'
    assert module_0.ContentParserBase.TEXT_TAG_LINKS == '<links>'
    assert module_0.ContentParserBase.TEXT_TAG_SOURCE == '<source>'
    assert module_0.ContentParserBase.TEXT_TAG_VERSIONS == '<versions>'
    assert module_0.ContentParserBase.TEXT_TAG_LANGUAGES == '<languages>'
    assert module_0.ContentParserBase.TEXT_TAG_FILENAME == '<filename>'
    assert module_0.ContentParserBase.EXAMPLE_DATA == 'Markdown commands are defined between backtics and prefixed by a dollar sign'
    assert module_0.ContentParserBase.EXAMPLE_BRIEF == 'Add brief title for content'
    assert module_0.ContentParserBase.EXAMPLE_DESCRIPTION == 'Add a description that defines the content in one chapter.'
    assert module_0.ContentParserBase.EXAMPLE_NAME == 'example content handle'
    assert module_0.ContentParserBase.EXAMPLE_GROUPS == 'groups'
    assert module_0.ContentParserBase.EXAMPLE_TAGS == 'example,tags'
    assert module_0.ContentParserBase.EXAMPLE_LINKS == 'https://www.example.com/add-links-here.html'
    assert module_0.ContentParserBase.EXAMPLE_SOURCE == 'https://www.example.com/source.md'
    assert module_0.ContentParserBase.EXAMPLE_VERSIONS == 'example=3.9.0,python>=3'
    assert module_0.ContentParserBase.EXAMPLE_LANGUAGES == 'example-language'
    assert module_0.ContentParserBase.EXAMPLE_FILENAME == 'example-content.md'
    assert module_0.ContentParserBase.TITLE_TEXT_GROUPS == '# Add optional comma separated list of groups below.\n'
    assert module_0.ContentParserBase.SNIPPET_DEFAULT_COMMENT == '<not documented>'
    assert f'{type(module_0.ContentParserBase.format_data).__module__}.{type(module_0.ContentParserBase.format_data).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_string).__module__}.{type(module_0.ContentParserBase.format_string).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_search_keywords).__module__}.{type(module_0.ContentParserBase.format_search_keywords).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_list).__module__}.{type(module_0.ContentParserBase.format_list).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_links).__module__}.{type(module_0.ContentParserBase.format_links).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_filenames).__module__}.{type(module_0.ContentParserBase.format_filenames).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_versions).__module__}.{type(module_0.ContentParserBase.format_versions).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_groups).__module__}.{type(module_0.ContentParserBase.parse_groups).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_links).__module__}.{type(module_0.ContentParserBase.parse_links).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_versions).__module__}.{type(module_0.ContentParserBase.parse_versions).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.remove_template_fillers).__module__}.{type(module_0.ContentParserBase.remove_template_fillers).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.to_unicode).__module__}.{type(module_0.ContentParserBase.to_unicode).__qualname__}' == 'builtins.method'
    dict_0 = {}
    content_parser_base_0.read_versions(dict_0, dict_0)

def test_case_5():
    content_parser_base_0 = module_0.ContentParserBase()
    assert module_0.ContentParserBase.TEXT_TAG_DATA == '<data>'
    assert module_0.ContentParserBase.TEXT_TAG_BRIEF == '<brief>'
    assert module_0.ContentParserBase.TEXT_TAG_DESCRIPTION == '<description>'
    assert module_0.ContentParserBase.TEXT_TAG_NAME == '<name>'
    assert module_0.ContentParserBase.TEXT_TAG_GROUPS == '<groups>'
    assert module_0.ContentParserBase.TEXT_TAG_TAGS == '<tags>'
    assert module_0.ContentParserBase.TEXT_TAG_LINKS == '<links>'
    assert module_0.ContentParserBase.TEXT_TAG_SOURCE == '<source>'
    assert module_0.ContentParserBase.TEXT_TAG_VERSIONS == '<versions>'
    assert module_0.ContentParserBase.TEXT_TAG_LANGUAGES == '<languages>'
    assert module_0.ContentParserBase.TEXT_TAG_FILENAME == '<filename>'
    assert module_0.ContentParserBase.EXAMPLE_DATA == 'Markdown commands are defined between backtics and prefixed by a dollar sign'
    assert module_0.ContentParserBase.EXAMPLE_BRIEF == 'Add brief title for content'
    assert module_0.ContentParserBase.EXAMPLE_DESCRIPTION == 'Add a description that defines the content in one chapter.'
    assert module_0.ContentParserBase.EXAMPLE_NAME == 'example content handle'
    assert module_0.ContentParserBase.EXAMPLE_GROUPS == 'groups'
    assert module_0.ContentParserBase.EXAMPLE_TAGS == 'example,tags'
    assert module_0.ContentParserBase.EXAMPLE_LINKS == 'https://www.example.com/add-links-here.html'
    assert module_0.ContentParserBase.EXAMPLE_SOURCE == 'https://www.example.com/source.md'
    assert module_0.ContentParserBase.EXAMPLE_VERSIONS == 'example=3.9.0,python>=3'
    assert module_0.ContentParserBase.EXAMPLE_LANGUAGES == 'example-language'
    assert module_0.ContentParserBase.EXAMPLE_FILENAME == 'example-content.md'
    assert module_0.ContentParserBase.TITLE_TEXT_GROUPS == '# Add optional comma separated list of groups below.\n'
    assert module_0.ContentParserBase.SNIPPET_DEFAULT_COMMENT == '<not documented>'
    assert f'{type(module_0.ContentParserBase.format_data).__module__}.{type(module_0.ContentParserBase.format_data).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_string).__module__}.{type(module_0.ContentParserBase.format_string).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_search_keywords).__module__}.{type(module_0.ContentParserBase.format_search_keywords).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_list).__module__}.{type(module_0.ContentParserBase.format_list).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_links).__module__}.{type(module_0.ContentParserBase.format_links).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_filenames).__module__}.{type(module_0.ContentParserBase.format_filenames).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_versions).__module__}.{type(module_0.ContentParserBase.format_versions).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_groups).__module__}.{type(module_0.ContentParserBase.parse_groups).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_links).__module__}.{type(module_0.ContentParserBase.parse_links).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_versions).__module__}.{type(module_0.ContentParserBase.parse_versions).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.remove_template_fillers).__module__}.{type(module_0.ContentParserBase.remove_template_fillers).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.to_unicode).__module__}.{type(module_0.ContentParserBase.to_unicode).__qualname__}' == 'builtins.method'
    var_0 = content_parser_base_0.read_brief(content_parser_base_0, content_parser_base_0)
    assert var_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_6():
    content_parser_base_0 = module_0.ContentParserBase()
    assert module_0.ContentParserBase.TEXT_TAG_DATA == '<data>'
    assert module_0.ContentParserBase.TEXT_TAG_BRIEF == '<brief>'
    assert module_0.ContentParserBase.TEXT_TAG_DESCRIPTION == '<description>'
    assert module_0.ContentParserBase.TEXT_TAG_NAME == '<name>'
    assert module_0.ContentParserBase.TEXT_TAG_GROUPS == '<groups>'
    assert module_0.ContentParserBase.TEXT_TAG_TAGS == '<tags>'
    assert module_0.ContentParserBase.TEXT_TAG_LINKS == '<links>'
    assert module_0.ContentParserBase.TEXT_TAG_SOURCE == '<source>'
    assert module_0.ContentParserBase.TEXT_TAG_VERSIONS == '<versions>'
    assert module_0.ContentParserBase.TEXT_TAG_LANGUAGES == '<languages>'
    assert module_0.ContentParserBase.TEXT_TAG_FILENAME == '<filename>'
    assert module_0.ContentParserBase.EXAMPLE_DATA == 'Markdown commands are defined between backtics and prefixed by a dollar sign'
    assert module_0.ContentParserBase.EXAMPLE_BRIEF == 'Add brief title for content'
    assert module_0.ContentParserBase.EXAMPLE_DESCRIPTION == 'Add a description that defines the content in one chapter.'
    assert module_0.ContentParserBase.EXAMPLE_NAME == 'example content handle'
    assert module_0.ContentParserBase.EXAMPLE_GROUPS == 'groups'
    assert module_0.ContentParserBase.EXAMPLE_TAGS == 'example,tags'
    assert module_0.ContentParserBase.EXAMPLE_LINKS == 'https://www.example.com/add-links-here.html'
    assert module_0.ContentParserBase.EXAMPLE_SOURCE == 'https://www.example.com/source.md'
    assert module_0.ContentParserBase.EXAMPLE_VERSIONS == 'example=3.9.0,python>=3'
    assert module_0.ContentParserBase.EXAMPLE_LANGUAGES == 'example-language'
    assert module_0.ContentParserBase.EXAMPLE_FILENAME == 'example-content.md'
    assert module_0.ContentParserBase.TITLE_TEXT_GROUPS == '# Add optional comma separated list of groups below.\n'
    assert module_0.ContentParserBase.SNIPPET_DEFAULT_COMMENT == '<not documented>'
    assert f'{type(module_0.ContentParserBase.format_data).__module__}.{type(module_0.ContentParserBase.format_data).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_string).__module__}.{type(module_0.ContentParserBase.format_string).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_search_keywords).__module__}.{type(module_0.ContentParserBase.format_search_keywords).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_list).__module__}.{type(module_0.ContentParserBase.format_list).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_links).__module__}.{type(module_0.ContentParserBase.format_links).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_filenames).__module__}.{type(module_0.ContentParserBase.format_filenames).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.format_versions).__module__}.{type(module_0.ContentParserBase.format_versions).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_groups).__module__}.{type(module_0.ContentParserBase.parse_groups).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_links).__module__}.{type(module_0.ContentParserBase.parse_links).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.parse_versions).__module__}.{type(module_0.ContentParserBase.parse_versions).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.remove_template_fillers).__module__}.{type(module_0.ContentParserBase.remove_template_fillers).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ContentParserBase.to_unicode).__module__}.{type(module_0.ContentParserBase.to_unicode).__qualname__}' == 'builtins.method'
    none_type_0 = None
    var_0 = content_parser_base_0.read_brief(none_type_0, content_parser_base_0)
    assert var_0 == ''
    content_parser_base_0.read_groups(content_parser_base_0, content_parser_base_0)