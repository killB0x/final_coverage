# Automatically generated by Pynguin.
import pytest
import snippy.logger as module_0
import ast as module_1
import dataclasses as module_2
import re as module_3

def test_case_0():
    custom_formatter_0 = module_0.CustomFormatter()
    assert f'{type(custom_formatter_0).__module__}.{type(custom_formatter_0).__qualname__}' == 'snippy.logger.CustomFormatter'
    assert custom_formatter_0.datefmt is None

@pytest.mark.xfail(strict=True)
def test_case_1():
    logger_0 = module_0.Logger()
    assert module_0.Logger.DEFAULT_LOG_MSG_MAX == 80
    assert module_0.Logger.SECURITY_LOG_MSG_MAX == 10000
    assert module_0.Logger.SECURITY == 60
    assert module_0.Logger.SERVER_OID == 'ecf3b769'
    assert module_0.Logger.LOG_FORMAT == '%(asctime)s %(appname)s[%(process)04d] [%(levelname).1s] [%(oid)s]: %(message)s'
    assert module_0.Logger.CONFIG == {'debug': False, 'log_json': False, 'log_msg_max': 80, 'quiet': False, 'very_verbose': False}
    assert f'{type(module_0.Logger.get_logger).__module__}.{type(module_0.Logger.get_logger).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.configure).__module__}.{type(module_0.Logger.configure).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.refresh_oid).__module__}.{type(module_0.Logger.refresh_oid).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.print_stdout).__module__}.{type(module_0.Logger.print_stdout).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.print_status).__module__}.{type(module_0.Logger.print_status).__qualname__}' == 'builtins.method'
    var_0 = logger_0.remove()
    custom_formatter_0 = module_0.CustomFormatter()
    assert f'{type(custom_formatter_0).__module__}.{type(custom_formatter_0).__qualname__}' == 'snippy.logger.CustomFormatter'
    assert custom_formatter_0.datefmt is None
    custom_formatter_0.formatTime(custom_formatter_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    custom_formatter_0 = module_0.CustomFormatter()
    assert f'{type(custom_formatter_0).__module__}.{type(custom_formatter_0).__qualname__}' == 'snippy.logger.CustomFormatter'
    assert custom_formatter_0.datefmt is None
    logger_0 = module_0.Logger()
    assert module_0.Logger.DEFAULT_LOG_MSG_MAX == 80
    assert module_0.Logger.SECURITY_LOG_MSG_MAX == 10000
    assert module_0.Logger.SECURITY == 60
    assert module_0.Logger.SERVER_OID == 'ecf3b769'
    assert module_0.Logger.LOG_FORMAT == '%(asctime)s %(appname)s[%(process)04d] [%(levelname).1s] [%(oid)s]: %(message)s'
    assert module_0.Logger.CONFIG == {'debug': False, 'log_json': False, 'log_msg_max': 80, 'quiet': False, 'very_verbose': False}
    assert f'{type(module_0.Logger.get_logger).__module__}.{type(module_0.Logger.get_logger).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.configure).__module__}.{type(module_0.Logger.configure).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.refresh_oid).__module__}.{type(module_0.Logger.refresh_oid).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.print_stdout).__module__}.{type(module_0.Logger.print_stdout).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.print_status).__module__}.{type(module_0.Logger.print_status).__qualname__}' == 'builtins.method'
    var_0 = logger_0.reset()
    custom_formatter_0.formatTime(custom_formatter_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    custom_filter_0 = module_0.CustomFilter()
    custom_filter_1 = module_0.CustomFilter()
    logger_0 = module_0.Logger(**dict_0)
    assert module_0.Logger.DEFAULT_LOG_MSG_MAX == 80
    assert module_0.Logger.SECURITY_LOG_MSG_MAX == 10000
    assert module_0.Logger.SECURITY == 60
    assert module_0.Logger.SERVER_OID == 'ecf3b769'
    assert module_0.Logger.LOG_FORMAT == '%(asctime)s %(appname)s[%(process)04d] [%(levelname).1s] [%(oid)s]: %(message)s'
    assert module_0.Logger.CONFIG == {'debug': False, 'log_json': False, 'log_msg_max': 80, 'quiet': False, 'very_verbose': False}
    assert f'{type(module_0.Logger.get_logger).__module__}.{type(module_0.Logger.get_logger).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.configure).__module__}.{type(module_0.Logger.configure).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.refresh_oid).__module__}.{type(module_0.Logger.refresh_oid).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.print_stdout).__module__}.{type(module_0.Logger.print_stdout).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.print_status).__module__}.{type(module_0.Logger.print_status).__qualname__}' == 'builtins.method'
    logger_1 = module_0.Logger()
    var_0 = module_1.walk(logger_0)
    var_1 = custom_filter_0.filter(custom_filter_1)
    assert var_1 is True
    assert custom_filter_1.oid == 'ecf3b769'
    logger_0.remove_ansi(logger_1)

@pytest.mark.xfail(strict=True)
def test_case_4():
    logger_0 = module_0.Logger()
    assert module_0.Logger.DEFAULT_LOG_MSG_MAX == 80
    assert module_0.Logger.SECURITY_LOG_MSG_MAX == 10000
    assert module_0.Logger.SECURITY == 60
    assert module_0.Logger.SERVER_OID == 'ecf3b769'
    assert module_0.Logger.LOG_FORMAT == '%(asctime)s %(appname)s[%(process)04d] [%(levelname).1s] [%(oid)s]: %(message)s'
    assert module_0.Logger.CONFIG == {'debug': False, 'log_json': False, 'log_msg_max': 80, 'quiet': False, 'very_verbose': False}
    assert f'{type(module_0.Logger.get_logger).__module__}.{type(module_0.Logger.get_logger).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.configure).__module__}.{type(module_0.Logger.configure).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.refresh_oid).__module__}.{type(module_0.Logger.refresh_oid).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.print_stdout).__module__}.{type(module_0.Logger.print_stdout).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.print_status).__module__}.{type(module_0.Logger.print_status).__qualname__}' == 'builtins.method'
    var_0 = logger_0.reset()
    logger_0.debug()

@pytest.mark.xfail(strict=True)
def test_case_5():
    custom_formatter_0 = module_0.CustomFormatter()
    assert f'{type(custom_formatter_0).__module__}.{type(custom_formatter_0).__qualname__}' == 'snippy.logger.CustomFormatter'
    assert custom_formatter_0.datefmt is None
    custom_logger_adapter_0 = module_0.CustomLoggerAdapter(custom_formatter_0, custom_formatter_0)
    custom_formatter_0.formatTime(custom_formatter_0)

def test_case_6():
    custom_filter_0 = module_0.CustomFilter()
    var_0 = custom_filter_0.filter(custom_filter_0)
    assert var_0 is True
    assert custom_filter_0.oid == 'ecf3b769'

@pytest.mark.xfail(strict=True)
def test_case_7():
    custom_gunicorn_logger_0 = module_0.CustomGunicornLogger()
    none_type_0 = None
    custom_gunicorn_logger_0.setup(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    logger_0 = module_0.Logger()
    assert module_0.Logger.DEFAULT_LOG_MSG_MAX == 80
    assert module_0.Logger.SECURITY_LOG_MSG_MAX == 10000
    assert module_0.Logger.SECURITY == 60
    assert module_0.Logger.SERVER_OID == 'ecf3b769'
    assert module_0.Logger.LOG_FORMAT == '%(asctime)s %(appname)s[%(process)04d] [%(levelname).1s] [%(oid)s]: %(message)s'
    assert module_0.Logger.CONFIG == {'debug': False, 'log_json': False, 'log_msg_max': 80, 'quiet': False, 'very_verbose': False}
    assert f'{type(module_0.Logger.get_logger).__module__}.{type(module_0.Logger.get_logger).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.configure).__module__}.{type(module_0.Logger.configure).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.refresh_oid).__module__}.{type(module_0.Logger.refresh_oid).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.print_stdout).__module__}.{type(module_0.Logger.print_stdout).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.print_status).__module__}.{type(module_0.Logger.print_status).__qualname__}' == 'builtins.method'
    var_0 = logger_0.timeit(logger_0)
    var_0.remove()

@pytest.mark.xfail(strict=True)
def test_case_9():
    logger_0 = module_0.Logger()
    assert module_0.Logger.DEFAULT_LOG_MSG_MAX == 80
    assert module_0.Logger.SECURITY_LOG_MSG_MAX == 10000
    assert module_0.Logger.SECURITY == 60
    assert module_0.Logger.SERVER_OID == 'ecf3b769'
    assert module_0.Logger.LOG_FORMAT == '%(asctime)s %(appname)s[%(process)04d] [%(levelname).1s] [%(oid)s]: %(message)s'
    assert module_0.Logger.CONFIG == {'debug': False, 'log_json': False, 'log_msg_max': 80, 'quiet': False, 'very_verbose': False}
    assert f'{type(module_0.Logger.get_logger).__module__}.{type(module_0.Logger.get_logger).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.configure).__module__}.{type(module_0.Logger.configure).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.refresh_oid).__module__}.{type(module_0.Logger.refresh_oid).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.print_stdout).__module__}.{type(module_0.Logger.print_stdout).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Logger.print_status).__module__}.{type(module_0.Logger.print_status).__qualname__}' == 'builtins.method'
    var_0 = logger_0.timeit()
    var_1 = logger_0.remove()
    var_2 = module_2.field(default=logger_0)
    var_2.filter(var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    custom_formatter_0 = module_0.CustomFormatter()
    assert f'{type(custom_formatter_0).__module__}.{type(custom_formatter_0).__qualname__}' == 'snippy.logger.CustomFormatter'
    assert custom_formatter_0.datefmt is None
    custom_formatter_0.format(custom_formatter_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    custom_formatter_0 = module_0.CustomFormatter()
    assert f'{type(custom_formatter_0).__module__}.{type(custom_formatter_0).__qualname__}' == 'snippy.logger.CustomFormatter'
    assert custom_formatter_0.datefmt is None
    custom_formatter_0.formatTime(custom_formatter_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    custom_formatter_0 = module_0.CustomFormatter()
    assert f'{type(custom_formatter_0).__module__}.{type(custom_formatter_0).__qualname__}' == 'snippy.logger.CustomFormatter'
    assert custom_formatter_0.datefmt is None
    error_0 = module_3.error(custom_formatter_0)
    custom_formatter_0.format(error_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    custom_filter_0 = module_0.CustomFilter()
    str_0 = ':rES[6WI!6ey@P0B8(~u'
    custom_logger_adapter_0 = module_0.CustomLoggerAdapter(str_0, str_0)
    assert f'{type(custom_logger_adapter_0).__module__}.{type(custom_logger_adapter_0).__qualname__}' == 'snippy.logger.CustomLoggerAdapter'
    assert custom_logger_adapter_0.logger == ':rES[6WI!6ey@P0B8(~u'
    assert custom_logger_adapter_0.extra == ':rES[6WI!6ey@P0B8(~u'
    var_0 = custom_filter_0.filter(custom_filter_0)
    assert custom_filter_0.oid == 'ecf3b769'
    custom_logger_adapter_0.security(var_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    custom_formatter_0 = module_0.CustomFormatter()
    assert f'{type(custom_formatter_0).__module__}.{type(custom_formatter_0).__qualname__}' == 'snippy.logger.CustomFormatter'
    assert custom_formatter_0.datefmt is None
    frozen_instance_error_0 = module_2.FrozenInstanceError()
    custom_formatter_0.format(frozen_instance_error_0)