# Automatically generated by Pynguin.
import pytest
import snippy.config.source.cli as module_0

def test_case_0():
    none_type_0 = None
    cli_0 = module_0.Cli(none_type_0)
    assert f'{type(cli_0).__module__}.{type(cli_0).__qualname__}' == 'snippy.config.source.cli.Cli'
    assert cli_0.complete is None
    assert cli_0.debug is False
    assert cli_0.defaults is False
    assert cli_0.digest is None
    assert cli_0.editor is False
    assert cli_0.failure is True
    assert cli_0.failure_message == 'no command line arguments'
    assert cli_0.template_format == 'mkdn'
    assert cli_0.template_format_used is False
    assert cli_0.log_json is False
    assert cli_0.log_msg_max == 80
    assert cli_0.merge is True
    assert cli_0.no_ansi is False
    assert cli_0.no_editor is False
    assert cli_0.only_headers is False
    assert cli_0.operation is None
    assert cli_0.plugin == ''
    assert cli_0.plugins == {}
    assert cli_0.profiler is False
    assert cli_0.quiet is False
    assert cli_0.run_healthcheck is False
    assert cli_0.server_minify_json is False
    assert cli_0.server_readonly is False
    assert cli_0.server_ssl_ca_cert is None
    assert cli_0.server_ssl_cert is None
    assert cli_0.server_ssl_key is None
    assert cli_0.storage_path == ''
    assert cli_0.storage_type == 'sqlite'
    assert cli_0.storage_host == ''
    assert cli_0.storage_user == ''
    assert cli_0.storage_password == ''
    assert cli_0.storage_database == ''
    assert cli_0.storage_ssl_cert is None
    assert cli_0.storage_ssl_key is None
    assert cli_0.storage_ssl_ca_cert is None
    assert cli_0.template is False
    assert cli_0.import_hook is None
    assert cli_0.uuid is None
    assert cli_0.version is None
    assert cli_0.very_verbose is False
    assert module_0.Cli.ARGS_COPYRIGHT == ('Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_USAGE == 'snippy [-v, --version] [-h, --help] <operation> [<options>] [-vv] [-q]'
    assert module_0.Cli.ARGS_CATEGORY == ('  --scat [CATEGORY,...]         operate content categories',)
    assert module_0.Cli.ARGS_EDITOR == ('  -c, --content CONTENT         define example content', '  -b, --brief BRIEF             define content brief description', '  -g, --groups [GROUP,...]      define comma separated list of groups', '  -t, --tags [TAG,...]          define comma separated list of tags', '  -l, --links [LINK ...]        define space separated list of links', '  -d, --digest DIGEST           idenfity content with digest', '  -u, --uuid UUID               idenfity content with uuid', '  --editor                      use vi editor to manage content', '  --no-editor                   do not use vi editor')
    assert module_0.Cli.ARGS_SEARCH == ('  --sall [KW,...]               search keywords from all fields', '  --stag [KW,...]               search keywords only from tags', '  --sgrp [KW,...]               search keywords only from groups', '  --filter REGEXP               filter search result with regexp', '  --limit INT                   maximum number of search results', '  --sort FIELD                  sort search result based on fields', '  --headers                     print only content headers', '  --no-ansi                     remove ANSI characters from output')
    assert module_0.Cli.ARGS_MIGRATE == ('  -f, --file FILE               define file for operation', '  --defaults                    migrate category specific defaults', '  --template                    migrate category specific template')
    assert module_0.Cli.ARGS_EPILOG == ('symbols:', '    $    snippet', '    :    solution', '    >    reference', '    @    group', '    #    tag', '', 'examples:', '    Import default content.', '      $ snippy import --defaults --scat snippet', '      $ snippy import --defaults --scat solution', '      $ snippy import --defaults --scat reference', '      $ snippy import --defaults --scat all', '', '    List all snippets.', '      $ snippy search --scat snippet --sall .', '', '    List more examples.', '      $ snippy --help examples', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_EXAMPLES == ('examples:', '    Creating new content:', '      $ snippy create --scat snippet --editor', "      $ snippy create --scat snippet -c 'docker ps' -b 'list containers' -t docker,moby", '', '    Searching and filtering content:', '      $ snippy search --scat snippet --sall docker,moby', '      $ snippy search --scat snippet --sall .', "      $ snippy search --scat snippet --sall . --no-ansi | grep '\\$' | sort", '      $ snippy search --scat solution --sall .', "      $ snippy search --scat solution --sall . | grep -Ev '[^\\s]+:'", "      $ snippy search --scat all --sall . --filter '\\$?.*docker'", "      $ snippy search --scat all --sall . --no-ansi | grep -E '[0-9]+\\.\\s'", '', '    Updating content:', '      $ snippy update --scat snippet -d 44afdd0c59e17159', "      $ snippy update --scat snippet -c 'docker ps'", '', '    Deleting content:', '      $ snippy delete --scat snippet -d 44afdd0c59e17159', "      $ snippy delete --scat snippet -c 'docker ps'", '', '    Migrating default content:', '      $ snippy import --scat snippet --defaults', '      $ snippy import --scat solution --defaults', '      $ snippy import --scat reference --defaults', '', '    Migrating content templates:', '      $ snippy export --scat solution --template', '      $ snippy import --scat solution --template', '      $ snippy import --scat solution -f solution-template.txt', '', '    Migrating specific content:', '      $ snippy export -d eb792f8015ace749', '      $ snippy import -d eb792f8015ace749 -f howto-debug-elastic-beats.mkdn', '', '    Migrating content:', '      $ snippy export --scat snippet -f snippets.yaml', '      $ snippy export --scat snippet -f snippets.json', '      $ snippy export --scat snippet -f snippets.text', '      $ snippy import --scat snippet -f snippets.yaml', '      $ snippy export --scat solution -f solutions.yaml', '      $ snippy import --scat solution -f solutions.yaml', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')

def test_case_1():
    str_0 = 'user interrupted import plugin'
    cli_0 = module_0.Cli(str_0)
    assert f'{type(cli_0).__module__}.{type(cli_0).__qualname__}' == 'snippy.config.source.cli.Cli'
    assert cli_0.complete is None
    assert cli_0.debug is False
    assert cli_0.defaults is False
    assert cli_0.digest is None
    assert cli_0.editor is False
    assert cli_0.failure is True
    assert cli_0.failure_message == "argument   {create,search,update,delete,export,import}: invalid choice: 's' (choose from 'create', 'search', 'update', 'delete', 'export', 'import', 'server')"
    assert cli_0.template_format == 'mkdn'
    assert cli_0.template_format_used is False
    assert cli_0.log_json is False
    assert cli_0.log_msg_max == 80
    assert cli_0.merge is True
    assert cli_0.no_ansi is False
    assert cli_0.no_editor is False
    assert cli_0.only_headers is False
    assert cli_0.operation is None
    assert cli_0.plugin == ''
    assert cli_0.plugins == {}
    assert cli_0.profiler is False
    assert cli_0.quiet is False
    assert cli_0.run_healthcheck is False
    assert cli_0.server_minify_json is False
    assert cli_0.server_readonly is False
    assert cli_0.server_ssl_ca_cert is None
    assert cli_0.server_ssl_cert is None
    assert cli_0.server_ssl_key is None
    assert cli_0.storage_path == ''
    assert cli_0.storage_type == 'sqlite'
    assert cli_0.storage_host == ''
    assert cli_0.storage_user == ''
    assert cli_0.storage_password == ''
    assert cli_0.storage_database == ''
    assert cli_0.storage_ssl_cert is None
    assert cli_0.storage_ssl_key is None
    assert cli_0.storage_ssl_ca_cert is None
    assert cli_0.template is False
    assert cli_0.import_hook is None
    assert cli_0.uuid is None
    assert cli_0.version is None
    assert cli_0.very_verbose is False
    assert module_0.Cli.ARGS_COPYRIGHT == ('Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_USAGE == 'snippy [-v, --version] [-h, --help] <operation> [<options>] [-vv] [-q]'
    assert module_0.Cli.ARGS_CATEGORY == ('  --scat [CATEGORY,...]         operate content categories',)
    assert module_0.Cli.ARGS_EDITOR == ('  -c, --content CONTENT         define example content', '  -b, --brief BRIEF             define content brief description', '  -g, --groups [GROUP,...]      define comma separated list of groups', '  -t, --tags [TAG,...]          define comma separated list of tags', '  -l, --links [LINK ...]        define space separated list of links', '  -d, --digest DIGEST           idenfity content with digest', '  -u, --uuid UUID               idenfity content with uuid', '  --editor                      use vi editor to manage content', '  --no-editor                   do not use vi editor')
    assert module_0.Cli.ARGS_SEARCH == ('  --sall [KW,...]               search keywords from all fields', '  --stag [KW,...]               search keywords only from tags', '  --sgrp [KW,...]               search keywords only from groups', '  --filter REGEXP               filter search result with regexp', '  --limit INT                   maximum number of search results', '  --sort FIELD                  sort search result based on fields', '  --headers                     print only content headers', '  --no-ansi                     remove ANSI characters from output')
    assert module_0.Cli.ARGS_MIGRATE == ('  -f, --file FILE               define file for operation', '  --defaults                    migrate category specific defaults', '  --template                    migrate category specific template')
    assert module_0.Cli.ARGS_EPILOG == ('symbols:', '    $    snippet', '    :    solution', '    >    reference', '    @    group', '    #    tag', '', 'examples:', '    Import default content.', '      $ snippy import --defaults --scat snippet', '      $ snippy import --defaults --scat solution', '      $ snippy import --defaults --scat reference', '      $ snippy import --defaults --scat all', '', '    List all snippets.', '      $ snippy search --scat snippet --sall .', '', '    List more examples.', '      $ snippy --help examples', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_EXAMPLES == ('examples:', '    Creating new content:', '      $ snippy create --scat snippet --editor', "      $ snippy create --scat snippet -c 'docker ps' -b 'list containers' -t docker,moby", '', '    Searching and filtering content:', '      $ snippy search --scat snippet --sall docker,moby', '      $ snippy search --scat snippet --sall .', "      $ snippy search --scat snippet --sall . --no-ansi | grep '\\$' | sort", '      $ snippy search --scat solution --sall .', "      $ snippy search --scat solution --sall . | grep -Ev '[^\\s]+:'", "      $ snippy search --scat all --sall . --filter '\\$?.*docker'", "      $ snippy search --scat all --sall . --no-ansi | grep -E '[0-9]+\\.\\s'", '', '    Updating content:', '      $ snippy update --scat snippet -d 44afdd0c59e17159', "      $ snippy update --scat snippet -c 'docker ps'", '', '    Deleting content:', '      $ snippy delete --scat snippet -d 44afdd0c59e17159', "      $ snippy delete --scat snippet -c 'docker ps'", '', '    Migrating default content:', '      $ snippy import --scat snippet --defaults', '      $ snippy import --scat solution --defaults', '      $ snippy import --scat reference --defaults', '', '    Migrating content templates:', '      $ snippy export --scat solution --template', '      $ snippy import --scat solution --template', '      $ snippy import --scat solution -f solution-template.txt', '', '    Migrating specific content:', '      $ snippy export -d eb792f8015ace749', '      $ snippy import -d eb792f8015ace749 -f howto-debug-elastic-beats.mkdn', '', '    Migrating content:', '      $ snippy export --scat snippet -f snippets.yaml', '      $ snippy export --scat snippet -f snippets.json', '      $ snippy export --scat snippet -f snippets.text', '      $ snippy import --scat snippet -f snippets.yaml', '      $ snippy export --scat solution -f solutions.yaml', '      $ snippy import --scat solution -f solutions.yaml', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')

@pytest.mark.xfail(strict=True)
def test_case_2():
    module_0.CustomHelpAction()

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'user interrupted import plugin'
    none_type_0 = None
    cli_0 = module_0.Cli(none_type_0)
    assert f'{type(cli_0).__module__}.{type(cli_0).__qualname__}' == 'snippy.config.source.cli.Cli'
    assert cli_0.complete is None
    assert cli_0.debug is False
    assert cli_0.defaults is False
    assert cli_0.digest is None
    assert cli_0.editor is False
    assert cli_0.failure is True
    assert cli_0.failure_message == 'no command line arguments'
    assert cli_0.template_format == 'mkdn'
    assert cli_0.template_format_used is False
    assert cli_0.log_json is False
    assert cli_0.log_msg_max == 80
    assert cli_0.merge is True
    assert cli_0.no_ansi is False
    assert cli_0.no_editor is False
    assert cli_0.only_headers is False
    assert cli_0.operation is None
    assert cli_0.plugin == ''
    assert cli_0.plugins == {}
    assert cli_0.profiler is False
    assert cli_0.quiet is False
    assert cli_0.run_healthcheck is False
    assert cli_0.server_minify_json is False
    assert cli_0.server_readonly is False
    assert cli_0.server_ssl_ca_cert is None
    assert cli_0.server_ssl_cert is None
    assert cli_0.server_ssl_key is None
    assert cli_0.storage_path == ''
    assert cli_0.storage_type == 'sqlite'
    assert cli_0.storage_host == ''
    assert cli_0.storage_user == ''
    assert cli_0.storage_password == ''
    assert cli_0.storage_database == ''
    assert cli_0.storage_ssl_cert is None
    assert cli_0.storage_ssl_key is None
    assert cli_0.storage_ssl_ca_cert is None
    assert cli_0.template is False
    assert cli_0.import_hook is None
    assert cli_0.uuid is None
    assert cli_0.version is None
    assert cli_0.very_verbose is False
    assert module_0.Cli.ARGS_COPYRIGHT == ('Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_USAGE == 'snippy [-v, --version] [-h, --help] <operation> [<options>] [-vv] [-q]'
    assert module_0.Cli.ARGS_CATEGORY == ('  --scat [CATEGORY,...]         operate content categories',)
    assert module_0.Cli.ARGS_EDITOR == ('  -c, --content CONTENT         define example content', '  -b, --brief BRIEF             define content brief description', '  -g, --groups [GROUP,...]      define comma separated list of groups', '  -t, --tags [TAG,...]          define comma separated list of tags', '  -l, --links [LINK ...]        define space separated list of links', '  -d, --digest DIGEST           idenfity content with digest', '  -u, --uuid UUID               idenfity content with uuid', '  --editor                      use vi editor to manage content', '  --no-editor                   do not use vi editor')
    assert module_0.Cli.ARGS_SEARCH == ('  --sall [KW,...]               search keywords from all fields', '  --stag [KW,...]               search keywords only from tags', '  --sgrp [KW,...]               search keywords only from groups', '  --filter REGEXP               filter search result with regexp', '  --limit INT                   maximum number of search results', '  --sort FIELD                  sort search result based on fields', '  --headers                     print only content headers', '  --no-ansi                     remove ANSI characters from output')
    assert module_0.Cli.ARGS_MIGRATE == ('  -f, --file FILE               define file for operation', '  --defaults                    migrate category specific defaults', '  --template                    migrate category specific template')
    assert module_0.Cli.ARGS_EPILOG == ('symbols:', '    $    snippet', '    :    solution', '    >    reference', '    @    group', '    #    tag', '', 'examples:', '    Import default content.', '      $ snippy import --defaults --scat snippet', '      $ snippy import --defaults --scat solution', '      $ snippy import --defaults --scat reference', '      $ snippy import --defaults --scat all', '', '    List all snippets.', '      $ snippy search --scat snippet --sall .', '', '    List more examples.', '      $ snippy --help examples', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_EXAMPLES == ('examples:', '    Creating new content:', '      $ snippy create --scat snippet --editor', "      $ snippy create --scat snippet -c 'docker ps' -b 'list containers' -t docker,moby", '', '    Searching and filtering content:', '      $ snippy search --scat snippet --sall docker,moby', '      $ snippy search --scat snippet --sall .', "      $ snippy search --scat snippet --sall . --no-ansi | grep '\\$' | sort", '      $ snippy search --scat solution --sall .', "      $ snippy search --scat solution --sall . | grep -Ev '[^\\s]+:'", "      $ snippy search --scat all --sall . --filter '\\$?.*docker'", "      $ snippy search --scat all --sall . --no-ansi | grep -E '[0-9]+\\.\\s'", '', '    Updating content:', '      $ snippy update --scat snippet -d 44afdd0c59e17159', "      $ snippy update --scat snippet -c 'docker ps'", '', '    Deleting content:', '      $ snippy delete --scat snippet -d 44afdd0c59e17159', "      $ snippy delete --scat snippet -c 'docker ps'", '', '    Migrating default content:', '      $ snippy import --scat snippet --defaults', '      $ snippy import --scat solution --defaults', '      $ snippy import --scat reference --defaults', '', '    Migrating content templates:', '      $ snippy export --scat solution --template', '      $ snippy import --scat solution --template', '      $ snippy import --scat solution -f solution-template.txt', '', '    Migrating specific content:', '      $ snippy export -d eb792f8015ace749', '      $ snippy import -d eb792f8015ace749 -f howto-debug-elastic-beats.mkdn', '', '    Migrating content:', '      $ snippy export --scat snippet -f snippets.yaml', '      $ snippy export --scat snippet -f snippets.json', '      $ snippy export --scat snippet -f snippets.text', '      $ snippy import --scat snippet -f snippets.yaml', '      $ snippy export --scat solution -f solutions.yaml', '      $ snippy import --scat solution -f solutions.yaml', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    custom_argument_parser_0 = module_0.CustomArgumentParser()
    assert custom_argument_parser_0.snippy_failure_message == ''
    custom_version_action_0 = module_0.CustomVersionAction(str_0, str_0, str_0, type=str_0, required=str_0)
    custom_version_action_0.__call__(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '\rK0_'
    list_0 = [str_0, str_0]
    custom_help_action_0 = module_0.CustomHelpAction(*list_0)
    assert custom_help_action_0.option_strings == '\rK0_'
    assert custom_help_action_0.dest == '\rK0_'
    assert custom_help_action_0.nargs is None
    assert custom_help_action_0.const is None
    assert custom_help_action_0.default is None
    assert custom_help_action_0.type is None
    assert custom_help_action_0.choices is None
    assert custom_help_action_0.required is False
    assert custom_help_action_0.help is None
    assert custom_help_action_0.metavar is None
    custom_help_action_0.__call__(custom_help_action_0, custom_help_action_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '?\rK0_'
    cli_0 = module_0.Cli(str_0)
    assert f'{type(cli_0).__module__}.{type(cli_0).__qualname__}' == 'snippy.config.source.cli.Cli'
    assert cli_0.complete is None
    assert cli_0.debug is False
    assert cli_0.defaults is False
    assert cli_0.digest is None
    assert cli_0.editor is False
    assert cli_0.failure is True
    assert cli_0.failure_message == "argument   {create,search,update,delete,export,import}: invalid choice: '\\r' (choose from 'create', 'search', 'update', 'delete', 'export', 'import', 'server')"
    assert cli_0.template_format == 'mkdn'
    assert cli_0.template_format_used is False
    assert cli_0.log_json is False
    assert cli_0.log_msg_max == 80
    assert cli_0.merge is True
    assert cli_0.no_ansi is False
    assert cli_0.no_editor is False
    assert cli_0.only_headers is False
    assert cli_0.operation is None
    assert cli_0.plugin == ''
    assert cli_0.plugins == {}
    assert cli_0.profiler is False
    assert cli_0.quiet is False
    assert cli_0.run_healthcheck is False
    assert cli_0.server_minify_json is False
    assert cli_0.server_readonly is False
    assert cli_0.server_ssl_ca_cert is None
    assert cli_0.server_ssl_cert is None
    assert cli_0.server_ssl_key is None
    assert cli_0.storage_path == ''
    assert cli_0.storage_type == 'sqlite'
    assert cli_0.storage_host == ''
    assert cli_0.storage_user == ''
    assert cli_0.storage_password == ''
    assert cli_0.storage_database == ''
    assert cli_0.storage_ssl_cert is None
    assert cli_0.storage_ssl_key is None
    assert cli_0.storage_ssl_ca_cert is None
    assert cli_0.template is False
    assert cli_0.import_hook is None
    assert cli_0.uuid is None
    assert cli_0.version is None
    assert cli_0.very_verbose is False
    assert module_0.Cli.ARGS_COPYRIGHT == ('Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_USAGE == 'snippy [-v, --version] [-h, --help] <operation> [<options>] [-vv] [-q]'
    assert module_0.Cli.ARGS_CATEGORY == ('  --scat [CATEGORY,...]         operate content categories',)
    assert module_0.Cli.ARGS_EDITOR == ('  -c, --content CONTENT         define example content', '  -b, --brief BRIEF             define content brief description', '  -g, --groups [GROUP,...]      define comma separated list of groups', '  -t, --tags [TAG,...]          define comma separated list of tags', '  -l, --links [LINK ...]        define space separated list of links', '  -d, --digest DIGEST           idenfity content with digest', '  -u, --uuid UUID               idenfity content with uuid', '  --editor                      use vi editor to manage content', '  --no-editor                   do not use vi editor')
    assert module_0.Cli.ARGS_SEARCH == ('  --sall [KW,...]               search keywords from all fields', '  --stag [KW,...]               search keywords only from tags', '  --sgrp [KW,...]               search keywords only from groups', '  --filter REGEXP               filter search result with regexp', '  --limit INT                   maximum number of search results', '  --sort FIELD                  sort search result based on fields', '  --headers                     print only content headers', '  --no-ansi                     remove ANSI characters from output')
    assert module_0.Cli.ARGS_MIGRATE == ('  -f, --file FILE               define file for operation', '  --defaults                    migrate category specific defaults', '  --template                    migrate category specific template')
    assert module_0.Cli.ARGS_EPILOG == ('symbols:', '    $    snippet', '    :    solution', '    >    reference', '    @    group', '    #    tag', '', 'examples:', '    Import default content.', '      $ snippy import --defaults --scat snippet', '      $ snippy import --defaults --scat solution', '      $ snippy import --defaults --scat reference', '      $ snippy import --defaults --scat all', '', '    List all snippets.', '      $ snippy search --scat snippet --sall .', '', '    List more examples.', '      $ snippy --help examples', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_EXAMPLES == ('examples:', '    Creating new content:', '      $ snippy create --scat snippet --editor', "      $ snippy create --scat snippet -c 'docker ps' -b 'list containers' -t docker,moby", '', '    Searching and filtering content:', '      $ snippy search --scat snippet --sall docker,moby', '      $ snippy search --scat snippet --sall .', "      $ snippy search --scat snippet --sall . --no-ansi | grep '\\$' | sort", '      $ snippy search --scat solution --sall .', "      $ snippy search --scat solution --sall . | grep -Ev '[^\\s]+:'", "      $ snippy search --scat all --sall . --filter '\\$?.*docker'", "      $ snippy search --scat all --sall . --no-ansi | grep -E '[0-9]+\\.\\s'", '', '    Updating content:', '      $ snippy update --scat snippet -d 44afdd0c59e17159', "      $ snippy update --scat snippet -c 'docker ps'", '', '    Deleting content:', '      $ snippy delete --scat snippet -d 44afdd0c59e17159', "      $ snippy delete --scat snippet -c 'docker ps'", '', '    Migrating default content:', '      $ snippy import --scat snippet --defaults', '      $ snippy import --scat solution --defaults', '      $ snippy import --scat reference --defaults', '', '    Migrating content templates:', '      $ snippy export --scat solution --template', '      $ snippy import --scat solution --template', '      $ snippy import --scat solution -f solution-template.txt', '', '    Migrating specific content:', '      $ snippy export -d eb792f8015ace749', '      $ snippy import -d eb792f8015ace749 -f howto-debug-elastic-beats.mkdn', '', '    Migrating content:', '      $ snippy export --scat snippet -f snippets.yaml', '      $ snippy export --scat snippet -f snippets.json', '      $ snippy export --scat snippet -f snippets.text', '      $ snippy import --scat snippet -f snippets.yaml', '      $ snippy export --scat solution -f solutions.yaml', '      $ snippy import --scat solution -f solutions.yaml', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    var_0 = cli_0.get_plugin_short_names()
    list_0 = [str_0, str_0]
    list_1 = [list_0, list_0]
    cli_1 = module_0.Cli(var_0)
    assert f'{type(cli_1).__module__}.{type(cli_1).__qualname__}' == 'snippy.config.source.cli.Cli'
    assert cli_1.complete is None
    assert cli_1.debug is False
    assert cli_1.defaults is False
    assert cli_1.digest is None
    assert cli_1.editor is False
    assert cli_1.failure is True
    assert cli_1.failure_message == 'no command line arguments'
    assert cli_1.template_format == 'mkdn'
    assert cli_1.template_format_used is False
    assert cli_1.log_json is False
    assert cli_1.log_msg_max == 80
    assert cli_1.merge is True
    assert cli_1.no_ansi is False
    assert cli_1.no_editor is False
    assert cli_1.only_headers is False
    assert cli_1.operation is None
    assert cli_1.plugin == ''
    assert cli_1.plugins == {}
    assert cli_1.profiler is False
    assert cli_1.quiet is False
    assert cli_1.run_healthcheck is False
    assert cli_1.server_minify_json is False
    assert cli_1.server_readonly is False
    assert cli_1.server_ssl_ca_cert is None
    assert cli_1.server_ssl_cert is None
    assert cli_1.server_ssl_key is None
    assert cli_1.storage_path == ''
    assert cli_1.storage_type == 'sqlite'
    assert cli_1.storage_host == ''
    assert cli_1.storage_user == ''
    assert cli_1.storage_password == ''
    assert cli_1.storage_database == ''
    assert cli_1.storage_ssl_cert is None
    assert cli_1.storage_ssl_key is None
    assert cli_1.storage_ssl_ca_cert is None
    assert cli_1.template is False
    assert cli_1.import_hook is None
    assert cli_1.uuid is None
    assert cli_1.version is None
    assert cli_1.very_verbose is False
    module_0.Cli(list_1)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'examples'
    list_0 = [str_0, str_0]
    custom_argument_parser_0 = module_0.CustomArgumentParser(*list_0)
    assert custom_argument_parser_0.snippy_failure_message == ''
    assert custom_argument_parser_0.description is None
    assert custom_argument_parser_0.argument_default is None
    assert custom_argument_parser_0.prefix_chars == '-'
    assert custom_argument_parser_0.conflict_handler == 'error'
    assert custom_argument_parser_0.prog == 'examples'
    assert custom_argument_parser_0.usage == 'examples'
    assert custom_argument_parser_0.epilog is None
    assert custom_argument_parser_0.fromfile_prefix_chars is None
    assert custom_argument_parser_0.add_help is True
    assert custom_argument_parser_0.allow_abbrev is True
    assert custom_argument_parser_0.exit_on_error is True
    cli_0 = module_0.Cli(str_0)
    assert f'{type(cli_0).__module__}.{type(cli_0).__qualname__}' == 'snippy.config.source.cli.Cli'
    assert cli_0.complete is None
    assert cli_0.debug is False
    assert cli_0.defaults is False
    assert cli_0.digest is None
    assert cli_0.editor is False
    assert cli_0.failure is True
    assert cli_0.failure_message == "argument   {create,search,update,delete,export,import}: invalid choice: 'x' (choose from 'create', 'search', 'update', 'delete', 'export', 'import', 'server')"
    assert cli_0.template_format == 'mkdn'
    assert cli_0.template_format_used is False
    assert cli_0.log_json is False
    assert cli_0.log_msg_max == 80
    assert cli_0.merge is True
    assert cli_0.no_ansi is False
    assert cli_0.no_editor is False
    assert cli_0.only_headers is False
    assert cli_0.operation is None
    assert cli_0.plugin == ''
    assert cli_0.plugins == {}
    assert cli_0.profiler is False
    assert cli_0.quiet is False
    assert cli_0.run_healthcheck is False
    assert cli_0.server_minify_json is False
    assert cli_0.server_readonly is False
    assert cli_0.server_ssl_ca_cert is None
    assert cli_0.server_ssl_cert is None
    assert cli_0.server_ssl_key is None
    assert cli_0.storage_path == ''
    assert cli_0.storage_type == 'sqlite'
    assert cli_0.storage_host == ''
    assert cli_0.storage_user == ''
    assert cli_0.storage_password == ''
    assert cli_0.storage_database == ''
    assert cli_0.storage_ssl_cert is None
    assert cli_0.storage_ssl_key is None
    assert cli_0.storage_ssl_ca_cert is None
    assert cli_0.template is False
    assert cli_0.import_hook is None
    assert cli_0.uuid is None
    assert cli_0.version is None
    assert cli_0.very_verbose is False
    assert module_0.Cli.ARGS_COPYRIGHT == ('Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_USAGE == 'snippy [-v, --version] [-h, --help] <operation> [<options>] [-vv] [-q]'
    assert module_0.Cli.ARGS_CATEGORY == ('  --scat [CATEGORY,...]         operate content categories',)
    assert module_0.Cli.ARGS_EDITOR == ('  -c, --content CONTENT         define example content', '  -b, --brief BRIEF             define content brief description', '  -g, --groups [GROUP,...]      define comma separated list of groups', '  -t, --tags [TAG,...]          define comma separated list of tags', '  -l, --links [LINK ...]        define space separated list of links', '  -d, --digest DIGEST           idenfity content with digest', '  -u, --uuid UUID               idenfity content with uuid', '  --editor                      use vi editor to manage content', '  --no-editor                   do not use vi editor')
    assert module_0.Cli.ARGS_SEARCH == ('  --sall [KW,...]               search keywords from all fields', '  --stag [KW,...]               search keywords only from tags', '  --sgrp [KW,...]               search keywords only from groups', '  --filter REGEXP               filter search result with regexp', '  --limit INT                   maximum number of search results', '  --sort FIELD                  sort search result based on fields', '  --headers                     print only content headers', '  --no-ansi                     remove ANSI characters from output')
    assert module_0.Cli.ARGS_MIGRATE == ('  -f, --file FILE               define file for operation', '  --defaults                    migrate category specific defaults', '  --template                    migrate category specific template')
    assert module_0.Cli.ARGS_EPILOG == ('symbols:', '    $    snippet', '    :    solution', '    >    reference', '    @    group', '    #    tag', '', 'examples:', '    Import default content.', '      $ snippy import --defaults --scat snippet', '      $ snippy import --defaults --scat solution', '      $ snippy import --defaults --scat reference', '      $ snippy import --defaults --scat all', '', '    List all snippets.', '      $ snippy search --scat snippet --sall .', '', '    List more examples.', '      $ snippy --help examples', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_EXAMPLES == ('examples:', '    Creating new content:', '      $ snippy create --scat snippet --editor', "      $ snippy create --scat snippet -c 'docker ps' -b 'list containers' -t docker,moby", '', '    Searching and filtering content:', '      $ snippy search --scat snippet --sall docker,moby', '      $ snippy search --scat snippet --sall .', "      $ snippy search --scat snippet --sall . --no-ansi | grep '\\$' | sort", '      $ snippy search --scat solution --sall .', "      $ snippy search --scat solution --sall . | grep -Ev '[^\\s]+:'", "      $ snippy search --scat all --sall . --filter '\\$?.*docker'", "      $ snippy search --scat all --sall . --no-ansi | grep -E '[0-9]+\\.\\s'", '', '    Updating content:', '      $ snippy update --scat snippet -d 44afdd0c59e17159', "      $ snippy update --scat snippet -c 'docker ps'", '', '    Deleting content:', '      $ snippy delete --scat snippet -d 44afdd0c59e17159', "      $ snippy delete --scat snippet -c 'docker ps'", '', '    Migrating default content:', '      $ snippy import --scat snippet --defaults', '      $ snippy import --scat solution --defaults', '      $ snippy import --scat reference --defaults', '', '    Migrating content templates:', '      $ snippy export --scat solution --template', '      $ snippy import --scat solution --template', '      $ snippy import --scat solution -f solution-template.txt', '', '    Migrating specific content:', '      $ snippy export -d eb792f8015ace749', '      $ snippy import -d eb792f8015ace749 -f howto-debug-elastic-beats.mkdn', '', '    Migrating content:', '      $ snippy export --scat snippet -f snippets.yaml', '      $ snippy export --scat snippet -f snippets.json', '      $ snippy export --scat snippet -f snippets.text', '      $ snippy import --scat snippet -f snippets.yaml', '      $ snippy export --scat solution -f solutions.yaml', '      $ snippy import --scat solution -f solutions.yaml', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    cli_1 = module_0.Cli(list_0)
    assert f'{type(cli_1).__module__}.{type(cli_1).__qualname__}' == 'snippy.config.source.cli.Cli'
    assert cli_1.complete is None
    assert cli_1.debug is False
    assert cli_1.defaults is False
    assert cli_1.digest is None
    assert cli_1.editor is False
    assert cli_1.failure is True
    assert cli_1.failure_message == "argument   {create,search,update,delete,export,import}: invalid choice: 'examples' (choose from 'create', 'search', 'update', 'delete', 'export', 'import', 'server')"
    assert cli_1.template_format == 'mkdn'
    assert cli_1.template_format_used is False
    assert cli_1.log_json is False
    assert cli_1.log_msg_max == 80
    assert cli_1.merge is True
    assert cli_1.no_ansi is False
    assert cli_1.no_editor is False
    assert cli_1.only_headers is False
    assert cli_1.operation is None
    assert cli_1.plugin == ''
    assert cli_1.plugins == {}
    assert cli_1.profiler is False
    assert cli_1.quiet is False
    assert cli_1.run_healthcheck is False
    assert cli_1.server_minify_json is False
    assert cli_1.server_readonly is False
    assert cli_1.server_ssl_ca_cert is None
    assert cli_1.server_ssl_cert is None
    assert cli_1.server_ssl_key is None
    assert cli_1.storage_path == ''
    assert cli_1.storage_type == 'sqlite'
    assert cli_1.storage_host == ''
    assert cli_1.storage_user == ''
    assert cli_1.storage_password == ''
    assert cli_1.storage_database == ''
    assert cli_1.storage_ssl_cert is None
    assert cli_1.storage_ssl_key is None
    assert cli_1.storage_ssl_ca_cert is None
    assert cli_1.template is False
    assert cli_1.import_hook is None
    assert cli_1.uuid is None
    assert cli_1.version is None
    assert cli_1.very_verbose is False
    var_0 = cli_0.read_plugins(str_0)
    list_1 = [str_0, str_0, var_0]
    custom_help_action_0 = module_0.CustomHelpAction(*list_1)
    cli_2 = module_0.Cli(var_0)
    assert f'{type(cli_2).__module__}.{type(cli_2).__qualname__}' == 'snippy.config.source.cli.Cli'
    assert cli_2.complete is None
    assert cli_2.debug is False
    assert cli_2.defaults is False
    assert cli_2.digest is None
    assert cli_2.editor is False
    assert cli_2.failure is True
    assert cli_2.failure_message == 'no command line arguments'
    assert cli_2.template_format == 'mkdn'
    assert cli_2.template_format_used is False
    assert cli_2.log_json is False
    assert cli_2.log_msg_max == 80
    assert cli_2.merge is True
    assert cli_2.no_ansi is False
    assert cli_2.no_editor is False
    assert cli_2.only_headers is False
    assert cli_2.operation is None
    assert cli_2.plugin == ''
    assert cli_2.plugins == {}
    assert cli_2.profiler is False
    assert cli_2.quiet is False
    assert cli_2.run_healthcheck is False
    assert cli_2.server_minify_json is False
    assert cli_2.server_readonly is False
    assert cli_2.server_ssl_ca_cert is None
    assert cli_2.server_ssl_cert is None
    assert cli_2.server_ssl_key is None
    assert cli_2.storage_path == ''
    assert cli_2.storage_type == 'sqlite'
    assert cli_2.storage_host == ''
    assert cli_2.storage_user == ''
    assert cli_2.storage_password == ''
    assert cli_2.storage_database == ''
    assert cli_2.storage_ssl_cert is None
    assert cli_2.storage_ssl_key is None
    assert cli_2.storage_ssl_ca_cert is None
    assert cli_2.template is False
    assert cli_2.import_hook is None
    assert cli_2.uuid is None
    assert cli_2.version is None
    assert cli_2.very_verbose is False
    custom_help_action_0.__call__(custom_help_action_0, custom_help_action_0, str_0)

def test_case_7():
    str_0 = 'search'
    list_0 = [str_0, str_0]
    cli_0 = module_0.Cli(list_0)
    assert f'{type(cli_0).__module__}.{type(cli_0).__qualname__}' == 'snippy.config.source.cli.Cli'
    assert cli_0.complete is None
    assert cli_0.debug is False
    assert cli_0.defaults is False
    assert cli_0.digest is None
    assert cli_0.editor is False
    assert cli_0.failure is False
    assert cli_0.failure_message == ''
    assert cli_0.template_format == 'text'
    assert cli_0.template_format_used is False
    assert cli_0.log_json is False
    assert cli_0.log_msg_max == 80
    assert cli_0.merge is True
    assert cli_0.no_ansi is False
    assert cli_0.no_editor is False
    assert cli_0.only_headers is False
    assert cli_0.operation == 'search'
    assert cli_0.plugin == ''
    assert cli_0.plugins == {}
    assert cli_0.profiler is False
    assert cli_0.quiet is False
    assert cli_0.run_healthcheck is False
    assert cli_0.server_minify_json is False
    assert cli_0.server_readonly is False
    assert cli_0.server_ssl_ca_cert is None
    assert cli_0.server_ssl_cert is None
    assert cli_0.server_ssl_key is None
    assert cli_0.storage_path == ''
    assert cli_0.storage_type == 'sqlite'
    assert cli_0.storage_host == ''
    assert cli_0.storage_user == ''
    assert cli_0.storage_password == ''
    assert cli_0.storage_database == ''
    assert cli_0.storage_ssl_cert is None
    assert cli_0.storage_ssl_key is None
    assert cli_0.storage_ssl_ca_cert is None
    assert cli_0.template is False
    assert cli_0.import_hook is None
    assert cli_0.uuid is None
    assert cli_0.version is None
    assert cli_0.very_verbose is False
    assert module_0.Cli.ARGS_COPYRIGHT == ('Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_USAGE == 'snippy [-v, --version] [-h, --help] <operation> [<options>] [-vv] [-q]'
    assert module_0.Cli.ARGS_CATEGORY == ('  --scat [CATEGORY,...]         operate content categories',)
    assert module_0.Cli.ARGS_EDITOR == ('  -c, --content CONTENT         define example content', '  -b, --brief BRIEF             define content brief description', '  -g, --groups [GROUP,...]      define comma separated list of groups', '  -t, --tags [TAG,...]          define comma separated list of tags', '  -l, --links [LINK ...]        define space separated list of links', '  -d, --digest DIGEST           idenfity content with digest', '  -u, --uuid UUID               idenfity content with uuid', '  --editor                      use vi editor to manage content', '  --no-editor                   do not use vi editor')
    assert module_0.Cli.ARGS_SEARCH == ('  --sall [KW,...]               search keywords from all fields', '  --stag [KW,...]               search keywords only from tags', '  --sgrp [KW,...]               search keywords only from groups', '  --filter REGEXP               filter search result with regexp', '  --limit INT                   maximum number of search results', '  --sort FIELD                  sort search result based on fields', '  --headers                     print only content headers', '  --no-ansi                     remove ANSI characters from output')
    assert module_0.Cli.ARGS_MIGRATE == ('  -f, --file FILE               define file for operation', '  --defaults                    migrate category specific defaults', '  --template                    migrate category specific template')
    assert module_0.Cli.ARGS_EPILOG == ('symbols:', '    $    snippet', '    :    solution', '    >    reference', '    @    group', '    #    tag', '', 'examples:', '    Import default content.', '      $ snippy import --defaults --scat snippet', '      $ snippy import --defaults --scat solution', '      $ snippy import --defaults --scat reference', '      $ snippy import --defaults --scat all', '', '    List all snippets.', '      $ snippy search --scat snippet --sall .', '', '    List more examples.', '      $ snippy --help examples', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_EXAMPLES == ('examples:', '    Creating new content:', '      $ snippy create --scat snippet --editor', "      $ snippy create --scat snippet -c 'docker ps' -b 'list containers' -t docker,moby", '', '    Searching and filtering content:', '      $ snippy search --scat snippet --sall docker,moby', '      $ snippy search --scat snippet --sall .', "      $ snippy search --scat snippet --sall . --no-ansi | grep '\\$' | sort", '      $ snippy search --scat solution --sall .', "      $ snippy search --scat solution --sall . | grep -Ev '[^\\s]+:'", "      $ snippy search --scat all --sall . --filter '\\$?.*docker'", "      $ snippy search --scat all --sall . --no-ansi | grep -E '[0-9]+\\.\\s'", '', '    Updating content:', '      $ snippy update --scat snippet -d 44afdd0c59e17159', "      $ snippy update --scat snippet -c 'docker ps'", '', '    Deleting content:', '      $ snippy delete --scat snippet -d 44afdd0c59e17159', "      $ snippy delete --scat snippet -c 'docker ps'", '', '    Migrating default content:', '      $ snippy import --scat snippet --defaults', '      $ snippy import --scat solution --defaults', '      $ snippy import --scat reference --defaults', '', '    Migrating content templates:', '      $ snippy export --scat solution --template', '      $ snippy import --scat solution --template', '      $ snippy import --scat solution -f solution-template.txt', '', '    Migrating specific content:', '      $ snippy export -d eb792f8015ace749', '      $ snippy import -d eb792f8015ace749 -f howto-debug-elastic-beats.mkdn', '', '    Migrating content:', '      $ snippy export --scat snippet -f snippets.yaml', '      $ snippy export --scat snippet -f snippets.json', '      $ snippy export --scat snippet -f snippets.text', '      $ snippy import --scat snippet -f snippets.yaml', '      $ snippy export --scat solution -f solutions.yaml', '      $ snippy import --scat solution -f solutions.yaml', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'tests'
    list_0 = [str_0, str_0]
    cli_0 = module_0.Cli(list_0)
    assert f'{type(cli_0).__module__}.{type(cli_0).__qualname__}' == 'snippy.config.source.cli.Cli'
    assert cli_0.complete is None
    assert cli_0.debug is False
    assert cli_0.defaults is False
    assert cli_0.digest is None
    assert cli_0.editor is False
    assert cli_0.failure is True
    assert cli_0.failure_message == "argument   {create,search,update,delete,export,import}: invalid choice: 'tests' (choose from 'create', 'search', 'update', 'delete', 'export', 'import', 'server')"
    assert cli_0.template_format == 'mkdn'
    assert cli_0.template_format_used is False
    assert cli_0.log_json is False
    assert cli_0.log_msg_max == 80
    assert cli_0.merge is True
    assert cli_0.no_ansi is False
    assert cli_0.no_editor is False
    assert cli_0.only_headers is False
    assert cli_0.operation is None
    assert cli_0.plugin == ''
    assert cli_0.plugins == {}
    assert cli_0.profiler is False
    assert cli_0.quiet is False
    assert cli_0.run_healthcheck is False
    assert cli_0.server_minify_json is False
    assert cli_0.server_readonly is False
    assert cli_0.server_ssl_ca_cert is None
    assert cli_0.server_ssl_cert is None
    assert cli_0.server_ssl_key is None
    assert cli_0.storage_path == ''
    assert cli_0.storage_type == 'sqlite'
    assert cli_0.storage_host == ''
    assert cli_0.storage_user == ''
    assert cli_0.storage_password == ''
    assert cli_0.storage_database == ''
    assert cli_0.storage_ssl_cert is None
    assert cli_0.storage_ssl_key is None
    assert cli_0.storage_ssl_ca_cert is None
    assert cli_0.template is False
    assert cli_0.import_hook is None
    assert cli_0.uuid is None
    assert cli_0.version is None
    assert cli_0.very_verbose is False
    assert module_0.Cli.ARGS_COPYRIGHT == ('Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_USAGE == 'snippy [-v, --version] [-h, --help] <operation> [<options>] [-vv] [-q]'
    assert module_0.Cli.ARGS_CATEGORY == ('  --scat [CATEGORY,...]         operate content categories',)
    assert module_0.Cli.ARGS_EDITOR == ('  -c, --content CONTENT         define example content', '  -b, --brief BRIEF             define content brief description', '  -g, --groups [GROUP,...]      define comma separated list of groups', '  -t, --tags [TAG,...]          define comma separated list of tags', '  -l, --links [LINK ...]        define space separated list of links', '  -d, --digest DIGEST           idenfity content with digest', '  -u, --uuid UUID               idenfity content with uuid', '  --editor                      use vi editor to manage content', '  --no-editor                   do not use vi editor')
    assert module_0.Cli.ARGS_SEARCH == ('  --sall [KW,...]               search keywords from all fields', '  --stag [KW,...]               search keywords only from tags', '  --sgrp [KW,...]               search keywords only from groups', '  --filter REGEXP               filter search result with regexp', '  --limit INT                   maximum number of search results', '  --sort FIELD                  sort search result based on fields', '  --headers                     print only content headers', '  --no-ansi                     remove ANSI characters from output')
    assert module_0.Cli.ARGS_MIGRATE == ('  -f, --file FILE               define file for operation', '  --defaults                    migrate category specific defaults', '  --template                    migrate category specific template')
    assert module_0.Cli.ARGS_EPILOG == ('symbols:', '    $    snippet', '    :    solution', '    >    reference', '    @    group', '    #    tag', '', 'examples:', '    Import default content.', '      $ snippy import --defaults --scat snippet', '      $ snippy import --defaults --scat solution', '      $ snippy import --defaults --scat reference', '      $ snippy import --defaults --scat all', '', '    List all snippets.', '      $ snippy search --scat snippet --sall .', '', '    List more examples.', '      $ snippy --help examples', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_EXAMPLES == ('examples:', '    Creating new content:', '      $ snippy create --scat snippet --editor', "      $ snippy create --scat snippet -c 'docker ps' -b 'list containers' -t docker,moby", '', '    Searching and filtering content:', '      $ snippy search --scat snippet --sall docker,moby', '      $ snippy search --scat snippet --sall .', "      $ snippy search --scat snippet --sall . --no-ansi | grep '\\$' | sort", '      $ snippy search --scat solution --sall .', "      $ snippy search --scat solution --sall . | grep -Ev '[^\\s]+:'", "      $ snippy search --scat all --sall . --filter '\\$?.*docker'", "      $ snippy search --scat all --sall . --no-ansi | grep -E '[0-9]+\\.\\s'", '', '    Updating content:', '      $ snippy update --scat snippet -d 44afdd0c59e17159', "      $ snippy update --scat snippet -c 'docker ps'", '', '    Deleting content:', '      $ snippy delete --scat snippet -d 44afdd0c59e17159', "      $ snippy delete --scat snippet -c 'docker ps'", '', '    Migrating default content:', '      $ snippy import --scat snippet --defaults', '      $ snippy import --scat solution --defaults', '      $ snippy import --scat reference --defaults', '', '    Migrating content templates:', '      $ snippy export --scat solution --template', '      $ snippy import --scat solution --template', '      $ snippy import --scat solution -f solution-template.txt', '', '    Migrating specific content:', '      $ snippy export -d eb792f8015ace749', '      $ snippy import -d eb792f8015ace749 -f howto-debug-elastic-beats.mkdn', '', '    Migrating content:', '      $ snippy export --scat snippet -f snippets.yaml', '      $ snippy export --scat snippet -f snippets.json', '      $ snippy export --scat snippet -f snippets.text', '      $ snippy import --scat snippet -f snippets.yaml', '      $ snippy export --scat solution -f solutions.yaml', '      $ snippy import --scat solution -f solutions.yaml', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    var_0 = cli_0.read_plugins(str_0)
    custom_help_action_0 = module_0.CustomHelpAction(*list_0)
    cli_1 = module_0.Cli(var_0)
    assert f'{type(cli_1).__module__}.{type(cli_1).__qualname__}' == 'snippy.config.source.cli.Cli'
    assert cli_1.complete is None
    assert cli_1.debug is False
    assert cli_1.defaults is False
    assert cli_1.digest is None
    assert cli_1.editor is False
    assert cli_1.failure is True
    assert cli_1.failure_message == 'no command line arguments'
    assert cli_1.template_format == 'mkdn'
    assert cli_1.template_format_used is False
    assert cli_1.log_json is False
    assert cli_1.log_msg_max == 80
    assert cli_1.merge is True
    assert cli_1.no_ansi is False
    assert cli_1.no_editor is False
    assert cli_1.only_headers is False
    assert cli_1.operation is None
    assert cli_1.plugin == ''
    assert cli_1.plugins == {}
    assert cli_1.profiler is False
    assert cli_1.quiet is False
    assert cli_1.run_healthcheck is False
    assert cli_1.server_minify_json is False
    assert cli_1.server_readonly is False
    assert cli_1.server_ssl_ca_cert is None
    assert cli_1.server_ssl_cert is None
    assert cli_1.server_ssl_key is None
    assert cli_1.storage_path == ''
    assert cli_1.storage_type == 'sqlite'
    assert cli_1.storage_host == ''
    assert cli_1.storage_user == ''
    assert cli_1.storage_password == ''
    assert cli_1.storage_database == ''
    assert cli_1.storage_ssl_cert is None
    assert cli_1.storage_ssl_key is None
    assert cli_1.storage_ssl_ca_cert is None
    assert cli_1.template is False
    assert cli_1.import_hook is None
    assert cli_1.uuid is None
    assert cli_1.version is None
    assert cli_1.very_verbose is False
    custom_help_action_0.__call__(custom_help_action_0, custom_help_action_0, str_0)

def test_case_9():
    str_0 = 'search'
    bool_0 = False
    custom_version_action_0 = module_0.CustomVersionAction(str_0, str_0, const=str_0, default=str_0, type=bool_0)
    list_0 = [custom_version_action_0, str_0, str_0, bool_0]
    cli_0 = module_0.Cli(list_0)
    assert f'{type(cli_0).__module__}.{type(cli_0).__qualname__}' == 'snippy.config.source.cli.Cli'
    assert cli_0.complete is None
    assert cli_0.debug is False
    assert cli_0.defaults is False
    assert cli_0.digest is None
    assert cli_0.editor is False
    assert cli_0.failure is False
    assert cli_0.failure_message == ''
    assert cli_0.template_format == 'text'
    assert cli_0.template_format_used is False
    assert cli_0.log_json is False
    assert cli_0.log_msg_max == 80
    assert cli_0.merge is True
    assert cli_0.no_ansi is False
    assert cli_0.no_editor is False
    assert cli_0.only_headers is False
    assert cli_0.operation == 'search'
    assert cli_0.plugin == ''
    assert cli_0.plugins == {}
    assert cli_0.profiler is False
    assert cli_0.quiet is False
    assert cli_0.run_healthcheck is False
    assert cli_0.server_minify_json is False
    assert cli_0.server_readonly is False
    assert cli_0.server_ssl_ca_cert is None
    assert cli_0.server_ssl_cert is None
    assert cli_0.server_ssl_key is None
    assert cli_0.storage_path == ''
    assert cli_0.storage_type == 'sqlite'
    assert cli_0.storage_host == ''
    assert cli_0.storage_user == ''
    assert cli_0.storage_password == ''
    assert cli_0.storage_database == ''
    assert cli_0.storage_ssl_cert is None
    assert cli_0.storage_ssl_key is None
    assert cli_0.storage_ssl_ca_cert is None
    assert cli_0.template is False
    assert cli_0.import_hook is None
    assert cli_0.uuid is None
    assert cli_0.version is None
    assert cli_0.very_verbose is False
    assert module_0.Cli.ARGS_COPYRIGHT == ('Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_USAGE == 'snippy [-v, --version] [-h, --help] <operation> [<options>] [-vv] [-q]'
    assert module_0.Cli.ARGS_CATEGORY == ('  --scat [CATEGORY,...]         operate content categories',)
    assert module_0.Cli.ARGS_EDITOR == ('  -c, --content CONTENT         define example content', '  -b, --brief BRIEF             define content brief description', '  -g, --groups [GROUP,...]      define comma separated list of groups', '  -t, --tags [TAG,...]          define comma separated list of tags', '  -l, --links [LINK ...]        define space separated list of links', '  -d, --digest DIGEST           idenfity content with digest', '  -u, --uuid UUID               idenfity content with uuid', '  --editor                      use vi editor to manage content', '  --no-editor                   do not use vi editor')
    assert module_0.Cli.ARGS_SEARCH == ('  --sall [KW,...]               search keywords from all fields', '  --stag [KW,...]               search keywords only from tags', '  --sgrp [KW,...]               search keywords only from groups', '  --filter REGEXP               filter search result with regexp', '  --limit INT                   maximum number of search results', '  --sort FIELD                  sort search result based on fields', '  --headers                     print only content headers', '  --no-ansi                     remove ANSI characters from output')
    assert module_0.Cli.ARGS_MIGRATE == ('  -f, --file FILE               define file for operation', '  --defaults                    migrate category specific defaults', '  --template                    migrate category specific template')
    assert module_0.Cli.ARGS_EPILOG == ('symbols:', '    $    snippet', '    :    solution', '    >    reference', '    @    group', '    #    tag', '', 'examples:', '    Import default content.', '      $ snippy import --defaults --scat snippet', '      $ snippy import --defaults --scat solution', '      $ snippy import --defaults --scat reference', '      $ snippy import --defaults --scat all', '', '    List all snippets.', '      $ snippy search --scat snippet --sall .', '', '    List more examples.', '      $ snippy --help examples', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    assert module_0.Cli.ARGS_EXAMPLES == ('examples:', '    Creating new content:', '      $ snippy create --scat snippet --editor', "      $ snippy create --scat snippet -c 'docker ps' -b 'list containers' -t docker,moby", '', '    Searching and filtering content:', '      $ snippy search --scat snippet --sall docker,moby', '      $ snippy search --scat snippet --sall .', "      $ snippy search --scat snippet --sall . --no-ansi | grep '\\$' | sort", '      $ snippy search --scat solution --sall .', "      $ snippy search --scat solution --sall . | grep -Ev '[^\\s]+:'", "      $ snippy search --scat all --sall . --filter '\\$?.*docker'", "      $ snippy search --scat all --sall . --no-ansi | grep -E '[0-9]+\\.\\s'", '', '    Updating content:', '      $ snippy update --scat snippet -d 44afdd0c59e17159', "      $ snippy update --scat snippet -c 'docker ps'", '', '    Deleting content:', '      $ snippy delete --scat snippet -d 44afdd0c59e17159', "      $ snippy delete --scat snippet -c 'docker ps'", '', '    Migrating default content:', '      $ snippy import --scat snippet --defaults', '      $ snippy import --scat solution --defaults', '      $ snippy import --scat reference --defaults', '', '    Migrating content templates:', '      $ snippy export --scat solution --template', '      $ snippy import --scat solution --template', '      $ snippy import --scat solution -f solution-template.txt', '', '    Migrating specific content:', '      $ snippy export -d eb792f8015ace749', '      $ snippy import -d eb792f8015ace749 -f howto-debug-elastic-beats.mkdn', '', '    Migrating content:', '      $ snippy export --scat snippet -f snippets.yaml', '      $ snippy export --scat snippet -f snippets.json', '      $ snippy export --scat snippet -f snippets.text', '      $ snippy import --scat snippet -f snippets.yaml', '      $ snippy export --scat solution -f solutions.yaml', '      $ snippy import --scat solution -f solutions.yaml', '', 'Copyright 2017-2020 Heikki Laaksonen <laaksonen.heikki.j@gmail.com>', 'Snippy 0.12a0 licensed under GNU Affero General Public License v3.0 or later', 'Homepage https://github.com/heilaaks/snippy')
    cli_1 = module_0.Cli(str_0)
    assert f'{type(cli_1).__module__}.{type(cli_1).__qualname__}' == 'snippy.config.source.cli.Cli'
    assert cli_1.complete is None
    assert cli_1.debug is False
    assert cli_1.defaults is False
    assert cli_1.digest is None
    assert cli_1.editor is False
    assert cli_1.failure is True
    assert cli_1.failure_message == "argument   {create,search,update,delete,export,import}: invalid choice: 'e' (choose from 'create', 'search', 'update', 'delete', 'export', 'import', 'server')"
    assert cli_1.template_format == 'mkdn'
    assert cli_1.template_format_used is False
    assert cli_1.log_json is False
    assert cli_1.log_msg_max == 80
    assert cli_1.merge is True
    assert cli_1.no_ansi is False
    assert cli_1.no_editor is False
    assert cli_1.only_headers is False
    assert cli_1.operation is None
    assert cli_1.plugin == ''
    assert cli_1.plugins == {}
    assert cli_1.profiler is False
    assert cli_1.quiet is False
    assert cli_1.run_healthcheck is False
    assert cli_1.server_minify_json is False
    assert cli_1.server_readonly is False
    assert cli_1.server_ssl_ca_cert is None
    assert cli_1.server_ssl_cert is None
    assert cli_1.server_ssl_key is None
    assert cli_1.storage_path == ''
    assert cli_1.storage_type == 'sqlite'
    assert cli_1.storage_host == ''
    assert cli_1.storage_user == ''
    assert cli_1.storage_password == ''
    assert cli_1.storage_database == ''
    assert cli_1.storage_ssl_cert is None
    assert cli_1.storage_ssl_key is None
    assert cli_1.storage_ssl_ca_cert is None
    assert cli_1.template is False
    assert cli_1.import_hook is None
    assert cli_1.uuid is None
    assert cli_1.version is None
    assert cli_1.very_verbose is False