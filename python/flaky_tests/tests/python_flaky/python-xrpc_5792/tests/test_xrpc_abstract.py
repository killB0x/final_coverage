# Automatically generated by Pynguin.
import pytest
import xrpc.abstract as module_0
import heapq as module_1
import datetime as module_2

def test_case_0():
    binary_queue_0 = module_0.BinaryQueue()
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_1():
    binary_queue_0 = module_0.BinaryQueue()
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    int_0 = -513
    var_0 = binary_queue_0.push(int_0)
    assert len(binary_queue_0) == 1
    var_1 = binary_queue_0.push(int_0)
    assert len(binary_queue_0) == 2
    binary_queue_0.push(var_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    binary_queue_0 = module_0.BinaryQueue()
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    bytes_0 = b'\x82\x8a\x82\x81{U\xa5\x7fQ\xc9n\xea\xd8,\xc1\x87\xb0\xb3\x03'
    var_0 = binary_queue_0.peek()
    var_0.pushpop(bytes_0)

def test_case_3():
    heap_queue_0 = module_0.HeapQueue()
    assert f'{type(heap_queue_0).__module__}.{type(heap_queue_0).__qualname__}' == 'xrpc.abstract.HeapQueue'
    assert len(heap_queue_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_4():
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    iterator_0 = keyed_queue_0.iter()
    var_0 = keyed_queue_0.peek()
    queue_0 = module_0.Queue(*iterator_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'xrpc.abstract.Queue'
    var_1 = keyed_queue_0.__len__()
    assert var_1 == 0
    keyed_queue_0.__delitem__(queue_0)

def test_case_5():
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0

def test_case_6():
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    var_0 = keyed_queue_0.push(keyed_queue_0)
    assert len(keyed_queue_0) == 1
    var_1 = keyed_queue_0.pop()
    assert len(keyed_queue_0) == 0
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(var_1) == 0

def test_case_7():
    mutable_int_0 = module_0.MutableInt()
    assert mutable_int_0.state == 0

@pytest.mark.xfail(strict=True)
def test_case_8():
    mutable_int_0 = module_0.MutableInt()
    assert mutable_int_0.state == 0
    bool_0 = True
    mutable_int_1 = module_0.MutableInt(bool_0)
    none_type_0 = None
    var_0 = mutable_int_0.__set__(bool_0, bool_0)
    var_0.__contains__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    mutable_int_0 = module_0.MutableInt()
    assert mutable_int_0.state == 0
    str_0 = mutable_int_0.__repr__()
    assert str_0 == 'MutableInt(0)'
    mutable_int_0.__iadd__(mutable_int_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    mutable_int_0 = module_0.MutableInt(bool_0)
    var_0 = mutable_int_0.__le__(bool_0)
    assert var_0 is True
    var_1 = mutable_int_0.__isub__(var_0)
    assert mutable_int_0.state == -1
    var_1.copy()

@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = 2393
    mutable_int_0 = module_0.MutableInt(int_0)
    var_0 = mutable_int_0.reduce()
    assert mutable_int_0.state == 2392
    var_0.copy()

@pytest.mark.xfail(strict=True)
def test_case_12():
    queue_0 = module_0.Queue()
    module_1.nlargest(queue_0, queue_0)

def test_case_13():
    queue_0 = module_0.Queue()
    with pytest.raises(NotImplementedError):
        queue_0.push(queue_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    binary_queue_0 = module_0.BinaryQueue()
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    var_0 = binary_queue_0.__len__()
    assert var_0 == 0
    var_1 = binary_queue_0.peek()
    var_1.__len__()

@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18s\x89'
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    iterator_0 = keyed_queue_0.iter()
    var_0 = keyed_queue_0.push(bytes_0)
    assert len(keyed_queue_0) == 1
    var_1 = keyed_queue_0.peek()
    assert var_1 == b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18s\x89'
    var_2 = keyed_queue_0.pop()
    assert var_2 == b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18s\x89'
    assert len(keyed_queue_0) == 0
    var_3 = keyed_queue_0.get(bytes_0)
    binary_queue_0 = module_0.BinaryQueue()
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    int_0 = -494
    queue_0 = binary_queue_0.copy()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(queue_0) == 0
    var_4 = binary_queue_0.peek()
    var_5 = binary_queue_0.push(int_0)
    assert len(binary_queue_0) == 1
    var_6 = binary_queue_0.push(int_0)
    assert len(binary_queue_0) == 2
    var_7 = keyed_queue_0.__len__()
    assert var_7 == 0
    binary_queue_0.push(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    heap_queue_0 = module_0.HeapQueue()
    assert f'{type(heap_queue_0).__module__}.{type(heap_queue_0).__qualname__}' == 'xrpc.abstract.HeapQueue'
    assert len(heap_queue_0) == 0
    var_0 = heap_queue_0.__len__()
    assert var_0 == 0
    var_1 = heap_queue_0.push(heap_queue_0)
    assert len(heap_queue_0) == 1
    var_1.set(heap_queue_0)

def test_case_17():
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    iterator_0 = keyed_queue_0.iter()
    queue_0 = module_0.Queue(*iterator_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'xrpc.abstract.Queue'

@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    heap_queue_0 = module_0.HeapQueue(none_type_0)
    assert f'{type(heap_queue_0).__module__}.{type(heap_queue_0).__qualname__}' == 'xrpc.abstract.HeapQueue'
    assert len(heap_queue_0) == 0
    queue_0 = heap_queue_0.copy()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'xrpc.abstract.HeapQueue'
    assert len(queue_0) == 0
    var_0 = heap_queue_0.push(queue_0)
    assert len(heap_queue_0) == 1
    iterator_0 = heap_queue_0.iter()
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    iterator_1 = keyed_queue_0.iter()
    heap_queue_0.pushpop(iterator_1)

@pytest.mark.xfail(strict=True)
def test_case_19():
    mutable_int_0 = module_0.MutableInt()
    assert mutable_int_0.state == 0
    str_0 = mutable_int_0.__repr__()
    assert str_0 == 'MutableInt(0)'
    heap_queue_0 = module_0.HeapQueue()
    assert f'{type(heap_queue_0).__module__}.{type(heap_queue_0).__qualname__}' == 'xrpc.abstract.HeapQueue'
    assert len(heap_queue_0) == 0
    heap_queue_0.replace(str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    iterator_0 = keyed_queue_0.iter()
    queue_0 = module_0.Queue(*iterator_0)
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'xrpc.abstract.Queue'
    var_0 = keyed_queue_0.__len__()
    assert var_0 == 0
    keyed_queue_0.__delitem__(queue_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = 'MutableInt(0)'
    keyed_queue_0 = module_0.KeyedQueue(str_0)
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 12
    var_0 = keyed_queue_0.__len__()
    assert var_0 == 12
    var_1 = keyed_queue_0.get(str_0)
    var_0.__len__()

@pytest.mark.xfail(strict=True)
def test_case_22():
    list_0 = []
    binary_queue_0 = module_0.BinaryQueue(list_0)
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    var_0 = binary_queue_0.peek()
    keyed_queue_0 = module_0.KeyedQueue(ord=list_0)
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    iterator_0 = binary_queue_0.iter()
    iterator_1 = binary_queue_0.iter()
    heap_queue_0 = module_0.HeapQueue(iterator_0)
    assert f'{type(heap_queue_0).__module__}.{type(heap_queue_0).__qualname__}' == 'xrpc.abstract.HeapQueue'
    assert len(heap_queue_0) == 0
    var_1 = keyed_queue_0.__contains__(heap_queue_0)
    assert var_1 is False
    heap_queue_0.pop()

@pytest.mark.xfail(strict=True)
def test_case_23():
    bytes_0 = b'\x8e\x9a\x7f\xf9\x81\x14\x83Mf\x82Ss\x89'
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    var_0 = keyed_queue_0.push(bytes_0)
    assert len(keyed_queue_0) == 1
    var_1 = keyed_queue_0.peek()
    assert var_1 == b'\x8e\x9a\x7f\xf9\x81\x14\x83Mf\x82Ss\x89'
    var_1.push(var_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    iterator_0 = keyed_queue_0.iter()
    queue_0 = keyed_queue_0.copy()
    assert f'{type(queue_0).__module__}.{type(queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(queue_0) == 0
    queue_0.pop()

@pytest.mark.xfail(strict=True)
def test_case_25():
    bytes_0 = b'k\x8e\x9a\x7f\xf9\x81\x14\x83Mf\x82Ss)'
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    var_0 = keyed_queue_0.get(bytes_0, keyed_queue_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(var_0) == 0
    var_1 = keyed_queue_0.peek()
    binary_queue_0 = module_0.BinaryQueue(var_1)
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    var_2 = binary_queue_0.push(binary_queue_0)
    assert len(binary_queue_0) == 1
    var_3 = var_0.keys()
    var_2.push(var_3)

@pytest.mark.xfail(strict=True)
def test_case_26():
    mutable_int_0 = module_0.MutableInt()
    assert mutable_int_0.state == 0
    bytes_0 = b'\x8e\x9a\x7f\xf9\x81\x14\x83Mf\x82Ss\x89'
    bool_0 = True
    var_0 = mutable_int_0.set(bool_0)
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    var_1 = keyed_queue_0.push(bytes_0)
    assert len(keyed_queue_0) == 1
    binary_queue_0 = module_0.BinaryQueue(bytes_0)
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 13
    var_2 = keyed_queue_0.__len__()
    assert var_2 == 1
    binary_queue_0.push(bytes_0)

def test_case_27():
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    iterator_0 = keyed_queue_0.iter()
    binary_queue_0 = module_0.BinaryQueue(iterator_0)
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_28():
    binary_queue_0 = module_0.BinaryQueue()
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    binary_queue_0.pop()

def test_case_29():
    queue_0 = module_0.Queue()
    with pytest.raises(NotImplementedError):
        queue_0.peek()

@pytest.mark.xfail(strict=True)
def test_case_30():
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    var_0 = keyed_queue_0.peek()
    binary_queue_0 = module_0.BinaryQueue()
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    var_1 = binary_queue_0.__len__()
    assert var_1 == 0
    var_2 = binary_queue_0.__len__()
    var_3 = binary_queue_0.push(keyed_queue_0)
    assert len(binary_queue_0) == 1
    var_4 = binary_queue_0.peek()
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(var_4) == 0
    var_3.push(keyed_queue_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    binary_queue_0 = module_0.BinaryQueue()
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    iterator_0 = binary_queue_0.iter()
    mutable_date_time_0 = module_0.MutableDateTime(binary_queue_0)
    assert len(mutable_date_time_0.t) == 0
    assert f'{type(module_0.MutableDateTime.now).__module__}.{type(module_0.MutableDateTime.now).__qualname__}' == 'builtins.method'
    none_type_0 = None
    datetime_0 = mutable_date_time_0.set(none_type_0)
    assert len(datetime_0) == 0
    var_0 = binary_queue_0.peek()
    var_0.peek()

def test_case_32():
    queue_0 = module_0.Queue()
    with pytest.raises(NotImplementedError):
        queue_0.pop()

def test_case_33():
    queue_0 = module_0.Queue()
    with pytest.raises(NotImplementedError):
        queue_0.copy()

@pytest.mark.xfail(strict=True)
def test_case_34():
    bytes_0 = b'\x8e\x9a\x7f\xf9\x81\x14\x83Mf\x82Ss\x89'
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    var_0 = keyed_queue_0.push(bytes_0)
    assert len(keyed_queue_0) == 1
    var_1 = keyed_queue_0.peek()
    assert var_1 == b'\x8e\x9a\x7f\xf9\x81\x14\x83Mf\x82Ss\x89'
    binary_queue_0 = module_0.BinaryQueue(var_1)
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 13
    binary_queue_0.push(bytes_0)

def test_case_35():
    queue_0 = module_0.Queue()
    with pytest.raises(NotImplementedError):
        queue_0.iter()

@pytest.mark.xfail(strict=True)
def test_case_36():
    bytes_0 = b'\x9cN\xcf\xf2T\xc7\xfb\xb7'
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    var_0 = keyed_queue_0.push(bytes_0)
    assert len(keyed_queue_0) == 1
    var_1 = keyed_queue_0.push(bytes_0)
    var_2 = keyed_queue_0.peek()
    assert var_2 == b'\x9cN\xcf\xf2T\xc7\xfb\xb7'
    var_3 = keyed_queue_0.pop()
    assert var_3 == b'\x9cN\xcf\xf2T\xc7\xfb\xb7'
    assert len(keyed_queue_0) == 0
    var_4 = keyed_queue_0.get(bytes_0)
    binary_queue_0 = module_0.BinaryQueue()
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    none_type_0 = None
    var_5 = keyed_queue_0.push(none_type_0)
    assert len(keyed_queue_0) == 1
    var_5.peek()

def test_case_37():
    bytes_0 = b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18Us\x89'
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    var_0 = keyed_queue_0.push(bytes_0)
    assert len(keyed_queue_0) == 1
    var_1 = keyed_queue_0.pop()
    assert var_1 == b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18Us\x89'
    assert len(keyed_queue_0) == 0
    binary_queue_0 = module_0.BinaryQueue()
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    var_2 = binary_queue_0.push(var_1)
    assert len(binary_queue_0) == 1
    var_3 = binary_queue_0.push(var_1)
    assert len(binary_queue_0) == 2
    var_4 = binary_queue_0.push(bytes_0)
    assert len(binary_queue_0) == 3
    mutable_date_time_0 = module_0.MutableDateTime(var_2)
    assert f'{type(module_0.MutableDateTime.now).__module__}.{type(module_0.MutableDateTime.now).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_38():
    bytes_0 = b'\x9cN\xcf\xf2N\xc7\xfb\x07'
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    iterator_0 = keyed_queue_0.iter()
    var_0 = keyed_queue_0.push(bytes_0)
    assert len(keyed_queue_0) == 1
    var_1 = keyed_queue_0.pop()
    assert var_1 == b'\x9cN\xcf\xf2N\xc7\xfb\x07'
    assert len(keyed_queue_0) == 0
    dict_0 = {var_1: bytes_0, iterator_0: var_1}
    keyed_queue_0.get(dict_0)

def test_case_39():
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    var_0 = keyed_queue_0.peek()
    int_0 = 2818
    binary_queue_0 = module_0.BinaryQueue()
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    mutable_date_time_0 = module_0.MutableDateTime(var_0)
    assert f'{type(module_0.MutableDateTime.now).__module__}.{type(module_0.MutableDateTime.now).__qualname__}' == 'builtins.method'
    datetime_0 = mutable_date_time_0.get()
    int_1 = -498
    var_1 = binary_queue_0.__len__()
    assert var_1 == 0
    var_2 = binary_queue_0.push(int_1)
    assert len(binary_queue_0) == 1
    var_3 = var_2.__le__(int_0)

@pytest.mark.xfail(strict=True)
def test_case_40():
    bytes_0 = b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18s\x89'
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    iterator_0 = keyed_queue_0.iter()
    var_0 = keyed_queue_0.push(bytes_0)
    assert len(keyed_queue_0) == 1
    var_1 = keyed_queue_0.peek()
    assert var_1 == b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18s\x89'
    var_2 = keyed_queue_0.pop()
    assert var_2 == b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18s\x89'
    assert len(keyed_queue_0) == 0
    binary_queue_0 = module_0.BinaryQueue()
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    var_3 = binary_queue_0.push(var_1)
    assert len(binary_queue_0) == 1
    var_4 = binary_queue_0.peek()
    assert var_4 == b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18s\x89'
    var_5 = binary_queue_0.push(var_2)
    assert len(binary_queue_0) == 2
    var_6 = binary_queue_0.push(var_1)
    assert len(binary_queue_0) == 3
    var_7 = binary_queue_0.push(bytes_0)
    assert len(binary_queue_0) == 4
    module_2.datetime(**keyed_queue_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    var_0 = keyed_queue_0.push(keyed_queue_0)
    assert len(keyed_queue_0) == 1
    iterator_0 = keyed_queue_0.iter()
    module_0.Queue(*iterator_0)

@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = '"jB$@MY'
    binary_queue_0 = module_0.BinaryQueue(str_0)
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 7
    var_0 = binary_queue_0.push(str_0)
    assert len(binary_queue_0) == 8
    var_1 = str_0.__len__()
    var_0.peek()

@pytest.mark.xfail(strict=True)
def test_case_43():
    bytes_0 = b'\x9cN\xcf\xf2T\xc7\xfb\xb7'
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    var_0 = keyed_queue_0.push(bytes_0)
    assert len(keyed_queue_0) == 1
    var_1 = keyed_queue_0.push(bytes_0)
    var_2 = keyed_queue_0.pop()
    assert var_2 == b'\x9cN\xcf\xf2T\xc7\xfb\xb7'
    assert len(keyed_queue_0) == 0
    var_3 = keyed_queue_0.get(bytes_0)
    binary_queue_0 = module_0.BinaryQueue()
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    none_type_0 = None
    var_4 = keyed_queue_0.push(none_type_0)
    assert len(keyed_queue_0) == 1
    var_4.peek()

@pytest.mark.xfail(strict=True)
def test_case_44():
    bytes_0 = b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18s\x89'
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    none_type_0 = None
    binary_queue_0 = module_0.BinaryQueue(none_type_0)
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    var_0 = keyed_queue_0.push(bytes_0)
    assert len(keyed_queue_0) == 1
    var_1 = keyed_queue_0.peek()
    assert var_1 == b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18s\x89'
    var_2 = keyed_queue_0.__delitem__(bytes_0)
    assert len(keyed_queue_0) == 0
    var_3 = keyed_queue_0.get(bytes_0)
    binary_queue_1 = module_0.BinaryQueue(var_1)
    assert len(binary_queue_1) == 13
    var_4 = keyed_queue_0.keys()
    var_5 = keyed_queue_0.peek()
    binary_queue_1.push(var_0)

@pytest.mark.xfail(strict=True)
def test_case_45():
    bytes_0 = b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18s\x89'
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    var_0 = keyed_queue_0.push(bytes_0)
    assert len(keyed_queue_0) == 1
    var_1 = keyed_queue_0.peek()
    assert var_1 == b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18s\x89'
    var_2 = keyed_queue_0.__delitem__(var_1)
    assert len(keyed_queue_0) == 0
    keyed_queue_0.pop()

@pytest.mark.xfail(strict=True)
def test_case_46():
    bytes_0 = b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18s\x89'
    keyed_queue_0 = module_0.KeyedQueue()
    assert f'{type(keyed_queue_0).__module__}.{type(keyed_queue_0).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_0) == 0
    iterator_0 = keyed_queue_0.iter()
    var_0 = keyed_queue_0.push(bytes_0)
    assert len(keyed_queue_0) == 1
    var_1 = keyed_queue_0.peek()
    assert var_1 == b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18s\x89'
    mutable_date_time_0 = module_0.MutableDateTime(var_0)
    assert f'{type(module_0.MutableDateTime.now).__module__}.{type(module_0.MutableDateTime.now).__qualname__}' == 'builtins.method'
    var_2 = keyed_queue_0.get(bytes_0)
    binary_queue_0 = module_0.BinaryQueue()
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    var_3 = binary_queue_0.push(var_1)
    assert len(binary_queue_0) == 1
    var_4 = binary_queue_0.peek()
    assert var_4 == b'\x8e\x9a\x7f\xf9\x81\x14\x83MW\x82\x18s\x89'
    var_5 = binary_queue_0.push(var_4)
    assert len(binary_queue_0) == 2
    var_6 = keyed_queue_0.push(var_4)
    module_0.Queue(*iterator_0)

@pytest.mark.xfail(strict=True)
def test_case_47():
    str_0 = '"+B$@M'
    binary_queue_0 = module_0.BinaryQueue(str_0)
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 6
    var_0 = binary_queue_0.push(str_0)
    assert len(binary_queue_0) == 7
    var_0.peek()

@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = '"j\tB$@qMY'
    binary_queue_0 = module_0.BinaryQueue(str_0)
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 9
    var_0 = binary_queue_0.push(str_0)
    assert len(binary_queue_0) == 10
    var_1 = str_0.__len__()
    module_1.nlargest(str_0, str_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_49():
    str_0 = '<<QNd'
    binary_queue_0 = module_0.BinaryQueue(str_0)
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 5
    var_0 = binary_queue_0.push(str_0)
    assert len(binary_queue_0) == 6
    module_1.nsmallest(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_50():
    list_0 = []
    binary_queue_0 = module_0.BinaryQueue(list_0)
    assert f'{type(binary_queue_0).__module__}.{type(binary_queue_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(binary_queue_0) == 0
    keyed_queue_0 = binary_queue_0.push(binary_queue_0)
    assert len(binary_queue_0) == 1
    var_0 = binary_queue_0.peek()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(var_0) == 1
    bool_0 = True
    keyed_queue_1 = module_0.KeyedQueue(ord=list_0)
    assert f'{type(keyed_queue_1).__module__}.{type(keyed_queue_1).__qualname__}' == 'xrpc.abstract.KeyedQueue'
    assert len(keyed_queue_1) == 0
    iterator_0 = binary_queue_0.iter()
    iterator_1 = binary_queue_0.iter()
    heap_queue_0 = module_0.HeapQueue(iterator_0)
    assert f'{type(heap_queue_0).__module__}.{type(heap_queue_0).__qualname__}' == 'xrpc.abstract.HeapQueue'
    assert len(heap_queue_0) == 1
    var_1 = keyed_queue_1.__contains__(heap_queue_0)
    assert var_1 is False
    var_2 = heap_queue_0.pop()
    assert len(heap_queue_0) == 0
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'xrpc.abstract.BinaryQueue'
    assert len(var_2) == 1
    var_3 = heap_queue_0.push(bool_0)
    assert len(heap_queue_0) == 1
    var_3.peek()