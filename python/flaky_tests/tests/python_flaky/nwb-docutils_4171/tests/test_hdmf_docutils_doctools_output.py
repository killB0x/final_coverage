# Automatically generated by Pynguin.
import pytest
import hdmf_docutils.doctools.output as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 984.84346
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    print_helper_0 = module_0.PrintHelper()
    assert module_0.PrintHelper.HEADER == '\x1b[95m'
    assert module_0.PrintHelper.OKBLUE == '\x1b[94m'
    assert module_0.PrintHelper.OKGREEN == '\x1b[32m'
    assert module_0.PrintHelper.WARNING == '\x1b[93m'
    assert module_0.PrintHelper.FAIL == '\x1b[91m'
    assert module_0.PrintHelper.ENDC == '\x1b[0m'
    assert module_0.PrintHelper.BOLD == '\x1b[1m'
    assert module_0.PrintHelper.UNDERLINE == '\x1b[4m'
    assert module_0.PrintHelper.ITALIC == '\x1b[1m'
    assert module_0.PrintHelper.URL == '\x1b[4m'
    assert module_0.PrintHelper.BLINK == '\x1b[5m'
    assert module_0.PrintHelper.BLINK2 == '\x1b[6m'
    assert module_0.PrintHelper.SELECTED == '\x1b[7m'
    assert module_0.PrintHelper.GRAY == '\x1b[90m'
    assert module_0.PrintHelper.BLACK == '\x1b[90m'
    assert f'{type(module_0.PrintHelper.print).__module__}.{type(module_0.PrintHelper.print).__qualname__}' == 'builtins.method'
    print_helper_0.print_type_hierarchy(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    dict_0 = {}
    git_hash_helper_0 = module_0.GitHashHelper()
    assert f'{type(module_0.GitHashHelper.get_git_revision_hash).__module__}.{type(module_0.GitHashHelper.get_git_revision_hash).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.GitHashHelper.git_hash_match).__module__}.{type(module_0.GitHashHelper.git_hash_match).__qualname__}' == 'builtins.method'
    none_type_0 = None
    print_helper_0 = module_0.PrintHelper(**dict_0)
    assert module_0.PrintHelper.HEADER == '\x1b[95m'
    assert module_0.PrintHelper.OKBLUE == '\x1b[94m'
    assert module_0.PrintHelper.OKGREEN == '\x1b[32m'
    assert module_0.PrintHelper.WARNING == '\x1b[93m'
    assert module_0.PrintHelper.FAIL == '\x1b[91m'
    assert module_0.PrintHelper.ENDC == '\x1b[0m'
    assert module_0.PrintHelper.BOLD == '\x1b[1m'
    assert module_0.PrintHelper.UNDERLINE == '\x1b[4m'
    assert module_0.PrintHelper.ITALIC == '\x1b[1m'
    assert module_0.PrintHelper.URL == '\x1b[4m'
    assert module_0.PrintHelper.BLINK == '\x1b[5m'
    assert module_0.PrintHelper.BLINK2 == '\x1b[6m'
    assert module_0.PrintHelper.SELECTED == '\x1b[7m'
    assert module_0.PrintHelper.GRAY == '\x1b[90m'
    assert module_0.PrintHelper.BLACK == '\x1b[90m'
    assert f'{type(module_0.PrintHelper.print).__module__}.{type(module_0.PrintHelper.print).__qualname__}' == 'builtins.method'
    var_0 = print_helper_0.print_type_hierarchy(dict_0, bool_0)
    var_0.print_type_hierarchy(dict_0, none_type_0)

def test_case_2():
    print_helper_0 = module_0.PrintHelper()
    assert module_0.PrintHelper.HEADER == '\x1b[95m'
    assert module_0.PrintHelper.OKBLUE == '\x1b[94m'
    assert module_0.PrintHelper.OKGREEN == '\x1b[32m'
    assert module_0.PrintHelper.WARNING == '\x1b[93m'
    assert module_0.PrintHelper.FAIL == '\x1b[91m'
    assert module_0.PrintHelper.ENDC == '\x1b[0m'
    assert module_0.PrintHelper.BOLD == '\x1b[1m'
    assert module_0.PrintHelper.UNDERLINE == '\x1b[4m'
    assert module_0.PrintHelper.ITALIC == '\x1b[1m'
    assert module_0.PrintHelper.URL == '\x1b[4m'
    assert module_0.PrintHelper.BLINK == '\x1b[5m'
    assert module_0.PrintHelper.BLINK2 == '\x1b[6m'
    assert module_0.PrintHelper.SELECTED == '\x1b[7m'
    assert module_0.PrintHelper.GRAY == '\x1b[90m'
    assert module_0.PrintHelper.BLACK == '\x1b[90m'
    assert f'{type(module_0.PrintHelper.print).__module__}.{type(module_0.PrintHelper.print).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_3():
    print_helper_0 = module_0.PrintHelper()
    assert module_0.PrintHelper.HEADER == '\x1b[95m'
    assert module_0.PrintHelper.OKBLUE == '\x1b[94m'
    assert module_0.PrintHelper.OKGREEN == '\x1b[32m'
    assert module_0.PrintHelper.WARNING == '\x1b[93m'
    assert module_0.PrintHelper.FAIL == '\x1b[91m'
    assert module_0.PrintHelper.ENDC == '\x1b[0m'
    assert module_0.PrintHelper.BOLD == '\x1b[1m'
    assert module_0.PrintHelper.UNDERLINE == '\x1b[4m'
    assert module_0.PrintHelper.ITALIC == '\x1b[1m'
    assert module_0.PrintHelper.URL == '\x1b[4m'
    assert module_0.PrintHelper.BLINK == '\x1b[5m'
    assert module_0.PrintHelper.BLINK2 == '\x1b[6m'
    assert module_0.PrintHelper.SELECTED == '\x1b[7m'
    assert module_0.PrintHelper.GRAY == '\x1b[90m'
    assert module_0.PrintHelper.BLACK == '\x1b[90m'
    assert f'{type(module_0.PrintHelper.print).__module__}.{type(module_0.PrintHelper.print).__qualname__}' == 'builtins.method'
    print_helper_1 = module_0.PrintHelper()
    str_0 = '\n        Suggest xlimits for plotting\n        :return: Tuple with min/max x values\n        '
    str_1 = 'N&<@Kdz>-q#Fba.0'
    dict_0 = {print_helper_0: str_1, str_1: print_helper_0}
    print_helper_1.print_type_hierarchy(dict_0, str_0)