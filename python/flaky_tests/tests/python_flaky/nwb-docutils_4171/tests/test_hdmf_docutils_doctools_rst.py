# Automatically generated by Pynguin.
import pytest
import hdmf_docutils.doctools.rst as module_0

def test_case_0():
    str_0 = '$'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_subsubsection(str_0)
    assert r_s_t_document_0.document == '$\n^\n\n'
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_1 = r_s_t_table_0.render(r_s_t_document_0, str_0, ignore_empty=r_s_t_table_0)
    assert r_s_t_document_0.document == '$\n^\n\n\n.. table:: $\n    :class: longtable\n\n    +-----+\n    | $   |\n    +=====+\n\n\n'
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTDocument'
    assert var_1.document == '$\n^\n\n\n.. table:: $\n    :class: longtable\n\n    +-----+\n    | $   |\n    +=====+\n\n\n'
    assert var_1.newline == '\n'
    assert var_1.default_indent == '    '

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'P'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.get_reference(r_s_t_document_0, str_0)
    var_1 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == '* P\n\n'
    var_2 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == '* P\n\n.. code-block:: yaml\n    :linenos:\n\n    P\n    ...\n\n\n'
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_3 = r_s_t_document_0.add_figure(var_1, var_1, alt=r_s_t_document_0)
    var_4 = r_s_t_table_0.add_row(var_2)
    assert len(r_s_t_table_0) == 1
    r_s_t_table_0.render(r_s_t_document_0, str_0, widths=str_0, ignore_empty=r_s_t_table_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ' '
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.get_reference(str_0)
    assert var_0 == ':ref:` `'
    var_1 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == '*  \n\n'
    var_2 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == "*  \n\n.. code-block:: yaml\n    :linenos:\n\n    ' '\n\n\n"
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_3 = r_s_t_document_0.add_include(var_1)
    assert r_s_t_document_0.document == "*  \n\n.. code-block:: yaml\n    :linenos:\n\n    ' '\n\n\n.. include:: None\n"
    var_4 = r_s_t_document_0.add_figure(var_1, var_1, alt=r_s_t_document_0)
    var_5 = r_s_t_table_0.add_row(var_2)
    assert len(r_s_t_table_0) == 1
    r_s_t_table_0.render(r_s_t_document_0, str_0, widths=str_0, ignore_empty=r_s_t_table_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b'\xb5\x8f\xff\xc5\x7fP\xbba\x8bc\x85'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    r_s_t_document_0.add_code(bytes_0, bytes_0, emphasize_lines=bytes_0)

def test_case_4():
    bool_0 = True
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_spec(bool_0)
    assert r_s_t_document_0.document == '.. code-block:: yaml\n    :linenos:\n\n    true\n    ...\n\n\n'

def test_case_5():
    str_0 = 'd'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == '* d\n\n'

@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b'\xceCm&\x1aa\x80\xda\xc8\xf4b\x08\xbd\xa5\x9aZ'
    bytes_1 = b'\x08.-g\x1a\x1cI(A\x0c\x97'
    str_0 = 'Q/+<*'
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (str_0, tuple_0, bool_0)
    tuple_2 = (bytes_1, tuple_1)
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.get_reference(bytes_0)
    assert var_0 == ":ref:`b'\\xceCm&\\x1aa\\x80\\xda\\xc8\\xf4b\\x08\\xbd\\xa5\\x9aZ'`"
    r_s_t_document_0.add_list(tuple_2, tuple_2)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ' '
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_admonitions(r_s_t_document_0, str_0)
    var_1 = r_s_t_document_0.add_list(str_0)
    var_2 = r_s_t_document_0.add_spec(str_0)
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_3 = r_s_t_document_0.add_include(var_1)
    var_4 = r_s_t_document_0.add_figure(var_1, var_1, alt=r_s_t_document_0)
    var_5 = r_s_t_table_0.add_row(var_2)
    assert len(r_s_t_table_0) == 1
    r_s_t_table_0.render(r_s_t_document_0, str_0, widths=str_0, ignore_empty=r_s_t_table_0)

def test_case_8():
    str_0 = 'o'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    with pytest.raises(ValueError):
        r_s_t_document_0.add_figure(str_0, str_0, str_0, align=str_0, target=r_s_t_document_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b'ncb\xd8T\x06H\xa2"\x8e\x99\x97'
    none_type_0 = None
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    r_s_t_document_0.add_figure(bytes_0, alt=bytes_0, height=bytes_0, target=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    r_s_t_document_0.add_spec(r_s_t_document_0)

def test_case_11():
    none_type_0 = None
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.spec_to_yaml(none_type_0)
    assert var_0 == 'null\n...\n'

@pytest.mark.xfail(strict=True)
def test_case_12():
    r_s_t_section_label_helper_0 = module_0.RSTSectionLabelHelper()
    r_s_t_section_label_helper_0.get_src_section_label(r_s_t_section_label_helper_0, show_yaml_src=r_s_t_section_label_helper_0)

def test_case_13():
    int_0 = -2507
    r_s_t_table_0 = module_0.RSTTable(int_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0

def test_case_14():
    str_0 = 'op'
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_0 = r_s_t_table_0.add_row(str_0, str_0)
    assert len(r_s_t_table_0) == 1

@pytest.mark.xfail(strict=True)
def test_case_15():
    float_0 = -786.519998
    tuple_0 = ()
    r_s_t_table_0 = module_0.RSTTable(tuple_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_0 = r_s_t_table_0.num_rows()
    r_s_t_table_0.set_cell(float_0, float_0, float_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = ' '
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == ".. code-block:: yaml\n    :linenos:\n\n    ' '\n\n\n"
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_1 = r_s_t_table_0.add_row(var_0)
    assert len(r_s_t_table_0) == 1
    r_s_t_table_0.render(r_s_t_document_0, str_0, widths=str_0, ignore_empty=r_s_t_table_0)

def test_case_17():
    bool_0 = True
    r_s_t_table_0 = module_0.RSTTable(bool_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    with pytest.raises(ValueError):
        r_s_t_table_0.set_col(bool_0, bool_0)

def test_case_18():
    str_0 = 'd'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_0 = r_s_t_table_0.render(r_s_t_document_0, str_0, ignore_empty=r_s_t_table_0)
    assert r_s_t_document_0.document == '\n.. table:: d\n    :class: longtable\n\n    +-----+\n    | d   |\n    +=====+\n\n\n'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTDocument'
    assert var_0.document == '\n.. table:: d\n    :class: longtable\n\n    +-----+\n    | d   |\n    +=====+\n\n\n'
    assert var_0.newline == '\n'
    assert var_0.default_indent == '    '

def test_case_19():
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = ' '
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_part(str_0)
    assert r_s_t_document_0.document == '#\n \n#\n\n'
    var_1 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == '#\n \n#\n\n*  \n\n'
    var_2 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == "#\n \n#\n\n*  \n\n.. code-block:: yaml\n    :linenos:\n\n    ' '\n\n\n"
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_3 = r_s_t_document_0.add_figure(var_1, var_1, alt=r_s_t_document_0)
    var_4 = r_s_t_table_0.add_row(var_2)
    assert len(r_s_t_table_0) == 1
    r_s_t_table_0.render(r_s_t_document_0, str_0, widths=str_0, ignore_empty=r_s_t_table_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    r_s_t_document_0.add_chapter(r_s_t_document_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_label(r_s_t_document_0)
    r_s_t_document_0.spec_to_yaml(r_s_t_document_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = ' '
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.get_numbered_reference(r_s_t_document_0)
    var_1 = r_s_t_document_0.add_label(str_0)
    assert r_s_t_document_0.document == '.. _ :\n\n'
    var_2 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == '.. _ :\n\n*  \n\n'
    var_3 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == ".. _ :\n\n*  \n\n.. code-block:: yaml\n    :linenos:\n\n    ' '\n\n\n"
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_4 = r_s_t_table_0.add_row(var_3)
    assert len(r_s_t_table_0) == 1
    r_s_t_table_0.render(r_s_t_document_0, str_0, widths=str_0, ignore_empty=r_s_t_table_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = ' '
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == '*  \n\n'
    var_1 = r_s_t_document_0.add_section(str_0)
    assert r_s_t_document_0.document == '*  \n\n \n=\n\n'
    var_2 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == "*  \n\n \n=\n\n.. code-block:: yaml\n    :linenos:\n\n    ' '\n\n\n"
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_3 = r_s_t_document_0.add_figure(var_0, var_0, alt=r_s_t_document_0)
    var_4 = r_s_t_table_0.add_row(var_2)
    assert len(r_s_t_table_0) == 1
    r_s_t_table_0.render(r_s_t_document_0, str_0, widths=str_0, ignore_empty=r_s_t_table_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = ' '
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_subsection(str_0)
    assert r_s_t_document_0.document == ' \n-\n\n'
    var_1 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == ' \n-\n\n*  \n\n'
    var_2 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == " \n-\n\n*  \n\n.. code-block:: yaml\n    :linenos:\n\n    ' '\n\n\n"
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_3 = r_s_t_document_0.add_include(var_1)
    assert r_s_t_document_0.document == " \n-\n\n*  \n\n.. code-block:: yaml\n    :linenos:\n\n    ' '\n\n\n.. include:: None\n"
    var_4 = r_s_t_document_0.add_figure(var_1, var_1, alt=r_s_t_document_0)
    var_5 = r_s_t_table_0.add_row(var_2)
    assert len(r_s_t_table_0) == 1
    r_s_t_table_0.render(r_s_t_document_0, str_0, widths=str_0, ignore_empty=r_s_t_table_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = ' '
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == '*  \n\n'
    var_1 = r_s_t_document_0.write(str_0)
    var_2 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == "*  \n\n.. code-block:: yaml\n    :linenos:\n\n    ' '\n\n\n"
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_3 = r_s_t_document_0.add_figure(var_0, var_0, alt=r_s_t_document_0)
    var_4 = r_s_t_table_0.add_row(var_2)
    assert len(r_s_t_table_0) == 1
    r_s_t_table_0.render(r_s_t_document_0, str_0, widths=str_0, ignore_empty=r_s_t_table_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    int_0 = -1516
    none_type_0 = None
    r_s_t_section_label_helper_0 = module_0.RSTSectionLabelHelper()
    r_s_t_section_label_helper_0.get_src_section_label(int_0, none_type_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    r_s_t_section_label_helper_0 = module_0.RSTSectionLabelHelper()
    none_type_0 = None
    var_0 = r_s_t_section_label_helper_0.get_src_section_label(r_s_t_section_label_helper_0, none_type_0, none_type_0)
    r_s_t_section_label_helper_0.get_group_table_label(r_s_t_section_label_helper_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    r_s_t_section_label_helper_0 = module_0.RSTSectionLabelHelper()
    r_s_t_section_label_helper_0.get_data_table_label(r_s_t_section_label_helper_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = 'G}\x0cj;L@[WQ'
    int_0 = 3530
    r_s_t_table_0 = module_0.RSTTable(int_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_0 = r_s_t_table_0.render(widths=str_0, latex_tablecolumns=str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTDocument'
    assert var_0.document == ''
    assert var_0.newline == '\n'
    assert var_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0.num_cols()

def test_case_31():
    str_0 = 'o'
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_latex_clearpage()
    assert r_s_t_document_0.document == '\n.. raw:: latex\n\n    \\clearpage \\newpage\n\n'
    with pytest.raises(ValueError):
        r_s_t_document_0.add_figure(str_0, var_0, var_0, align=str_0, target=r_s_t_document_0)

@pytest.mark.xfail(strict=True)
def test_case_32():
    bool_0 = True
    bytes_0 = b'ncb\xd8T\x06H\xa2"\x8e\x99\x97'
    none_type_0 = None
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    bool_1 = False
    var_0 = r_s_t_document_0.add_figure(bytes_0, legend=none_type_0, width=bool_1, scale=bool_0)
    assert r_s_t_document_0.document == '\n.. figure:: b\'ncb\\xd8T\\x06H\\xa2"\\x8e\\x99\\x97\'\n    :scale: 1 %\n    :width: 0 px\n\n\n'
    var_0.num_cols()

@pytest.mark.xfail(strict=True)
def test_case_33():
    str_0 = ' '
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_paragraph(str_0)
    assert r_s_t_document_0.document == ' \n"\n\n'
    var_1 = r_s_t_document_0.add_label(str_0)
    assert r_s_t_document_0.document == ' \n"\n\n.. _ :\n\n'
    var_2 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == ' \n"\n\n.. _ :\n\n.. code-block:: yaml\n    :linenos:\n\n    \' \'\n\n\n'
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_3 = r_s_t_document_0.add_figure(r_s_t_document_0, r_s_t_document_0, alt=r_s_t_document_0)
    var_4 = r_s_t_table_0.add_row(var_2)
    assert len(r_s_t_table_0) == 1
    r_s_t_table_0.render(r_s_t_document_0, str_0, widths=str_0, ignore_empty=r_s_t_table_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = "'cyBO i\x0c]O&au]\x0cpS1"
    int_0 = 10
    int_1 = -1479
    set_0 = {int_0, int_1, str_0, int_1}
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    bool_0 = False
    r_s_t_document_1 = module_0.RSTDocument()
    assert r_s_t_document_1.document == ''
    assert r_s_t_document_1.newline == '\n'
    assert r_s_t_document_1.default_indent == '    '
    var_0 = r_s_t_document_1.add_spec(bool_0)
    assert r_s_t_document_1.document == '.. code-block:: yaml\n    :linenos:\n\n    false\n    ...\n\n\n'
    r_s_t_document_1.add_table(set_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_admonitions(r_s_t_document_0, r_s_t_document_0)
    bool_0 = True
    var_1 = r_s_t_document_0.spec_to_yaml(bool_0)
    assert var_1 == 'true\n...\n'
    var_1.add_subsection(var_1)

@pytest.mark.xfail(strict=True)
def test_case_36():
    str_0 = 'P'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_label(str_0)
    assert r_s_t_document_0.document == '.. _P:\n\n'
    var_1 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == '.. _P:\n\n.. code-block:: yaml\n    :linenos:\n\n    P\n    ...\n\n\n'
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_2 = r_s_t_document_0.add_include(r_s_t_document_0)
    var_3 = r_s_t_document_0.add_figure(var_2, var_2, alt=r_s_t_document_0)
    var_4 = r_s_t_table_0.add_row(var_1)
    assert len(r_s_t_table_0) == 1
    r_s_t_table_0.render(r_s_t_document_0, str_0, widths=str_0, ignore_empty=r_s_t_table_0)

def test_case_37():
    str_0 = 'd'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == '* d\n\n'
    var_1 = r_s_t_document_0.add_figure(str_0, legend=var_0, height=var_0)
    assert r_s_t_document_0.document == '* d\n\n\n.. figure:: d\n\n\n'
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_2 = r_s_t_table_0.render(r_s_t_document_0, str_0, ignore_empty=r_s_t_table_0)
    assert r_s_t_document_0.document == '* d\n\n\n.. figure:: d\n\n\n\n.. table:: d\n    :class: longtable\n\n    +-----+\n    | d   |\n    +=====+\n\n\n'
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTDocument'
    assert var_2.document == '* d\n\n\n.. figure:: d\n\n\n\n.. table:: d\n    :class: longtable\n\n    +-----+\n    | d   |\n    +=====+\n\n\n'
    assert var_2.newline == '\n'
    assert var_2.default_indent == '    '

@pytest.mark.xfail(strict=True)
def test_case_38():
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_include(r_s_t_document_0)
    var_1 = r_s_t_document_0.add_figure(var_0, legend=r_s_t_document_0, align=var_0, target=var_0)
    var_2 = r_s_t_document_0.get_reference(r_s_t_document_0, r_s_t_document_0)
    var_2.add_chapter(var_2)

def test_case_39():
    str_0 = 'op'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_include(str_0, str_0)
    assert r_s_t_document_0.document == 'op.. include:: op\n'
    var_1 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == 'op.. include:: op\n* o\n* p\n\n'
    var_2 = r_s_t_document_0.add_sidebar(str_0, str_0)
    assert r_s_t_document_0.document == 'op.. include:: op\n* o\n* p\n\n\n.. sidebar:: op\n\n    op\n\n'
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_3 = r_s_t_table_0.render(r_s_t_document_0, str_0, ignore_empty=r_s_t_table_0)
    assert r_s_t_document_0.document == 'op.. include:: op\n* o\n* p\n\n\n.. sidebar:: op\n\n    op\n\n\n.. table:: op\n    :class: longtable\n\n    +-----+-----+\n    | o   | p   |\n    +=====+=====+\n\n\n'
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTDocument'
    assert var_3.document == 'op.. include:: op\n* o\n* p\n\n\n.. sidebar:: op\n\n    op\n\n\n.. table:: op\n    :class: longtable\n\n    +-----+-----+\n    | o   | p   |\n    +=====+=====+\n\n\n'
    assert var_3.newline == '\n'
    assert var_3.default_indent == '    '
    var_4 = r_s_t_document_0.spec_to_yaml(var_1)
    assert var_4 == 'null\n...\n'
    var_5 = r_s_t_table_0.add_row(str_0, var_3)
    assert len(r_s_t_table_0) == 1
    with pytest.raises(ValueError):
        r_s_t_document_0.add_figure(var_3, r_s_t_table_0, r_s_t_table_0, align=str_0, target=r_s_t_document_0)

@pytest.mark.xfail(strict=True)
def test_case_40():
    str_0 = 'P'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.indent_text(str_0, str_0)
    assert var_0 == 'PP'
    var_1 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == '* P\n\n'
    var_2 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == '* P\n\n.. code-block:: yaml\n    :linenos:\n\n    P\n    ...\n\n\n'
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_3 = r_s_t_document_0.add_include(var_1)
    assert r_s_t_document_0.document == '* P\n\n.. code-block:: yaml\n    :linenos:\n\n    P\n    ...\n\n\n.. include:: None\n'
    var_4 = r_s_t_document_0.add_figure(var_1, var_1, alt=r_s_t_document_0)
    var_5 = r_s_t_table_0.add_row(var_2)
    assert len(r_s_t_table_0) == 1
    r_s_t_table_0.render(r_s_t_document_0, str_0, widths=str_0, ignore_empty=r_s_t_table_0)

def test_case_41():
    bytes_0 = b'\xf3\xc7\x01'
    bool_0 = True
    r_s_t_table_0 = module_0.RSTTable(bool_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_0 = r_s_t_table_0.num_cols()
    assert var_0 == 1
    var_1 = r_s_t_table_0.add_row(bytes_0, bytes_0, bytes_0)
    assert len(r_s_t_table_0) == 1

@pytest.mark.xfail(strict=True)
def test_case_42():
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_include(r_s_t_document_0)
    var_1 = r_s_t_document_0.add_figure(var_0, r_s_t_document_0, r_s_t_document_0, width=var_0)
    var_0.get_group_table_label(var_0)

@pytest.mark.xfail(strict=True)
def test_case_43():
    str_0 = 'index.rst'
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_0 = r_s_t_table_0.render(title=str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTDocument'
    assert var_0.document == ''
    assert var_0.newline == '\n'
    assert var_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_1 = r_s_t_table_0.render(r_s_t_table_0, widths=r_s_t_table_0, ignore_empty=var_0)
    var_2 = var_0.get_reference(var_1)
    var_2.spec_to_yaml(r_s_t_table_0)

@pytest.mark.xfail(strict=True)
def test_case_44():
    str_0 = 'index.rst'
    bool_0 = True
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    r_s_t_table_0.set_col(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_45():
    str_0 = '6\r'
    bool_0 = True
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_0 = r_s_t_table_0.render(title=str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTDocument'
    assert var_0.document == ''
    assert var_0.newline == '\n'
    assert var_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_1 = var_0.spec_to_yaml(bool_0)
    assert var_1 == 'true\n...\n'
    bytes_0 = b''
    var_2 = var_0.add_figure(bytes_0, legend=var_1)
    assert var_0.document == "\n.. figure:: b''\n\n    .. \n    \n    true\n    ...\n\n\n"
    var_0.num_rows()

@pytest.mark.xfail(strict=True)
def test_case_46():
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    none_type_0 = None
    r_s_t_document_0.add_code(none_type_0, show_line_numbers=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_47():
    str_0 = ' '
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == '*  \n\n'
    var_1 = r_s_t_document_0.write(str_0)
    var_2 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == "*  \n\n.. code-block:: yaml\n    :linenos:\n\n    ' '\n\n\n"
    var_3 = r_s_t_document_0.add_latex_clearpage()
    assert r_s_t_document_0.document == "*  \n\n.. code-block:: yaml\n    :linenos:\n\n    ' '\n\n\n\n.. raw:: latex\n\n    \\clearpage \\newpage\n\n"
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_4 = r_s_t_table_0.add_row(var_1, var_1, var_0)
    assert len(r_s_t_table_0) == 1
    var_5 = r_s_t_document_0.add_figure(var_0, var_0, alt=r_s_t_document_0)
    var_6 = r_s_t_table_0.add_row(var_2)
    r_s_t_table_0.render(r_s_t_document_0, str_0, widths=str_0, ignore_empty=r_s_t_table_0)

@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = ''
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_text(str_0)
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    r_s_t_table_0.render(r_s_t_document_0, str_0, ignore_empty=r_s_t_table_0)

@pytest.mark.xfail(strict=True)
def test_case_49():
    int_0 = -2811
    r_s_t_table_0 = module_0.RSTTable(int_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    set_0 = {r_s_t_table_0, r_s_t_table_0, int_0, int_0}
    r_s_t_table_1 = module_0.RSTTable(set_0)
    assert f'{type(r_s_t_table_1).__module__}.{type(r_s_t_table_1).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_1) == 0
    r_s_t_table_0.render(ignore_empty=r_s_t_table_0, latex_tablecolumns=set_0)

@pytest.mark.xfail(strict=True)
def test_case_50():
    str_0 = 'o'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_0 = r_s_t_table_0.render(r_s_t_document_0, str_0, ignore_empty=r_s_t_table_0)
    assert r_s_t_document_0.document == '\n.. table:: o\n    :class: longtable\n\n    +-----+\n    | o   |\n    +=====+\n\n\n'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTDocument'
    assert var_0.document == '\n.. table:: o\n    :class: longtable\n\n    +-----+\n    | o   |\n    +=====+\n\n\n'
    assert var_0.newline == '\n'
    assert var_0.default_indent == '    '
    r_s_t_document_0.add_figure(var_0, r_s_t_table_0, var_0, target=r_s_t_document_0)

def test_case_51():
    str_0 = 'o'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_topic(str_0, str_0)
    assert r_s_t_document_0.document == '\n.. sidebar:: o\n\n    o\n\n'

@pytest.mark.xfail(strict=True)
def test_case_52():
    str_0 = 'd'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == '* d\n\n'
    var_1 = r_s_t_document_0.add_sidebar(str_0, str_0)
    assert r_s_t_document_0.document == '* d\n\n\n.. sidebar:: d\n\n    d\n\n'
    r_s_t_document_0.add_row(convert_to_str=r_s_t_document_0)

def test_case_53():
    str_0 = '\n        Given a networkX graph of file hierarchy, comput the positions of all nodes of the\n        graph (i.e., groups and datasets) in a hierarchical layout\n\n        :param graph: Network X graph of file objects\n\n        :return: Dictionary where the keys are the names of the nodes in the graph and the values are\n                 tuples with the floating point x and y coordinates for that node.\n        '
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_0 = r_s_t_table_0.render(r_s_t_document_0, str_0, str_0, ignore_empty=r_s_t_table_0)
    assert r_s_t_document_0.document == '\n.. table:: \n        Given a networkX graph of file hierarchy, comput the positions of all nodes of the\n        graph (i.e., groups and datasets) in a hierarchical layout\n\n        :param graph: Network X graph of file objects\n\n        :return: Dictionary where the keys are the names of the nodes in the graph and the values are\n                 tuples with the floating point x and y coordinates for that node.\n        \n    :class: \n        Given a networkX graph of file hierarchy, comput the positions of all nodes of the\n        graph (i.e., groups and datasets) in a hierarchical layout\n\n        :param graph: Network X graph of file objects\n\n        :return: Dictionary where the keys are the names of the nodes in the graph and the values are\n                 tuples with the floating point x and y coordinates for that node.\n        \n\nn    |    |     |     |     |     |     |     |     |     | G   | i   | v   | e   | n   |     | a   |     | n   | e   | t   | w   | o   | r   | k   | X   |     | g   | r   | a   | p   | h   |     | o   | f   |     | f   | i   | l   | e   |     | h   | i   | e   | r   | a   | r   | c   | h   | y   | ,   |     | c   | o   | m   | p   | u   | t   |     | t   | h   | e   |     | p   | o   | s   | i   | t   | i   | o   | n   | s   |     | o   | f   |     | a   | l   | l   |     | n   | o   | d   | e   | s   |     | o   | f   |     | t   | h   | e   |    |     |     |     |     |     |     |     |     | g   | r   | a   | p   | h   |     | (   | i   | .   | e   | .   | ,   |     | g   | r   | o   | u   | p   | s   |     | a   | n   | d   |     | d   | a   | t   | a   | s   | e   | t   | s   | )   |     | i   | n   |     | a   |     | h   | i   | e   | r   | a   | r   | c   | h   | i   | c   | a   | l   |     | l   | a   | y   | o   | u   | t   |    |    |     |     |     |     |     |     |     |     | :   | p   | a   | r   | a   | m   |     | g   | r   | a   | p   | h   | :   |     | N   | e   | t   | w   | o   | r   | k   |     | X   |     | g   | r   | a   | p   | h   |     | o   | f   |     | f   | i   | l   | e   |     | o   | b   | j   | e   | c   | t   | s   |    |    |     |     |     |     |     |     |     |     | :   | r   | e   | t   | u   | r   | n   | :   |     | D   | i   | c   | t   | i   | o   | n   | a   | r   | y   |     | w   | h   | e   | r   | e   |     | t   | h   | e   |     | k   | e   | y   | s   |     | a   | r   | e   |     | t   | h   | e   |     | n   | a   | m   | e   | s   |     | o   | f   |     | t   | h   | e   |     | n   | o   | d   | e   | s   |     | i   | n   |     | t   | h   | e   |     | g   | r   | a   | p   | h   |     | a   | n   | d   |     | t   | h   | e   |     | v   | a   | l   | u   | e   | s   |     | a   | r   | e   |    |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     | t   | u   | p   | l   | e   | s   |     | w   | i   | t   | h   |     | t   | h   | e   |     | f   | l   | o   | a   | t   | i   | n   | g   |     | p   | o   | i   | n   | t   |     | x   |     | a   | n   | d   |     | y   |     | c   | o   | o   | r   | d   | i   | n   | a   | t   | e   | s   |     | f   | o   | r   |     | t   | h   | a   | t   |     | n   | o   | d   | e   | .   |    |     |     |     |     |     |     |     |     |\n    |    |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |    |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |    |    |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |    |    |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |    |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |    |     |     |     |     |     |     |     |     |\nn\n\n'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTDocument'
    assert var_0.document == '\n.. table:: \n        Given a networkX graph of file hierarchy, comput the positions of all nodes of the\n        graph (i.e., groups and datasets) in a hierarchical layout\n\n        :param graph: Network X graph of file objects\n\n        :return: Dictionary where the keys are the names of the nodes in the graph and the values are\n                 tuples with the floating point x and y coordinates for that node.\n        \n    :class: \n        Given a networkX graph of file hierarchy, comput the positions of all nodes of the\n        graph (i.e., groups and datasets) in a hierarchical layout\n\n        :param graph: Network X graph of file objects\n\n        :return: Dictionary where the keys are the names of the nodes in the graph and the values are\n                 tuples with the floating point x and y coordinates for that node.\n        \n\nn    |    |     |     |     |     |     |     |     |     | G   | i   | v   | e   | n   |     | a   |     | n   | e   | t   | w   | o   | r   | k   | X   |     | g   | r   | a   | p   | h   |     | o   | f   |     | f   | i   | l   | e   |     | h   | i   | e   | r   | a   | r   | c   | h   | y   | ,   |     | c   | o   | m   | p   | u   | t   |     | t   | h   | e   |     | p   | o   | s   | i   | t   | i   | o   | n   | s   |     | o   | f   |     | a   | l   | l   |     | n   | o   | d   | e   | s   |     | o   | f   |     | t   | h   | e   |    |     |     |     |     |     |     |     |     | g   | r   | a   | p   | h   |     | (   | i   | .   | e   | .   | ,   |     | g   | r   | o   | u   | p   | s   |     | a   | n   | d   |     | d   | a   | t   | a   | s   | e   | t   | s   | )   |     | i   | n   |     | a   |     | h   | i   | e   | r   | a   | r   | c   | h   | i   | c   | a   | l   |     | l   | a   | y   | o   | u   | t   |    |    |     |     |     |     |     |     |     |     | :   | p   | a   | r   | a   | m   |     | g   | r   | a   | p   | h   | :   |     | N   | e   | t   | w   | o   | r   | k   |     | X   |     | g   | r   | a   | p   | h   |     | o   | f   |     | f   | i   | l   | e   |     | o   | b   | j   | e   | c   | t   | s   |    |    |     |     |     |     |     |     |     |     | :   | r   | e   | t   | u   | r   | n   | :   |     | D   | i   | c   | t   | i   | o   | n   | a   | r   | y   |     | w   | h   | e   | r   | e   |     | t   | h   | e   |     | k   | e   | y   | s   |     | a   | r   | e   |     | t   | h   | e   |     | n   | a   | m   | e   | s   |     | o   | f   |     | t   | h   | e   |     | n   | o   | d   | e   | s   |     | i   | n   |     | t   | h   | e   |     | g   | r   | a   | p   | h   |     | a   | n   | d   |     | t   | h   | e   |     | v   | a   | l   | u   | e   | s   |     | a   | r   | e   |    |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     | t   | u   | p   | l   | e   | s   |     | w   | i   | t   | h   |     | t   | h   | e   |     | f   | l   | o   | a   | t   | i   | n   | g   |     | p   | o   | i   | n   | t   |     | x   |     | a   | n   | d   |     | y   |     | c   | o   | o   | r   | d   | i   | n   | a   | t   | e   | s   |     | f   | o   | r   |     | t   | h   | a   | t   |     | n   | o   | d   | e   | .   |    |     |     |     |     |     |     |     |     |\n    |    |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |    |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |    |    |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |    |    |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |    |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |    |     |     |     |     |     |     |     |     |\nn\n\n'
    assert var_0.newline == '\n'
    assert var_0.default_indent == '    '
    var_1 = r_s_t_table_0.add_row(str_0)
    with pytest.raises(ValueError):
        r_s_t_document_0.add_figure(var_0, r_s_t_table_0, r_s_t_table_0, align=var_0, target=r_s_t_document_0)

@pytest.mark.xfail(strict=True)
def test_case_54():
    str_0 = 'o'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    r_s_t_table_0 = r_s_t_document_0.add_topic(r_s_t_document_0, str_0)
    assert r_s_t_document_0.document == '\n.. sidebar:: o\n\n    \n    .. sidebar:: o\n    \n\n\n'
    r_s_t_table_0.add_row(str_0)

def test_case_55():
    str_0 = 'op'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == '* o\n* p\n\n'
    var_1 = r_s_t_document_0.add_sidebar(r_s_t_document_0, str_0, var_0)
    assert r_s_t_document_0.document == '* o\n* p\n\n\n.. sidebar:: op\n\n    * o\n    * p\n    \n    \n    .. sidebar:: op\n    \n\n\n'
    var_2 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == '* o\n* p\n\n\n.. sidebar:: op\n\n    * o\n    * p\n    \n    \n    .. sidebar:: op\n    \n\n\n.. code-block:: yaml\n    :linenos:\n\n    op\n    ...\n\n\n'
    var_3 = r_s_t_document_0.add_figure(str_0, legend=var_2, height=var_2)
    assert r_s_t_document_0.document == '* o\n* p\n\n\n.. sidebar:: op\n\n    * o\n    * p\n    \n    \n    .. sidebar:: op\n    \n\n\n.. code-block:: yaml\n    :linenos:\n\n    op\n    ...\n\n\n\n.. figure:: op\n\n\n'
    var_4 = r_s_t_document_0.add_sidebar(str_0, str_0)
    assert r_s_t_document_0.document == '* o\n* p\n\n\n.. sidebar:: op\n\n    * o\n    * p\n    \n    \n    .. sidebar:: op\n    \n\n\n.. code-block:: yaml\n    :linenos:\n\n    op\n    ...\n\n\n\n.. figure:: op\n\n\n\n.. sidebar:: op\n\n    op\n\n'
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_5 = r_s_t_table_0.render(r_s_t_document_0, str_0, ignore_empty=r_s_t_table_0)
    assert r_s_t_document_0.document == '* o\n* p\n\n\n.. sidebar:: op\n\n    * o\n    * p\n    \n    \n    .. sidebar:: op\n    \n\n\n.. code-block:: yaml\n    :linenos:\n\n    op\n    ...\n\n\n\n.. figure:: op\n\n\n\n.. sidebar:: op\n\n    op\n\n\n.. table:: op\n    :class: longtable\n\n    +-----+-----+\n    | o   | p   |\n    +=====+=====+\n\n\n'
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTDocument'
    assert var_5.document == '* o\n* p\n\n\n.. sidebar:: op\n\n    * o\n    * p\n    \n    \n    .. sidebar:: op\n    \n\n\n.. code-block:: yaml\n    :linenos:\n\n    op\n    ...\n\n\n\n.. figure:: op\n\n\n\n.. sidebar:: op\n\n    op\n\n\n.. table:: op\n    :class: longtable\n\n    +-----+-----+\n    | o   | p   |\n    +=====+=====+\n\n\n'
    assert var_5.newline == '\n'
    assert var_5.default_indent == '    '
    var_6 = r_s_t_document_0.spec_to_yaml(var_3)
    assert var_6 == 'null\n...\n'
    var_7 = r_s_t_table_0.add_row(str_0, var_5)
    assert len(r_s_t_table_0) == 1
    with pytest.raises(ValueError):
        r_s_t_document_0.add_figure(var_5, r_s_t_table_0, r_s_t_table_0, align=str_0, target=r_s_t_document_0)

def test_case_56():
    bytes_0 = b'\xf3\x01'
    bool_0 = True
    r_s_t_table_0 = module_0.RSTTable(bool_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_0 = r_s_t_table_0.render(latex_tablecolumns=bytes_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTDocument'
    assert var_0.document == ''
    assert var_0.newline == '\n'
    assert var_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_1 = r_s_t_table_0.add_row(bytes_0, bytes_0, bytes_0)
    assert len(r_s_t_table_0) == 1
    var_2 = r_s_t_table_0.__len__()
    with pytest.raises(ValueError):
        r_s_t_table_0.set_cell(r_s_t_table_0, bool_0, var_1)

def test_case_57():
    str_0 = 'o'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_sidebar(str_0, str_0, str_0)
    assert r_s_t_document_0.document == '\n.. sidebar:: o\n    :subtitle: o\n\n    o\n\n'
    var_1 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == '\n.. sidebar:: o\n    :subtitle: o\n\n    o\n\n* o\n\n'
    var_2 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == '\n.. sidebar:: o\n    :subtitle: o\n\n    o\n\n* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n'
    var_3 = r_s_t_document_0.add_sidebar(str_0, str_0)
    assert r_s_t_document_0.document == '\n.. sidebar:: o\n    :subtitle: o\n\n    o\n\n* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n\n.. sidebar:: o\n\n    o\n\n'
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_4 = r_s_t_table_0.render(r_s_t_document_0, str_0, ignore_empty=r_s_t_table_0)
    assert r_s_t_document_0.document == '\n.. sidebar:: o\n    :subtitle: o\n\n    o\n\n* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n\n.. sidebar:: o\n\n    o\n\n\n.. table:: o\n    :class: longtable\n\n    +-----+\n    | o   |\n    +=====+\n\n\n'
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTDocument'
    assert var_4.document == '\n.. sidebar:: o\n    :subtitle: o\n\n    o\n\n* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n\n.. sidebar:: o\n\n    o\n\n\n.. table:: o\n    :class: longtable\n\n    +-----+\n    | o   |\n    +=====+\n\n\n'
    assert var_4.newline == '\n'
    assert var_4.default_indent == '    '
    var_5 = r_s_t_table_0.add_row(str_0)
    with pytest.raises(ValueError):
        r_s_t_document_0.add_figure(var_4, r_s_t_table_0, r_s_t_table_0, align=var_4, target=r_s_t_document_0)

@pytest.mark.xfail(strict=True)
def test_case_58():
    str_0 = ''
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    r_s_t_table_0.render(title=r_s_t_table_0, ignore_empty=str_0, table_ref=r_s_t_table_0)

@pytest.mark.xfail(strict=True)
def test_case_59():
    str_0 = ' '
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    r_s_t_table_0.render(r_s_t_document_0, str_0, widths=str_0, ignore_empty=r_s_t_table_0)

@pytest.mark.xfail(strict=True)
def test_case_60():
    str_0 = 'o'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == '* o\n\n'
    var_1 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == '* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n'
    var_2 = r_s_t_document_0.add_sidebar(str_0, str_0)
    assert r_s_t_document_0.document == '* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n\n.. sidebar:: o\n\n    o\n\n'
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_3 = r_s_t_table_0.add_row()
    assert len(r_s_t_table_0) == 1
    var_4 = r_s_t_table_0.render(r_s_t_document_0, str_0, ignore_empty=r_s_t_table_0)
    assert r_s_t_document_0.document == '* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n\n.. sidebar:: o\n\n    o\n\n\n.. table:: o\n    :class: longtable\n\n    +-----+\n    | o   |\n    +=====+\n    |     |\n    +-----+\n\n\n'
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTDocument'
    assert var_4.document == '* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n\n.. sidebar:: o\n\n    o\n\n\n.. table:: o\n    :class: longtable\n\n    +-----+\n    | o   |\n    +=====+\n    |     |\n    +-----+\n\n\n'
    assert var_4.newline == '\n'
    assert var_4.default_indent == '    '
    var_5 = var_4.add_latex_clearpage()
    assert r_s_t_document_0.document == '* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n\n.. sidebar:: o\n\n    o\n\n\n.. table:: o\n    :class: longtable\n\n    +-----+\n    | o   |\n    +=====+\n    |     |\n    +-----+\n\n\n\n.. raw:: latex\n\n    \\clearpage \\newpage\n\n'
    assert var_4.document == '* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n\n.. sidebar:: o\n\n    o\n\n\n.. table:: o\n    :class: longtable\n\n    +-----+\n    | o   |\n    +=====+\n    |     |\n    +-----+\n\n\n\n.. raw:: latex\n\n    \\clearpage \\newpage\n\n'
    var_6 = r_s_t_table_0.add_row(str_0)
    var_4.add_spec(r_s_t_document_0)

def test_case_61():
    str_0 = 'o'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_list(str_0)
    assert r_s_t_document_0.document == '* o\n\n'
    var_1 = r_s_t_document_0.add_spec(str_0)
    assert r_s_t_document_0.document == '* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n'
    var_2 = r_s_t_document_0.add_figure(str_0, legend=var_1, height=var_1)
    assert r_s_t_document_0.document == '* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n\n.. figure:: o\n\n\n'
    r_s_t_table_0 = module_0.RSTTable(str_0)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    var_3 = r_s_t_table_0.render(r_s_t_document_0, str_0, var_2, ignore_empty=r_s_t_table_0)
    assert r_s_t_document_0.document == '* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n\n.. figure:: o\n\n\n\n.. table:: o\n\n    +-----+\n    | o   |\n    +=====+\n\n\n'
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTDocument'
    assert var_3.document == '* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n\n.. figure:: o\n\n\n\n.. table:: o\n\n    +-----+\n    | o   |\n    +=====+\n\n\n'
    assert var_3.newline == '\n'
    assert var_3.default_indent == '    '
    var_4 = var_3.add_latex_clearpage()
    assert r_s_t_document_0.document == '* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n\n.. figure:: o\n\n\n\n.. table:: o\n\n    +-----+\n    | o   |\n    +=====+\n\n\n\n.. raw:: latex\n\n    \\clearpage \\newpage\n\n'
    assert var_3.document == '* o\n\n.. code-block:: yaml\n    :linenos:\n\n    o\n    ...\n\n\n\n.. figure:: o\n\n\n\n.. table:: o\n\n    +-----+\n    | o   |\n    +=====+\n\n\n\n.. raw:: latex\n\n    \\clearpage \\newpage\n\n'
    var_5 = r_s_t_table_0.add_row(str_0)
    with pytest.raises(ValueError):
        r_s_t_document_0.add_figure(var_3, r_s_t_table_0, r_s_t_table_0, align=str_0, target=r_s_t_document_0)

def test_case_62():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_1, bool_1]
    list_1 = [list_0]
    r_s_t_table_0 = module_0.RSTTable(list_1)
    assert f'{type(r_s_t_table_0).__module__}.{type(r_s_t_table_0).__qualname__}' == 'hdmf_docutils.doctools.rst.RSTTable'
    assert len(r_s_t_table_0) == 0
    with pytest.raises(ValueError):
        r_s_t_table_0.set_cell(bool_0, bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_63():
    str_0 = 'op'
    r_s_t_document_0 = module_0.RSTDocument()
    assert r_s_t_document_0.document == ''
    assert r_s_t_document_0.newline == '\n'
    assert r_s_t_document_0.default_indent == '    '
    assert module_0.RSTDocument.ADMONITIONS == ['attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning']
    assert module_0.RSTDocument.ALIGN == ['top', 'middle', 'bottom', 'left', 'center', 'right']
    var_0 = r_s_t_document_0.add_label(str_0)
    assert r_s_t_document_0.document == '.. _op:\n\n'
    list_0 = [r_s_t_document_0, r_s_t_document_0, str_0, r_s_t_document_0]
    bool_0 = False
    tuple_0 = (var_0, list_0, list_0, bool_0)
    var_1 = r_s_t_document_0.add_list(tuple_0, item_symbol=bool_0)
    var_0.add_spec(var_1)