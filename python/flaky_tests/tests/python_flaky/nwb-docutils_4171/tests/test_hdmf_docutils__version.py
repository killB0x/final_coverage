# Automatically generated by Pynguin.
import pytest
import hdmf_docutils._version as module_0
import re as module_1
import builtins as module_2

def test_case_0():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1

def test_case_1():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == '+'
    with pytest.raises(AssertionError):
        module_0.run_command(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    var_0 = module_0.git_get_keywords(bool_0)
    assert len(module_0.HANDLERS) == 1
    module_1.search(var_0, bool_0, bool_0)

def test_case_3():
    none_type_0 = None
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    module_0.git_pieces_from_vcs(var_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.git_get_keywords(bool_0)
    module_1.subn(bool_0, bool_0, var_1)

def test_case_6():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_2.object()
    float_0 = -373.56734
    var_2 = module_0.get_keywords()
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(var_0, float_0, var_0)

def test_case_7():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.render(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.render(var_0, var_0)
    module_0.git_get_keywords(var_1)

def test_case_9():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == '+'

@pytest.mark.xfail(strict=True)
def test_case_10():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.render(var_0, var_0)
    var_2 = module_2.BaseException()
    module_0.git_versions_from_keywords(var_1, var_1, var_2)

def test_case_11():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.render(var_0, var_0)
    var_2 = module_0.plus_or_dot(var_1)
    assert var_2 == '+'
    list_0 = [var_1, var_2, var_0]
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_pieces_from_vcs(var_1, var_2, list_0)

def test_case_12():
    bytes_0 = b'\xcd0\xa0=\xd7/\xc6'
    var_0 = module_1.escape(bytes_0)
    with pytest.raises(module_0.NotThisMethod):
        module_0.versions_from_parentdir(var_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.render(var_0, var_0)
    var_2 = module_0.plus_or_dot(var_1)
    assert var_2 == '+'
    var_3 = module_0.versions_from_parentdir(var_2, var_2, var_2)
    var_1.__bool__()

@pytest.mark.xfail(strict=True)
def test_case_14():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.render(var_0, var_0)
    var_2 = module_0.plus_or_dot(var_1)
    assert var_2 == '+'
    list_0 = [var_1, var_2, var_0]
    module_0.run_command(list_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    float_0 = -2462.0
    not_this_method_0 = module_0.NotThisMethod()
    assert len(module_0.HANDLERS) == 1
    list_0 = []
    var_0 = module_0.get_config()
    assert var_0.VCS == 'git'
    assert var_0.style == 'pep440-post'
    assert var_0.tag_prefix == ''
    assert var_0.parentdir_prefix == 'None'
    assert var_0.versionfile_source == 'hdmf_docutils/_version.py'
    var_1 = var_0.__dir__()
    var_2 = module_0.run_command(list_0, float_0, var_0, float_0)
    var_3 = module_0.run_command(list_0, float_0, hide_stderr=float_0)
    versioneer_config_0 = module_0.VersioneerConfig()
    module_0.render(float_0, list_0)