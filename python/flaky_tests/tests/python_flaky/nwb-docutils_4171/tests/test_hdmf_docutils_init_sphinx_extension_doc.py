# Automatically generated by Pynguin.
import pytest
import hdmf_docutils.init_sphinx_extension_doc as module_0
import re as module_1

def test_case_0():
    var_0 = module_0.define_cl_args()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'argparse.ArgumentParser'
    assert var_0.description == 'Create format specification SPHINX documentation for an NWB extension.'
    assert var_0.argument_default is None
    assert var_0.prefix_chars == '-'
    assert var_0.conflict_handler == 'error'
    assert var_0.prog == 'pynguin'
    assert var_0.usage is None
    assert var_0.epilog == '\n Copyright: Lawrence Berkeley National Laboratory: 2017'
    assert var_0.fromfile_prefix_chars is None
    assert var_0.add_help is True
    assert var_0.allow_abbrev is True
    assert var_0.exit_on_error is True

def test_case_1():
    var_0 = module_0.get_credits_rst()
    assert var_0 == '*******\nCredits\n*******\n\n.. note::\n    Add the credits for your extension here\n\nAcknowledgments\n===============\n\n\nAuthors\n=======\n\n\n*****\nLegal\n*****\n\nLicense\n=======\n'
    with pytest.raises(ValueError):
        module_0.bool_type(var_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.bool_type(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    var_0 = module_0.get_theme_overwrites()
    assert var_0 == '/* override table width restrictions */\n@media screen and (min-width: 767px) {\n\n   .wy-table-responsive table td {\n      /* !important prevents the common CSS stylesheets from overriding\n         this as on RTD they are loaded after this stylesheet */\n      white-space: normal !important;\n   }\n\n   .wy-table-responsive {\n      overflow: visible !important;\n   }\n}\n'
    var_1 = module_0.get_index_rst(var_0, var_0)
    assert var_1 == 'Specification for the /* override table width restrictions */\n@media screen and (min-width: 767px) {\n\n   .wy-table-responsive table td {\n      /* !important prevents the common CSS stylesheets from overriding\n         this as on RTD they are loaded after this stylesheet */\n      white-space: normal !important;\n   }\n\n   .wy-table-responsive {\n      overflow: visible !important;\n   }\n}\n extension\n==================================\n\n.. toctree::\n    :numbered:\n    :maxdepth: 3\n    :caption: Extension Specification\n\n    /* override table width restrictions */\n@media screen and (min-width: 767px) {\n\n   .wy-table-responsive table td {\n      /* !important prevents the common CSS stylesheets from overriding\n         this as on RTD they are loaded after this stylesheet */\n      white-space: normal !important;\n   }\n\n   .wy-table-responsive {\n      overflow: visible !important;\n   }\n}\n\n\n.. toctree::\n    :maxdepth: 2\n    :caption: History & Legal\n\n    \n    credits\n\nIndices and tables\n==================\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n'
    module_0.init_sphinx(var_0, var_0, var_0, var_0, var_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_0.get_theme_overwrites()
    assert var_0 == '/* override table width restrictions */\n@media screen and (min-width: 767px) {\n\n   .wy-table-responsive table td {\n      /* !important prevents the common CSS stylesheets from overriding\n         this as on RTD they are loaded after this stylesheet */\n      white-space: normal !important;\n   }\n\n   .wy-table-responsive {\n      overflow: visible !important;\n   }\n}\n'
    var_1 = module_0.get_custom_settings(var_0, namespace_filename=var_0, output_master=var_0, output_src_master=var_0, output_clean_if_old_hash=var_0, show_hierarchy_plots=var_0, generate_src_files=var_0, show_table_titles=var_0, table_depth_char=var_0)
    module_0.init_sphinx(var_0, var_0, var_0, var_0, var_1, var_1, var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_0.init_sphinx(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_0.get_credits_rst()
    assert var_0 == '*******\nCredits\n*******\n\n.. note::\n    Add the credits for your extension here\n\nAcknowledgments\n===============\n\n\nAuthors\n=======\n\n\n*****\nLegal\n*****\n\nLicense\n=======\n'
    module_0.write_theme_overwrites(var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'rygD!xcBx3a]b$]tXp#E'
    module_0.write_custom_description(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    var_0 = module_0.get_readme(none_type_0, none_type_0)
    assert var_0 == '\n# Getting started\n\n## Generate Documentation\n\n* To generate the HTML version of your documentation run ``make html``.\n* The [hdmf-docutils](https://pypi.org/project/hdmf-docutils/) package must be installed.\n\n## Customize Your Extension Documentation\n\n* **extension description**\n  * Edit ``source/None`` to describe your extension.\n\n* **release notes**\n  * Edit ``source/None`` to document improvements and fixes of your extension.\n\n* **documentation build settings**\n  * Edit ``source/conf.py`` to customize your extension documentation configuration.\n  * Edit ``source/conf_doc_autogen.py`` to customize the format documentation auto-generation based on\n    the YAML specification files.\n\n\n# Overview\n\nThe specification documentation uses Sphinx [http://www.sphinx-doc.org/en/stable/index.html](http://www.sphinx-doc.org/en/stable/index.html)\n\n## Rebuilding All\n\nTo rebuild the full documentation in html, latex, and PDF simply run:\n\n```\nmake fulldoc\n```\n\nThis is a convenience function that is equivalent to:\n\n```\nmake allclean\nmake apidoc\nmake html\nmake latexpdf\n```\n\n## Generating the format documentation from the format spec\n\nThe format documentation is auto-generated from the format specification (YAML) sources via:\n\n```\nmake apidoc\n```\n\nThis will invoke the executable:\n\n```\nhdmf_generate_format_docs\n```\n\nThe script automatically generates a series of .rst, .png, and .pdf files that are stored in the folder `source/format_auto_docs`. The generated .rst files are included in `source/format.rst` and the png and pdf files are used as figures in the autogenerated docs.\n\nThe folder `source/format_auto_docs` is reserved for autogenerated files, i.e., files in the folder should not be added or edited by hand as they will be deleted and rebuilt during the full built of the documentation.\n\nBy default the Sphinx configuration is setup to always regenerate the sources whenever the docs are being built (see next section). This behavior can be customized via the `spec_doc_rebuild_always` parameter in `source/conf.py`\n\n## Building a specific document type\n\nTo build the documentation, run:\n\n```\nmake <doctype>\n```\n\nwhere `<doctype>` is, e.g., `latexpdf`, `html`, `singlehtml`, or `man`. For a complete list of supported doc-types, see:\n\n```\nmake help\n```\n\n## Cleaning up\n\n`make clean` cleans up all builds of the documentation located in `_build`.\n\n`make allclean` cleans up all builds of the documentation located in `_build` as well as all autogenerated sources stored in `source/format_auto_docs`.\n\n## Configuration\n\nThe build of the documentation can be customized via a broad range of Sphinx options in:\n\n`source/conf_doc_autogen.py`\n\nIn addition to standard Sphinx options, there are a number of additional options used to customize the content and structure of the autogenerated documents, e.g.:\n\n* `spec_show_yaml_src` - Boolean indicating whether the YAML sources should be included for the different Neurodata types\n* `spec_generate_src_file` - Boolean indicating whether the YAML sources of the neurodata_types should be rendered in a separate section (True) or in the same location as the main documentation\n* `spec_show_hierarchy_plots` - Boolean indicating whether we should generate and show figures of the hierarchy defined by the specifications as part of the documentation\n* `spec_file_per_type` - Boolean indicating whether we should generate separate .inc reStructuredText for each neurodata_type (True)\nor should all text be added to the main file (False)\n* `spec_show_subgroups_in_tables` - Should subgroups of the main groups be rendered in the table as well. Usually this is disabled since groups are rendered as separate sections in the text\n* `spec_appreviate_main_object_doc_in_tables` - Abbreviate the documentation of the main object for which a table is rendered in the table. This is commonly set to True as doc of the main object is already rendered as the main intro for the section describing the object\n* `spec_show_title_for_tables` - Add a title for the table showing the specifications.\n* `spec_show_subgroups_in_seperate_table` - Should top-level subgroups be listed in a separate table or as part of the main dataset and attributes table\n* `spec_table_depth_char` - Char to be used as prefix to indicate the depth of an object in the specification hierarchy. NOTE: The char used should be supported by LaTeX.\n* `spec_add_latex_clearpage_after_ndt_sections` - Add a LaTeX clearpage after each main section describing a neurodata_type. This helps in LaTeX to keep the ordering of figures, tables, and code blocks consistent in particular when the hierarchy_plots are included.\n* `spec_resolve_type_inc` - Resolve includes to always show the full list of objects that are part of a type (True) or to show only the parts that are actually new to a current type while only linking to base types (False)\n\nIn addition, the location of the input format specification can be customized as follows:\n\n* `spec_input_spec_dir` - Directory where the YAML files for the namespace to be documented are located\n* `spec_input_namespace_filename` - Name of the YAML file with the specification of the Namespace to be documented\n* `spec_input_default_namespace` - Name of the default namespace in the file\n\nFinally, the name and location of output files can be customized as follows:\n\n* `spec_output_dir` - Directory where the autogenerated files should be stored\n* `spec_output_master_filename` - Name of the master .rst file that includes all the autogenerated docs\n* `spec_output_doc_filename` - Name of the file where the main documentation goes\n* `spec_output_src_filename` - Name of the file where the sources of the format spec go. NOTE: This file is only generated if `spec_generate_src_file` is enabled\n* `spec_output_doc_type_hierarchy_filename` - Name of the file containing the type hierarchy. (Included in `spec_output_doc_filename`)\n\nIn the regular Sphinx `source/conf.py` file, we can then also set:\n\n* `spec_doc_rebuild_always` - Boolean to define whether to always rebuild the source docs from YAML when doing a regular build of the sources (e.g., via `make html`) even if the folder with the source files already exists\n'
    module_0.init_sphinx(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

def test_case_9():
    var_0 = module_0.get_theme_overwrites()
    assert var_0 == '/* override table width restrictions */\n@media screen and (min-width: 767px) {\n\n   .wy-table-responsive table td {\n      /* !important prevents the common CSS stylesheets from overriding\n         this as on RTD they are loaded after this stylesheet */\n      white-space: normal !important;\n   }\n\n   .wy-table-responsive {\n      overflow: visible !important;\n   }\n}\n'

def test_case_10():
    var_0 = module_0.get_credits_rst()
    assert var_0 == '*******\nCredits\n*******\n\n.. note::\n    Add the credits for your extension here\n\nAcknowledgments\n===============\n\n\nAuthors\n=======\n\n\n*****\nLegal\n*****\n\nLicense\n=======\n'

def test_case_11():
    var_0 = module_0.get_makefile()
    assert var_0 == '\n# Makefile for Sphinx documentation\n#\n\n# You can set these variables from the command line.\nSPHINXOPTS     =\nSPHINXBUILD    = sphinx-build\nSPHINXAPIDOC   = sphinx-apidoc\nPAPER          =\nBUILDDIR       = build\nSRCDIR         = ../src\nRSTDIR         = source\nCONFDIR        = $(PWD)/source\n\n\n# Internal variables.\nPAPEROPT_a4     = -D latex_paper_size=a4\nPAPEROPT_letter = -D latex_paper_size=letter\nALLSPHINXOPTS   = -d $(BUILDDIR)/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) source\n# the i18n builder cannot share the environment and doctrees with the others\nI18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .\n\n.PHONY: help clean html dirhtml singlehtml pickle json htmlhelp qthelp devhelp epub latex latexpdf text man changes linkcheck doctest gettext fulldoc allclean\n\nhelp:\n\t@echo "To update documentation sources from the format specification please use \\`make apidoc\'"\n\t@echo ""\n\t@echo "To build the documentation please use \\`make <target>\' where <target> is one of"\n\t@echo "  fulldoc    to rebuild the apidoc, html, and latexpdf all at once"\n\t@echo "  html       to make standalone HTML files"\n\t@echo "  dirhtml    to make HTML files named index.html in directories"\n\t@echo "  singlehtml to make a single large HTML file"\n\t@echo "  pickle     to make pickle files"\n\t@echo "  json       to make JSON files"\n\t@echo "  htmlhelp   to make HTML files and a HTML help project"\n\t@echo "  qthelp     to make HTML files and a qthelp project"\n\t@echo "  devhelp    to make HTML files and a Devhelp project"\n\t@echo "  epub       to make an epub"\n\t@echo "  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter"\n\t@echo "  latexpdf   to make LaTeX files and run them through pdflatex"\n\t@echo "  text       to make text files"\n\t@echo "  man        to make manual pages"\n\t@echo "  texinfo    to make Texinfo files"\n\t@echo "  info       to make Texinfo files and run them through makeinfo"\n\t@echo "  gettext    to make PO message catalogs"\n\t@echo "  changes    to make an overview of all changed/added/deprecated items"\n\t@echo "  linkcheck  to check all external links for integrity"\n\t@echo "  doctest    to run all doctests embedded in the documentation (if enabled)"\n\t@echo "  apidoc     to to build RST from source code"\n\t@echo "  clean      to clean all documents built by Sphinx in _build"\n\t@echo "  allclean   to clean all autogenerated documents both from Sphinx and apidoc"\n\nallclean:\n\t-rm -rf $(BUILDDIR)/* $(RSTDIR)/modules.rst\n\t-rm $(RSTDIR)/_format_auto_docs/*.png\n\t-rm $(RSTDIR)/_format_auto_docs/*.pdf\n\t-rm $(RSTDIR)/_format_auto_docs/*.rst\n\t-rm $(RSTDIR)/_format_auto_docs/*.inc\n\nclean:\n\t-rm -rf $(BUILDDIR)/* $(RSTDIR)/modules.rst\n\nhtml:\n\t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html\n\t@echo\n\t@echo "Build finished. The HTML pages are in $(BUILDDIR)/html."\n\ndirhtml:\n\t$(SPHINXBUILD) -b dirhtml $(ALLSPHINXOPTS) $(BUILDDIR)/dirhtml\n\t@echo\n\t@echo "Build finished. The HTML pages are in $(BUILDDIR)/dirhtml."\n\nsinglehtml:\n\t$(SPHINXBUILD) -b singlehtml $(ALLSPHINXOPTS) $(BUILDDIR)/singlehtml\n\t@echo\n\t@echo "Build finished. The HTML page is in $(BUILDDIR)/singlehtml."\n\npickle:\n\t$(SPHINXBUILD) -b pickle $(ALLSPHINXOPTS) $(BUILDDIR)/pickle\n\t@echo\n\t@echo "Build finished; now you can process the pickle files."\n\njson:\n\t$(SPHINXBUILD) -b json $(ALLSPHINXOPTS) $(BUILDDIR)/json\n\t@echo\n\t@echo "Build finished; now you can process the JSON files."\n\nhtmlhelp:\n\t$(SPHINXBUILD) -b htmlhelp $(ALLSPHINXOPTS) $(BUILDDIR)/htmlhelp\n\t@echo\n\t@echo "Build finished; now you can run HTML Help Workshop with the" \t      ".hhp project file in $(BUILDDIR)/htmlhelp."\n\nqthelp:\n\t$(SPHINXBUILD) -b qthelp $(ALLSPHINXOPTS) $(BUILDDIR)/qthelp\n\t@echo\n\t@echo "Build finished; now you can run "qcollectiongenerator" with the" \t      ".qhcp project file in $(BUILDDIR)/qthelp, like this:"\n\t@echo "# qcollectiongenerator $(BUILDDIR)/qthelp/sample.qhcp"\n\t@echo "To view the help file:"\n\t@echo "# assistant -collectionFile $(BUILDDIR)/qthelp/sample.qhc"\n\ndevhelp:\n\t$(SPHINXBUILD) -b devhelp $(ALLSPHINXOPTS) $(BUILDDIR)/devhelp\n\t@echo\n\t@echo "Build finished."\n\t@echo "To view the help file:"\n\t@echo "# mkdir -p $$HOME/.local/share/devhelp/sample"\n\t@echo "# ln -s $(BUILDDIR)/devhelp $$HOME/.local/share/devhelp/sample"\n\t@echo "# devhelp"\n\nepub:\n\t$(SPHINXBUILD) -b epub $(ALLSPHINXOPTS) $(BUILDDIR)/epub\n\t@echo\n\t@echo "Build finished. The epub file is in $(BUILDDIR)/epub."\n\nlatex:\n\t$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex\n\t@echo\n\t@echo "Build finished; the LaTeX files are in $(BUILDDIR)/latex."\n\t@echo "Run \\`make\' in that directory to run these through (pdf)latex" \t      "(use \\`make latexpdf\' here to do that automatically)."\n\nlatexpdf:\n\t$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex\n\t@echo "Running LaTeX files through pdflatex..."\n\t$(MAKE) -C $(BUILDDIR)/latex all-pdf\n\t@echo "pdflatex finished; the PDF files are in $(BUILDDIR)/latex."\n\ntext:\n\t$(SPHINXBUILD) -b text $(ALLSPHINXOPTS) $(BUILDDIR)/text\n\t@echo\n\t@echo "Build finished. The text files are in $(BUILDDIR)/text."\n\nman:\n\t$(SPHINXBUILD) -b man $(ALLSPHINXOPTS) $(BUILDDIR)/man\n\t@echo\n\t@echo "Build finished. The manual pages are in $(BUILDDIR)/man."\n\ntexinfo:\n\t$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo\n\t@echo\n\t@echo "Build finished. The Texinfo files are in $(BUILDDIR)/texinfo."\n\t@echo "Run \\`make\' in that directory to run these through makeinfo" \t      "(use \\`make info\' here to do that automatically)."\n\ninfo:\n\t$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo\n\t@echo "Running Texinfo files through makeinfo..."\n\tmake -C $(BUILDDIR)/texinfo info\n\t@echo "makeinfo finished; the Info files are in $(BUILDDIR)/texinfo."\n\ngettext:\n\t$(SPHINXBUILD) -b gettext $(I18NSPHINXOPTS) $(BUILDDIR)/locale\n\t@echo\n\t@echo "Build finished. The message catalogs are in $(BUILDDIR)/locale."\n\nchanges:\n\t$(SPHINXBUILD) -b changes $(ALLSPHINXOPTS) $(BUILDDIR)/changes\n\t@echo\n\t@echo "The overview file is in $(BUILDDIR)/changes."\n\nlinkcheck:\n\t$(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck\n\t@echo\n\t@echo "Link check complete; look for any errors in the above output " \t      "or in $(BUILDDIR)/linkcheck/output.txt."\n\ndoctest:\n\t$(SPHINXBUILD) -b doctest $(ALLSPHINXOPTS) $(BUILDDIR)/doctest\n\t@echo "Testing of doctests in the sources finished, look at the " \t      "results in $(BUILDDIR)/doctest/output.txt."\n\napidoc:\n\tPYTHONPATH=$(CONFDIR):$(PYTHONPATH) nwb_generate_format_docs\n\t@echo\n\t@echo "Generate rst source files from NWB spec."\n\nfulldoc:\n\t$(MAKE) allclean\n\t@echo\n\t@echo "Rebuilding apidoc, html, latexpdf"\n\t$(MAKE) apidoc\n\t$(MAKE) html\n\t$(MAKE) latexpdf\n'

@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    module_0.write_custom_conf(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'f'
    var_0 = module_0.bool_type(str_0)
    assert var_0 is False
    var_1 = module_0.get_credits_rst()
    assert var_1 == '*******\nCredits\n*******\n\n.. note::\n    Add the credits for your extension here\n\nAcknowledgments\n===============\n\n\nAuthors\n=======\n\n\n*****\nLegal\n*****\n\nLicense\n=======\n'
    bool_0 = True
    module_0.write_makefile(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    module_0.write_credits_rst(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    var_0 = module_0.define_cl_args()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'argparse.ArgumentParser'
    assert var_0.description == 'Create format specification SPHINX documentation for an NWB extension.'
    assert var_0.argument_default is None
    assert var_0.prefix_chars == '-'
    assert var_0.conflict_handler == 'error'
    assert var_0.prog == 'pynguin'
    assert var_0.usage is None
    assert var_0.epilog == '\n Copyright: Lawrence Berkeley National Laboratory: 2017'
    assert var_0.fromfile_prefix_chars is None
    assert var_0.add_help is True
    assert var_0.allow_abbrev is True
    assert var_0.exit_on_error is True
    var_1 = module_0.get_index_rst(none_type_0, none_type_0, none_type_0)
    assert var_1 == 'Specification for the None extension\n==================================\n\n.. toctree::\n    :numbered:\n    :maxdepth: 3\n    :caption: Extension Specification\n\n    None\n\n.. toctree::\n    :maxdepth: 2\n    :caption: History & Legal\n\n    \n    credits\n\nIndices and tables\n==================\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n'
    module_0.write_format_rst(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    var_0 = module_0.get_readme(none_type_0, none_type_0)
    assert var_0 == '\n# Getting started\n\n## Generate Documentation\n\n* To generate the HTML version of your documentation run ``make html``.\n* The [hdmf-docutils](https://pypi.org/project/hdmf-docutils/) package must be installed.\n\n## Customize Your Extension Documentation\n\n* **extension description**\n  * Edit ``source/None`` to describe your extension.\n\n* **release notes**\n  * Edit ``source/None`` to document improvements and fixes of your extension.\n\n* **documentation build settings**\n  * Edit ``source/conf.py`` to customize your extension documentation configuration.\n  * Edit ``source/conf_doc_autogen.py`` to customize the format documentation auto-generation based on\n    the YAML specification files.\n\n\n# Overview\n\nThe specification documentation uses Sphinx [http://www.sphinx-doc.org/en/stable/index.html](http://www.sphinx-doc.org/en/stable/index.html)\n\n## Rebuilding All\n\nTo rebuild the full documentation in html, latex, and PDF simply run:\n\n```\nmake fulldoc\n```\n\nThis is a convenience function that is equivalent to:\n\n```\nmake allclean\nmake apidoc\nmake html\nmake latexpdf\n```\n\n## Generating the format documentation from the format spec\n\nThe format documentation is auto-generated from the format specification (YAML) sources via:\n\n```\nmake apidoc\n```\n\nThis will invoke the executable:\n\n```\nhdmf_generate_format_docs\n```\n\nThe script automatically generates a series of .rst, .png, and .pdf files that are stored in the folder `source/format_auto_docs`. The generated .rst files are included in `source/format.rst` and the png and pdf files are used as figures in the autogenerated docs.\n\nThe folder `source/format_auto_docs` is reserved for autogenerated files, i.e., files in the folder should not be added or edited by hand as they will be deleted and rebuilt during the full built of the documentation.\n\nBy default the Sphinx configuration is setup to always regenerate the sources whenever the docs are being built (see next section). This behavior can be customized via the `spec_doc_rebuild_always` parameter in `source/conf.py`\n\n## Building a specific document type\n\nTo build the documentation, run:\n\n```\nmake <doctype>\n```\n\nwhere `<doctype>` is, e.g., `latexpdf`, `html`, `singlehtml`, or `man`. For a complete list of supported doc-types, see:\n\n```\nmake help\n```\n\n## Cleaning up\n\n`make clean` cleans up all builds of the documentation located in `_build`.\n\n`make allclean` cleans up all builds of the documentation located in `_build` as well as all autogenerated sources stored in `source/format_auto_docs`.\n\n## Configuration\n\nThe build of the documentation can be customized via a broad range of Sphinx options in:\n\n`source/conf_doc_autogen.py`\n\nIn addition to standard Sphinx options, there are a number of additional options used to customize the content and structure of the autogenerated documents, e.g.:\n\n* `spec_show_yaml_src` - Boolean indicating whether the YAML sources should be included for the different Neurodata types\n* `spec_generate_src_file` - Boolean indicating whether the YAML sources of the neurodata_types should be rendered in a separate section (True) or in the same location as the main documentation\n* `spec_show_hierarchy_plots` - Boolean indicating whether we should generate and show figures of the hierarchy defined by the specifications as part of the documentation\n* `spec_file_per_type` - Boolean indicating whether we should generate separate .inc reStructuredText for each neurodata_type (True)\nor should all text be added to the main file (False)\n* `spec_show_subgroups_in_tables` - Should subgroups of the main groups be rendered in the table as well. Usually this is disabled since groups are rendered as separate sections in the text\n* `spec_appreviate_main_object_doc_in_tables` - Abbreviate the documentation of the main object for which a table is rendered in the table. This is commonly set to True as doc of the main object is already rendered as the main intro for the section describing the object\n* `spec_show_title_for_tables` - Add a title for the table showing the specifications.\n* `spec_show_subgroups_in_seperate_table` - Should top-level subgroups be listed in a separate table or as part of the main dataset and attributes table\n* `spec_table_depth_char` - Char to be used as prefix to indicate the depth of an object in the specification hierarchy. NOTE: The char used should be supported by LaTeX.\n* `spec_add_latex_clearpage_after_ndt_sections` - Add a LaTeX clearpage after each main section describing a neurodata_type. This helps in LaTeX to keep the ordering of figures, tables, and code blocks consistent in particular when the hierarchy_plots are included.\n* `spec_resolve_type_inc` - Resolve includes to always show the full list of objects that are part of a type (True) or to show only the parts that are actually new to a current type while only linking to base types (False)\n\nIn addition, the location of the input format specification can be customized as follows:\n\n* `spec_input_spec_dir` - Directory where the YAML files for the namespace to be documented are located\n* `spec_input_namespace_filename` - Name of the YAML file with the specification of the Namespace to be documented\n* `spec_input_default_namespace` - Name of the default namespace in the file\n\nFinally, the name and location of output files can be customized as follows:\n\n* `spec_output_dir` - Directory where the autogenerated files should be stored\n* `spec_output_master_filename` - Name of the master .rst file that includes all the autogenerated docs\n* `spec_output_doc_filename` - Name of the file where the main documentation goes\n* `spec_output_src_filename` - Name of the file where the sources of the format spec go. NOTE: This file is only generated if `spec_generate_src_file` is enabled\n* `spec_output_doc_type_hierarchy_filename` - Name of the file containing the type hierarchy. (Included in `spec_output_doc_filename`)\n\nIn the regular Sphinx `source/conf.py` file, we can then also set:\n\n* `spec_doc_rebuild_always` - Boolean to define whether to always rebuild the source docs from YAML when doing a regular build of the sources (e.g., via `make html`) even if the folder with the source files already exists\n'
    module_0.write_index_rst(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    module_0.write_readme(bool_0, bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    module_0.nwb_main()

@pytest.mark.xfail(strict=True)
def test_case_19():
    var_0 = module_1.purge()
    str_0 = 'Gn,gSET#qkdR5'
    var_1 = module_0.write_custom_release_notes(str_0, var_0, var_0)
    module_0.init_sphinx(var_1, var_1, var_1, var_0, str_0, var_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = "eI?'@Xn#4LF\\p\\`"
    var_0 = module_1.purge()
    var_1 = module_0.write_custom_description(str_0, var_0, var_0)
    module_0.init_sphinx(str_0, str_0, str_0, str_0, str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    var_0 = module_0.get_credits_rst()
    assert var_0 == '*******\nCredits\n*******\n\n.. note::\n    Add the credits for your extension here\n\nAcknowledgments\n===============\n\n\nAuthors\n=======\n\n\n*****\nLegal\n*****\n\nLicense\n=======\n'
    var_1 = module_0.get_index_rst(var_0, var_0, custom_release_notes=var_0)
    assert var_1 == 'Specification for the *******\nCredits\n*******\n\n.. note::\n    Add the credits for your extension here\n\nAcknowledgments\n===============\n\n\nAuthors\n=======\n\n\n*****\nLegal\n*****\n\nLicense\n=======\n extension\n==================================\n\n.. toctree::\n    :numbered:\n    :maxdepth: 3\n    :caption: Extension Specification\n\n    *******\nCredits\n*******\n\n.. note::\n    Add the credits for your extension here\n\nAcknowledgments\n===============\n\n\nAuthors\n=======\n\n\n*****\nLegal\n*****\n\nLicense\n=======\n\n\n.. toctree::\n    :maxdepth: 2\n    :caption: History & Legal\n\n    *******\nCredits\n*******\n\n\n    credits\n\nIndices and tables\n==================\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n'
    module_0.write_theme_overwrites(var_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = 'rygDxcBx3a]b$]tXp#E'
    var_0 = module_0.get_credits_rst()
    assert var_0 == '*******\nCredits\n*******\n\n.. note::\n    Add the credits for your extension here\n\nAcknowledgments\n===============\n\n\nAuthors\n=======\n\n\n*****\nLegal\n*****\n\nLicense\n=======\n'
    module_0.write_custom_release_notes(var_0, str_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    var_0 = module_0.get_theme_overwrites()
    assert var_0 == '/* override table width restrictions */\n@media screen and (min-width: 767px) {\n\n   .wy-table-responsive table td {\n      /* !important prevents the common CSS stylesheets from overriding\n         this as on RTD they are loaded after this stylesheet */\n      white-space: normal !important;\n   }\n\n   .wy-table-responsive {\n      overflow: visible !important;\n   }\n}\n'
    var_1 = module_0.get_format_rst(var_0, var_0, var_0)
    assert var_1 == '\n.. _/*_override_table_width_restrictions_*/\n@media_screen_and_(min-width:_767px)_{\n\n___.wy-table-responsive_table_td_{\n______/*_!important_prevents_the_common_CSS_stylesheets_from_overriding\n_________this_as_on_RTD_they_are_loaded_after_this_stylesheet_*/\n______white-space:_normal_!important;\n___}\n\n___.wy-table-responsive_{\n______overflow:_visible_!important;\n___}\n}\n:\n\n*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************\n/* override table width restrictions */\n@media screen and (min-width: 767px) {\n\n   .wy-table-responsive table td {\n      /* !important prevents the common CSS stylesheets from overriding\n         this as on RTD they are loaded after this stylesheet */\n      white-space: normal !important;\n   }\n\n   .wy-table-responsive {\n      overflow: visible !important;\n   }\n}\n\n*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************\n\nVersion |release| |today|\n\n.. .. contents::\n\n.. include:: /* override table width restrictions */\n@media screen and (min-width: 767px) {\n\n   .wy-table-responsive table td {\n      /* !important prevents the common CSS stylesheets from overriding\n         this as on RTD they are loaded after this stylesheet */\n      white-space: normal !important;\n   }\n\n   .wy-table-responsive {\n      overflow: visible !important;\n   }\n}\n//* override table width restrictions */\n@media screen and (min-width: 767px) {\n\n   .wy-table-responsive table td {\n      /* !important prevents the common CSS stylesheets from overriding\n         this as on RTD they are loaded after this stylesheet */\n      white-space: normal !important;\n   }\n\n   .wy-table-responsive {\n      overflow: visible !important;\n   }\n}\n\n'
    module_0.init_sphinx(var_0, var_0, var_0, var_0, var_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    var_0 = module_0.get_theme_overwrites()
    assert var_0 == '/* override table width restrictions */\n@media screen and (min-width: 767px) {\n\n   .wy-table-responsive table td {\n      /* !important prevents the common CSS stylesheets from overriding\n         this as on RTD they are loaded after this stylesheet */\n      white-space: normal !important;\n   }\n\n   .wy-table-responsive {\n      overflow: visible !important;\n   }\n}\n'
    var_1 = module_0.get_index_rst(var_0, var_0, var_0, var_0)
    assert var_1 == 'Specification for the /* override table width restrictions */\n@media screen and (min-width: 767px) {\n\n   .wy-table-responsive table td {\n      /* !important prevents the common CSS stylesheets from overriding\n         this as on RTD they are loaded after this stylesheet */\n      white-space: normal !important;\n   }\n\n   .wy-table-responsive {\n      overflow: visible !important;\n   }\n}\n extension\n==================================\n\n.. toctree::\n    :numbered:\n    :maxdepth: 8\n    :caption: Table of Contents\n\n    /* override table width restrictions */\n@media screen and (min-width: 767px) {\n\n   \n\n.. toctree::\n    :numbered:\n    :maxdepth: 3\n    :caption: Extension Specification\n\n    /* override table width restrictions */\n@media screen and (min-width: 767px) {\n\n   .wy-table-responsive table td {\n      /* !important prevents the common CSS stylesheets from overriding\n         this as on RTD they are loaded after this stylesheet */\n      white-space: normal !important;\n   }\n\n   .wy-table-responsive {\n      overflow: visible !important;\n   }\n}\n\n\n.. toctree::\n    :maxdepth: 2\n    :caption: History & Legal\n\n    /* override table width restrictions */\n@media screen and (min-width: 767px) {\n\n   \n    credits\n\nIndices and tables\n==================\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n'
    module_0.init_sphinx(var_0, var_0, var_0, var_0, var_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    var_0 = module_1.purge()
    str_0 = 'rygDxcBx3a]b$]tXp#E'
    module_0.write_custom_description(str_0, str_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    var_0 = module_1.purge()
    var_1 = module_0.get_credits_rst()
    assert var_1 == '*******\nCredits\n*******\n\n.. note::\n    Add the credits for your extension here\n\nAcknowledgments\n===============\n\n\nAuthors\n=======\n\n\n*****\nLegal\n*****\n\nLicense\n=======\n'
    module_0.write_custom_release_notes(var_1, var_1, var_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    dict_0 = {}
    var_0 = module_0.get_custom_settings(dict_0, default_namespace=dict_0, output_dec_master=dict_0, output_clean_if_old_hash=dict_0, output_skip_if_current_hash=dict_0, add_pynwb_settings=dict_0)
    module_0.init_sphinx(var_0, var_0, dict_0, dict_0, var_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = 'f'
    var_0 = module_0.bool_type(str_0)
    assert var_0 is False
    module_0.write_readme(str_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = 't'
    var_0 = module_0.bool_type(str_0)
    assert var_0 is True
    module_0.init_sphinx(str_0, var_0, var_0, var_0, var_0, str_0, str_0)