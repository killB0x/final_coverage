# Automatically generated by Pynguin.
import pytest
import aries_staticagent.crypto as module_0
import codecs as module_1

def test_case_0():
    str_0 = ''
    ordered_dict_0 = module_0.pack_message(str_0, str_0)
    assert f'{type(ordered_dict_0).__module__}.{type(ordered_dict_0).__qualname__}' == 'collections.OrderedDict'
    assert len(ordered_dict_0) == 4
    bytes_0 = module_0.b64_to_bytes(str_0)
    assert bytes_0 == b''
    with pytest.raises(TypeError):
        module_0.unpack_message(ordered_dict_0, ordered_dict_0, ordered_dict_0)

def test_case_1():
    str_0 = ''
    ordered_dict_0 = module_0.pack_message(str_0, str_0)
    assert f'{type(ordered_dict_0).__module__}.{type(ordered_dict_0).__qualname__}' == 'collections.OrderedDict'
    assert len(ordered_dict_0) == 4
    with pytest.raises(TypeError):
        module_0.unpack_message(ordered_dict_0, ordered_dict_0, ordered_dict_0)

def test_case_2():
    bytes_0 = b''
    str_0 = module_0.bytes_to_b64(bytes_0)
    ordered_dict_0 = module_0.pack_message(str_0, bytes_0, bytes_0, bytes_0)
    assert f'{type(ordered_dict_0).__module__}.{type(ordered_dict_0).__qualname__}' == 'collections.OrderedDict'
    assert len(ordered_dict_0) == 4
    with pytest.raises(ValueError):
        module_0.unpack_message(bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b'\xf1='
    module_0.anon_decrypt_message(bytes_0, bytes_0)

def test_case_4():
    tuple_0 = module_0.create_keypair()

def test_case_5():
    bytes_0 = b'\xf5~8\xffG\x95\xdd\x15]k\x07\x9b\xc5\xc21\x1e<\xdbS'
    with pytest.raises(module_0.CryptoError):
        module_0.validate_seed(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b''
    var_0 = module_0.validate_seed(bytes_0)
    module_0.pack_message(bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    tuple_0 = module_0.create_keypair()
    bytes_0 = b'<\xb7\xe3\xb4\xdf\x89\xdflx\x84\xea\xf2p\xa5\x97\xfc'
    bool_0 = module_0.verify_signed_message(bytes_0, bytes_0)
    assert bool_0 is False
    module_0.pack_message(tuple_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.verify_signed_message(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b'm\xaa\xb8\x17\x1b\x19~CoSQ\xf8\x04J\n\x82\xdec\xa0\xa7'
    none_type_0 = None
    module_0.locate_pack_recipient_key(bytes_0, none_type_0, bytes_0)

def test_case_10():
    bytes_0 = b''
    with pytest.raises(ValueError):
        module_0.unpack_message(bytes_0, bytes_0, bytes_0)

def test_case_11():
    str_0 = '\x0bIsar2 ]z'
    with pytest.raises(TypeError):
        module_0.unpack_message(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b'\xb1\xa9\x87`\xde2\x83u|\x9bg\xf0\x86\xe3L'
    bytes_1 = module_0.sign_message(bytes_0, bytes_0)
    assert bytes_1 == b'\xc1\xe9k.\xe9\xca\x0b\x14\xa2\x10\xc2\xe26\xa4\xa76\x94\xf4 h\x92{\xdc_g\x1f\x00\xec\x0el\x05\xcc/\x150\xf5\x8e\xf0B\xc2\x83\xab\x9f\x06\xeaO\xc1\xd7E\xa0kJ\x93E\x89\xd9\xde\xb3\x0e#\xf6\xf9\xb9\x07'
    tuple_0 = module_0.create_keypair()
    module_0.pack_message(tuple_0, tuple_0)

def test_case_13():
    str_0 = "PA09a'>G(oTfk7bv"
    dict_0 = {str_0: str_0}
    bytes_0 = b'&:\xf81\xbf\x02\xd3|3\xae\xc6\xb4&e\x11'
    dict_1 = module_0.sign_message_field(dict_0, str_0, bytes_0)
    crypto_error_0 = module_0.CryptoError()

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    bytes_0 = b'='
    bytes_1 = b'='
    bytes_2 = module_0.sign_message(bytes_1, bytes_0)
    assert bytes_2 == b"\x06H;2\xfdu\xbaT\x9ca\xb1\x86\xaed\x8b\xdd\x9b\xa0/+\x8d'z\xc9\x8f\x14j\rn\xa8Z\xc1\xcaC\xcbn\x0c\xf1\x1d\x01\xe1m\xbcp\xd1\x0c\x86\xa6\x06\x9fg8\x8b\xc9 \xa3g\x8e\x17\x10\t\x90a\x00"
    dict_0 = module_0.sign_message_field(none_type_0, none_type_0, bytes_0)
    module_0.verify_signed_message_field(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b'='
    module_0.anon_crypt_message(bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bytes_0 = b'Y\xfe)\xbc\xa2*\xa5\xf2)\xf9\xe5\xbd\x94\xeb\n\x0b\x1d1~y'
    bytes_1 = b'g\xbf\x0e\xe2\xafB\xb5\x03'
    module_0.auth_crypt_message(bytes_0, bytes_1, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bytes_0 = b'\xc0\r\xc5i;\xba\x8d$\xda\xebY\xfa\xad\xd2\xc8\xc9\xd0'
    module_0.auth_decrypt_message(bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b'='
    bytes_1 = module_0.b64_to_bytes(bytes_0, bytes_0)
    assert bytes_1 == b''
    module_0.decrypt_plaintext(bytes_1, bytes_0, bytes_0, bytes_0)

def test_case_19():
    str_0 = 'keymust be byes or str'
    with pytest.raises(module_0.CryptoError):
        module_0.validate_seed(str_0)

def test_case_20():
    bool_0 = True
    with pytest.raises(module_0.CryptoError):
        module_0.validate_seed(bool_0)

def test_case_21():
    bytes_0 = module_0.random_seed()
    var_0 = module_0.validate_seed(bytes_0)
    bytes_1 = b''
    str_0 = "\x0bO?2' z"
    ordered_dict_0 = module_0.pack_message(str_0, bytes_1, bytes_1, bytes_1)
    assert f'{type(ordered_dict_0).__module__}.{type(ordered_dict_0).__qualname__}' == 'collections.OrderedDict'
    assert len(ordered_dict_0) == 4
    with pytest.raises(ValueError):
        module_0.unpack_message(bytes_1, bytes_1, ordered_dict_0)

def test_case_22():
    bytes_0 = b'='
    bytes_1 = module_0.b64_to_bytes(bytes_0, bytes_0)
    assert bytes_1 == b''

@pytest.mark.xfail(strict=True)
def test_case_23():
    tuple_0 = module_0.create_keypair()
    module_0.pack_message(tuple_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = 'Kh2:>.zN'
    module_0.pack_message(str_0, str_0)

def test_case_25():
    bytes_0 = b''
    str_0 = '\x0bIsar2 ]z'
    ordered_dict_0 = module_0.pack_message(str_0, bytes_0, bytes_0, bytes_0)
    assert f'{type(ordered_dict_0).__module__}.{type(ordered_dict_0).__qualname__}' == 'collections.OrderedDict'
    assert len(ordered_dict_0) == 4
    with pytest.raises(ValueError):
        module_0.unpack_message(ordered_dict_0, str_0, ordered_dict_0)

def test_case_26():
    none_type_0 = None
    bytes_0 = b'\xa9\xa7\x13NM-'
    with pytest.raises(module_0.CryptoError):
        module_0.prepare_pack_recipient_keys(none_type_0, bytes_0)

def test_case_27():
    bytes_0 = b''
    str_0 = 'rV:pg<8E*Nj'
    with pytest.raises(ValueError):
        module_0.locate_pack_recipient_key(str_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    bytes_0 = b'='
    bytes_1 = module_0.b64_to_bytes(bytes_0, bytes_0)
    assert bytes_1 == b''
    str_0 = 'Ibs4KL\ru\x0bq$WChu&q'
    module_0.pack_message(str_0, bytes_1, from_sigkey=bytes_0)

def test_case_29():
    none_type_0 = None
    bytes_0 = b'5\xf9\x1a\xf3}\xf9sRIb~\xc0\x99A\xe1\xfc\xe0C'
    set_0 = {bytes_0, none_type_0}
    bytes_1 = b'='
    with pytest.raises(ValueError):
        module_0.locate_pack_recipient_key(set_0, bytes_0, bytes_1)

def test_case_30():
    bytes_0 = b''
    str_0 = 'l,l3'
    ordered_dict_0 = module_0.pack_message(str_0, bytes_0, str_0, str_0)
    assert f'{type(ordered_dict_0).__module__}.{type(ordered_dict_0).__qualname__}' == 'collections.OrderedDict'
    assert len(ordered_dict_0) == 4
    with pytest.raises(ValueError):
        module_0.unpack_message(ordered_dict_0, bytes_0, bytes_0)

def test_case_31():
    bytes_0 = b'\xce'
    bytes_1 = module_0.b64_to_bytes(bytes_0, bytes_0)
    assert bytes_1 == b''
    bytes_2 = module_0.b64_to_bytes(bytes_1)
    str_0 = '=:PSK?p80lT&xVn@+'
    with pytest.raises(module_0.CryptoError):
        module_0.validate_seed(str_0)

@pytest.mark.xfail(strict=True)
def test_case_32():
    tuple_0 = module_0.create_keypair()
    str_0 = "4n\tj@EgAW:c'g\tGL7"
    var_0 = module_1.make_identity_dict(tuple_0)
    module_0.pack_message(str_0, var_0, var_0, var_0)