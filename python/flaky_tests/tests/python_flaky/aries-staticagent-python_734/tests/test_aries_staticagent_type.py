# Automatically generated by Pynguin.
import pytest
import aries_staticagent.type as module_0
import re as module_1

def test_case_0():
    str_0 = '\n    Generate a random seed value.\n\n    Returns:\n        A new random seed\n\n    '
    with pytest.raises(module_0.InvalidType):
        module_0.Type(str_0, str_0, str_0, str_0)

def test_case_1():
    invalid_type_0 = module_0.InvalidType()

def test_case_2():
    var_0 = module_1.purge()
    with pytest.raises(module_0.InvalidType):
        module_0.Type(var_0, var_0, var_0, var_0)

def test_case_3():
    float_0 = 3136.0
    semver_0 = module_0.Semver(float_0, float_0)
    assert f'{type(module_0.Semver.from_str).__module__}.{type(module_0.Semver.from_str).__qualname__}' == 'builtins.method'
    str_0 = '!zLw~/8'
    var_0 = semver_0.to_tuple()
    type_0 = module_0.Type(str_0, semver_0, semver_0, str_0)
    assert f'{type(type_0).__module__}.{type(type_0).__qualname__}' == 'aries_staticagent.type.Type'
    assert module_0.Type.FORMAT == '{}{}/{}/{}'
    assert f'{type(module_0.Type.from_str).__module__}.{type(module_0.Type.from_str).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Type.normalized).__module__}.{type(module_0.Type.normalized).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Type.doc_uri).__module__}.{type(module_0.Type.doc_uri).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.name).__module__}.{type(module_0.Type.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.protocol).__module__}.{type(module_0.Type.protocol).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version).__module__}.{type(module_0.Type.version).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version_info).__module__}.{type(module_0.Type.version_info).__qualname__}' == 'builtins.member_descriptor'

def test_case_4():
    str_0 = '3136.3136.0'
    type_0 = module_0.Type(str_0, str_0, str_0, str_0)
    assert f'{type(type_0).__module__}.{type(type_0).__qualname__}' == 'aries_staticagent.type.Type'
    assert module_0.Type.FORMAT == '{}{}/{}/{}'
    assert f'{type(module_0.Type.from_str).__module__}.{type(module_0.Type.from_str).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Type.normalized).__module__}.{type(module_0.Type.normalized).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Type.doc_uri).__module__}.{type(module_0.Type.doc_uri).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.name).__module__}.{type(module_0.Type.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.protocol).__module__}.{type(module_0.Type.protocol).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version).__module__}.{type(module_0.Type.version).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version_info).__module__}.{type(module_0.Type.version_info).__qualname__}' == 'builtins.member_descriptor'
    str_1 = ':lY[iy'
    type_1 = module_0.Type(type_0, str_1, str_0, str_0)

def test_case_5():
    str_0 = '3136.3136.0'
    type_0 = module_0.Type(str_0, str_0, str_0, str_0)
    assert f'{type(type_0).__module__}.{type(type_0).__qualname__}' == 'aries_staticagent.type.Type'
    assert module_0.Type.FORMAT == '{}{}/{}/{}'
    assert f'{type(module_0.Type.from_str).__module__}.{type(module_0.Type.from_str).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Type.normalized).__module__}.{type(module_0.Type.normalized).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Type.doc_uri).__module__}.{type(module_0.Type.doc_uri).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.name).__module__}.{type(module_0.Type.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.protocol).__module__}.{type(module_0.Type.protocol).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version).__module__}.{type(module_0.Type.version).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version_info).__module__}.{type(module_0.Type.version_info).__qualname__}' == 'builtins.member_descriptor'
    var_0 = type_0.__eq__(str_0)
    assert var_0 is False

def test_case_6():
    str_0 = '3136.3136.0'
    type_0 = module_0.Type(str_0, str_0, str_0, str_0)
    assert f'{type(type_0).__module__}.{type(type_0).__qualname__}' == 'aries_staticagent.type.Type'
    assert module_0.Type.FORMAT == '{}{}/{}/{}'
    assert f'{type(module_0.Type.from_str).__module__}.{type(module_0.Type.from_str).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Type.normalized).__module__}.{type(module_0.Type.normalized).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Type.doc_uri).__module__}.{type(module_0.Type.doc_uri).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.name).__module__}.{type(module_0.Type.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.protocol).__module__}.{type(module_0.Type.protocol).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version).__module__}.{type(module_0.Type.version).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version_info).__module__}.{type(module_0.Type.version_info).__qualname__}' == 'builtins.member_descriptor'
    none_type_0 = None
    with pytest.raises(TypeError):
        type_0.__eq__(none_type_0)

def test_case_7():
    str_0 = '3136.3136.0'
    type_0 = module_0.Type(str_0, str_0, str_0, str_0)
    assert f'{type(type_0).__module__}.{type(type_0).__qualname__}' == 'aries_staticagent.type.Type'
    assert module_0.Type.FORMAT == '{}{}/{}/{}'
    assert f'{type(module_0.Type.from_str).__module__}.{type(module_0.Type.from_str).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Type.normalized).__module__}.{type(module_0.Type.normalized).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Type.doc_uri).__module__}.{type(module_0.Type.doc_uri).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.name).__module__}.{type(module_0.Type.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.protocol).__module__}.{type(module_0.Type.protocol).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version).__module__}.{type(module_0.Type.version).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version_info).__module__}.{type(module_0.Type.version_info).__qualname__}' == 'builtins.member_descriptor'
    var_0 = type_0.__eq__(type_0)
    assert var_0 is True

def test_case_8():
    str_0 = '3136.3136.0'
    type_0 = module_0.Type(str_0, str_0, str_0, str_0)
    assert f'{type(type_0).__module__}.{type(type_0).__qualname__}' == 'aries_staticagent.type.Type'
    assert module_0.Type.FORMAT == '{}{}/{}/{}'
    assert f'{type(module_0.Type.from_str).__module__}.{type(module_0.Type.from_str).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Type.normalized).__module__}.{type(module_0.Type.normalized).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Type.doc_uri).__module__}.{type(module_0.Type.doc_uri).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.name).__module__}.{type(module_0.Type.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.protocol).__module__}.{type(module_0.Type.protocol).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version).__module__}.{type(module_0.Type.version).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version_info).__module__}.{type(module_0.Type.version_info).__qualname__}' == 'builtins.member_descriptor'
    str_1 = 'FalseFalse/3136.3136.0/re.MULTILINE'
    dict_0 = {type_0: str_1, str_1: str_1, type_0: str_0}
    with pytest.raises(module_0.InvalidType):
        module_0.Type(str_1, dict_0, dict_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '3136.3136.0'
    type_0 = module_0.Type(str_0, str_0, str_0, str_0)
    assert f'{type(type_0).__module__}.{type(type_0).__qualname__}' == 'aries_staticagent.type.Type'
    assert module_0.Type.FORMAT == '{}{}/{}/{}'
    assert f'{type(module_0.Type.from_str).__module__}.{type(module_0.Type.from_str).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Type.normalized).__module__}.{type(module_0.Type.normalized).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Type.doc_uri).__module__}.{type(module_0.Type.doc_uri).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.name).__module__}.{type(module_0.Type.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.protocol).__module__}.{type(module_0.Type.protocol).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version).__module__}.{type(module_0.Type.version).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version_info).__module__}.{type(module_0.Type.version_info).__qualname__}' == 'builtins.member_descriptor'
    str_1 = 'g^]yeaP|D}{;&XevJ'
    str_2 = '\tj'
    var_0 = type_0.__ne__(type_0)
    assert var_0 is False
    var_0.__call__(str_2, type_0, module=str_0, qualname=str_1)

def test_case_10():
    str_0 = '3136.3136.0'
    type_0 = module_0.Type(str_0, str_0, str_0, str_0)
    assert f'{type(type_0).__module__}.{type(type_0).__qualname__}' == 'aries_staticagent.type.Type'
    assert module_0.Type.FORMAT == '{}{}/{}/{}'
    assert f'{type(module_0.Type.from_str).__module__}.{type(module_0.Type.from_str).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Type.normalized).__module__}.{type(module_0.Type.normalized).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Type.doc_uri).__module__}.{type(module_0.Type.doc_uri).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.name).__module__}.{type(module_0.Type.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.protocol).__module__}.{type(module_0.Type.protocol).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version).__module__}.{type(module_0.Type.version).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version_info).__module__}.{type(module_0.Type.version_info).__qualname__}' == 'builtins.member_descriptor'

def test_case_11():
    str_0 = '3136.336'
    type_0 = module_0.Type(str_0, str_0, str_0, str_0)
    assert f'{type(type_0).__module__}.{type(type_0).__qualname__}' == 'aries_staticagent.type.Type'
    assert module_0.Type.FORMAT == '{}{}/{}/{}'
    assert f'{type(module_0.Type.from_str).__module__}.{type(module_0.Type.from_str).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Type.normalized).__module__}.{type(module_0.Type.normalized).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Type.doc_uri).__module__}.{type(module_0.Type.doc_uri).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.name).__module__}.{type(module_0.Type.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.protocol).__module__}.{type(module_0.Type.protocol).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version).__module__}.{type(module_0.Type.version).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Type.version_info).__module__}.{type(module_0.Type.version_info).__qualname__}' == 'builtins.member_descriptor'