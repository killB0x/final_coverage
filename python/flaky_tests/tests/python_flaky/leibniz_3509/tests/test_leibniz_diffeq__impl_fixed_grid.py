# Automatically generated by Pynguin.
import pytest
import leibniz.diffeq._impl.fixed_grid as module_0

def test_case_0():
    str_0 = "'Z_z+V35P:Gh,h"
    euler_0 = module_0.Euler(str_0, str_0, str_0)
    assert f'{type(module_0.Euler.order).__module__}.{type(module_0.Euler.order).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    euler_0 = module_0.Euler(bool_0, bool_0)
    assert f'{type(module_0.Euler.order).__module__}.{type(module_0.Euler.order).__qualname__}' == 'builtins.property'
    euler_0.step_func(euler_0, bool_0, euler_0, euler_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    midpoint_0 = module_0.Midpoint(bool_0, bool_0)
    assert f'{type(module_0.Midpoint.order).__module__}.{type(module_0.Midpoint.order).__qualname__}' == 'builtins.property'
    none_type_0 = None
    midpoint_0.step_func(midpoint_0, none_type_0, bool_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    r_k4_0 = module_0.RK4(bool_0, bool_0)
    assert f'{type(module_0.RK4.order).__module__}.{type(module_0.RK4.order).__qualname__}' == 'builtins.property'
    none_type_0 = None
    r_k4_0.step_func(bool_0, none_type_0, r_k4_0, bool_0)