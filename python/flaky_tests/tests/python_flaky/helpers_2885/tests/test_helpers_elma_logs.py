# Automatically generated by Pynguin.
import pytest
import builtins as module_0
import helpers.elma.logs as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    object_0 = module_0.object()
    str_0 = 'qAka\\3G'
    log_0 = module_1.Log(str_0, path=str_0)
    assert f'{type(log_0).__module__}.{type(log_0).__qualname__}' == 'helpers.elma.logs.Log'
    assert log_0.path == '/pynguin/qAka\\3G.log'
    assert f'{type(log_0.log).__module__}.{type(log_0.log).__qualname__}' == 'logging.Logger'
    assert module_1.Log.formatter_template == '%(asctime)s - %(levelname)s - %(message)s'
    log_0.__getattr__(object_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    none_type_0 = None
    log_0 = module_1.Log(none_type_0)
    assert f'{type(log_0).__module__}.{type(log_0).__qualname__}' == 'helpers.elma.logs.Log'
    assert log_0.path is None
    assert f'{type(log_0.log).__module__}.{type(log_0.log).__qualname__}' == 'logging.RootLogger'
    assert module_1.Log.formatter_template == '%(asctime)s - %(levelname)s - %(message)s'
    log_0.__getattr__(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'B\xcc/\xb5'
    module_1.Log(bytes_0, path=bytes_0)