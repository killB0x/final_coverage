# Automatically generated by Pynguin.
import pytest
import tests.fixtures.oop.reflection as module_0

def test_case_0():
    reflection_test_case_0 = module_0.ReflectionTestCase()
    assert f'{type(reflection_test_case_0).__module__}.{type(reflection_test_case_0).__qualname__}' == 'tests.fixtures.oop.reflection.ReflectionTestCase'
    assert reflection_test_case_0.abstract_instance_property == 'abstract instance property value'
    assert reflection_test_case_0.parent_instance_property == 'parent instance property value'
    assert reflection_test_case_0.instance_property == 'instance property value'
    assert module_0.ReflectionTestCase.class_property == 'class property'
    assert f'{type(module_0.ReflectionTestCase.class_method).__module__}.{type(module_0.ReflectionTestCase.class_method).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ReflectionTestCase.decorated_property).__module__}.{type(module_0.ReflectionTestCase.decorated_property).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    reflection_test_case_0 = module_0.ReflectionTestCase()
    assert f'{type(reflection_test_case_0).__module__}.{type(reflection_test_case_0).__qualname__}' == 'tests.fixtures.oop.reflection.ReflectionTestCase'
    assert reflection_test_case_0.abstract_instance_property == 'abstract instance property value'
    assert reflection_test_case_0.parent_instance_property == 'parent instance property value'
    assert reflection_test_case_0.instance_property == 'instance property value'
    assert module_0.ReflectionTestCase.class_property == 'class property'
    assert f'{type(module_0.ReflectionTestCase.class_method).__module__}.{type(module_0.ReflectionTestCase.class_method).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ReflectionTestCase.decorated_property).__module__}.{type(module_0.ReflectionTestCase.decorated_property).__qualname__}' == 'builtins.property'
    var_0 = reflection_test_case_0.abstract_instance_method()
    assert var_0 == 'abstract method'
    var_0.instance_method()

@pytest.mark.xfail(strict=True)
def test_case_2():
    parent_test_case_0 = module_0.ParentTestCase()
    assert f'{type(parent_test_case_0).__module__}.{type(parent_test_case_0).__qualname__}' == 'tests.fixtures.oop.reflection.ParentTestCase'
    assert parent_test_case_0.abstract_instance_property == 'abstract instance property value'
    assert parent_test_case_0.parent_instance_property == 'parent instance property value'
    assert module_0.ParentTestCase.parent_class_property == 'parent class property'
    assert f'{type(module_0.ParentTestCase.parent_class_method).__module__}.{type(module_0.ParentTestCase.parent_class_method).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ParentTestCase.parent_decorated_property).__module__}.{type(module_0.ParentTestCase.parent_decorated_property).__qualname__}' == 'builtins.property'
    var_0 = parent_test_case_0.abstract_instance_method()
    assert var_0 == 'abstract method'
    reflection_test_case_0 = module_0.ReflectionTestCase()
    assert reflection_test_case_0.abstract_instance_property == 'abstract instance property value'
    assert reflection_test_case_0.parent_instance_property == 'parent instance property value'
    assert reflection_test_case_0.instance_property == 'instance property value'
    assert module_0.ReflectionTestCase.class_property == 'class property'
    assert f'{type(module_0.ReflectionTestCase.class_method).__module__}.{type(module_0.ReflectionTestCase.class_method).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ReflectionTestCase.decorated_property).__module__}.{type(module_0.ReflectionTestCase.decorated_property).__qualname__}' == 'builtins.property'
    var_1 = parent_test_case_0.parent_instance_method()
    assert var_1 == 'parent instance method'
    var_2 = parent_test_case_0.abstract_static_method()
    assert var_2 == 'abstract static method'
    var_3 = reflection_test_case_0.parent_static_method()
    assert var_3 == 'parent static method'
    var_3.abstract_instance_method()

@pytest.mark.xfail(strict=True)
def test_case_3():
    reflection_test_case_0 = module_0.ReflectionTestCase()
    assert f'{type(reflection_test_case_0).__module__}.{type(reflection_test_case_0).__qualname__}' == 'tests.fixtures.oop.reflection.ReflectionTestCase'
    assert reflection_test_case_0.abstract_instance_property == 'abstract instance property value'
    assert reflection_test_case_0.parent_instance_property == 'parent instance property value'
    assert reflection_test_case_0.instance_property == 'instance property value'
    assert module_0.ReflectionTestCase.class_property == 'class property'
    assert f'{type(module_0.ReflectionTestCase.class_method).__module__}.{type(module_0.ReflectionTestCase.class_method).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ReflectionTestCase.decorated_property).__module__}.{type(module_0.ReflectionTestCase.decorated_property).__qualname__}' == 'builtins.property'
    var_0 = reflection_test_case_0.parent_instance_method()
    assert var_0 == 'parent instance method'
    var_0.instance_method()

def test_case_4():
    reflection_test_case_0 = module_0.ReflectionTestCase()
    assert f'{type(reflection_test_case_0).__module__}.{type(reflection_test_case_0).__qualname__}' == 'tests.fixtures.oop.reflection.ReflectionTestCase'
    assert reflection_test_case_0.abstract_instance_property == 'abstract instance property value'
    assert reflection_test_case_0.parent_instance_property == 'parent instance property value'
    assert reflection_test_case_0.instance_property == 'instance property value'
    assert module_0.ReflectionTestCase.class_property == 'class property'
    assert f'{type(module_0.ReflectionTestCase.class_method).__module__}.{type(module_0.ReflectionTestCase.class_method).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ReflectionTestCase.decorated_property).__module__}.{type(module_0.ReflectionTestCase.decorated_property).__qualname__}' == 'builtins.property'
    var_0 = reflection_test_case_0.parent_static_method()
    assert var_0 == 'parent static method'
    var_1 = reflection_test_case_0.instance_method()
    assert var_1 == 'instance method'

def test_case_5():
    reflection_test_case_0 = module_0.ReflectionTestCase()
    assert f'{type(reflection_test_case_0).__module__}.{type(reflection_test_case_0).__qualname__}' == 'tests.fixtures.oop.reflection.ReflectionTestCase'
    assert reflection_test_case_0.abstract_instance_property == 'abstract instance property value'
    assert reflection_test_case_0.parent_instance_property == 'parent instance property value'
    assert reflection_test_case_0.instance_property == 'instance property value'
    assert module_0.ReflectionTestCase.class_property == 'class property'
    assert f'{type(module_0.ReflectionTestCase.class_method).__module__}.{type(module_0.ReflectionTestCase.class_method).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ReflectionTestCase.decorated_property).__module__}.{type(module_0.ReflectionTestCase.decorated_property).__qualname__}' == 'builtins.property'
    var_0 = reflection_test_case_0.instance_method()
    assert var_0 == 'instance method'

@pytest.mark.xfail(strict=True)
def test_case_6():
    reflection_test_case_0 = module_0.ReflectionTestCase()
    assert f'{type(reflection_test_case_0).__module__}.{type(reflection_test_case_0).__qualname__}' == 'tests.fixtures.oop.reflection.ReflectionTestCase'
    assert reflection_test_case_0.abstract_instance_property == 'abstract instance property value'
    assert reflection_test_case_0.parent_instance_property == 'parent instance property value'
    assert reflection_test_case_0.instance_property == 'instance property value'
    assert module_0.ReflectionTestCase.class_property == 'class property'
    assert f'{type(module_0.ReflectionTestCase.class_method).__module__}.{type(module_0.ReflectionTestCase.class_method).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ReflectionTestCase.decorated_property).__module__}.{type(module_0.ReflectionTestCase.decorated_property).__qualname__}' == 'builtins.property'
    var_0 = reflection_test_case_0.static_method()
    assert var_0 == 'static method'
    var_0.static_method()