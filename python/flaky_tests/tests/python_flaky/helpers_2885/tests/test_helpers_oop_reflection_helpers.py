# Automatically generated by Pynguin.
import pytest
import tokenize as module_0
import helpers.oop.reflection.helpers as module_1
import inspect as module_2

def test_case_0():
    var_0 = module_0.any()
    var_1 = module_1.is_private_method(var_0, var_0)
    assert var_1 is False

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_1.is_method(bool_0, bool_0)

def test_case_2():
    bool_0 = True
    var_0 = module_1.is_callable(bool_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'E'
    module_1.is_mangled(str_0)

def test_case_4():
    var_0 = module_0.any()
    var_1 = module_1.is_mangled(var_0)
    assert var_1 is False

def test_case_5():
    str_0 = '=@$'
    var_0 = module_1.is_property(str_0, str_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    module_1.is_property(bool_0, bool_0)

def test_case_7():
    bool_0 = False
    var_0 = module_1.get_attributes(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 1
    module_1.is_magic_method(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_2.currentframe()
    module_1.is_private(var_0)

def test_case_10():
    str_0 = 'XL73"u]%b=h"nt%M%\x0c\r3'
    var_0 = module_1.is_public_method(str_0, str_0)
    assert var_0 is False

def test_case_11():
    var_0 = module_0.any()
    var_1 = module_1.is_public_property(var_0, var_0)
    assert var_1 is False

def test_case_12():
    str_0 = '__'
    var_0 = module_1.is_mangled(str_0)
    assert var_0 is False

def test_case_13():
    str_0 = '_*)'
    var_0 = module_1.is_mangled(str_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    var_0 = module_1.get_attribute_labels(none_type_0)
    var_1 = module_2.formatargspec(var_0, varkw=none_type_0, kwonlyargs=none_type_0, formatvalue=var_0)
    assert var_1 == '(__bool__, __class__, __delattr__, __dir__, __doc__, __eq__, __format__, __ge__, __getattribute__, __gt__, __hash__, __init__, __init_subclass__, __le__, __lt__, __ne__, __new__, __reduce__, __reduce_ex__, __repr__, __setattr__, __sizeof__, __str__, __subclasshook__)'
    module_1.has_attribute(var_1, var_0)