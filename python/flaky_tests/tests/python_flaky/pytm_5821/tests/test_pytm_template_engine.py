# Automatically generated by Pynguin.
import pytest
import pytm.template_engine as module_0
import re as module_1

def test_case_0():
    super_formatter_0 = module_0.SuperFormatter()

@pytest.mark.xfail(strict=True)
def test_case_1():
    super_formatter_0 = module_0.SuperFormatter()
    var_0 = super_formatter_0.__repr__()
    super_formatter_0.format_field(super_formatter_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    super_formatter_0 = module_0.SuperFormatter()
    str_0 = 'repeat'
    var_0 = super_formatter_0.format_field(str_0, str_0)
    assert var_0 == ''
    str_1 = 'V'
    dict_0 = {str_0: super_formatter_0, str_1: str_0}
    dict_0.format_field(dict_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    super_formatter_0 = module_0.SuperFormatter()
    str_0 = 'call'
    super_formatter_0.format_field(super_formatter_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    super_formatter_0 = module_0.SuperFormatter()
    str_0 = 'repeat'
    var_0 = super_formatter_0.format_field(str_0, str_0)
    assert var_0 == ''
    str_1 = 'V'
    dict_0 = {str_0: super_formatter_0, str_1: str_0}
    var_1 = super_formatter_0.format_field(dict_0, str_0)
    assert var_1 == ''
    dict_0.format_field(dict_0, dict_0)

def test_case_5():
    super_formatter_0 = module_0.SuperFormatter()
    str_0 = 'if'
    var_0 = super_formatter_0.format_field(str_0, str_0)
    assert var_0 == ''

def test_case_6():
    super_formatter_0 = module_0.SuperFormatter()
    str_0 = 'if'
    var_0 = module_1.purge()
    var_1 = super_formatter_0.format_field(var_0, str_0)
    assert var_1 == ''

def test_case_7():
    super_formatter_0 = module_0.SuperFormatter()
    str_0 = 'if:\x0c'
    var_0 = super_formatter_0.format_field(str_0, str_0)
    assert var_0 == '\x0c'