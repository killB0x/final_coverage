# Automatically generated by Pynguin.
import pytest
import draytonwiser.room as module_0

def test_case_0():
    room_0 = module_0.Room()
    assert room_0.id is None
    assert room_0.schedule_id is None
    assert room_0.heating_rate is None
    assert room_0.smart_valve_ids == []
    assert room_0.ufh_relay_ids == []
    assert room_0.name is None
    assert room_0.mode is None
    assert room_0.window_detection_active is None
    assert room_0.control_sequence_of_operation is None
    assert room_0.heating_type is None
    assert room_0.current_set_point is None
    assert room_0.set_point_origin is None
    assert room_0.displayed_set_point is None
    assert room_0.scheduled_set_point is None
    assert room_0.invalid is None
    assert room_0.window_state is None
    assert room_0.manual_set_point is None
    assert room_0.override_type is None
    assert room_0.override_setpoint is None
    assert room_0.room_stat_id is None
    assert room_0.demand_type is None
    assert room_0.calculated_temperature is None
    assert room_0.percentage_demand is None
    assert room_0.control_output_state is None
    assert room_0.away_mode_suppressed is None
    assert room_0.rounded_alexa_temperature is None
    assert room_0.room_stat is None
    assert room_0.smart_valves == []
    assert room_0.api_secret == ''
    assert room_0.wiser_hub_ip == ''
    assert room_0.use_cache is True
    assert room_0.refresh_interval == 5
    var_0 = room_0.get_current_temperature()

def test_case_1():
    room_0 = module_0.Room()
    assert room_0.id is None
    assert room_0.schedule_id is None
    assert room_0.heating_rate is None
    assert room_0.smart_valve_ids == []
    assert room_0.ufh_relay_ids == []
    assert room_0.name is None
    assert room_0.mode is None
    assert room_0.window_detection_active is None
    assert room_0.control_sequence_of_operation is None
    assert room_0.heating_type is None
    assert room_0.current_set_point is None
    assert room_0.set_point_origin is None
    assert room_0.displayed_set_point is None
    assert room_0.scheduled_set_point is None
    assert room_0.invalid is None
    assert room_0.window_state is None
    assert room_0.manual_set_point is None
    assert room_0.override_type is None
    assert room_0.override_setpoint is None
    assert room_0.room_stat_id is None
    assert room_0.demand_type is None
    assert room_0.calculated_temperature is None
    assert room_0.percentage_demand is None
    assert room_0.control_output_state is None
    assert room_0.away_mode_suppressed is None
    assert room_0.rounded_alexa_temperature is None
    assert room_0.room_stat is None
    assert room_0.smart_valves == []
    assert room_0.api_secret == ''
    assert room_0.wiser_hub_ip == ''
    assert room_0.use_cache is True
    assert room_0.refresh_interval == 5
    var_0 = room_0.has_smart_valve()
    assert var_0 is False

def test_case_2():
    room_0 = module_0.Room()
    assert room_0.id is None
    assert room_0.schedule_id is None
    assert room_0.heating_rate is None
    assert room_0.smart_valve_ids == []
    assert room_0.ufh_relay_ids == []
    assert room_0.name is None
    assert room_0.mode is None
    assert room_0.window_detection_active is None
    assert room_0.control_sequence_of_operation is None
    assert room_0.heating_type is None
    assert room_0.current_set_point is None
    assert room_0.set_point_origin is None
    assert room_0.displayed_set_point is None
    assert room_0.scheduled_set_point is None
    assert room_0.invalid is None
    assert room_0.window_state is None
    assert room_0.manual_set_point is None
    assert room_0.override_type is None
    assert room_0.override_setpoint is None
    assert room_0.room_stat_id is None
    assert room_0.demand_type is None
    assert room_0.calculated_temperature is None
    assert room_0.percentage_demand is None
    assert room_0.control_output_state is None
    assert room_0.away_mode_suppressed is None
    assert room_0.rounded_alexa_temperature is None
    assert room_0.room_stat is None
    assert room_0.smart_valves == []
    assert room_0.api_secret == ''
    assert room_0.wiser_hub_ip == ''
    assert room_0.use_cache is True
    assert room_0.refresh_interval == 5
    var_0 = room_0.get_current_set_point()
    assert var_0 == 0

def test_case_3():
    room_0 = module_0.Room()
    assert room_0.id is None
    assert room_0.schedule_id is None
    assert room_0.heating_rate is None
    assert room_0.smart_valve_ids == []
    assert room_0.ufh_relay_ids == []
    assert room_0.name is None
    assert room_0.mode is None
    assert room_0.window_detection_active is None
    assert room_0.control_sequence_of_operation is None
    assert room_0.heating_type is None
    assert room_0.current_set_point is None
    assert room_0.set_point_origin is None
    assert room_0.displayed_set_point is None
    assert room_0.scheduled_set_point is None
    assert room_0.invalid is None
    assert room_0.window_state is None
    assert room_0.manual_set_point is None
    assert room_0.override_type is None
    assert room_0.override_setpoint is None
    assert room_0.room_stat_id is None
    assert room_0.demand_type is None
    assert room_0.calculated_temperature is None
    assert room_0.percentage_demand is None
    assert room_0.control_output_state is None
    assert room_0.away_mode_suppressed is None
    assert room_0.rounded_alexa_temperature is None
    assert room_0.room_stat is None
    assert room_0.smart_valves == []
    assert room_0.api_secret == ''
    assert room_0.wiser_hub_ip == ''
    assert room_0.use_cache is True
    assert room_0.refresh_interval == 5
    var_0 = room_0.has_device(room_0)
    assert var_0 is False

def test_case_4():
    room_0 = module_0.Room()
    assert room_0.id is None
    assert room_0.schedule_id is None
    assert room_0.heating_rate is None
    assert room_0.smart_valve_ids == []
    assert room_0.ufh_relay_ids == []
    assert room_0.name is None
    assert room_0.mode is None
    assert room_0.window_detection_active is None
    assert room_0.control_sequence_of_operation is None
    assert room_0.heating_type is None
    assert room_0.current_set_point is None
    assert room_0.set_point_origin is None
    assert room_0.displayed_set_point is None
    assert room_0.scheduled_set_point is None
    assert room_0.invalid is None
    assert room_0.window_state is None
    assert room_0.manual_set_point is None
    assert room_0.override_type is None
    assert room_0.override_setpoint is None
    assert room_0.room_stat_id is None
    assert room_0.demand_type is None
    assert room_0.calculated_temperature is None
    assert room_0.percentage_demand is None
    assert room_0.control_output_state is None
    assert room_0.away_mode_suppressed is None
    assert room_0.rounded_alexa_temperature is None
    assert room_0.room_stat is None
    assert room_0.smart_valves == []
    assert room_0.api_secret == ''
    assert room_0.wiser_hub_ip == ''
    assert room_0.use_cache is True
    assert room_0.refresh_interval == 5
    var_0 = room_0.set_boost(room_0, room_0)

def test_case_5():
    room_0 = module_0.Room()
    assert room_0.id is None
    assert room_0.schedule_id is None
    assert room_0.heating_rate is None
    assert room_0.smart_valve_ids == []
    assert room_0.ufh_relay_ids == []
    assert room_0.name is None
    assert room_0.mode is None
    assert room_0.window_detection_active is None
    assert room_0.control_sequence_of_operation is None
    assert room_0.heating_type is None
    assert room_0.current_set_point is None
    assert room_0.set_point_origin is None
    assert room_0.displayed_set_point is None
    assert room_0.scheduled_set_point is None
    assert room_0.invalid is None
    assert room_0.window_state is None
    assert room_0.manual_set_point is None
    assert room_0.override_type is None
    assert room_0.override_setpoint is None
    assert room_0.room_stat_id is None
    assert room_0.demand_type is None
    assert room_0.calculated_temperature is None
    assert room_0.percentage_demand is None
    assert room_0.control_output_state is None
    assert room_0.away_mode_suppressed is None
    assert room_0.rounded_alexa_temperature is None
    assert room_0.room_stat is None
    assert room_0.smart_valves == []
    assert room_0.api_secret == ''
    assert room_0.wiser_hub_ip == ''
    assert room_0.use_cache is True
    assert room_0.refresh_interval == 5
    var_0 = room_0.cancel_boost()

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    none_type_0 = None
    str_0 = 'id'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    room_0 = module_0.Room(**dict_0)
    assert room_0.id == 'id'
    assert room_0.schedule_id is None
    assert room_0.heating_rate is None
    assert room_0.smart_valve_ids == []
    assert room_0.ufh_relay_ids == []
    assert room_0.name is None
    assert room_0.mode is None
    assert room_0.window_detection_active is None
    assert room_0.control_sequence_of_operation is None
    assert room_0.heating_type is None
    assert room_0.current_set_point is None
    assert room_0.set_point_origin is None
    assert room_0.displayed_set_point is None
    assert room_0.scheduled_set_point is None
    assert room_0.invalid is None
    assert room_0.window_state is None
    assert room_0.manual_set_point is None
    assert room_0.override_type is None
    assert room_0.override_setpoint is None
    assert room_0.room_stat_id is None
    assert room_0.demand_type is None
    assert room_0.calculated_temperature is None
    assert room_0.percentage_demand is None
    assert room_0.control_output_state is None
    assert room_0.away_mode_suppressed is None
    assert room_0.rounded_alexa_temperature is None
    assert room_0.room_stat is None
    assert room_0.smart_valves == []
    assert room_0.api_secret == ''
    assert room_0.wiser_hub_ip == ''
    assert room_0.use_cache is True
    assert room_0.refresh_interval == 5
    room_0.set_boost(bool_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'id'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    room_0 = module_0.Room(**dict_0)
    assert room_0.id == 'id'
    assert room_0.schedule_id is None
    assert room_0.heating_rate is None
    assert room_0.smart_valve_ids == []
    assert room_0.ufh_relay_ids == []
    assert room_0.name is None
    assert room_0.mode is None
    assert room_0.window_detection_active is None
    assert room_0.control_sequence_of_operation is None
    assert room_0.heating_type is None
    assert room_0.current_set_point is None
    assert room_0.set_point_origin is None
    assert room_0.displayed_set_point is None
    assert room_0.scheduled_set_point is None
    assert room_0.invalid is None
    assert room_0.window_state is None
    assert room_0.manual_set_point is None
    assert room_0.override_type is None
    assert room_0.override_setpoint is None
    assert room_0.room_stat_id is None
    assert room_0.demand_type is None
    assert room_0.calculated_temperature is None
    assert room_0.percentage_demand is None
    assert room_0.control_output_state is None
    assert room_0.away_mode_suppressed is None
    assert room_0.rounded_alexa_temperature is None
    assert room_0.room_stat is None
    assert room_0.smart_valves == []
    assert room_0.api_secret == ''
    assert room_0.wiser_hub_ip == ''
    assert room_0.use_cache is True
    assert room_0.refresh_interval == 5
    var_0 = room_0.cancel_boost()
    var_0.get_current_set_point()