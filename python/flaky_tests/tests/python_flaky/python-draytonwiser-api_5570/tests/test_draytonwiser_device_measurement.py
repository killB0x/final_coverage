# Automatically generated by Pynguin.
import pytest
import draytonwiser.device_measurement as module_0

def test_case_0():
    device_measurement_0 = module_0.DeviceMeasurement()
    assert device_measurement_0.id is None
    assert device_measurement_0.measured_temperature is None
    assert device_measurement_0.api_secret == ''
    assert device_measurement_0.wiser_hub_ip == ''
    assert device_measurement_0.use_cache is True
    assert device_measurement_0.refresh_interval == 5
    var_0 = device_measurement_0.temperature()
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)

def test_case_1():
    dict_0 = {}
    room_stat_measurement_0 = module_0.RoomStatMeasurement(**dict_0)
    assert room_stat_measurement_0.set_point is None
    assert room_stat_measurement_0.measured_humidity is None
    assert room_stat_measurement_0.id is None
    assert room_stat_measurement_0.measured_temperature is None
    assert room_stat_measurement_0.api_secret == ''
    assert room_stat_measurement_0.wiser_hub_ip == ''
    assert room_stat_measurement_0.use_cache is True
    assert room_stat_measurement_0.refresh_interval == 5

def test_case_2():
    smart_valve_measurement_0 = module_0.SmartValveMeasurement()
    assert smart_valve_measurement_0.mounting_orientation is None
    assert smart_valve_measurement_0.percentage_demand is None
    assert smart_valve_measurement_0.window_state is None
    assert smart_valve_measurement_0.id is None
    assert smart_valve_measurement_0.measured_temperature is None
    assert smart_valve_measurement_0.api_secret == ''
    assert smart_valve_measurement_0.wiser_hub_ip == ''
    assert smart_valve_measurement_0.use_cache is True
    assert smart_valve_measurement_0.refresh_interval == 5
    var_0 = smart_valve_measurement_0.temperature()
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)