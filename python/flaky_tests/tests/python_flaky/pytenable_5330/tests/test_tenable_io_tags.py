# Automatically generated by Pynguin.
import pytest
import tenable.io.tags as module_0
import builtins as module_1
import tenable.errors as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 64
    tuple_0 = ()
    tags_a_p_i_0 = module_0.TagsAPI(tuple_0)
    str_0 = 'pXr'
    dict_0 = {str_0: tags_a_p_i_0, str_0: int_0}
    var_0 = tags_a_p_i_0.list(**dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.io.tags.TagsIterator'
    tags_a_p_i_1 = module_0.TagsAPI(int_0)
    tags_a_p_i_1.create(tuple_0, tags_a_p_i_1)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    tags_a_p_i_0 = module_0.TagsAPI(none_type_0)
    set_0 = {none_type_0, none_type_0, none_type_0}
    tags_a_p_i_0.edit(set_0, none_type_0)

def test_case_2():
    bytes_0 = b'\x86\x85\x80e\x15\xae\xcd\xac\x83\xdac'
    tags_a_p_i_0 = module_0.TagsAPI(bytes_0)
    var_0 = tags_a_p_i_0.list()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.io.tags.TagsIterator'

def test_case_3():
    none_type_0 = None
    tags_a_p_i_0 = module_0.TagsAPI(none_type_0)
    var_0 = tags_a_p_i_0.list_categories()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.io.tags.TagsIterator'

def test_case_4():
    base_exception_0 = module_1.BaseException()
    tags_iterator_0 = module_0.TagsIterator(base_exception_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 64
    tuple_0 = ()
    tags_a_p_i_0 = module_0.TagsAPI(tuple_0)
    str_0 = 'pXr'
    dict_0 = {str_0: tags_a_p_i_0, str_0: int_0}
    var_0 = tags_a_p_i_0.list_categories(**dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.io.tags.TagsIterator'
    tags_a_p_i_0.delete(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'Yj{]P{vN1!e%nB`n$r9\x0b'
    tags_a_p_i_0 = module_0.TagsAPI(str_0)
    bool_0 = True
    var_0 = tags_a_p_i_0.list()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.io.tags.TagsIterator'
    tags_a_p_i_1 = module_0.TagsAPI(bool_0)
    tags_a_p_i_1.delete_category(tags_a_p_i_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'Yj{]P{vN1!e%nB`n$r9\x0b'
    complex_0 = (-1757.9506-1193.81j)
    tags_a_p_i_0 = module_0.TagsAPI(str_0)
    bool_0 = True
    var_0 = tags_a_p_i_0.list()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.io.tags.TagsIterator'
    tags_a_p_i_1 = module_0.TagsAPI(bool_0)
    tags_a_p_i_1.details(complex_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 48
    tuple_0 = ()
    tags_a_p_i_0 = module_0.TagsAPI(tuple_0)
    str_0 = 'pXr'
    dict_0 = {str_0: tags_a_p_i_0, str_0: int_0}
    var_0 = tags_a_p_i_0.list(**dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.io.tags.TagsIterator'
    tags_a_p_i_1 = module_0.TagsAPI(int_0)
    tags_a_p_i_2 = module_0.TagsAPI(int_0)
    var_1 = tags_a_p_i_1.list_categories(**dict_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tenable.io.tags.TagsIterator'
    tags_a_p_i_0.details_category(var_1)

@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 55
    tuple_0 = ()
    tags_a_p_i_0 = module_0.TagsAPI(tuple_0)
    str_0 = 'pXr'
    str_1 = 'starttime'
    dict_0 = {str_1: tags_a_p_i_0, str_0: int_0}
    var_0 = tags_a_p_i_0.list(**dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.io.tags.TagsIterator'
    none_type_0 = None
    tags_a_p_i_1 = module_0.TagsAPI(tags_a_p_i_0)
    var_1 = tags_a_p_i_0.list_categories(**dict_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tenable.io.tags.TagsIterator'
    tags_a_p_i_1.assign(tuple_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'scan/policy'
    tags_a_p_i_0 = module_0.TagsAPI(str_0)
    str_1 = 'fy\rf?SOSO+l5[2a8nb'
    tags_a_p_i_0.create_category(str_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = 64
    tuple_0 = ()
    tags_a_p_i_0 = module_0.TagsAPI(tuple_0)
    str_0 = 'pXr'
    dict_0 = {str_0: tags_a_p_i_0, str_0: int_0}
    var_0 = tags_a_p_i_0.list(**dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.io.tags.TagsIterator'
    tags_a_p_i_1 = module_0.TagsAPI(int_0)
    tags_a_p_i_2 = module_0.TagsAPI(int_0)
    var_1 = tags_a_p_i_1.list_categories(**dict_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tenable.io.tags.TagsIterator'
    tags_a_p_i_1.unassign(str_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 55
    tuple_0 = ()
    tags_a_p_i_0 = module_0.TagsAPI(tuple_0)
    str_0 = 'pXr'
    str_1 = 'starttime'
    dict_0 = {str_1: tags_a_p_i_0, str_0: int_0}
    var_0 = tags_a_p_i_0.list(**dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.io.tags.TagsIterator'
    tags_a_p_i_1 = module_0.TagsAPI(int_0)
    tags_a_p_i_2 = module_0.TagsAPI(var_0)
    var_1 = tags_a_p_i_2.list_categories()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tenable.io.tags.TagsIterator'
    tags_a_p_i_1.edit_category(str_1)

@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = 55
    tuple_0 = ()
    tags_a_p_i_0 = module_0.TagsAPI(tuple_0)
    str_0 = 'pXr'
    str_1 = 'sterttime'
    dict_0 = {str_1: tags_a_p_i_0, str_0: int_0}
    var_0 = tags_a_p_i_0.list(**dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.io.tags.TagsIterator'
    tags_a_p_i_0.edit(str_0, description=tuple_0, filters=int_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = '[duT'
    tenable_exception_0 = module_2.TenableException(str_0)
    var_0 = tenable_exception_0.__str__()
    dict_0 = {}
    tags_a_p_i_0 = module_0.TagsAPI(dict_0)
    tags_a_p_i_0.create(var_0, var_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    bytes_0 = b'\xcaK\xe2\x8f\x96\xf0no\xeca'
    tags_a_p_i_0 = module_0.TagsAPI(none_type_0)
    tags_a_p_i_0.edit(none_type_0, description=bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    tags_a_p_i_0 = module_0.TagsAPI(none_type_0)
    tags_a_p_i_0.create(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    tuple_0 = ()
    tags_a_p_i_0 = module_0.TagsAPI(tuple_0)
    str_0 = '{6E*,b\rq;I``"-9u~\x0b-'
    tags_a_p_i_0.create(str_0, str_0, filters=str_0, category_description=str_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    tuple_0 = ()
    tags_a_p_i_0 = module_0.TagsAPI(tuple_0)
    str_0 = 'iAtF@q'
    tags_a_p_i_0.edit_category(tags_a_p_i_0, description=str_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = 55
    tuple_0 = ()
    tags_a_p_i_0 = module_0.TagsAPI(tuple_0)
    str_0 = 'pXr'
    str_1 = 'starttbime'
    dict_0 = {str_1: tags_a_p_i_0, str_0: int_0}
    var_0 = tags_a_p_i_0.list(**dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.io.tags.TagsIterator'
    tags_a_p_i_1 = module_0.TagsAPI(int_0)
    tags_a_p_i_2 = module_0.TagsAPI(int_0)
    var_1 = tags_a_p_i_0.list_categories(**dict_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tenable.io.tags.TagsIterator'
    tags_a_p_i_0.create_category(str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    int_0 = 57
    tuple_0 = ()
    tags_a_p_i_0 = module_0.TagsAPI(tuple_0)
    str_0 = 'por'
    str_1 = 'filter_type'
    dict_0 = {str_1: tags_a_p_i_0, str_0: int_0}
    tags_a_p_i_0.list_categories(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    int_0 = 57
    tuple_0 = ()
    tags_a_p_i_0 = module_0.TagsAPI(tuple_0)
    str_0 = 'por'
    str_1 = 'filter_type'
    dict_0 = {str_1: tags_a_p_i_0, str_0: int_0}
    tags_a_p_i_0.list(**dict_0)