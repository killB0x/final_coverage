# Automatically generated by Pynguin.
import pytest
import builtins as module_0
import tenable.errors as module_1

def test_case_0():
    base_exception_0 = module_0.BaseException()
    connection_error_0 = module_1.ConnectionError(base_exception_0)
    assert connection_error_0.msg == ''

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "n.Pn1'1'RL f(Cb-f}n"
    tio_exports_timeout_0 = module_1.TioExportsTimeout(str_0, str_0)
    assert f'{type(tio_exports_timeout_0).__module__}.{type(tio_exports_timeout_0).__qualname__}' == 'tenable.errors.TioExportsTimeout'
    assert tio_exports_timeout_0.export == "n.Pn1'1'RL f(Cb-f}n"
    assert tio_exports_timeout_0.uuid == "n.Pn1'1'RL f(Cb-f}n"
    assert tio_exports_timeout_0.msg == "n.Pn1'1'RL f(Cb-f}n export n.Pn1'1'RL f(Cb-f}n has timed out."
    var_0 = tio_exports_timeout_0.__repr__()
    assert var_0 == '"n.Pn1\'1\'RL f(Cb-f}n export n.Pn1\'1\'RL f(Cb-f}n has timed out."'
    var_1 = tio_exports_timeout_0.__str__()
    assert var_1 == "n.Pn1'1'RL f(Cb-f}n export n.Pn1'1'RL f(Cb-f}n has timed out."
    var_2 = var_0.__str__()
    assert var_2 == '"n.Pn1\'1\'RL f(Cb-f}n export n.Pn1\'1\'RL f(Cb-f}n has timed out."'
    module_1.ImpersonationError(tio_exports_timeout_0)

def test_case_2():
    bool_0 = False
    file_download_error_0 = module_1.FileDownloadError(bool_0, bool_0, bool_0)
    assert f'{type(file_download_error_0).__module__}.{type(file_download_error_0).__qualname__}' == 'tenable.errors.FileDownloadError'
    assert file_download_error_0.resource == 'False'
    assert file_download_error_0.resource_id == 'False'
    assert file_download_error_0.filename == 'False'
    assert file_download_error_0.msg == 'resource False:False requested file False and has failed.'

def test_case_3():
    bool_0 = True
    tio_exports_error_0 = module_1.TioExportsError(bool_0, bool_0)
    assert f'{type(tio_exports_error_0).__module__}.{type(tio_exports_error_0).__qualname__}' == 'tenable.errors.TioExportsError'
    assert tio_exports_error_0.export is True
    assert tio_exports_error_0.uuid is True
    assert tio_exports_error_0.msg == 'True export True has errored.'

def test_case_4():
    none_type_0 = None
    tio_exports_timeout_0 = module_1.TioExportsTimeout(none_type_0, none_type_0)
    assert f'{type(tio_exports_timeout_0).__module__}.{type(tio_exports_timeout_0).__qualname__}' == 'tenable.errors.TioExportsTimeout'
    assert tio_exports_timeout_0.export is None
    assert tio_exports_timeout_0.uuid is None
    assert tio_exports_timeout_0.msg == 'None export None has timed out.'

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    module_1.RetryError(bool_0, bool_0)