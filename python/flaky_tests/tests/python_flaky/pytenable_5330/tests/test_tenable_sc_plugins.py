# Automatically generated by Pynguin.
import pytest
import tenable.sc.plugins as module_0
import tenable.errors as module_1
import builtins as module_2
import tenable.sc.base as module_3

def test_case_0():
    none_type_0 = None
    plugin_a_p_i_0 = module_0.PluginAPI(none_type_0)
    var_0 = plugin_a_p_i_0.list()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.sc.plugins.PluginResultsIterator'

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    plugin_a_p_i_0 = module_0.PluginAPI(none_type_0)
    str_0 = 'fes'
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = plugin_a_p_i_0.family_plugins(none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.sc.plugins.PluginResultsIterator'
    var_1 = plugin_a_p_i_0.list()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tenable.sc.plugins.PluginResultsIterator'
    var_2 = plugin_a_p_i_0.list(**dict_0)
    plugin_a_p_i_1 = module_0.PluginAPI(none_type_0)
    plugin_a_p_i_0.details(var_1, plugin_a_p_i_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    plugin_a_p_i_0 = module_0.PluginAPI(bool_0)
    var_0 = plugin_a_p_i_0.family_plugins(bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.sc.plugins.PluginResultsIterator'
    var_1 = plugin_a_p_i_0.list()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tenable.sc.plugins.PluginResultsIterator'
    unexpected_value_error_0 = module_1.UnexpectedValueError(var_0)
    var_2 = var_0.__str__()
    var_3 = module_2.Exception()
    plugin_a_p_i_0.details(var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    complex_0 = (-5193-1359.347395j)
    plugin_a_p_i_0 = module_0.PluginAPI(complex_0)
    none_type_0 = None
    plugin_a_p_i_1 = module_0.PluginAPI(none_type_0)
    plugin_a_p_i_0.family_details(complex_0, complex_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    plugin_a_p_i_0 = module_0.PluginAPI(none_type_0)
    str_0 = 'fes'
    str_1 = 'it'
    dict_0 = {str_0: str_1, str_1: plugin_a_p_i_0, str_1: str_0, str_1: str_1}
    var_0 = plugin_a_p_i_0.family_plugins(none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.sc.plugins.PluginResultsIterator'
    var_1 = plugin_a_p_i_0.list(**dict_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tenable.sc.plugins.PluginResultsIterator'
    dict_1 = {plugin_a_p_i_0: none_type_0, str_0: none_type_0, var_1: none_type_0, none_type_0: none_type_0}
    plugin_a_p_i_0.family_details(str_1, dict_1)

@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = 103.5
    plugin_a_p_i_0 = module_0.PluginAPI(float_0)
    plugin_a_p_i_0.family_plugins(float_0)

def test_case_6():
    float_0 = 103.5
    plugin_a_p_i_0 = module_0.PluginAPI(float_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'fes'
    plugin_a_p_i_0 = module_0.PluginAPI(str_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    plugin_a_p_i_0.family_list(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    plugin_a_p_i_0 = module_0.PluginAPI(bool_0)
    var_0 = plugin_a_p_i_0.family_plugins(bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.sc.plugins.PluginResultsIterator'
    plugin_a_p_i_0.family_details(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    plugin_a_p_i_0 = module_0.PluginAPI(none_type_0)
    str_0 = 'fes'
    str_1 = 'it'
    dict_0 = {str_0: str_1, str_1: plugin_a_p_i_0, str_1: str_0, str_1: str_1}
    var_0 = plugin_a_p_i_0.family_plugins(none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.sc.plugins.PluginResultsIterator'
    var_1 = plugin_a_p_i_0.list()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tenable.sc.plugins.PluginResultsIterator'
    var_2 = plugin_a_p_i_0.list(**dict_0)
    plugin_a_p_i_1 = module_0.PluginAPI(var_1)
    plugin_a_p_i_1.details(str_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    plugin_a_p_i_0 = module_0.PluginAPI(none_type_0)
    str_0 = 'fes'
    str_1 = 'it'
    dict_0 = {str_0: str_1, str_1: plugin_a_p_i_0, str_1: str_0, str_1: str_1}
    var_0 = plugin_a_p_i_0.family_plugins(none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.sc.plugins.PluginResultsIterator'
    var_1 = plugin_a_p_i_0.list()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tenable.sc.plugins.PluginResultsIterator'
    var_2 = plugin_a_p_i_0.list(**dict_0)
    plugin_a_p_i_0.family_details(none_type_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    bool_0 = False
    plugin_a_p_i_0 = module_0.PluginAPI(none_type_0)
    str_0 = 'e'
    str_1 = 'sort_direction'
    str_2 = 'never'
    dict_0 = {str_2: str_2, str_1: none_type_0, str_2: str_2, str_0: bool_0}
    plugin_a_p_i_0.family_plugins(dict_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    plugin_a_p_i_0 = module_0.PluginAPI(none_type_0)
    str_0 = 'sort_field'
    dict_0 = {str_0: str_0}
    plugin_a_p_i_0.family_list(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    plugin_a_p_i_0 = module_0.PluginAPI(none_type_0)
    plugin_a_p_i_1 = module_0.PluginAPI(none_type_0)
    str_0 = 'te'
    str_1 = 'type'
    dict_0 = {str_0: str_0, str_1: str_0}
    s_c_endpoint_0 = module_3.SCEndpoint(str_0)
    plugin_a_p_i_1.list(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    plugin_a_p_i_0 = module_0.PluginAPI(none_type_0)
    str_0 = 'fes'
    str_1 = 'json_result'
    dict_0 = {str_0: str_1, str_1: none_type_0, str_0: none_type_0, str_1: plugin_a_p_i_0}
    var_0 = plugin_a_p_i_0.family_plugins(none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.sc.plugins.PluginResultsIterator'
    var_1 = plugin_a_p_i_0.list()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tenable.sc.plugins.PluginResultsIterator'
    plugin_a_p_i_0.list(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    plugin_a_p_i_0 = module_0.PluginAPI(none_type_0)
    str_0 = 'fes'
    str_1 = 'json_result'
    dict_0 = {str_0: str_1, str_1: none_type_0, str_0: none_type_0, str_1: plugin_a_p_i_0}
    plugin_a_p_i_0.family_plugins(none_type_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    plugin_a_p_i_0 = module_0.PluginAPI(none_type_0)
    str_0 = ',\x0bT,zPa'
    bool_0 = True
    str_1 = 'pages'
    dict_0 = {str_1: none_type_0, str_0: bool_0, str_1: bool_0, str_1: none_type_0}
    var_0 = plugin_a_p_i_0.list(**dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tenable.sc.plugins.PluginResultsIterator'
    str_2 = 'size'
    dict_1 = {str_2: none_type_0, str_1: none_type_0, str_2: none_type_0, str_1: none_type_0}
    var_1 = plugin_a_p_i_0.list(**dict_1)
    str_3 = 'filer'
    dict_2 = {str_2: str_2, str_3: dict_0, str_1: none_type_0, str_2: str_2, str_3: str_1, str_1: str_2, str_3: str_2, str_2: str_1}
    plugin_a_p_i_0.family_plugins(dict_1, **dict_2)