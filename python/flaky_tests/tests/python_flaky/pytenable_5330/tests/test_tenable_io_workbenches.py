# Automatically generated by Pynguin.
import pytest
import tenable.io.workbenches as module_0
import tenable.errors as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'O\x0b'
    workbenches_a_p_i_0 = module_0.WorkbenchesAPI(str_0)
    workbenches_a_p_i_0.asset_info(str_0)

def test_case_1():
    bool_0 = False
    workbenches_a_p_i_0 = module_0.WorkbenchesAPI(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'\xe0\xc7\xf7\xda\xa7\xb3j\xca'
    workbenches_a_p_i_0 = module_0.WorkbenchesAPI(bytes_0)
    workbenches_a_p_i_0.asset_activity(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -2117.1298
    workbenches_a_p_i_0 = module_0.WorkbenchesAPI(float_0)
    workbenches_a_p_i_0.asset_vulns(float_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -1130
    workbenches_a_p_i_0 = module_0.WorkbenchesAPI(int_0)
    workbenches_a_p_i_0.asset_vuln_info(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -839
    tuple_0 = (int_0,)
    str_0 = "\n        Retrieves the device information for the requested device on the\n        associated repository.\n\n        :sc-api:`repository: device info <Repository.html#RepositoryRESTReference-/repository/{id}/deviceInfo>`\n\n        `repository: ip info <Repository.html#RepositoryRESTReference-/repository/{id}/ipInfo>`\n\n        Args:\n            id (int): The numeric id for the repository to query.\n            dns (str): The DNS name to query\n            fields (list, optional):\n                The list of fields that are desired to be returned.  For details\n                on what fields are available, please refer to the details on the\n                request within the repository device info API doc.\n            ip (str): The IP address to query\n            uuid (str): The UUID to query.\n\n        Returns:\n            :obj:`dict`:\n                The device resource.\n\n        Examples:\n            >>> host = sc.repositories.device_info(1, ip='192.168.0.1')\n        "
    dict_0 = {tuple_0: str_0, int_0: str_0}
    unexpected_value_error_0 = module_1.UnexpectedValueError(dict_0)
    var_0 = unexpected_value_error_0.__repr__()
    str_1 = 'community_string'
    str_2 = ')7<ju'
    workbenches_a_p_i_0 = module_0.WorkbenchesAPI(str_2)
    workbenches_a_p_i_0.asset_vuln_output(str_1, str_1)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    workbenches_a_p_i_0 = module_0.WorkbenchesAPI(bool_0)
    workbenches_a_p_i_0.asset_delete(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = ()
    workbenches_a_p_i_0 = module_0.WorkbenchesAPI(tuple_0)
    workbenches_a_p_i_0.vuln_assets(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "\n        Creates a new network within Tenable.io\n\n        :devportal:`networks: create <networks-create>`\n\n        Args:\n            name (str): The name of the new network.\n            description (str, optional): Description of the network.\n\n        Returns:\n            :obj:`dict`:\n                The resource record of the newly created network.\n\n        Examples:\n            >>> nw = tio.networks.create('Example')\n        "
    dict_0 = {str_0: str_0}
    workbenches_a_p_i_0 = module_0.WorkbenchesAPI(str_0)
    workbenches_a_p_i_0.vuln_info(dict_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    workbenches_a_p_i_0 = module_0.WorkbenchesAPI(none_type_0)
    workbenches_a_p_i_0.vuln_outputs(workbenches_a_p_i_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    none_type_0 = None
    workbenches_a_p_i_0 = module_0.WorkbenchesAPI(bool_0)
    workbenches_a_p_i_0.asset_info(none_type_0, none_type_0)