# Automatically generated by Pynguin.
import pytest
import tenable.io.access_groups as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    access_groups_a_p_i_0 = module_0.AccessGroupsAPI(bool_0)
    access_groups_a_p_i_0.create(bool_0, bool_0, all_users=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    access_groups_a_p_i_0 = module_0.AccessGroupsAPI(none_type_0)
    access_groups_a_p_i_0.edit(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'\x945j\xf4\xc9\x98\xca4P\xae"o'
    access_groups_a_p_i_0 = module_0.AccessGroupsAPI(bytes_0)
    str_0 = 'principals'
    dict_0 = {str_0: access_groups_a_p_i_0, str_0: access_groups_a_p_i_0, str_0: str_0}
    access_groups_a_p_i_0.edit(str_0, **dict_0)

def test_case_3():
    int_0 = -2473
    access_groups_iterator_0 = module_0.AccessGroupsIterator(int_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 404
    access_groups_a_p_i_0 = module_0.AccessGroupsAPI(int_0)
    access_groups_a_p_i_0.delete(access_groups_a_p_i_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    complex_0 = (-97.207-5065.7j)
    access_groups_iterator_0 = module_0.AccessGroupsIterator(complex_0)
    access_groups_a_p_i_0 = module_0.AccessGroupsAPI(complex_0)
    str_0 = "\n        Edit an existing scan target exclusion.\n\n        :devportal:`exclusions: edit <exclusions-edit>`\n\n        The edit function will first gather the details of the exclusion that\n        will be edited and will overlay the changes on top.  The result will\n        then be pushed back to the API to modify the exclusion.\n\n        Args:\n            id (int): The id of the exclusion object in Tenable.io\n\n            scanner_id (int, optional): The scanner id.\n            name (str, optional): The name of the exclusion to create.\n            description (str, optional):\n                Some further detail about the exclusion.\n            start_time (datetime, optional): When the exclusion should start.\n            end_time (datetime, optional): When the exclusion should end.\n            timezone (str, optional):\n                The timezone to use for the exclusion.  The default if none is\n                specified is to use UTC.\n            frequency (str, optional):\n                The frequency of the rule. The string inputted will be upcased.\n                Valid values are: *ONETIME, DAILY, WEEKLY, MONTHLY, YEARLY*.\n            interval (int, optional): The interval of the rule.\n            weekdays (list, optional):\n                List of 2-character representations of the days of the week to\n                repeat the frequency rule on.  Valid values are:\n                *SU, MO, TU, WE, TH, FR, SA*\n                Default values: ``['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA']``\n            day_of_month (int, optional):\n                The day of the month to repeat a **MONTHLY** frequency rule on.\n\n        Returns:\n            :obj:`dict`:\n                Dictionary of the newly minted exclusion.\n\n        Examples:\n            Modifying the name of an exclusion:\n\n            >>> exclusion = tio.exclusions.edit(1, name='New Name')\n        "
    str_1 = '-AB-Wz"[Q~uoXN'
    var_0 = module_0.AccessGroupsAPI(str_1)
    access_groups_a_p_i_0.create(str_0, access_groups_iterator_0, complex_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b'B5!\xf4\xc93m^P\xae"\x08o'
    access_groups_iterator_0 = module_0.AccessGroupsIterator(bytes_0)
    access_groups_a_p_i_0 = module_0.AccessGroupsAPI(access_groups_iterator_0)
    str_0 = 'principals'
    dict_0 = {}
    str_1 = 'o>:id'
    dict_1 = {str_0: dict_0, str_1: access_groups_iterator_0}
    access_groups_a_p_i_0.edit(access_groups_iterator_0, **dict_1)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b'\xc2\xb1'
    access_groups_iterator_0 = module_0.AccessGroupsIterator(bytes_0)
    access_groups_a_p_i_0 = module_0.AccessGroupsAPI(access_groups_iterator_0)
    str_0 = 'principals'
    dict_0 = {str_0: access_groups_a_p_i_0, str_0: access_groups_a_p_i_0, str_0: str_0, str_0: access_groups_iterator_0}
    str_1 = 'rules'
    dict_1 = {str_1: dict_0, str_0: str_1}
    access_groups_a_p_i_0.edit(access_groups_iterator_0, **dict_1)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b''
    access_groups_a_p_i_0 = module_0.AccessGroupsAPI(bytes_0)
    str_0 = 'principals'
    none_type_0 = None
    list_0 = [none_type_0, str_0, str_0]
    dict_0 = {str_0: access_groups_a_p_i_0, str_0: access_groups_a_p_i_0, str_0: str_0, str_0: list_0}
    access_groups_a_p_i_0.edit(access_groups_a_p_i_0, **dict_0)