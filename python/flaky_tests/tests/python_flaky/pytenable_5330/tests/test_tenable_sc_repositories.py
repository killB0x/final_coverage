# Automatically generated by Pynguin.
import pytest
import tenable.sc.repositories as module_0
import tokenize as module_1
import ast as module_2

def test_case_0():
    none_type_0 = None
    repository_a_p_i_0 = module_0.RepositoryAPI(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    repository_a_p_i_0 = module_0.RepositoryAPI(none_type_0)
    repository_a_p_i_0.remote_sync(repository_a_p_i_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    repository_a_p_i_0 = module_0.RepositoryAPI(none_type_0)
    repository_a_p_i_0.remote_authorize(repository_a_p_i_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    repository_a_p_i_0 = module_0.RepositoryAPI(none_type_0)
    repository_a_p_i_0.import_repository(none_type_0, repository_a_p_i_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    repository_a_p_i_0.recast_risk_rules(repository_a_p_i_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    none_type_0 = None
    repository_a_p_i_0.delete(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    repository_a_p_i_0 = module_0.RepositoryAPI(none_type_0)
    var_0 = module_1.maybe()
    repository_a_p_i_0.details(repository_a_p_i_0, repository_a_p_i_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    none_type_0 = None
    repository_a_p_i_0.mobile_sync(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    repository_a_p_i_0.create()

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    repository_a_p_i_0.asset_intersections(repository_a_p_i_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    str_0 = 'remotyde'
    dict_0 = {str_0: bool_0, str_0: str_0, str_0: bool_0}
    repository_a_p_i_0.edit(repository_a_p_i_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    var_0 = module_2._Unparser(_avoid_backslashes=bool_0)
    repository_a_p_i_0.remote_fetch(repository_a_p_i_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    repository_a_p_i_0.asset_intersections(bool_0, dns=repository_a_p_i_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    repository_a_p_i_0.list()

@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = True
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    repository_a_p_i_0.list(bool_0, repository_a_p_i_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = False
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    str_0 = 'mdid'
    dict_0 = {str_0: bool_0, str_0: repository_a_p_i_0, str_0: str_0, str_0: str_0, str_0: repository_a_p_i_0, str_0: str_0, str_0: str_0, str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: repository_a_p_i_0, str_0: bool_0, str_0: bool_0, str_0: repository_a_p_i_0, str_0: bool_0, str_0: str_0, str_0: repository_a_p_i_0, str_0: repository_a_p_i_0, str_0: repository_a_p_i_0, str_0: str_0, str_0: repository_a_p_i_0, str_0: str_0, str_0: str_0, str_0: repository_a_p_i_0}
    repository_a_p_i_0.accept_risk_rules(bool_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    str_0 = 'w\rAY'
    repository_a_p_i_0.asset_intersections(repository_a_p_i_0, ip=str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = True
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    none_type_0 = None
    repository_a_p_i_0.details(bool_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = True
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    str_0 = '\ndo|OD\ri'
    repository_a_p_i_0.asset_intersections(repository_a_p_i_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = False
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    str_0 = 'me'
    repository_a_p_i_0.list(str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = False
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    str_0 = 'ck>p'
    repository_a_p_i_0.details(repository_a_p_i_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = False
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    str_0 = 'reme'
    str_1 = 'format'
    dict_0 = {str_0: bool_0, str_1: bool_0}
    repository_a_p_i_0.create(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = True
    repository_a_p_i_0 = module_0.RepositoryAPI(bool_0)
    str_0 = 'allowed_ips'
    dict_0 = {str_0: bool_0}
    repository_a_p_i_0.create(**dict_0)