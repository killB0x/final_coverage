# Automatically generated by Pynguin.
import pytest
import importmagic.importer as module_0
import collections as module_1
import tokenize as module_2
import collections.abc as module_3
import token as module_4
import _io as module_5

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.get_update(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 2522
    import_0 = module_0.Import(int_0, int_0, int_0)
    assert f'{type(import_0).__module__}.{type(import_0).__qualname__}' == 'importmagic.importer.Import'
    assert import_0.location == 2522
    assert import_0.name == 2522
    assert import_0.alias == 2522
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    var_0 = import_0.__lt__(import_0)
    assert var_0 is False
    module_1.deque(*var_0, **var_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'E'
    module_0.Imports(str_0, str_0, str_0)

def test_case_3():
    str_0 = 'RobotFilePa)se'
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '",BI&yW'
    module_0.get_update(str_0, str_0, str_0, str_0)

def test_case_5():
    none_type_0 = None
    import_0 = module_0.Import(none_type_0, none_type_0, none_type_0)
    assert f'{type(import_0).__module__}.{type(import_0).__qualname__}' == 'importmagic.importer.Import'
    assert import_0.location is None
    assert import_0.name is None
    assert import_0.alias is None
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'

@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 2556
    import_0 = module_0.Import(int_0, int_0, int_0)
    assert f'{type(import_0).__module__}.{type(import_0).__qualname__}' == 'importmagic.importer.Import'
    assert import_0.location == 2556
    assert import_0.name == 2556
    assert import_0.alias == 2556
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    var_0 = import_0.__hash__()
    untokenizer_0 = module_2.Untokenizer()
    var_1 = import_0.__lt__(import_0)
    assert var_1 is False
    str_0 = '%A+)DTA\r(import\nagic'
    iterator_0 = module_0.Iterator(str_0, int_0)
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'
    var_2 = imports_0.update_source()
    assert var_2 == '(import\nagic\n'
    int_1 = 361
    module_0.update_imports(var_2, int_1, var_2, import_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'W9hxg+UNWQF~\r&uN*h{'
    module_0.update_imports(str_0, str_0, str_0, str_0)

def test_case_8():
    str_0 = 'RobotFileParse'
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'

def test_case_9():
    str_0 = 'RobotFileParse'
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'
    var_0 = imports_0.update_source()
    assert var_0 == 'RobotFileParse\n'

def test_case_10():
    str_0 = 'RobotFilePa)se'
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'
    var_0 = imports_0.__repr__()
    assert var_0 == "Imports(imports=set(), imports_from=defaultdict(<class 'set'>, {}))"

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = ''
    items_view_0 = module_3.ItemsView(str_0)
    var_0 = module_0.get_update(str_0, str_0, str_0, str_0)
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    var_1 = var_0.__repr__()
    assert var_1 == "(0, 0, '')"
    var_1.remove(items_view_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = '%APDJTA\\import?\nagc'
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'
    none_type_0 = None
    bool_0 = False
    imports_0.add_import_from(bool_0, bool_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '#uVXI'
    module_0.update_imports(str_0, str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    imports_0 = module_0.Imports(none_type_0, none_type_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'
    var_0 = module_4.ISEOF(imports_0)
    imports_0.add_import(imports_0, imports_0)

def test_case_15():
    none_type_0 = None
    import_0 = module_0.Import(none_type_0, none_type_0, none_type_0)
    assert f'{type(import_0).__module__}.{type(import_0).__qualname__}' == 'importmagic.importer.Import'
    assert import_0.location is None
    assert import_0.name is None
    assert import_0.alias is None
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    var_0 = import_0.__ne__(import_0)
    assert var_0 is False

def test_case_16():
    str_0 = "{){\x0b%)@dwv#'=6AW2^"
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_17():
    float_0 = 5150.05419
    import_0 = module_0.Import(float_0, float_0, float_0)
    assert f'{type(import_0).__module__}.{type(import_0).__qualname__}' == 'importmagic.importer.Import'
    assert import_0.location == pytest.approx(5150.05419, abs=0.01, rel=0.01)
    assert import_0.name == pytest.approx(5150.05419, abs=0.01, rel=0.01)
    assert import_0.alias == pytest.approx(5150.05419, abs=0.01, rel=0.01)
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    import_1 = module_0.Import(float_0, float_0, float_0)
    var_0 = import_1.__repr__()
    assert var_0 == 'Import(location=5150.05419, name=5150.05419, alias=5150.05419)'
    var_0.peek()

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = '9kp]4&,p7m}8~}@#^'
    module_0.get_update(str_0, str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = '\tn}{F~'
    ordered_dict_items_view_0 = module_1._OrderedDictItemsView(str_0)
    module_0.get_update(str_0, str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = '{Yw{4\x0ck'
    iterator_0 = module_0.Iterator(str_0)
    assert f'{type(iterator_0).__module__}.{type(iterator_0).__qualname__}' == 'importmagic.importer.Iterator'
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    var_0 = iterator_0.rewind()
    var_1 = iterator_0.until(var_0)
    var_2 = iterator_0.__nonzero__()
    assert var_2 is False
    module_0.get_update(var_1, var_0, var_2, str_0)

def test_case_21():
    str_0 = '%APDJTA\\import?\nagc'
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'

def test_case_22():
    str_0 = 'urllib2'
    iterator_0 = module_0.Iterator(str_0)
    assert f'{type(iterator_0).__module__}.{type(iterator_0).__qualname__}' == 'importmagic.importer.Iterator'
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    var_0 = iterator_0.until(str_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    int_0 = 2554
    none_type_0 = None
    import_0 = module_0.Import(int_0, int_0, none_type_0)
    assert f'{type(import_0).__module__}.{type(import_0).__qualname__}' == 'importmagic.importer.Import'
    assert import_0.location == 2554
    assert import_0.name == 2554
    assert import_0.alias is None
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    var_0 = import_0.__lt__(import_0)
    assert var_0 is False
    str_0 = 'E_4)\tld^'
    var_1 = import_0.__ne__(import_0)
    assert var_1 is False
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'
    var_2 = imports_0.__repr__()
    assert var_2 == "Imports(imports=set(), imports_from=defaultdict(<class 'set'>, {}))"
    var_3 = imports_0.update_source()
    assert var_3 == 'E_4)\tld^\n'
    int_1 = 360
    module_0.update_imports(var_2, int_1, var_2, import_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = '{Yw{4\x0ck'
    iterator_0 = module_0.Iterator(str_0)
    assert f'{type(iterator_0).__module__}.{type(iterator_0).__qualname__}' == 'importmagic.importer.Iterator'
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    var_0 = module_4.ISEOF(str_0)
    var_1 = iterator_0.until(var_0)
    var_2 = iterator_0.next()
    var_3 = var_0.__lt__(var_1)
    var_0.isprintable()

@pytest.mark.xfail(strict=True)
def test_case_25():
    bool_0 = False
    none_type_0 = None
    import_0 = module_0.Import(bool_0, bool_0, none_type_0)
    assert f'{type(import_0).__module__}.{type(import_0).__qualname__}' == 'importmagic.importer.Import'
    assert import_0.location is False
    assert import_0.name is False
    assert import_0.alias is None
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    int_0 = 2538
    import_1 = module_0.Import(int_0, int_0, int_0)
    var_0 = import_1.__lt__(import_1)
    assert var_0 is False
    str_0 = 'E_4)\tld^'
    var_1 = import_1.__ne__(import_1)
    assert var_1 is False
    var_2 = import_0.__ne__(import_1)
    assert var_2 is True
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'
    var_3 = imports_0.__repr__()
    assert var_3 == "Imports(imports=set(), imports_from=defaultdict(<class 'set'>, {}))"
    var_4 = imports_0.update_source()
    assert var_4 == 'E_4)\tld^\n'
    module_0.update_imports(var_3, var_1, var_3, import_1)

@pytest.mark.xfail(strict=True)
def test_case_26():
    bytes_0 = b'.\xb8\x94\xf8Q^A#5\xd1$\xbd\xc4\x9db$\x8b='
    iterator_0 = module_0.Iterator(bytes_0, bytes_0, bytes_0)
    assert f'{type(iterator_0).__module__}.{type(iterator_0).__qualname__}' == 'importmagic.importer.Iterator'
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    none_type_0 = None
    var_0 = iterator_0.until(none_type_0)
    var_1 = iterator_0.__repr__()
    imports_0 = module_0.Imports(iterator_0, var_1)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'
    iterator_0.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_27():
    int_0 = 2556
    import_0 = module_0.Import(int_0, int_0, int_0)
    assert f'{type(import_0).__module__}.{type(import_0).__qualname__}' == 'importmagic.importer.Import'
    assert import_0.location == 2556
    assert import_0.name == 2556
    assert import_0.alias == 2556
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    var_0 = import_0.__hash__()
    untokenizer_0 = module_2.Untokenizer()
    var_1 = import_0.__lt__(import_0)
    assert var_1 is False
    str_0 = '%A+)DTA\r(import\nagic'
    iterator_0 = module_0.Iterator(str_0, int_0)
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'
    var_2 = iterator_0.peek()
    var_3 = imports_0.update_source()
    assert var_3 == '(import\nagic\n'
    int_1 = 361
    module_0.update_imports(var_3, int_1, var_3, import_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    bool_0 = True
    none_type_0 = None
    import_0 = module_0.Import(bool_0, bool_0, none_type_0)
    assert f'{type(import_0).__module__}.{type(import_0).__qualname__}' == 'importmagic.importer.Import'
    assert import_0.location is True
    assert import_0.name is True
    assert import_0.alias is None
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    int_0 = 2538
    import_1 = module_0.Import(bool_0, int_0, bool_0)
    str_0 = 'E_4)\tld^'
    var_0 = import_0.__ne__(import_1)
    assert var_0 is True
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'
    var_1 = imports_0.__repr__()
    assert var_1 == "Imports(imports=set(), imports_from=defaultdict(<class 'set'>, {}))"
    var_2 = imports_0.update_source()
    assert var_2 == 'E_4)\tld^\n'
    int_1 = 360
    module_0.update_imports(var_1, int_1, var_1, import_1)

@pytest.mark.xfail(strict=True)
def test_case_29():
    int_0 = 2540
    import_0 = module_0.Import(int_0, int_0, int_0)
    assert f'{type(import_0).__module__}.{type(import_0).__qualname__}' == 'importmagic.importer.Import'
    assert import_0.location == 2540
    assert import_0.name == 2540
    assert import_0.alias == 2540
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    var_0 = import_0.__lt__(import_0)
    assert var_0 is False
    var_1 = import_0.__ne__(import_0)
    assert var_1 is False
    imports_0 = var_0.__dir__()
    var_2 = imports_0.__repr__()
    int_1 = 360
    module_0.update_imports(var_2, int_1, var_2, import_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    bool_0 = True
    none_type_0 = None
    import_0 = module_0.Import(bool_0, bool_0, none_type_0)
    assert f'{type(import_0).__module__}.{type(import_0).__qualname__}' == 'importmagic.importer.Import'
    assert import_0.location is True
    assert import_0.name is True
    assert import_0.alias is None
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    int_0 = 2538
    import_1 = module_0.Import(bool_0, int_0, bool_0)
    var_0 = import_1.__lt__(import_1)
    assert var_0 is False
    str_0 = 'E_4)\tld^'
    var_1 = import_1.__lt__(import_0)
    assert var_1 is False
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'
    var_2 = imports_0.__repr__()
    assert var_2 == "Imports(imports=set(), imports_from=defaultdict(<class 'set'>, {}))"
    var_3 = imports_0.update_source()
    assert var_3 == 'E_4)\tld^\n'
    int_1 = 360
    module_0.update_imports(var_2, int_1, var_2, import_1)

@pytest.mark.xfail(strict=True)
def test_case_31():
    untokenizer_0 = module_2.Untokenizer()
    str_0 = '%APVDATA(\\import\nagic'
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'
    deque_0 = module_1.deque()
    string_i_o_0 = module_5.StringIO()
    deque_0.sort()

@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = '%APPDATA%\\import:agic'
    module_0.Imports(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    int_0 = 2556
    import_0 = module_0.Import(int_0, int_0, int_0)
    assert f'{type(import_0).__module__}.{type(import_0).__qualname__}' == 'importmagic.importer.Import'
    assert import_0.location == 2556
    assert import_0.name == 2556
    assert import_0.alias == 2556
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    untokenizer_0 = module_2.Untokenizer()
    var_0 = import_0.__lt__(import_0)
    assert var_0 is False
    str_0 = '%A+)DTA\r(import\nagic'
    iterator_0 = module_0.Iterator(str_0, int_0)
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'
    var_1 = imports_0.update_source()
    assert var_1 == '(import\nagic\n'
    int_1 = 361
    module_0.update_imports(var_1, int_1, var_1, import_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    int_0 = 2540
    import_0 = module_0.Import(int_0, int_0, int_0)
    assert f'{type(import_0).__module__}.{type(import_0).__qualname__}' == 'importmagic.importer.Import'
    assert import_0.location == 2540
    assert import_0.name == 2540
    assert import_0.alias == 2540
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    var_0 = import_0.__repr__()
    assert var_0 == 'Import(location=2540, name=2540, alias=2540)'
    var_1 = import_0.__ne__(import_0)
    assert var_1 is False
    var_2 = var_0.casefold()
    module_0.update_imports(var_2, var_1, var_2, import_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    bool_0 = False
    none_type_0 = None
    import_0 = module_0.Import(bool_0, bool_0, none_type_0)
    assert f'{type(import_0).__module__}.{type(import_0).__qualname__}' == 'importmagic.importer.Import'
    assert import_0.location is False
    assert import_0.name is False
    assert import_0.alias is None
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    int_0 = 2538
    import_1 = module_0.Import(int_0, int_0, int_0)
    var_0 = import_0.__lt__(import_1)
    assert var_0 is True
    str_0 = 'E_4)\tld^'
    var_1 = import_1.__ne__(import_1)
    assert var_1 is False
    var_2 = import_0.__ne__(import_1)
    assert var_2 is True
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'
    var_3 = imports_0.__repr__()
    assert var_3 == "Imports(imports=set(), imports_from=defaultdict(<class 'set'>, {}))"
    var_4 = imports_0.update_source()
    assert var_4 == 'E_4)\tld^\n'
    int_1 = 360
    module_0.update_imports(var_3, int_1, var_3, import_1)

@pytest.mark.xfail(strict=True)
def test_case_36():
    int_0 = 2556
    import_0 = module_0.Import(int_0, int_0, int_0)
    assert f'{type(import_0).__module__}.{type(import_0).__qualname__}' == 'importmagic.importer.Import'
    assert import_0.location == 2556
    assert import_0.name == 2556
    assert import_0.alias == 2556
    assert module_0.LOCATION_ORDER == 'FS3L'
    assert module_0.PROJECT_CONFIG_FILE == 'setup.cfg'
    var_0 = import_0.__lt__(import_0)
    assert var_0 is False
    str_0 = '# importmagic: manage'
    imports_0 = module_0.Imports(str_0, str_0)
    assert f'{type(imports_0).__module__}.{type(imports_0).__qualname__}' == 'importmagic.importer.Imports'
    assert f'{type(module_0.Imports.set_style).__module__}.{type(module_0.Imports.set_style).__qualname__}' == 'builtins.method'
    var_1 = var_0.__int__()
    assert var_1 == 0
    var_2 = imports_0.update_source()
    assert var_2 == '# importmagic: manage\n'
    int_1 = 344
    module_0.update_imports(var_2, int_1, var_2, import_0)