# Automatically generated by Pynguin.
import pytest
import bottle_neck.routing as module_0

def test_case_0():
    router_0 = module_0.Router()
    assert f'{type(module_0.Router.routes).__module__}.{type(module_0.Router.routes).__qualname__}' == 'builtins.property'
    with pytest.raises(module_0.RouteError):
        router_0.register_handler(router_0, router_0)

def test_case_1():
    router_0 = module_0.Router()
    assert f'{type(module_0.Router.routes).__module__}.{type(module_0.Router.routes).__qualname__}' == 'builtins.property'
    var_0 = router_0.mount()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bottle_neck.routing.Router'
    assert len(var_0) == 0

def test_case_2():
    route_error_0 = module_0.RouteError()

def test_case_3():
    router_0 = module_0.Router()
    assert f'{type(module_0.Router.routes).__module__}.{type(module_0.Router.routes).__qualname__}' == 'builtins.property'
    var_0 = module_0.Route(router_0, router_0, router_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bottle_neck.routing.Route'
    assert f'{type(module_0.Route.wrap_callable).__module__}.{type(module_0.Route.wrap_callable).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Route.is_valid).__module__}.{type(module_0.Route.is_valid).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Route.callable_obj).__module__}.{type(module_0.Route.callable_obj).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Route.methods).__module__}.{type(module_0.Route.methods).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Route.uri).__module__}.{type(module_0.Route.uri).__qualname__}' == 'builtins.member_descriptor'

@pytest.mark.xfail(strict=True)
def test_case_4():
    router_0 = module_0.Router()
    assert f'{type(module_0.Router.routes).__module__}.{type(module_0.Router.routes).__qualname__}' == 'builtins.property'
    bool_0 = True
    route_0 = module_0.Route(bool_0, bool_0, bool_0)
    assert f'{type(route_0).__module__}.{type(route_0).__qualname__}' == 'bottle_neck.routing.Route'
    assert f'{type(module_0.Route.wrap_callable).__module__}.{type(module_0.Route.wrap_callable).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Route.is_valid).__module__}.{type(module_0.Route.is_valid).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Route.callable_obj).__module__}.{type(module_0.Route.callable_obj).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Route.methods).__module__}.{type(module_0.Route.methods).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Route.uri).__module__}.{type(module_0.Route.uri).__qualname__}' == 'builtins.member_descriptor'
    route_0.register_app(route_0)

def test_case_5():
    router_0 = module_0.Router()
    assert f'{type(module_0.Router.routes).__module__}.{type(module_0.Router.routes).__qualname__}' == 'builtins.property'

def test_case_6():
    router_0 = module_0.Router()
    assert f'{type(module_0.Router.routes).__module__}.{type(module_0.Router.routes).__qualname__}' == 'builtins.property'
    var_0 = router_0.mount()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bottle_neck.routing.Router'
    assert len(var_0) == 0
    var_1 = router_0.mount()
    var_2 = router_0.__repr__()
    assert var_2 == 'Router object: total 0 routes'

def test_case_7():
    router_0 = module_0.Router()
    assert f'{type(module_0.Router.routes).__module__}.{type(module_0.Router.routes).__qualname__}' == 'builtins.property'
    var_0 = router_0.__len__()

def test_case_8():
    router_0 = module_0.Router()
    assert f'{type(module_0.Router.routes).__module__}.{type(module_0.Router.routes).__qualname__}' == 'builtins.property'
    route_error_0 = module_0.RouteError(*router_0)
    assert f'{type(route_error_0).__module__}.{type(route_error_0).__qualname__}' == 'bottle_neck.routing.RouteError'