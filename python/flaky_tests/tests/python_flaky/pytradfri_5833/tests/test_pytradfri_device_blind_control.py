# Automatically generated by Pynguin.
import pytest
import pytradfri.device.blind_control as module_0

def test_case_0():
    set_0 = set()
    blind_control_0 = module_0.BlindControl(set_0)
    assert f'{type(blind_control_0).__module__}.{type(blind_control_0).__qualname__}' == 'pytradfri.device.blind_control.BlindControl'
    assert f'{type(module_0.BlindControl.raw).__module__}.{type(module_0.BlindControl.raw).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.BlindControl.blinds).__module__}.{type(module_0.BlindControl.blinds).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    blind_control_0 = module_0.BlindControl(none_type_0)
    assert f'{type(blind_control_0).__module__}.{type(blind_control_0).__qualname__}' == 'pytradfri.device.blind_control.BlindControl'
    assert f'{type(module_0.BlindControl.raw).__module__}.{type(module_0.BlindControl.raw).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.BlindControl.blinds).__module__}.{type(module_0.BlindControl.blinds).__qualname__}' == 'builtins.property'
    blind_control_0.trigger_blind()

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    blind_control_0 = module_0.BlindControl(none_type_0)
    assert f'{type(blind_control_0).__module__}.{type(blind_control_0).__qualname__}' == 'pytradfri.device.blind_control.BlindControl'
    assert f'{type(module_0.BlindControl.raw).__module__}.{type(module_0.BlindControl.raw).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.BlindControl.blinds).__module__}.{type(module_0.BlindControl.blinds).__qualname__}' == 'builtins.property'
    blind_control_0.set_state(none_type_0)