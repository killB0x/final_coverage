# Automatically generated by Pynguin.
import pytest
import pytradfri.util as module_0
import pytradfri.error as module_1

def test_case_0():
    str_0 = 'O'
    var_0 = module_0.load_json(str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.load_json(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '>FaH)LzCm+j'
    module_0.BitChoices(str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -1228
    module_0.save_json(int_0, int_0)

def test_case_4():
    str_0 = ''
    with pytest.raises(module_1.PytradfriError):
        module_0.save_json(str_0, str_0)

def test_case_5():
    none_type_0 = None
    with pytest.raises(module_1.PytradfriError):
        module_0.save_json(none_type_0, none_type_0)

def test_case_6():
    bool_0 = True
    with pytest.raises(module_1.PytradfriError):
        module_0.load_json(bool_0)

def test_case_7():
    set_0 = set()
    bit_choices_0 = module_0.BitChoices(set_0)
    assert f'{type(bit_choices_0).__module__}.{type(bit_choices_0).__qualname__}' == 'pytradfri.util.BitChoices'
    assert len(bit_choices_0) == 0

def test_case_8():
    set_0 = set()
    bit_choices_0 = module_0.BitChoices(set_0)
    assert f'{type(bit_choices_0).__module__}.{type(bit_choices_0).__qualname__}' == 'pytradfri.util.BitChoices'
    assert len(bit_choices_0) == 0
    var_0 = bit_choices_0.get_selected_keys(set_0)

def test_case_9():
    str_0 = ''
    bit_choices_0 = module_0.BitChoices(str_0)
    assert f'{type(bit_choices_0).__module__}.{type(bit_choices_0).__qualname__}' == 'pytradfri.util.BitChoices'
    assert len(bit_choices_0) == 0
    var_0 = bit_choices_0.get_selected_values(bit_choices_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = ''
    bit_choices_0 = module_0.BitChoices(str_0)
    assert f'{type(bit_choices_0).__module__}.{type(bit_choices_0).__qualname__}' == 'pytradfri.util.BitChoices'
    assert len(bit_choices_0) == 0
    var_0 = module_0.load_json(str_0)
    var_1 = bit_choices_0.get_selected_keys(bit_choices_0)
    bit_choices_0.seek(str_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = ''
    bit_choices_0 = module_0.BitChoices(str_0)
    assert f'{type(bit_choices_0).__module__}.{type(bit_choices_0).__qualname__}' == 'pytradfri.util.BitChoices'
    assert len(bit_choices_0) == 0
    str_1 = 'jPgJi#8I9Y|\x0c|%<*1kXK'
    var_0 = bit_choices_0.__len__()
    var_1 = module_0.load_json(str_1)
    var_2 = bit_choices_0.get_selected_values(str_0)
    var_3 = bit_choices_0.get_selected_keys(bit_choices_0)
    var_3.seek(var_2, var_1)

def test_case_12():
    str_0 = ''
    bit_choices_0 = module_0.BitChoices(str_0)
    assert f'{type(bit_choices_0).__module__}.{type(bit_choices_0).__qualname__}' == 'pytradfri.util.BitChoices'
    assert len(bit_choices_0) == 0
    var_0 = bit_choices_0.get_selected_values(bit_choices_0)
    bit_choices_1 = module_0.BitChoices(bit_choices_0)
    var_1 = module_0.load_json(str_0)

def test_case_13():
    int_0 = -1232
    with pytest.raises(module_1.PytradfriError):
        module_0.load_json(int_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = ''
    bit_choices_0 = module_0.BitChoices(str_0)
    assert f'{type(bit_choices_0).__module__}.{type(bit_choices_0).__qualname__}' == 'pytradfri.util.BitChoices'
    assert len(bit_choices_0) == 0
    str_1 = 'jPgJi#8I9Y|\x0c|%<*1kXK'
    var_0 = module_0.load_json(str_1)
    var_1 = bit_choices_0.get_selected_values(str_0)
    bit_choices_0.__getattr__(var_1)

def test_case_15():
    int_0 = 2
    with pytest.raises(module_1.PytradfriError):
        module_0.load_json(int_0)