# Automatically generated by Pynguin.
import pytest
import pytradfri.device.light as module_0

def test_case_0():
    bool_0 = False
    light_0 = module_0.Light(bool_0, bool_0)
    assert f'{type(module_0.Light.supported_features).__module__}.{type(module_0.Light.supported_features).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Light.state).__module__}.{type(module_0.Light.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Light.dimmer).__module__}.{type(module_0.Light.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Light.color_temp).__module__}.{type(module_0.Light.color_temp).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Light.hex_color).__module__}.{type(module_0.Light.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Light.xy_color).__module__}.{type(module_0.Light.xy_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Light.hsb_xy_color).__module__}.{type(module_0.Light.hsb_xy_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Light.raw).__module__}.{type(module_0.Light.raw).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'\xb9\xfc>3\xade\xcaJ\x83\xc4\x9f>j\xd6\x7f\n'
    tuple_0 = (bytes_0,)
    light_0 = module_0.Light(tuple_0, tuple_0)
    assert f'{type(module_0.Light.supported_features).__module__}.{type(module_0.Light.supported_features).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Light.state).__module__}.{type(module_0.Light.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Light.dimmer).__module__}.{type(module_0.Light.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Light.color_temp).__module__}.{type(module_0.Light.color_temp).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Light.hex_color).__module__}.{type(module_0.Light.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Light.xy_color).__module__}.{type(module_0.Light.xy_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Light.hsb_xy_color).__module__}.{type(module_0.Light.hsb_xy_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Light.raw).__module__}.{type(module_0.Light.raw).__qualname__}' == 'builtins.property'
    light_0.__repr__()