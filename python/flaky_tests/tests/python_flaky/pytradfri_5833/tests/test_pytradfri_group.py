# Automatically generated by Pynguin.
import pytest
import pytradfri.group as module_0
import pytradfri.error as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'IuB]'
    group_0 = module_0.Group(str_0, str_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw == 'IuB]'
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    group_0.set_dimmer(str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -2489
    none_type_0 = None
    group_0 = module_0.Group(int_0, int_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw == -2489
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    group_0.set_xy_color(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    group_0 = module_0.Group(none_type_0, none_type_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw is None
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    group_0.set_predefined_color(group_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b'I\xa9\xe8\xbfr\xc1\x8e\xb7'
    none_type_0 = None
    group_0 = module_0.Group(none_type_0, none_type_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw is None
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    group_0.set_xy_color(bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    group_0 = module_0.Group(none_type_0, none_type_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw is None
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    group_0.set_color_temp(none_type_0)

def test_case_5():
    bytes_0 = b'n\xeff<\x14\xaf\xb1Z\xae\xb0~\x9a\xc4\xbd;@\x1b\x9a,\xae'
    group_0 = module_0.Group(bytes_0, bytes_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw == b'n\xeff<\x14\xaf\xb1Z\xae\xb0~\x9a\xc4\xbd;@\x1b\x9a,\xae'
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    bool_1 = False
    none_type_0 = None
    group_0 = module_0.Group(bool_0, bool_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw is True
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    group_0.set_hsb(bool_1, bool_0, index=none_type_0, transition_time=bool_1)

def test_case_7():
    dict_0 = {}
    group_0 = module_0.Group(dict_0, dict_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw == {}
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    var_0 = group_0.__repr__()
    assert var_0 == '<Group None - off>'

def test_case_8():
    dict_0 = {}
    group_0 = module_0.Group(dict_0, dict_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw == {}
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    var_0 = group_0.members()

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '5750'
    group_0 = module_0.Group(str_0, str_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw == '5750'
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    bool_0 = True
    group_0.add_member(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    float_0 = -2473.636
    group_0 = module_0.Group(float_0, float_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw == pytest.approx(-2473.636, abs=0.01, rel=0.01)
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    group_0.remove_member(float_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'Client_identity'
    group_0 = module_0.Group(str_0, str_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw == 'Client_identity'
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    group_0.moods()

@pytest.mark.xfail(strict=True)
def test_case_12():
    dict_0 = {}
    group_0 = module_0.Group(dict_0, dict_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw == {}
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    var_0 = group_0.members()
    group_0.mood()

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    group_0 = module_0.Group(bool_0, bool_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw is True
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    group_0.activate_mood(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    float_0 = 2155.3564
    group_0 = module_0.Group(float_0, float_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw == pytest.approx(2155.3564, abs=0.01, rel=0.01)
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    group_0.set_state(float_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    group_0 = module_0.Group(bool_0, bool_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw is True
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    group_0.set_dimmer(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    group_0 = module_0.Group(none_type_0, none_type_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw is None
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    group_0.set_hex_color(group_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = True
    none_type_0 = None
    group_0 = module_0.Group(none_type_0, bool_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw is True
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    group_0.set_xy_color(none_type_0, none_type_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    int_0 = -316
    dict_0 = {}
    group_0 = module_0.Group(dict_0, dict_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw == {}
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    var_0 = group_0.members()
    var_1 = group_0.__repr__()
    assert var_1 == '<Group None - off>'
    group_0.set_hsb(int_0, int_0, index=int_0, transition_time=int_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = 280
    dict_0 = {}
    group_0 = module_0.Group(dict_0, dict_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw == {}
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    var_0 = group_0.set_hex_color(int_0, dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pytradfri.command.Command'
    var_1 = group_0.members()
    var_2 = group_0.observe(group_0, dict_0, int_0)
    var_1.set_hex_color(var_2)

@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = True
    group_0 = module_0.Group(bool_0, bool_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw is True
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    bool_1 = False
    none_type_0 = None
    group_0.set_hsb(none_type_0, bool_1, transition_time=none_type_0)

def test_case_21():
    str_0 = '\n        Resets the Gateway to factory defaults.\n        WARNING: All data in Gateway is lost (pairing, groups, etc)\n\n        Returns a Command.\n        '
    group_0 = module_0.Group(str_0, str_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw == '\n        Resets the Gateway to factory defaults.\n        WARNING: All data in Gateway is lost (pairing, groups, etc)\n\n        Returns a Command.\n        '
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    with pytest.raises(module_1.ColorError):
        group_0.set_predefined_color(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = None
    group_0 = module_0.Group(none_type_0, none_type_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw is None
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    none_type_1 = None
    group_0.set_hsb(none_type_1, none_type_0, group_0, index=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    int_0 = 2405
    dict_0 = {}
    group_0 = module_0.Group(dict_0, dict_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw == {}
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    var_0 = group_0.members()
    var_1 = group_0.__repr__()
    assert var_1 == '<Group None - off>'
    group_0.set_color_temp(int_0, index=int_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = True
    none_type_0 = None
    group_0 = module_0.Group(bool_0, none_type_0)
    assert f'{type(group_0).__module__}.{type(group_0).__qualname__}' == 'pytradfri.group.Group'
    assert group_0.raw is None
    assert f'{type(module_0.Group.path).__module__}.{type(module_0.Group.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.state).__module__}.{type(module_0.Group.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.dimmer).__module__}.{type(module_0.Group.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.hex_color).__module__}.{type(module_0.Group.hex_color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.member_ids).__module__}.{type(module_0.Group.member_ids).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Group.mood_id).__module__}.{type(module_0.Group.mood_id).__qualname__}' == 'builtins.property'
    set_0 = set()
    none_type_1 = None
    group_1 = module_0.Group(set_0, none_type_1)
    assert group_1.raw is None
    group_1.set_color_temp(none_type_1, transition_time=group_1)