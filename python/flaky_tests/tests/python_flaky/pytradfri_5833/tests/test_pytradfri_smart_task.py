# Automatically generated by Pynguin.
import pytest
import pytradfri.smart_task as module_0

def test_case_0():
    bool_0 = False
    start_action_item_0 = module_0.StartActionItem(bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(module_0.StartActionItem.devices_dict).__module__}.{type(module_0.StartActionItem.devices_dict).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.id).__module__}.{type(module_0.StartActionItem.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.item_controller).__module__}.{type(module_0.StartActionItem.item_controller).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.transition_time).__module__}.{type(module_0.StartActionItem.transition_time).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.dimmer).__module__}.{type(module_0.StartActionItem.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.raw).__module__}.{type(module_0.StartActionItem.raw).__qualname__}' == 'builtins.property'

def test_case_1():
    float_0 = -4148.8428
    smart_task_0 = module_0.SmartTask(float_0, float_0)
    assert f'{type(smart_task_0).__module__}.{type(smart_task_0).__qualname__}' == 'pytradfri.smart_task.SmartTask'
    assert smart_task_0.raw == pytest.approx(-4148.8428, abs=0.01, rel=0.01)
    assert f'{type(module_0.SmartTask.path).__module__}.{type(module_0.SmartTask.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.state).__module__}.{type(module_0.SmartTask.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_type_id).__module__}.{type(module_0.SmartTask.task_type_id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_type_name).__module__}.{type(module_0.SmartTask.task_type_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.is_wake_up).__module__}.{type(module_0.SmartTask.is_wake_up).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.is_not_at_home).__module__}.{type(module_0.SmartTask.is_not_at_home).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.is_lights_off).__module__}.{type(module_0.SmartTask.is_lights_off).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.repeat_days).__module__}.{type(module_0.SmartTask.repeat_days).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.repeat_days_list).__module__}.{type(module_0.SmartTask.repeat_days_list).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_start_parameters).__module__}.{type(module_0.SmartTask.task_start_parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_start_time).__module__}.{type(module_0.SmartTask.task_start_time).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_control).__module__}.{type(module_0.SmartTask.task_control).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.start_action).__module__}.{type(module_0.SmartTask.start_action).__qualname__}' == 'builtins.property'

def test_case_2():
    dict_0 = {}
    smart_task_0 = module_0.SmartTask(dict_0, dict_0)
    assert f'{type(smart_task_0).__module__}.{type(smart_task_0).__qualname__}' == 'pytradfri.smart_task.SmartTask'
    assert smart_task_0.raw == {}
    assert f'{type(module_0.SmartTask.path).__module__}.{type(module_0.SmartTask.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.state).__module__}.{type(module_0.SmartTask.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_type_id).__module__}.{type(module_0.SmartTask.task_type_id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_type_name).__module__}.{type(module_0.SmartTask.task_type_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.is_wake_up).__module__}.{type(module_0.SmartTask.is_wake_up).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.is_not_at_home).__module__}.{type(module_0.SmartTask.is_not_at_home).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.is_lights_off).__module__}.{type(module_0.SmartTask.is_lights_off).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.repeat_days).__module__}.{type(module_0.SmartTask.repeat_days).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.repeat_days_list).__module__}.{type(module_0.SmartTask.repeat_days_list).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_start_parameters).__module__}.{type(module_0.SmartTask.task_start_parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_start_time).__module__}.{type(module_0.SmartTask.task_start_time).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_control).__module__}.{type(module_0.SmartTask.task_control).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.start_action).__module__}.{type(module_0.SmartTask.start_action).__qualname__}' == 'builtins.property'
    var_0 = smart_task_0.__repr__()
    assert var_0 == '<Task None - None - off>'
    var_1 = smart_task_0.observe(var_0, var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pytradfri.command.Command'

def test_case_3():
    dict_0 = {}
    smart_task_0 = module_0.SmartTask(dict_0, dict_0)
    assert f'{type(smart_task_0).__module__}.{type(smart_task_0).__qualname__}' == 'pytradfri.smart_task.SmartTask'
    assert smart_task_0.raw == {}
    assert f'{type(module_0.SmartTask.path).__module__}.{type(module_0.SmartTask.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.state).__module__}.{type(module_0.SmartTask.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_type_id).__module__}.{type(module_0.SmartTask.task_type_id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_type_name).__module__}.{type(module_0.SmartTask.task_type_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.is_wake_up).__module__}.{type(module_0.SmartTask.is_wake_up).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.is_not_at_home).__module__}.{type(module_0.SmartTask.is_not_at_home).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.is_lights_off).__module__}.{type(module_0.SmartTask.is_lights_off).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.repeat_days).__module__}.{type(module_0.SmartTask.repeat_days).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.repeat_days_list).__module__}.{type(module_0.SmartTask.repeat_days_list).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_start_parameters).__module__}.{type(module_0.SmartTask.task_start_parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_start_time).__module__}.{type(module_0.SmartTask.task_start_time).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_control).__module__}.{type(module_0.SmartTask.task_control).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.start_action).__module__}.{type(module_0.SmartTask.start_action).__qualname__}' == 'builtins.property'
    var_0 = smart_task_0.__repr__()
    assert var_0 == '<Task None - None - off>'

def test_case_4():
    bool_0 = False
    task_control_0 = module_0.TaskControl(bool_0, bool_0, bool_0, bool_0)
    assert f'{type(module_0.TaskControl.tasks).__module__}.{type(module_0.TaskControl.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TaskControl.raw).__module__}.{type(module_0.TaskControl.raw).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    task_control_0 = module_0.TaskControl(none_type_0, none_type_0, none_type_0, none_type_0)
    assert f'{type(module_0.TaskControl.tasks).__module__}.{type(module_0.TaskControl.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TaskControl.raw).__module__}.{type(module_0.TaskControl.raw).__qualname__}' == 'builtins.property'
    task_control_0.set_dimmer_start_time(task_control_0, none_type_0)

def test_case_6():
    float_0 = 677.4
    start_action_0 = module_0.StartAction(float_0, float_0)
    assert f'{type(module_0.StartAction.state).__module__}.{type(module_0.StartAction.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartAction.devices).__module__}.{type(module_0.StartAction.devices).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartAction.raw).__module__}.{type(module_0.StartAction.raw).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    complex_0 = (-6329.657971-2224.8344j)
    none_type_0 = None
    start_action_item_0 = module_0.StartActionItem(bool_0, complex_0, complex_0, complex_0, none_type_0)
    assert f'{type(module_0.StartActionItem.devices_dict).__module__}.{type(module_0.StartActionItem.devices_dict).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.id).__module__}.{type(module_0.StartActionItem.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.item_controller).__module__}.{type(module_0.StartActionItem.item_controller).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.transition_time).__module__}.{type(module_0.StartActionItem.transition_time).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.dimmer).__module__}.{type(module_0.StartActionItem.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.raw).__module__}.{type(module_0.StartActionItem.raw).__qualname__}' == 'builtins.property'
    start_action_item_0.__repr__()

def test_case_8():
    none_type_0 = None
    start_action_item_controller_0 = module_0.StartActionItemController(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    dict_0 = {}
    none_type_0 = None
    smart_task_0 = module_0.SmartTask(dict_0, dict_0)
    assert f'{type(smart_task_0).__module__}.{type(smart_task_0).__qualname__}' == 'pytradfri.smart_task.SmartTask'
    assert smart_task_0.raw == {}
    assert f'{type(module_0.SmartTask.path).__module__}.{type(module_0.SmartTask.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.state).__module__}.{type(module_0.SmartTask.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_type_id).__module__}.{type(module_0.SmartTask.task_type_id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_type_name).__module__}.{type(module_0.SmartTask.task_type_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.is_wake_up).__module__}.{type(module_0.SmartTask.is_wake_up).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.is_not_at_home).__module__}.{type(module_0.SmartTask.is_not_at_home).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.is_lights_off).__module__}.{type(module_0.SmartTask.is_lights_off).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.repeat_days).__module__}.{type(module_0.SmartTask.repeat_days).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.repeat_days_list).__module__}.{type(module_0.SmartTask.repeat_days_list).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_start_parameters).__module__}.{type(module_0.SmartTask.task_start_parameters).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_start_time).__module__}.{type(module_0.SmartTask.task_start_time).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.task_control).__module__}.{type(module_0.SmartTask.task_control).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SmartTask.start_action).__module__}.{type(module_0.SmartTask.start_action).__qualname__}' == 'builtins.property'
    start_action_item_controller_0 = module_0.StartActionItemController(smart_task_0, smart_task_0, dict_0, none_type_0, none_type_0)
    var_0 = smart_task_0.__repr__()
    assert var_0 == '<Task None - None - off>'
    start_action_item_controller_0.set_dimmer(smart_task_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    complex_0 = (5011.35-2511.69956j)
    start_action_item_controller_0 = module_0.StartActionItemController(complex_0, complex_0, complex_0, complex_0, complex_0)
    none_type_0 = None
    start_action_item_controller_0.set_transition_time(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    start_action_0 = module_0.StartAction(bool_0, bool_0)
    assert f'{type(module_0.StartAction.state).__module__}.{type(module_0.StartAction.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartAction.devices).__module__}.{type(module_0.StartAction.devices).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartAction.raw).__module__}.{type(module_0.StartAction.raw).__qualname__}' == 'builtins.property'
    task_control_0 = module_0.TaskControl(bool_0, bool_0, bool_0, bool_0)
    assert f'{type(module_0.TaskControl.tasks).__module__}.{type(module_0.TaskControl.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TaskControl.raw).__module__}.{type(module_0.TaskControl.raw).__qualname__}' == 'builtins.property'
    bool_1 = False
    start_action_item_controller_0 = module_0.StartActionItemController(bool_0, bool_0, task_control_0, task_control_0, bool_0)
    start_action_item_controller_0.set_values(bool_1)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    start_action_0 = module_0.StartAction(bool_0, bool_0)
    assert f'{type(module_0.StartAction.state).__module__}.{type(module_0.StartAction.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartAction.devices).__module__}.{type(module_0.StartAction.devices).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartAction.raw).__module__}.{type(module_0.StartAction.raw).__qualname__}' == 'builtins.property'
    task_control_0 = module_0.TaskControl(bool_0, bool_0, bool_0, bool_0)
    assert f'{type(module_0.TaskControl.tasks).__module__}.{type(module_0.TaskControl.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TaskControl.raw).__module__}.{type(module_0.TaskControl.raw).__qualname__}' == 'builtins.property'
    complex_0 = (-6329.657971-2224.8344j)
    start_action_1 = module_0.StartAction(bool_0, bool_0)
    none_type_0 = None
    bool_1 = False
    start_action_item_0 = module_0.StartActionItem(task_control_0, complex_0, bool_1, bool_1, none_type_0)
    assert f'{type(module_0.StartActionItem.devices_dict).__module__}.{type(module_0.StartActionItem.devices_dict).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.id).__module__}.{type(module_0.StartActionItem.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.item_controller).__module__}.{type(module_0.StartActionItem.item_controller).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.transition_time).__module__}.{type(module_0.StartActionItem.transition_time).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.dimmer).__module__}.{type(module_0.StartActionItem.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.raw).__module__}.{type(module_0.StartActionItem.raw).__qualname__}' == 'builtins.property'
    start_action_item_0.__repr__()

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    start_action_0 = module_0.StartAction(bool_0, bool_0)
    assert f'{type(module_0.StartAction.state).__module__}.{type(module_0.StartAction.state).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartAction.devices).__module__}.{type(module_0.StartAction.devices).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartAction.raw).__module__}.{type(module_0.StartAction.raw).__qualname__}' == 'builtins.property'
    task_control_0 = module_0.TaskControl(bool_0, bool_0, bool_0, bool_0)
    assert f'{type(module_0.TaskControl.tasks).__module__}.{type(module_0.TaskControl.tasks).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.TaskControl.raw).__module__}.{type(module_0.TaskControl.raw).__qualname__}' == 'builtins.property'
    start_action_item_0 = module_0.StartActionItem(start_action_0, start_action_0, bool_0, bool_0, start_action_0)
    assert f'{type(module_0.StartActionItem.devices_dict).__module__}.{type(module_0.StartActionItem.devices_dict).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.id).__module__}.{type(module_0.StartActionItem.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.item_controller).__module__}.{type(module_0.StartActionItem.item_controller).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.transition_time).__module__}.{type(module_0.StartActionItem.transition_time).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.dimmer).__module__}.{type(module_0.StartActionItem.dimmer).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StartActionItem.raw).__module__}.{type(module_0.StartActionItem.raw).__qualname__}' == 'builtins.property'
    start_action_item_0.__repr__()