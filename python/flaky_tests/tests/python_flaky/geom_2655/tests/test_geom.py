# Automatically generated by Pynguin.
import pytest
import geom as module_0

def test_case_0():
    bool_0 = False
    with pytest.raises(TypeError):
        module_0.set_tolerance(bool_0)

def test_case_1():
    bytes_0 = b'\x1f\x99'
    with pytest.raises(TypeError):
        module_0.set_tolerance(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '\nC}|2jME'
    module_0.Circle(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_0.Circle(bool_0, bool_0)

def test_case_4():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_0.Vector(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 603
    module_0.Circle(int_0, int_0)

def test_case_6():
    int_0 = 603
    var_0 = module_0.set_tolerance(int_0)
    assert module_0.eps == 603

def test_case_7():
    int_0 = -545
    with pytest.raises(ValueError):
        module_0.set_tolerance(int_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x04\xaf\x98S\x98'\xd3\xc5\x83RO\x1b!\x98\xf3"
    module_0.Circle(bytes_0, bytes_0)

def test_case_9():
    bytes_0 = b'\xbb\xfc\xce6\x02\xc8\xed\x97\xac7)W\xf6'
    var_0 = module_0.Vector(bytes_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Vector'
    assert len(var_0) == 13
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'

def test_case_10():
    str_0 = ''
    with pytest.raises(ValueError):
        module_0.Vector(str_0)

def test_case_11():
    str_0 = 'x'
    with pytest.raises(TypeError):
        module_0.Vector(str_0)

def test_case_12():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert module_0.eps == 603
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = var_0.__add__(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    with pytest.raises(TypeError):
        vector_0.__matmul__(int_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = -772
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = int_0.__str__()
    var_1 = vector_0.dot(vector_0)
    assert var_1 == 1787952
    var_2 = vector_0.__invert__()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_1.__rmatmul__(vector_0)

def test_case_14():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = var_0.__add__(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    var_2 = vector_0.normalize()
    var_3 = vector_0.__invert__()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'geom.Vector'
    assert len(var_3) == 3
    var_4 = vector_0.__mul__(var_1)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'geom.Vector'
    assert len(var_4) == 3

@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__add__(list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Vector'
    assert len(var_0) == 3
    var_1 = vector_0.normalize()
    int_0.magSq()

@pytest.mark.xfail(strict=True)
def test_case_16():
    int_0 = -772
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.mag()
    assert var_0 == pytest.approx(1337.1432234431734, abs=0.01, rel=0.01)
    var_1 = var_0.__str__()
    assert var_1 == '1337.1432234431734'
    var_2 = vector_0.dot(vector_0)
    assert var_2 == 1787952
    var_3 = vector_0.__invert__()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'geom.Vector'
    assert len(var_3) == 3
    var_4 = var_2.__ror__(vector_0)
    var_5 = vector_0.__neg__()
    bytes_0 = b'\x03P0\xbf\xc7y)\xda^\x87\x9b\x01\xd3=\x0b\x0c\xac\x19\x1c'
    var_6 = bytes_0.__eq__(var_2)
    var_7 = var_3.divBy(var_2)
    var_6.intersects(int_0)

def test_case_17():
    int_0 = -764
    list_0 = [int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 1
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.dot(vector_0)
    assert var_0 == 583696
    with pytest.raises(TypeError):
        vector_0.mul(vector_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = var_0.__add__(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    bytes_0 = b'8oO\r\x92C\x96\x99'
    vector_0.cross(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = -764
    list_0 = [int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 1
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    vector_0.cross(vector_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    int_0 = -764
    list_0 = [int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 1
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.normalize()
    var_1 = vector_0.__neg__()
    vector_0.dot(var_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__repr__()
    assert var_0 == 'geom.Vector([-764, -764, -764])'
    var_1 = int_0.__add__(list_0)
    var_2 = vector_0.__neg__()
    var_3 = vector_0.__eq__(list_0)
    assert var_3 is True
    var_4 = vector_0.__neg__()
    var_5 = vector_0.magSq()
    assert var_5 == 1751088
    var_6 = vector_0.normalize()
    var_7 = vector_0.__invert__()
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'geom.Vector'
    assert len(var_7) == 3
    var_8 = var_4.__rmul__(list_0)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'geom.Vector'
    assert len(var_8) == 3
    var_9 = var_5.__round__()
    assert var_9 == 1751088
    var_1.takeAway(var_1)

@pytest.mark.xfail(strict=True)
def test_case_22():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__radd__(vector_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Vector'
    assert len(var_0) == 3
    var_1 = vector_0.normalize()
    var_2 = vector_0.__invert__()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = var_2.magSq()
    assert var_3 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_4 = var_2.__invert__()
    var_1.__round__()

def test_case_23():
    int_0 = -777
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = vector_0.__repr__()
    assert var_1 == 'geom.Vector([-777, -777, -777])'
    var_2 = var_0.__add__(list_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = vector_0.__neg__()
    var_4 = vector_0.__eq__(list_0)
    assert var_4 is True
    var_5 = vector_0.__matmul__(list_0)
    assert var_5 == 1811187
    var_6 = var_0.__rmul__(list_0)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'geom.Vector'
    assert len(var_6) == 3
    var_7 = var_2.addOn(list_0)
    var_8 = vector_0.__mul__(list_0)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'geom.Vector'
    assert len(var_8) == 3
    var_9 = var_6.__rmatmul__(var_0)
    assert var_9 == 0
    var_10 = var_2.takeAway(var_2)
    none_type_0 = None
    with pytest.raises(TypeError):
        var_6.mulBy(none_type_0)

def test_case_24():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = var_0.__add__(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    var_2 = vector_0.normalize()
    var_3 = var_1.magSq()
    assert var_3 == 0
    var_4 = vector_0.__mul__(var_1)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'geom.Vector'
    assert len(var_4) == 3

@pytest.mark.xfail(strict=True)
def test_case_25():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = vector_0.__repr__()
    assert var_1 == 'geom.Vector([-764, -764, -764])'
    var_2 = var_0.__add__(list_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = vector_0.__neg__()
    var_4 = vector_0.__str__()
    assert var_4 == '<-764, -764, -764>'
    var_5 = vector_0.__eq__(list_0)
    assert var_5 is True
    var_6 = vector_0.__neg__()
    var_7 = vector_0.__matmul__(var_6)
    assert var_7 == -1751088
    var_8 = vector_0.magSq()
    assert var_8 == 1751088
    var_9 = var_0.sub(var_2)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'geom.Vector'
    assert len(var_9) == 3
    var_10 = vector_0.normalize()
    var_11 = vector_0.__invert__()
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'geom.Vector'
    assert len(var_11) == 3
    var_12 = var_6.__rmul__(list_0)
    assert f'{type(var_12).__module__}.{type(var_12).__qualname__}' == 'geom.Vector'
    assert len(var_12) == 3
    var_13 = var_7.__round__()
    assert var_13 == -1751088
    var_14 = var_5.__lt__(var_2)
    var_14.add(var_7)

def test_case_26():
    int_0 = 1
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    var_0 = circle_0.intersects(circle_0)
    assert var_0 is True
    var_1 = circle_0.__repr__()
    assert var_1 == 'geom.Circle(<1, 1>, 1)'
    with pytest.raises(TypeError):
        circle_0.intersects(var_1)

def test_case_27():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__truediv__(int_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Vector'
    assert len(var_0) == 3
    var_1 = vector_0.__neg__()
    var_2 = vector_0.dot(vector_0)
    assert var_2 == 1751088
    with pytest.raises(TypeError):
        vector_0.mul(vector_0)

def test_case_28():
    int_0 = -772
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.mag()
    assert var_0 == pytest.approx(1337.1432234431734, abs=0.01, rel=0.01)
    var_1 = vector_0.__neg__()
    var_2 = vector_0.dot(vector_0)
    assert var_2 == 1787952
    var_3 = vector_0.__invert__()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'geom.Vector'
    assert len(var_3) == 3
    bytes_0 = b'\x03P0\xbf\xc7y)\xda^\x87\x9b\x01\xd3=\x0b\x0c\xac\x19\x1c'
    tuple_0 = (var_1, bytes_0)
    with pytest.raises(TypeError):
        vector_0.__setitem__(var_3, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = vector_0.__repr__()
    assert var_1 == 'geom.Vector([-764, -764, -764])'
    var_2 = var_0.__add__(list_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = vector_0.__neg__()
    var_4 = vector_0.__eq__(list_0)
    assert var_4 is True
    var_5 = vector_0.__neg__()
    var_6 = vector_0.__matmul__(var_5)
    assert var_6 == -1751088
    var_7 = vector_0.magSq()
    assert var_7 == 1751088
    var_8 = var_0.sub(var_2)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'geom.Vector'
    assert len(var_8) == 3
    var_9 = vector_0.normalize()
    var_10 = vector_0.__invert__()
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'geom.Vector'
    assert len(var_10) == 3
    var_11 = var_5.__rmul__(list_0)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'geom.Vector'
    assert len(var_11) == 3
    var_12 = var_6.__round__()
    assert var_12 == -1751088
    var_13 = var_2.addOn(list_0)
    var_14 = var_10.__rmatmul__(var_11)
    assert var_14 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_15 = var_11.__rmatmul__(var_0)
    assert var_15 == 0
    var_5.add(var_12)

def test_case_30():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert module_0.eps == 603
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = vector_0.__repr__()
    assert var_1 == 'geom.Vector([-764, -764, -764])'
    var_2 = var_0.__add__(list_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = vector_0.__neg__()
    var_4 = vector_0.__eq__(list_0)
    assert var_4 is True
    var_5 = vector_0.__neg__()
    var_6 = vector_0.magSq()
    assert var_6 == 1751088
    var_7 = var_0.sub(var_2)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'geom.Vector'
    assert len(var_7) == 3
    var_8 = vector_0.normalize()
    var_9 = vector_0.__invert__()
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'geom.Vector'
    assert len(var_9) == 3
    var_10 = var_5.__rmul__(list_0)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'geom.Vector'
    assert len(var_10) == 3
    var_11 = var_2.addOn(list_0)
    var_12 = var_2.takeAway(var_2)
    with pytest.raises(TypeError):
        var_7.mulBy(var_7)

@pytest.mark.xfail(strict=True)
def test_case_31():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.mag()
    assert var_0 == pytest.approx(1323.2868169826222, abs=0.01, rel=0.01)
    var_1 = vector_0.__neg__()
    var_2 = vector_0.div(var_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = vector_0.dot(vector_0)
    assert var_3 == 1751088
    var_4 = var_3.__invert__()
    assert var_4 == -1751089
    var_5 = vector_0.__invert__()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'geom.Vector'
    assert len(var_5) == 3
    var_6 = var_1.__len__()
    module_0.Circle(var_6, list_0)

@pytest.mark.xfail(strict=True)
def test_case_32():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__rmul__(int_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Vector'
    assert len(var_0) == 3
    var_1 = vector_0.normalize()
    var_2 = vector_0.__invert__()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = var_2.__invert__()
    list_0.addOn(var_3)

@pytest.mark.xfail(strict=True)
def test_case_33():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    var_0 = module_0.is_numeric(int_0)
    assert var_0 is True
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    vector_0.div(vector_0)

def test_case_34():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.sub(list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Vector'
    assert len(var_0) == 3
    var_1 = vector_0.mag()
    assert var_1 == pytest.approx(1323.2868169826222, abs=0.01, rel=0.01)
    var_2 = vector_0.__neg__()
    var_3 = var_1.__trunc__()
    assert var_3 == 1323
    with pytest.raises(ValueError):
        var_0.__invert__()

def test_case_35():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = var_0.__add__(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    var_2 = vector_0.__neg__()
    var_3 = vector_0.__eq__(list_0)
    assert var_3 is True
    var_4 = var_2.norm()
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'geom.Vector'
    assert len(var_4) == 3
    var_5 = vector_0.__neg__()
    var_6 = vector_0.__matmul__(var_5)
    assert var_6 == -1751088
    var_7 = vector_0.magSq()
    assert var_7 == 1751088
    var_8 = var_0.sub(var_1)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'geom.Vector'
    assert len(var_8) == 3
    var_9 = vector_0.normalize()
    var_10 = vector_0.__invert__()
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'geom.Vector'
    assert len(var_10) == 3
    var_11 = var_5.__rmul__(list_0)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'geom.Vector'
    assert len(var_11) == 3
    var_12 = var_6.__round__()
    assert var_12 == -1751088
    var_13 = var_1.addOn(list_0)
    var_14 = var_10.__rmatmul__(var_11)
    assert var_14 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_15 = var_11.__rmatmul__(var_0)
    assert var_15 == 0
    var_16 = var_1.takeAway(var_1)
    var_17 = var_8.mulBy(var_12)

@pytest.mark.xfail(strict=True)
def test_case_36():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert module_0.eps == 603
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = int_0.__add__(list_0)
    var_1 = vector_0.__eq__(list_0)
    assert var_1 is True
    var_2 = vector_0.__neg__()
    var_3 = vector_0.__matmul__(var_2)
    assert var_3 == -1751088
    var_4 = vector_0.magSq()
    assert var_4 == 1751088
    var_1.sub(var_0)

def test_case_37():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.sub(list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Vector'
    assert len(var_0) == 3
    var_1 = vector_0.mag()
    assert var_1 == pytest.approx(1323.2868169826222, abs=0.01, rel=0.01)
    var_2 = vector_0.__rmul__(vector_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = vector_0.__invert__()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'geom.Vector'
    assert len(var_3) == 3
    tuple_0 = (var_0,)
    with pytest.raises(TypeError):
        var_3.__add__(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_38():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    none_type_0 = None
    vector_0.sub(none_type_0)

def test_case_39():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = var_0.__add__(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    var_2 = vector_0.normalize()
    var_3 = vector_0.__invert__()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'geom.Vector'
    assert len(var_3) == 3
    var_4 = var_3.magSq()
    assert var_4 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_5 = var_3.__invert__()
    var_6 = var_1.addOn(var_5)
    var_7 = vector_0.__mul__(var_1)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'geom.Vector'
    assert len(var_7) == 3
    var_8 = var_1.takeAway(var_1)

def test_case_40():
    int_0 = -764
    list_0 = [int_0, int_0, int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 5
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.sub(list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Vector'
    assert len(var_0) == 5
    var_1 = vector_0.mag()
    assert var_1 == pytest.approx(1708.3559348098393, abs=0.01, rel=0.01)
    var_2 = vector_0.dot(vector_0)
    assert var_2 == 2918480
    var_3 = var_0.div(int_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'geom.Vector'
    assert len(var_3) == 5
    var_4 = var_0.__repr__()
    assert var_4 == 'geom.Vector([0, 0, 0, 0, 0])'
    with pytest.raises(ValueError):
        vector_0.__rmul__(vector_0)

def test_case_41():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__truediv__(int_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Vector'
    assert len(var_0) == 3
    var_1 = var_0.__add__(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    var_2 = vector_0.__neg__()
    var_3 = module_0.is_numeric(vector_0)
    var_4 = vector_0.dot(vector_0)
    assert var_4 == 1751088
    var_5 = vector_0.__invert__()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'geom.Vector'
    assert len(var_5) == 3
    list_1 = [list_0, int_0, int_0]
    var_6 = var_0.takeAway(list_0)
    var_7 = var_2.__len__()
    var_8 = var_4.__round__()
    assert var_8 == 1751088
    with pytest.raises(TypeError):
        var_1.addOn(list_1)

@pytest.mark.xfail(strict=True)
def test_case_42():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.normalize()
    var_1 = vector_0.__invert__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    var_2 = vector_0.addOn(list_0)
    list_0.addOn(var_2)

def test_case_43():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__truediv__(int_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Vector'
    assert len(var_0) == 3
    var_1 = var_0.__add__(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    var_2 = vector_0.__neg__()
    var_3 = var_1.__radd__(var_0)
    var_4 = vector_0.dot(vector_0)
    assert var_4 == 1751088
    var_5 = vector_0.__invert__()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'geom.Vector'
    assert len(var_5) == 3
    list_1 = []
    var_6 = var_0.takeAway(list_0)
    var_7 = var_2.__len__()
    var_8 = var_4.__round__()
    assert var_8 == 1751088
    with pytest.raises(ValueError):
        var_1.addOn(list_1)

def test_case_44():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__iter__()
    var_1 = vector_0.__truediv__(int_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    var_2 = var_1.__invert__()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = vector_0.__neg__()
    var_4 = vector_0.__rsub__(var_1)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'geom.Vector'
    assert len(var_4) == 3
    var_5 = vector_0.dot(vector_0)
    assert var_5 == 1751088
    with pytest.raises(TypeError):
        vector_0.mul(vector_0)

def test_case_45():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__truediv__(int_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Vector'
    assert len(var_0) == 3
    var_1 = var_0.__add__(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    var_2 = vector_0.__neg__()
    var_3 = var_1.__radd__(var_0)
    var_4 = vector_0.dot(vector_0)
    assert var_4 == 1751088
    var_5 = vector_0.__invert__()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'geom.Vector'
    assert len(var_5) == 3
    var_6 = var_2.__sub__(vector_0)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'geom.Vector'
    assert len(var_6) == 3
    with pytest.raises(TypeError):
        var_5.divBy(var_1)

def test_case_46():
    str_0 = 'anImjYU`Vmf|]f5A'
    bool_0 = True
    var_0 = bool_0.__rand__(str_0)
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_1 = vector_0.__neg__()
    var_2 = var_1.__add__(list_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = vector_0.__eq__(list_0)
    assert var_3 is True
    var_4 = var_2.__neg__()
    var_5 = vector_0.__neg__()
    var_6 = vector_0.__matmul__(var_5)
    assert var_6 == -1751088
    var_7 = var_1.sub(var_2)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'geom.Vector'
    assert len(var_7) == 3
    var_8 = vector_0.normalize()
    var_9 = vector_0.__invert__()
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'geom.Vector'
    assert len(var_9) == 3
    var_10 = var_5.__rmul__(list_0)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'geom.Vector'
    assert len(var_10) == 3
    var_11 = var_2.addOn(list_0)
    with pytest.raises(TypeError):
        vector_0.__mul__(var_0)

def test_case_47():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__truediv__(int_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Vector'
    assert len(var_0) == 3
    var_1 = var_0.__add__(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    var_2 = vector_0.__neg__()
    float_0 = 2451.0
    with pytest.raises(IndexError):
        var_0.__getitem__(float_0)

def test_case_48():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = var_0.__add__(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    var_2 = vector_0.__neg__()
    var_3 = vector_0.__matmul__(var_2)
    assert var_3 == -1751088
    var_4 = vector_0.normalize()
    var_5 = vector_0.__invert__()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'geom.Vector'
    assert len(var_5) == 3
    var_6 = var_5.magSq()
    assert var_6 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_7 = var_5.__invert__()
    var_8 = var_3.__round__()
    assert var_8 == -1751088
    var_9 = var_1.addOn(var_7)
    var_10 = var_1.mul(var_8)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'geom.Vector'
    assert len(var_10) == 3
    var_11 = vector_0.__mul__(var_10)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'geom.Vector'
    assert len(var_11) == 3
    var_12 = var_1.takeAway(var_1)

def test_case_49():
    int_0 = -789
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert module_0.eps == 603
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.sub(list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Vector'
    assert len(var_0) == 3
    var_1 = vector_0.mag()
    assert var_1 == pytest.approx(1366.588087171844, abs=0.01, rel=0.01)
    var_2 = vector_0.__add__(var_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = vector_0.__rmul__(vector_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'geom.Vector'
    assert len(var_3) == 3
    var_4 = vector_0.__mul__(var_3)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'geom.Vector'
    assert len(var_4) == 3
    var_5 = var_0.__eq__(vector_0)
    assert var_5 is False
    var_6 = vector_0.__invert__()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'geom.Vector'
    assert len(var_6) == 3
    with pytest.raises(ValueError):
        var_4.normalize()

def test_case_50():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = var_0.__add__(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    var_2 = vector_0.__eq__(list_0)
    assert var_2 is True
    var_3 = vector_0.__matmul__(vector_0)
    assert var_3 == 1751088
    var_4 = var_0.sub(var_1)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'geom.Vector'
    assert len(var_4) == 3
    var_5 = vector_0.normalize()
    var_6 = module_0.set_tolerance(var_3)
    assert module_0.eps == 1751088
    var_7 = var_3.__round__()
    assert var_7 == 1751088
    var_8 = var_1.addOn(list_0)
    var_9 = vector_0.__mul__(var_7)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'geom.Vector'
    assert len(var_9) == 3
    var_10 = var_7.__round__()
    assert var_10 == 1751088
    var_11 = var_1.takeAway(var_1)
    var_12 = var_0.mulBy(int_0)

def test_case_51():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = var_0.__add__(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    var_2 = vector_0.__neg__()
    var_3 = vector_0.__matmul__(var_2)
    assert var_3 == -1751088
    var_4 = vector_0.normalize()
    var_5 = var_0.takeAway(var_0)
    var_6 = vector_0.__invert__()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'geom.Vector'
    assert len(var_6) == 3
    var_7 = var_6.magSq()
    assert var_7 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_8 = var_6.__invert__()
    var_9 = var_2.__rmul__(var_7)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'geom.Vector'
    assert len(var_9) == 3
    var_10 = module_0.is_numeric(var_0)
    var_11 = var_1.addOn(var_8)
    with pytest.raises(TypeError):
        var_1.mul(var_10)

def test_case_52():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = var_0.__add__(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    var_2 = vector_0.__neg__()
    var_3 = vector_0.__matmul__(var_2)
    assert var_3 == -1751088
    var_4 = vector_0.normalize()
    var_5 = var_0.takeAway(var_0)
    var_6 = vector_0.__invert__()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'geom.Vector'
    assert len(var_6) == 3
    var_7 = var_6.magSq()
    assert var_7 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_8 = var_6.__invert__()
    bool_0 = False
    with pytest.raises(TypeError):
        var_0.divBy(bool_0)

def test_case_53():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = vector_0.__mul__(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Vector'
    assert len(var_1) == 3
    var_2 = vector_0.__repr__()
    assert var_2 == 'geom.Vector([-764, -764, -764])'
    var_3 = var_0.__add__(list_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'geom.Vector'
    assert len(var_3) == 3
    var_4 = vector_0.__neg__()
    var_5 = vector_0.__eq__(list_0)
    assert var_5 is True
    var_6 = vector_0.__neg__()
    var_7 = vector_0.__matmul__(var_6)
    assert var_7 == -1751088
    var_8 = vector_0.magSq()
    assert var_8 == 1751088
    var_9 = var_0.sub(var_3)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'geom.Vector'
    assert len(var_9) == 3
    var_10 = vector_0.normalize()
    var_11 = vector_0.__invert__()
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'geom.Vector'
    assert len(var_11) == 3
    var_12 = var_3.__radd__(var_9)
    var_13 = var_6.__rmul__(list_0)
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'geom.Vector'
    assert len(var_13) == 3
    var_14 = var_7.__round__()
    assert var_14 == -1751088
    var_15 = var_3.addOn(list_0)
    var_16 = var_13.__rmatmul__(var_0)
    assert var_16 == 0
    var_17 = var_7.__pow__(var_4, var_15)
    bytes_0 = b'r\x9a\x1f\xd4\xb5\x1ftz\tK=6'
    with pytest.raises(ValueError):
        var_11.takeAway(bytes_0)

def test_case_54():
    str_0 = 'anImjYU`Vmf|]f5A'
    bool_0 = True
    var_0 = bool_0.__rand__(str_0)
    var_1 = var_0.__str__()
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert module_0.eps == 1751088
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_2 = vector_0.__neg__()
    var_3 = var_2.__add__(list_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'geom.Vector'
    assert len(var_3) == 3
    var_4 = var_3.__neg__()
    var_5 = vector_0.__neg__()
    var_6 = vector_0.__matmul__(var_5)
    assert var_6 == -1751088
    var_7 = var_2.sub(var_3)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'geom.Vector'
    assert len(var_7) == 3
    var_8 = vector_0.normalize()
    var_9 = vector_0.__invert__()
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'geom.Vector'
    assert len(var_9) == 3
    var_10 = var_5.__rmul__(list_0)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'geom.Vector'
    assert len(var_10) == 3
    var_11 = var_6.__round__()
    assert var_11 == -1751088
    var_12 = var_3.addOn(list_0)
    var_13 = vector_0.__mul__(var_11)
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'geom.Vector'
    assert len(var_13) == 3
    var_14 = var_11.__round__()
    assert var_14 == -1751088
    with pytest.raises(TypeError):
        var_9.takeAway(var_0)

@pytest.mark.xfail(strict=True)
def test_case_55():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert module_0.eps == 1751088
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = list_0.__add__(list_0)
    var_2 = vector_0.__neg__()
    var_3 = vector_0.__eq__(list_0)
    assert var_3 is True
    var_4 = vector_0.__neg__()
    var_5 = vector_0.__matmul__(var_4)
    assert var_5 == -1751088
    var_6 = vector_0.magSq()
    assert var_6 == 1751088
    var_0.sub(var_1)

@pytest.mark.xfail(strict=True)
def test_case_56():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = vector_0.__repr__()
    assert var_1 == 'geom.Vector([-764, -764, -764])'
    var_2 = var_0.__add__(list_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = vector_0.__neg__()
    var_4 = vector_0.__eq__(list_0)
    assert var_4 is True
    var_5 = vector_0.__neg__()
    var_6 = vector_0.__matmul__(var_5)
    assert var_6 == -1751088
    var_7 = vector_0.magSq()
    assert var_7 == 1751088
    var_8 = var_0.sub(var_2)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'geom.Vector'
    assert len(var_8) == 3
    var_8.div(var_4)

def test_case_57():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert module_0.eps == 1751088
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = vector_0.__repr__()
    assert var_1 == 'geom.Vector([-764, -764, -764])'
    var_2 = var_0.__add__(list_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = vector_0.__neg__()
    with pytest.raises(TypeError):
        vector_0.__rmul__(var_1)

def test_case_58():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = vector_0.__repr__()
    assert var_1 == 'geom.Vector([-764, -764, -764])'
    var_2 = var_0.__add__(list_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = vector_0.__neg__()
    var_4 = vector_0.__eq__(list_0)
    assert var_4 is True
    var_5 = vector_0.__neg__()
    var_6 = vector_0.__matmul__(var_5)
    assert var_6 == -1751088
    var_7 = vector_0.magSq()
    assert var_7 == 1751088
    var_8 = var_0.sub(var_2)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'geom.Vector'
    assert len(var_8) == 3
    var_9 = vector_0.normalize()
    var_10 = vector_0.__invert__()
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'geom.Vector'
    assert len(var_10) == 3
    var_11 = var_5.__rmul__(list_0)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'geom.Vector'
    assert len(var_11) == 3
    var_12 = var_6.__round__()
    assert var_12 == -1751088
    var_13 = var_2.addOn(list_0)
    var_14 = var_11.__rmatmul__(var_0)
    assert var_14 == 0
    var_15 = var_6.__pow__(var_3, var_13)
    var_16 = var_8.takeAway(var_5)
    with pytest.raises(TypeError):
        var_0.mulBy(var_4)

@pytest.mark.xfail(strict=True)
def test_case_59():
    bytes_0 = b'\x1f\x99'
    module_0.Circle(bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_60():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert module_0.eps == 1751088
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = vector_0.__repr__()
    assert var_1 == 'geom.Vector([-764, -764, -764])'
    var_2 = var_0.__add__(list_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = vector_0.__neg__()
    var_4 = vector_0.__eq__(list_0)
    assert var_4 is True
    var_5 = vector_0.__neg__()
    var_6 = vector_0.__matmul__(var_5)
    assert var_6 == -1751088
    var_7 = vector_0.magSq()
    assert var_7 == 1751088
    var_8 = var_0.sub(var_2)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'geom.Vector'
    assert len(var_8) == 3
    var_9 = vector_0.normalize()
    bytes_0 = b'\xd0\xb80\xe4\xb0\xe1O\xadx\xa8M'
    var_3.__radd__(bytes_0)

def test_case_61():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert module_0.eps == 1751088
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = vector_0.__repr__()
    assert var_1 == 'geom.Vector([-764, -764, -764])'
    var_2 = vector_0.normalize()
    var_3 = var_0.__add__(list_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'geom.Vector'
    assert len(var_3) == 3
    var_4 = var_0.mag()
    assert var_4 == pytest.approx(1323.2868169826222, abs=0.01, rel=0.01)
    var_5 = vector_0.__neg__()
    var_6 = vector_0.__matmul__(var_5)
    assert var_6 == pytest.approx(-1.0, abs=0.01, rel=0.01)
    var_7 = vector_0.magSq()
    assert var_7 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_8 = var_0.sub(var_3)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'geom.Vector'
    assert len(var_8) == 3
    var_9 = vector_0.normalize()
    var_10 = vector_0.__invert__()
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'geom.Vector'
    assert len(var_10) == 3
    var_11 = var_5.__rmul__(list_0)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'geom.Vector'
    assert len(var_11) == 3
    var_12 = var_6.__round__()
    assert var_12 == -1
    var_13 = var_3.addOn(list_0)
    var_14 = var_10.__mul__(var_8)
    assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'geom.Vector'
    assert len(var_14) == 3
    var_15 = var_0.__mul__(var_7)
    bytes_0 = b'\xbd\x11\x03un,lm\xe7'
    with pytest.raises(ValueError):
        var_11.__rmul__(bytes_0)

def test_case_62():
    int_0 = -777
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert module_0.eps == 1751088
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = vector_0.__repr__()
    assert var_1 == 'geom.Vector([-777, -777, -777])'
    var_2 = vector_0.mag()
    assert var_2 == pytest.approx(1345.8034774810176, abs=0.01, rel=0.01)
    with pytest.raises(ValueError):
        vector_0.__eq__(var_1)

@pytest.mark.xfail(strict=True)
def test_case_63():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    bool_0 = False
    var_0 = bool_0.__int__()
    var_1 = var_0.__int__()
    set_0 = {var_1, var_0, int_0}
    vector_0.dot(set_0)

def test_case_64():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    vector_0 = module_0.Vector(list_0)
    assert f'{type(vector_0).__module__}.{type(vector_0).__qualname__}' == 'geom.Vector'
    assert len(vector_0) == 3
    assert f'{type(module_0.Vector.x).__module__}.{type(module_0.Vector.x).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.y).__module__}.{type(module_0.Vector.y).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Vector.z).__module__}.{type(module_0.Vector.z).__qualname__}' == 'builtins.property'
    var_0 = vector_0.__neg__()
    var_1 = vector_0.__repr__()
    assert var_1 == 'geom.Vector([-764, -764, -764])'
    var_2 = var_0.__add__(list_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Vector'
    assert len(var_2) == 3
    var_3 = vector_0.__neg__()
    var_4 = vector_0.__eq__(list_0)
    assert var_4 is True
    var_5 = vector_0.__neg__()
    var_6 = vector_0.__matmul__(var_5)
    assert var_6 == -1751088
    var_7 = vector_0.magSq()
    assert var_7 == 1751088
    var_8 = var_0.sub(var_2)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'geom.Vector'
    assert len(var_8) == 3
    with pytest.raises(IndexError):
        var_0.__setitem__(var_7, var_4)

def test_case_65():
    int_0 = 46
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert module_0.eps == 1751088
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    with pytest.raises(TypeError):
        circle_0.scaled_to(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_66():
    bool_0 = True
    var_0 = bool_0.__rlshift__(bool_0)
    var_1 = var_0.__add__(var_0)
    tuple_0 = (var_0, var_0)
    module_0.Circle(tuple_0, bool_0)

def test_case_67():
    int_0 = 46
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert module_0.eps == 1751088
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    var_0 = circle_0.__str__()
    assert var_0 == 'Circle(<46, 46>, 46)'
    with pytest.raises(TypeError):
        circle_0.scaled_to(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_68():
    int_0 = 28
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    var_0 = circle_0.scaled_to(int_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Circle'
    var_1 = int_0.__rpow__(int_0)
    var_1.takeAway(var_1)

def test_case_69():
    int_0 = 28
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    var_0 = circle_0.scaled_to(int_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Circle'
    with pytest.raises(TypeError):
        var_0.moved_to(var_0)

@pytest.mark.xfail(strict=True)
def test_case_70():
    int_0 = -3304
    var_0 = int_0.__str__()
    tuple_0 = (int_0, int_0)
    module_0.Circle(tuple_0, int_0)

def test_case_71():
    int_0 = 46
    bool_0 = True
    var_0 = int_0.__str__()
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    with pytest.raises(TypeError):
        circle_0.scaled_to(bool_0)

def test_case_72():
    int_0 = 46
    var_0 = int_0.__str__()
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    with pytest.raises(TypeError):
        circle_0.scaled_by(var_0)

def test_case_73():
    int_0 = 38
    var_0 = module_0.set_tolerance(int_0)
    assert module_0.eps == 38
    var_1 = int_0.__str__()
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    with pytest.raises(ValueError):
        circle_0.scaled_to(int_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_74():
    int_0 = 30
    bool_0 = False
    var_0 = int_0.__str__()
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    var_1 = circle_0.scaled_to(int_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Circle'
    var_2 = var_1.moved_to(tuple_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Circle'
    var_1.takeAway(bool_0)

def test_case_75():
    int_0 = 28
    var_0 = module_0.is_numeric(int_0)
    assert var_0 is True
    var_1 = module_0.is_numeric(int_0)
    assert var_1 is True
    var_2 = module_0.set_tolerance(int_0)
    assert module_0.eps == 28
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    with pytest.raises(TypeError):
        circle_0.scaled_to(int_0, var_1)

def test_case_76():
    int_0 = 28
    tuple_0 = ()
    var_0 = module_0.set_tolerance(int_0)
    assert module_0.eps == 28
    tuple_1 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_1, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    var_1 = circle_0.scaled_to(int_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Circle'
    with pytest.raises(ValueError):
        var_1.moved_to(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_77():
    int_0 = 46
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    var_0 = circle_0.scaled_by(int_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'geom.Circle'
    var_0.__floor__()

def test_case_78():
    int_0 = 28
    var_0 = module_0.set_tolerance(int_0)
    assert module_0.eps == 28
    bool_0 = False
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    var_1 = circle_0.scaled_to(int_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Circle'
    with pytest.raises(TypeError):
        var_1.scaled_by(bool_0, int_0)

def test_case_79():
    int_0 = 1
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert module_0.eps == 28
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    var_0 = circle_0.__repr__()
    assert var_0 == 'geom.Circle(<1, 1>, 1)'
    var_1 = circle_0.moved_by(tuple_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Circle'
    var_2 = module_0.is_numeric(tuple_0)
    var_3 = var_2.__add__(var_2)
    with pytest.raises(TypeError):
        circle_0.intersects(var_0)

def test_case_80():
    int_0 = 28
    var_0 = module_0.set_tolerance(int_0)
    assert module_0.eps == 28
    var_1 = module_0.set_tolerance(int_0)
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    var_2 = circle_0.scaled_to(int_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'geom.Circle'
    with pytest.raises(TypeError):
        circle_0.moved_to(int_0)

def test_case_81():
    int_0 = 2
    var_0 = module_0.set_tolerance(int_0)
    assert module_0.eps == 2
    var_1 = module_0.set_tolerance(int_0)
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    var_2 = var_1.__eq__(int_0)
    with pytest.raises(TypeError):
        circle_0.moved_by(int_0)

def test_case_82():
    int_0 = 1
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    var_0 = tuple_0.__repr__()
    var_1 = circle_0.scaled_by(int_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Circle'
    var_2 = circle_0.intersects(tuple_0)
    assert var_2 is True
    var_3 = circle_0.intersects(circle_0)
    assert var_3 is True
    var_4 = var_1.__str__()
    assert var_4 == 'Circle(<1, 1>, 1)'
    with pytest.raises(TypeError):
        var_1.moved_by(var_4)

def test_case_83():
    int_0 = 46
    list_0 = [int_0]
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    var_0 = circle_0.__repr__()
    assert var_0 == 'geom.Circle(<46, 46>, 46)'
    var_1 = circle_0.scaled_to(int_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Circle'
    with pytest.raises(TypeError):
        var_1.scaled_by(int_0, list_0)

def test_case_84():
    int_0 = 1
    var_0 = module_0.set_tolerance(int_0)
    assert module_0.eps == 1
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    var_1 = circle_0.__repr__()
    assert var_1 == 'geom.Circle(<1, 1>, 1)'
    var_2 = circle_0.intersects(circle_0)
    assert var_2 is True
    var_3 = var_2.__neg__()
    assert var_3 == -1
    var_4 = var_3.__sub__(tuple_0)
    with pytest.raises(ValueError):
        circle_0.scaled_by(var_3)

def test_case_85():
    int_0 = 46
    tuple_0 = (int_0, int_0)
    circle_0 = module_0.Circle(tuple_0, int_0)
    assert f'{type(circle_0).__module__}.{type(circle_0).__qualname__}' == 'geom.Circle'
    assert f'{type(module_0.Circle.center).__module__}.{type(module_0.Circle.center).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.radius).__module__}.{type(module_0.Circle.radius).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.area).__module__}.{type(module_0.Circle.area).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Circle.circumference).__module__}.{type(module_0.Circle.circumference).__qualname__}' == 'builtins.property'
    var_0 = circle_0.__repr__()
    assert var_0 == 'geom.Circle(<46, 46>, 46)'
    var_1 = circle_0.scaled_to(int_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'geom.Circle'
    with pytest.raises(ValueError):
        var_1.scaled_by(int_0, var_0)