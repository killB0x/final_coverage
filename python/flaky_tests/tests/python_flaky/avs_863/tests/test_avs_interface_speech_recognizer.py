# Automatically generated by Pynguin.
import pytest
import platform as module_0
import avs.interface.speech_recognizer as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.machine()
    var_0.ExpectSpeechTimedOut()

def test_case_1():
    float_0 = -1371.5446
    speech_recognizer_0 = module_1.SpeechRecognizer(float_0)
    assert speech_recognizer_0.profile == 'FAR_FIELD'
    assert speech_recognizer_0.dialog_request_id == ''
    assert speech_recognizer_0.conversation == 0
    assert f'{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}' == 'logging.Logger'
    assert module_1.logger.name == 'SpeechRecognizer'
    assert module_1.logger.level == 0
    assert f'{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_1.logger.handlers == []
    assert module_1.SpeechRecognizer.STATES == {'EXPECTING SPEECH', 'BUSY', 'RECOGNIZING', 'IDLE'}
    assert module_1.SpeechRecognizer.PROFILES == {'FAR_FIELD', 'NEAR_FIELD', 'CLOSE_TALK'}
    assert module_1.SpeechRecognizer.PRESS_AND_HOLD == {'type': 'PRESS_AND_HOLD', 'payload': {}}
    assert module_1.SpeechRecognizer.TAP == {'type': 'TAP', 'payload': {}}
    assert module_1.SpeechRecognizer.WAKEWORD == {'type': 'WAKEWORD', 'payload': {}}
    assert f'{type(module_1.SpeechRecognizer.context).__module__}.{type(module_1.SpeechRecognizer.context).__qualname__}' == 'builtins.property'
    var_0 = speech_recognizer_0.put(speech_recognizer_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    speech_recognizer_0 = module_1.SpeechRecognizer(none_type_0)
    assert speech_recognizer_0.profile == 'FAR_FIELD'
    assert speech_recognizer_0.dialog_request_id == ''
    assert speech_recognizer_0.conversation == 0
    assert f'{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}' == 'logging.Logger'
    assert module_1.logger.name == 'SpeechRecognizer'
    assert module_1.logger.level == 0
    assert f'{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_1.logger.handlers == []
    assert module_1.SpeechRecognizer.STATES == {'EXPECTING SPEECH', 'BUSY', 'RECOGNIZING', 'IDLE'}
    assert module_1.SpeechRecognizer.PROFILES == {'FAR_FIELD', 'NEAR_FIELD', 'CLOSE_TALK'}
    assert module_1.SpeechRecognizer.PRESS_AND_HOLD == {'type': 'PRESS_AND_HOLD', 'payload': {}}
    assert module_1.SpeechRecognizer.TAP == {'type': 'TAP', 'payload': {}}
    assert module_1.SpeechRecognizer.WAKEWORD == {'type': 'WAKEWORD', 'payload': {}}
    assert f'{type(module_1.SpeechRecognizer.context).__module__}.{type(module_1.SpeechRecognizer.context).__qualname__}' == 'builtins.property'
    speech_recognizer_0.Recognize(timeout=speech_recognizer_0)

def test_case_3():
    bool_0 = True
    speech_recognizer_0 = module_1.SpeechRecognizer(bool_0)
    assert speech_recognizer_0.profile == 'FAR_FIELD'
    assert speech_recognizer_0.dialog_request_id == ''
    assert speech_recognizer_0.conversation == 0
    assert f'{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}' == 'logging.Logger'
    assert module_1.logger.name == 'SpeechRecognizer'
    assert module_1.logger.level == 0
    assert f'{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_1.logger.handlers == []
    assert module_1.SpeechRecognizer.STATES == {'EXPECTING SPEECH', 'BUSY', 'RECOGNIZING', 'IDLE'}
    assert module_1.SpeechRecognizer.PROFILES == {'FAR_FIELD', 'NEAR_FIELD', 'CLOSE_TALK'}
    assert module_1.SpeechRecognizer.PRESS_AND_HOLD == {'type': 'PRESS_AND_HOLD', 'payload': {}}
    assert module_1.SpeechRecognizer.TAP == {'type': 'TAP', 'payload': {}}
    assert module_1.SpeechRecognizer.WAKEWORD == {'type': 'WAKEWORD', 'payload': {}}
    assert f'{type(module_1.SpeechRecognizer.context).__module__}.{type(module_1.SpeechRecognizer.context).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 2803.0
    speech_recognizer_0 = module_1.SpeechRecognizer(float_0)
    assert speech_recognizer_0.profile == 'FAR_FIELD'
    assert speech_recognizer_0.dialog_request_id == ''
    assert speech_recognizer_0.conversation == 0
    assert f'{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}' == 'logging.Logger'
    assert module_1.logger.name == 'SpeechRecognizer'
    assert module_1.logger.level == 0
    assert f'{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_1.logger.handlers == []
    assert module_1.SpeechRecognizer.STATES == {'EXPECTING SPEECH', 'BUSY', 'RECOGNIZING', 'IDLE'}
    assert module_1.SpeechRecognizer.PROFILES == {'FAR_FIELD', 'NEAR_FIELD', 'CLOSE_TALK'}
    assert module_1.SpeechRecognizer.PRESS_AND_HOLD == {'type': 'PRESS_AND_HOLD', 'payload': {}}
    assert module_1.SpeechRecognizer.TAP == {'type': 'TAP', 'payload': {}}
    assert module_1.SpeechRecognizer.WAKEWORD == {'type': 'WAKEWORD', 'payload': {}}
    assert f'{type(module_1.SpeechRecognizer.context).__module__}.{type(module_1.SpeechRecognizer.context).__qualname__}' == 'builtins.property'
    var_0 = speech_recognizer_0.put(speech_recognizer_0)
    var_1 = speech_recognizer_0.StopCapture(var_0)
    speech_recognizer_0.Recognize()

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    speech_recognizer_0 = module_1.SpeechRecognizer(none_type_0)
    assert speech_recognizer_0.profile == 'FAR_FIELD'
    assert speech_recognizer_0.dialog_request_id == ''
    assert speech_recognizer_0.conversation == 0
    assert f'{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}' == 'logging.Logger'
    assert module_1.logger.name == 'SpeechRecognizer'
    assert module_1.logger.level == 0
    assert f'{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_1.logger.handlers == []
    assert module_1.SpeechRecognizer.STATES == {'EXPECTING SPEECH', 'BUSY', 'RECOGNIZING', 'IDLE'}
    assert module_1.SpeechRecognizer.PROFILES == {'FAR_FIELD', 'NEAR_FIELD', 'CLOSE_TALK'}
    assert module_1.SpeechRecognizer.PRESS_AND_HOLD == {'type': 'PRESS_AND_HOLD', 'payload': {}}
    assert module_1.SpeechRecognizer.TAP == {'type': 'TAP', 'payload': {}}
    assert module_1.SpeechRecognizer.WAKEWORD == {'type': 'WAKEWORD', 'payload': {}}
    assert f'{type(module_1.SpeechRecognizer.context).__module__}.{type(module_1.SpeechRecognizer.context).__qualname__}' == 'builtins.property'
    var_0 = speech_recognizer_0.put(none_type_0)
    speech_recognizer_0.ExpectSpeechTimedOut()