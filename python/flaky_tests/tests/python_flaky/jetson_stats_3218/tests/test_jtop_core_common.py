# Automatically generated by Pynguin.
import pytest
import jtop.core.common as module_0
import re as module_1
import struct as module_2

def test_case_0():
    board_0 = module_0.Board()
    var_0 = board_0.__iter__()
    var_1 = board_0.get(board_0)

def test_case_1():
    var_0 = module_1.purge()
    var_1 = var_0.__repr__()
    board_0 = module_0.Board()
    var_2 = var_0.__repr__()
    var_3 = module_0.get_key()
    assert var_3 == "b'UmFmZmFlbGxvIEJvbmdoaQ=='"
    module_0.locate_commands(var_1, var_1)

def test_case_2():
    bytes_0 = b'\x00'
    var_0 = module_0.import_os_variables(bytes_0, bytes_0)

def test_case_3():
    var_0 = module_0.get_key()
    assert var_0 == "b'UmFmZmFlbGxvIEJvbmdoaQ=='"

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    module_0.get_var(bool_0)

def test_case_5():
    var_0 = module_0.get_uptime()
    assert var_0 == pytest.approx(26116.44, abs=0.01, rel=0.01)

def test_case_6():
    var_0 = module_0.Board()

def test_case_7():
    var_0 = module_0.get_key()
    assert var_0 == "b'UmFmZmFlbGxvIEJvbmdoaQ=='"
    var_1 = var_0.__repr__()
    board_0 = module_0.Board()
    var_2 = board_0.items()
    var_3 = board_0.get(var_0)
    var_4 = module_0.import_os_variables(var_1, board_0)
    module_0.get_var(var_1)

def test_case_8():
    bool_0 = True
    board_0 = module_0.Board()
    error_0 = module_2.error(*board_0)
    var_0 = module_0.import_os_variables(bool_0, error_0)
    board_1 = module_0.Board()
    var_1 = module_0.get_key()
    assert var_1 == "b'UmFmZmFlbGxvIEJvbmdoaQ=='"

def test_case_9():
    var_0 = module_0.status_disk()

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    var_0 = bool_0.__bool__()
    board_0 = module_0.Board()
    var_1 = bool_0.__dir__()
    board_0.__getitem__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    board_0 = module_0.Board()
    var_0 = board_0.get(bool_0)
    var_1 = module_0.import_os_variables(bool_0, board_0)
    var_2 = board_0.__repr__()
    assert var_2 == "{'info': {}, 'hardware': {}, 'libraries': {}}"
    board_1 = module_0.Board()
    board_0.__next__()

def test_case_12():
    var_0 = module_0.get_uptime()
    assert var_0 == pytest.approx(26116.45, abs=0.01, rel=0.01)
    var_1 = var_0.__repr__()
    var_2 = module_0.get_key()
    assert var_2 == "b'UmFmZmFlbGxvIEJvbmdoaQ=='"
    var_3 = var_1.__repr__()
    var_4 = module_0.locate_commands(var_1, var_3)
    board_0 = module_0.Board()
    var_5 = board_0.get(var_1)
    var_6 = board_0.__repr__()
    var_7 = module_0.import_os_variables(var_3, board_0)
    module_0.get_var(var_3)

def test_case_13():
    bool_0 = True
    board_0 = module_0.Board()
    var_0 = board_0.get(bool_0)
    var_1 = module_0.import_os_variables(bool_0, board_0)
    var_2 = board_0.__repr__()
    assert var_2 == "{'info': {}, 'hardware': {}, 'libraries': {}}"
    board_1 = module_0.Board()

def test_case_14():
    var_0 = module_0.get_key()
    assert var_0 == "b'UmFmZmFlbGxvIEJvbmdoaQ=='"
    bytes_0 = b'V'
    var_1 = module_0.import_os_variables(bytes_0, var_0)
    var_2 = module_1.template(var_0)
    var_3 = module_0.get_var(var_2)
    var_2.__iter__()