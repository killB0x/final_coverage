# Automatically generated by Pynguin.
import pytest
import jtop.core.nvpmodel as module_0
import jtop.core.exceptions as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 1025
    module_0.NVP_get_id(int_0, int_0)

def test_case_1():
    int_0 = 33
    n_v_p_model_0 = module_0.NVPModel()
    assert module_0.COMMAND_TIMEOUT == pytest.approx(4.0, abs=0.01, rel=0.01)
    assert module_0.NVP_RESEND_JETSON_CLOCKS_MESSAGE == 3
    assert module_0.NVP_COUNTER_ALIVE_JETSON_CLOCKS == 3
    assert f'{type(module_0.NVPModel.is_running).__module__}.{type(module_0.NVPModel.is_running).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.status).__module__}.{type(module_0.NVPModel.status).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.modes).__module__}.{type(module_0.NVPModel.modes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.id).__module__}.{type(module_0.NVPModel.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.name).__module__}.{type(module_0.NVPModel.name).__qualname__}' == 'builtins.property'
    with pytest.raises(module_1.JtopException):
        n_v_p_model_0.set(int_0)

def test_case_2():
    n_v_p_model_0 = module_0.NVPModel()
    assert module_0.COMMAND_TIMEOUT == pytest.approx(4.0, abs=0.01, rel=0.01)
    assert module_0.NVP_RESEND_JETSON_CLOCKS_MESSAGE == 3
    assert module_0.NVP_COUNTER_ALIVE_JETSON_CLOCKS == 3
    assert f'{type(module_0.NVPModel.is_running).__module__}.{type(module_0.NVPModel.is_running).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.status).__module__}.{type(module_0.NVPModel.status).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.modes).__module__}.{type(module_0.NVPModel.modes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.id).__module__}.{type(module_0.NVPModel.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.name).__module__}.{type(module_0.NVPModel.name).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_3():
    n_v_p_model_0 = module_0.NVPModel()
    assert module_0.COMMAND_TIMEOUT == pytest.approx(4.0, abs=0.01, rel=0.01)
    assert module_0.NVP_RESEND_JETSON_CLOCKS_MESSAGE == 3
    assert module_0.NVP_COUNTER_ALIVE_JETSON_CLOCKS == 3
    assert f'{type(module_0.NVPModel.is_running).__module__}.{type(module_0.NVPModel.is_running).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.status).__module__}.{type(module_0.NVPModel.status).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.modes).__module__}.{type(module_0.NVPModel.modes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.id).__module__}.{type(module_0.NVPModel.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.name).__module__}.{type(module_0.NVPModel.name).__qualname__}' == 'builtins.property'
    n_v_p_model_0.__radd__(n_v_p_model_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    n_v_p_model_0 = module_0.NVPModel()
    assert module_0.COMMAND_TIMEOUT == pytest.approx(4.0, abs=0.01, rel=0.01)
    assert module_0.NVP_RESEND_JETSON_CLOCKS_MESSAGE == 3
    assert module_0.NVP_COUNTER_ALIVE_JETSON_CLOCKS == 3
    assert f'{type(module_0.NVPModel.is_running).__module__}.{type(module_0.NVPModel.is_running).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.status).__module__}.{type(module_0.NVPModel.status).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.modes).__module__}.{type(module_0.NVPModel.modes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.id).__module__}.{type(module_0.NVPModel.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.name).__module__}.{type(module_0.NVPModel.name).__qualname__}' == 'builtins.property'
    n_v_p_model_0.__rsub__(n_v_p_model_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    n_v_p_model_0 = module_0.NVPModel()
    assert module_0.COMMAND_TIMEOUT == pytest.approx(4.0, abs=0.01, rel=0.01)
    assert module_0.NVP_RESEND_JETSON_CLOCKS_MESSAGE == 3
    assert module_0.NVP_COUNTER_ALIVE_JETSON_CLOCKS == 3
    assert f'{type(module_0.NVPModel.is_running).__module__}.{type(module_0.NVPModel.is_running).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.status).__module__}.{type(module_0.NVPModel.status).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.modes).__module__}.{type(module_0.NVPModel.modes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.id).__module__}.{type(module_0.NVPModel.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.name).__module__}.{type(module_0.NVPModel.name).__qualname__}' == 'builtins.property'
    n_v_p_model_0.__isub__(n_v_p_model_0)

def test_case_6():
    n_v_p_model_0 = module_0.NVPModel()
    assert module_0.COMMAND_TIMEOUT == pytest.approx(4.0, abs=0.01, rel=0.01)
    assert module_0.NVP_RESEND_JETSON_CLOCKS_MESSAGE == 3
    assert module_0.NVP_COUNTER_ALIVE_JETSON_CLOCKS == 3
    assert f'{type(module_0.NVPModel.is_running).__module__}.{type(module_0.NVPModel.is_running).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.status).__module__}.{type(module_0.NVPModel.status).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.modes).__module__}.{type(module_0.NVPModel.modes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.id).__module__}.{type(module_0.NVPModel.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.name).__module__}.{type(module_0.NVPModel.name).__qualname__}' == 'builtins.property'
    with pytest.raises(TypeError):
        n_v_p_model_0.set(n_v_p_model_0)

def test_case_7():
    tuple_0 = ()
    with pytest.raises(module_1.JtopException):
        module_0.NVPModelService(tuple_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    n_v_p_model_0 = module_0.NVPModel()
    assert module_0.COMMAND_TIMEOUT == pytest.approx(4.0, abs=0.01, rel=0.01)
    assert module_0.NVP_RESEND_JETSON_CLOCKS_MESSAGE == 3
    assert module_0.NVP_COUNTER_ALIVE_JETSON_CLOCKS == 3
    assert f'{type(module_0.NVPModel.is_running).__module__}.{type(module_0.NVPModel.is_running).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.status).__module__}.{type(module_0.NVPModel.status).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.modes).__module__}.{type(module_0.NVPModel.modes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.id).__module__}.{type(module_0.NVPModel.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.name).__module__}.{type(module_0.NVPModel.name).__qualname__}' == 'builtins.property'
    n_v_p_model_0.__add__(n_v_p_model_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    n_v_p_model_0 = module_0.NVPModel()
    assert module_0.COMMAND_TIMEOUT == pytest.approx(4.0, abs=0.01, rel=0.01)
    assert module_0.NVP_RESEND_JETSON_CLOCKS_MESSAGE == 3
    assert module_0.NVP_COUNTER_ALIVE_JETSON_CLOCKS == 3
    assert f'{type(module_0.NVPModel.is_running).__module__}.{type(module_0.NVPModel.is_running).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.status).__module__}.{type(module_0.NVPModel.status).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.modes).__module__}.{type(module_0.NVPModel.modes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.id).__module__}.{type(module_0.NVPModel.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.name).__module__}.{type(module_0.NVPModel.name).__qualname__}' == 'builtins.property'
    n_v_p_model_0.__sub__(n_v_p_model_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    n_v_p_model_0 = module_0.NVPModel()
    assert module_0.COMMAND_TIMEOUT == pytest.approx(4.0, abs=0.01, rel=0.01)
    assert module_0.NVP_RESEND_JETSON_CLOCKS_MESSAGE == 3
    assert module_0.NVP_COUNTER_ALIVE_JETSON_CLOCKS == 3
    assert f'{type(module_0.NVPModel.is_running).__module__}.{type(module_0.NVPModel.is_running).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.status).__module__}.{type(module_0.NVPModel.status).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.modes).__module__}.{type(module_0.NVPModel.modes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.id).__module__}.{type(module_0.NVPModel.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.name).__module__}.{type(module_0.NVPModel.name).__qualname__}' == 'builtins.property'
    n_v_p_model_0.__iadd__(n_v_p_model_0)

def test_case_11():
    n_v_p_model_0 = module_0.NVPModel()
    assert module_0.COMMAND_TIMEOUT == pytest.approx(4.0, abs=0.01, rel=0.01)
    assert module_0.NVP_RESEND_JETSON_CLOCKS_MESSAGE == 3
    assert module_0.NVP_COUNTER_ALIVE_JETSON_CLOCKS == 3
    assert f'{type(module_0.NVPModel.is_running).__module__}.{type(module_0.NVPModel.is_running).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.status).__module__}.{type(module_0.NVPModel.status).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.modes).__module__}.{type(module_0.NVPModel.modes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.id).__module__}.{type(module_0.NVPModel.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.name).__module__}.{type(module_0.NVPModel.name).__qualname__}' == 'builtins.property'
    var_0 = n_v_p_model_0.__repr__()
    assert var_0 == ''
    with pytest.raises(module_1.JtopException):
        n_v_p_model_0.set(var_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    n_v_p_model_0 = module_0.NVPModel()
    assert module_0.COMMAND_TIMEOUT == pytest.approx(4.0, abs=0.01, rel=0.01)
    assert module_0.NVP_RESEND_JETSON_CLOCKS_MESSAGE == 3
    assert module_0.NVP_COUNTER_ALIVE_JETSON_CLOCKS == 3
    assert f'{type(module_0.NVPModel.is_running).__module__}.{type(module_0.NVPModel.is_running).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.status).__module__}.{type(module_0.NVPModel.status).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.modes).__module__}.{type(module_0.NVPModel.modes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.id).__module__}.{type(module_0.NVPModel.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.name).__module__}.{type(module_0.NVPModel.name).__qualname__}' == 'builtins.property'
    n_v_p_model_0.is_running()

def test_case_13():
    int_0 = -19
    n_v_p_model_0 = module_0.NVPModel()
    assert module_0.COMMAND_TIMEOUT == pytest.approx(4.0, abs=0.01, rel=0.01)
    assert module_0.NVP_RESEND_JETSON_CLOCKS_MESSAGE == 3
    assert module_0.NVP_COUNTER_ALIVE_JETSON_CLOCKS == 3
    assert f'{type(module_0.NVPModel.is_running).__module__}.{type(module_0.NVPModel.is_running).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.status).__module__}.{type(module_0.NVPModel.status).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.modes).__module__}.{type(module_0.NVPModel.modes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.id).__module__}.{type(module_0.NVPModel.id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NVPModel.name).__module__}.{type(module_0.NVPModel.name).__qualname__}' == 'builtins.property'
    with pytest.raises(module_1.JtopException):
        n_v_p_model_0.set(int_0)