# Automatically generated by Pynguin.
import pytest
import jtop.gui.jtopgui as module_0
import curses as module_1
import datetime as module_2
import jtop.gui.lib.common as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b'\xaa[\x92\xd3\x99v\x82\xb7\xec'
    module_0.JTOPGUI(bytes_0, bytes_0, bytes_0, start=bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.start_color()
    var_0.header()

def test_case_2():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}

def test_case_3():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}
    var_0 = j_t_o_p_g_u_i_0.increase(tuple_0)

def test_case_4():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}
    var_0 = j_t_o_p_g_u_i_0.decrease(tuple_0)

def test_case_5():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}
    var_0 = j_t_o_p_g_u_i_0.ESC_BUTTON(tuple_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_6():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}
    j_t_o_p_g_u_i_0.keyboard(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}
    module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, seconds=tuple_0)

def test_case_8():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}
    var_0 = j_t_o_p_g_u_i_0.decrease(j_t_o_p_g_u_i_0)

def test_case_9():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}
    var_0 = j_t_o_p_g_u_i_0.increase(j_t_o_p_g_u_i_0)

def test_case_10():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}
    int_0 = 261
    var_0 = j_t_o_p_g_u_i_0.keyboard(int_0)
    assert var_0 is False
    assert j_t_o_p_g_u_i_0.old_key == 261

def test_case_11():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}
    int_0 = 260
    var_0 = j_t_o_p_g_u_i_0.keyboard(int_0)
    assert var_0 is False
    assert j_t_o_p_g_u_i_0.old_key == 260

def test_case_12():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}
    int_0 = 261
    var_0 = j_t_o_p_g_u_i_0.keyboard(int_0)
    assert var_0 is False
    assert j_t_o_p_g_u_i_0.old_key == 261
    var_1 = j_t_o_p_g_u_i_0.keyboard(int_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}
    var_0 = j_t_o_p_g_u_i_0.decrease()
    var_1 = j_t_o_p_g_u_i_0.decrease(j_t_o_p_g_u_i_0)
    bytes_0 = b'\xaa[\x921\xd3\x99v\x82\xb7\xec'
    var_2 = j_t_o_p_g_u_i_0.increase(bytes_0)
    var_3 = j_t_o_p_g_u_i_0.increase()
    timedelta_0 = module_2.timedelta()
    int_0 = 51
    var_4 = j_t_o_p_g_u_i_0.keyboard(int_0)
    assert var_4 is False
    assert j_t_o_p_g_u_i_0.old_key == 51
    var_3.size_page()

@pytest.mark.xfail(strict=True)
def test_case_14():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}
    var_0 = j_t_o_p_g_u_i_0.decrease()
    var_1 = j_t_o_p_g_u_i_0.decrease(j_t_o_p_g_u_i_0)
    bytes_0 = b'\xaa[\x921\xd3\x99v\x82\xb7\xec'
    var_2 = j_t_o_p_g_u_i_0.increase(bytes_0)
    var_3 = j_t_o_p_g_u_i_0.increase()
    int_0 = 9
    var_4 = j_t_o_p_g_u_i_0.keyboard(int_0)
    assert var_4 is False
    assert j_t_o_p_g_u_i_0.old_key == 9
    var_3.size_page()

@pytest.mark.xfail(strict=True)
def test_case_15():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}
    var_0 = j_t_o_p_g_u_i_0.decrease(j_t_o_p_g_u_i_0)
    timedelta_0 = module_2.timedelta()
    int_0 = 27
    j_t_o_p_g_u_i_0.keyboard(int_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}
    var_0 = j_t_o_p_g_u_i_0.decrease()
    var_1 = j_t_o_p_g_u_i_0.decrease(j_t_o_p_g_u_i_0)
    bytes_0 = b'\xaa[\x921\xd3\x99v\x82\xb7\xec'
    var_2 = j_t_o_p_g_u_i_0.increase(bytes_0)
    var_3 = j_t_o_p_g_u_i_0.increase()
    int_0 = 81
    var_4 = j_t_o_p_g_u_i_0.keyboard(int_0)
    assert var_4 is True
    var_1.size_page()

@pytest.mark.xfail(strict=True)
def test_case_17():
    tuple_0 = ()
    j_t_o_p_g_u_i_0 = module_0.JTOPGUI(tuple_0, tuple_0, tuple_0, start=tuple_0)
    assert f'{type(j_t_o_p_g_u_i_0).__module__}.{type(j_t_o_p_g_u_i_0).__qualname__}' == 'jtop.gui.jtopgui.JTOPGUI'
    assert j_t_o_p_g_u_i_0.stdscr == ()
    assert j_t_o_p_g_u_i_0.jetson == ()
    assert j_t_o_p_g_u_i_0.message is False
    assert j_t_o_p_g_u_i_0.pages == []
    assert j_t_o_p_g_u_i_0.n_page == 0
    assert j_t_o_p_g_u_i_0.key == -1
    assert j_t_o_p_g_u_i_0.old_key == -1
    assert j_t_o_p_g_u_i_0.mouse == ()
    assert module_0.GUI_REFRESH == 50
    assert module_0.JTOPGUI.COLORS == {'RED': 1, 'GREEN': 2, 'YELLOW': 3, 'BLUE': 4, 'MAGENTA': 5, 'CYAN': 6}
    var_0 = j_t_o_p_g_u_i_0.decrease(j_t_o_p_g_u_i_0)
    bytes_0 = b'\xaa\x92\xd3\x99\x82\xb7\xec'
    var_1 = j_t_o_p_g_u_i_0.increase(bytes_0)
    var_2 = j_t_o_p_g_u_i_0.increase()
    int_0 = 113
    var_3 = j_t_o_p_g_u_i_0.keyboard(int_0)
    assert var_3 is True
    str_0 = "'$lzuej0]ASDq"
    var_4 = module_3.check_size(str_0, var_0)
    module_0.JTOPGUI(var_0, tuple_0, var_1, var_4, seconds=var_2)