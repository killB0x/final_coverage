# Automatically generated by Pynguin.
import pytest
import bupper.bupper as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.cli()

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    module_0.do_local(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'&'
    module_0.do_scp(bytes_0, bytes_0)

def test_case_3():
    bytes_0 = b'F\x98{\x03\x06J\xdaS\x1e'
    var_0 = module_0.get_targets(bytes_0)
    assert module_0.parser.description == 'Simple backup script, no diffing or anything fancy.'
    assert module_0.parser.prog == 'bupper'
    assert module_0.CONF_FILES == ('_BACKUP_THIS', '.BACKUP_THIS')
    var_1 = module_0.parse_args(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'argparse.Namespace'
    assert var_1.date_format == 'ISO'
    assert var_1.verbose is False
    assert var_1.source == '~'
    assert var_1.local == '/var/tmp/bupper/'
    assert var_1.remote is None

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'i'
    module_0.do_local(bytes_0, bytes_0)

def test_case_5():
    bytes_0 = b''
    var_0 = module_0.parse_args(bytes_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'argparse.Namespace'
    assert var_0.date_format == 'ISO'
    assert var_0.verbose is False
    assert var_0.source == '~'
    assert var_0.local == '/var/tmp/bupper/'
    assert var_0.remote is None
    assert module_0.parser.description == 'Simple backup script, no diffing or anything fancy.'
    assert module_0.parser.prog == 'bupper'
    assert module_0.CONF_FILES == ('_BACKUP_THIS', '.BACKUP_THIS')
    var_1 = module_0.check_args(var_0)
    assert var_0.source == '/root'

def test_case_6():
    bytes_0 = b'i'
    var_0 = module_0.gen_md5(bytes_0)
    assert var_0 == '6267d050a7acd1a37981a87debe48761'
    assert module_0.parser.description == 'Simple backup script, no diffing or anything fancy.'
    assert module_0.parser.prog == 'bupper'
    assert module_0.CONF_FILES == ('_BACKUP_THIS', '.BACKUP_THIS')

def test_case_7():
    bytes_0 = b'F\x98{\x03\x06J\xdaS\x1e'
    var_0 = module_0.get_targets(bytes_0)
    assert module_0.parser.description == 'Simple backup script, no diffing or anything fancy.'
    assert module_0.parser.prog == 'bupper'
    assert module_0.CONF_FILES == ('_BACKUP_THIS', '.BACKUP_THIS')
    var_1 = module_0.parse_args(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'argparse.Namespace'
    assert var_1.date_format == 'ISO'
    assert var_1.verbose is False
    assert var_1.source == '~'
    assert var_1.local == '/var/tmp/bupper/'
    assert var_1.remote is None
    str_0 = 'T`4l(h\rwSx|-`zk03)'
    var_2 = module_0.do_backup(var_1, str_0)

def test_case_8():
    bytes_0 = b'F\x98{\x03\x06J\xdaS\x1e'
    var_0 = module_0.get_targets(bytes_0)
    assert module_0.parser.description == 'Simple backup script, no diffing or anything fancy.'
    assert module_0.parser.prog == 'bupper'
    assert module_0.CONF_FILES == ('_BACKUP_THIS', '.BACKUP_THIS')
    var_1 = module_0.parse_args(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'argparse.Namespace'
    assert var_1.date_format == 'ISO'
    assert var_1.verbose is False
    assert var_1.source == '~'
    assert var_1.local == '/var/tmp/bupper/'
    assert var_1.remote is None
    str_0 = 'T`4l(Eh\rwSx|-`zk03)'
    var_2 = module_0.do_backup(var_1, str_0)