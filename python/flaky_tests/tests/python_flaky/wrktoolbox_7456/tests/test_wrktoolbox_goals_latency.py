# Automatically generated by Pynguin.
import pytest
import wrktoolbox.goals.latency as module_0

def test_case_0():
    bool_0 = True
    percentile_latency_goal_0 = module_0.PercentileLatencyGoal(bool_0, bool_0)
    assert f'{type(percentile_latency_goal_0).__module__}.{type(percentile_latency_goal_0).__qualname__}' == 'wrktoolbox.goals.latency.PercentileLatencyGoal'
    assert percentile_latency_goal_0.percentile == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert percentile_latency_goal_0.limit is True
    assert module_0.PercentileLatencyGoal.type_name == 'percentile-latency'

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'dF6n]m<+2)q3aH'
    module_0.AverageLatencyGoal(str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 1429
    average_latency_goal_0 = module_0.AverageLatencyGoal(int_0)
    assert f'{type(average_latency_goal_0).__module__}.{type(average_latency_goal_0).__qualname__}' == 'wrktoolbox.goals.latency.AverageLatencyGoal'
    assert average_latency_goal_0.limit == pytest.approx(1429.0, abs=0.01, rel=0.01)
    assert module_0.AverageLatencyGoal.type_name == 'avg-latency'
    var_0 = average_latency_goal_0.to_dict()
    var_0.is_satisfied(var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    bool_0 = True
    percentile_latency_goal_0 = module_0.PercentileLatencyGoal(bool_0, bool_0)
    assert f'{type(percentile_latency_goal_0).__module__}.{type(percentile_latency_goal_0).__qualname__}' == 'wrktoolbox.goals.latency.PercentileLatencyGoal'
    assert percentile_latency_goal_0.percentile == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert percentile_latency_goal_0.limit is True
    assert module_0.PercentileLatencyGoal.type_name == 'percentile-latency'
    int_0 = -970
    average_latency_goal_0 = module_0.AverageLatencyGoal(int_0)
    assert f'{type(average_latency_goal_0).__module__}.{type(average_latency_goal_0).__qualname__}' == 'wrktoolbox.goals.latency.AverageLatencyGoal'
    assert average_latency_goal_0.limit == pytest.approx(-970.0, abs=0.01, rel=0.01)
    assert module_0.AverageLatencyGoal.type_name == 'avg-latency'
    average_latency_goal_0.is_satisfied(none_type_0)

def test_case_4():
    bool_0 = False
    percentile_latency_goal_0 = module_0.PercentileLatencyGoal(bool_0, bool_0)
    assert f'{type(percentile_latency_goal_0).__module__}.{type(percentile_latency_goal_0).__qualname__}' == 'wrktoolbox.goals.latency.PercentileLatencyGoal'
    assert percentile_latency_goal_0.percentile == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert percentile_latency_goal_0.limit is False
    assert module_0.PercentileLatencyGoal.type_name == 'percentile-latency'
    var_0 = percentile_latency_goal_0.__repr__()
    assert var_0 == 'The 0.0 percentile latency of web requests must be less than False ms.'
    var_1 = var_0.__repr__()
    assert var_1 == "'The 0.0 percentile latency of web requests must be less than False ms.'"
    var_2 = var_1.__repr__()
    assert var_2 == '"\'The 0.0 percentile latency of web requests must be less than False ms.\'"'
    average_latency_goal_0 = module_0.AverageLatencyGoal(bool_0)
    assert f'{type(average_latency_goal_0).__module__}.{type(average_latency_goal_0).__qualname__}' == 'wrktoolbox.goals.latency.AverageLatencyGoal'
    assert average_latency_goal_0.limit == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.AverageLatencyGoal.type_name == 'avg-latency'
    percentile_latency_goal_1 = module_0.PercentileLatencyGoal(bool_0, bool_0)
    var_3 = average_latency_goal_0.__repr__()
    assert var_3 == 'Average latency for web requests must be less than 0.0 ms.'