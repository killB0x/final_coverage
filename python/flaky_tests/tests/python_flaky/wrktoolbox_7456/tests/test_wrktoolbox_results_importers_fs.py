# Automatically generated by Pynguin.
import pytest
import wrktoolbox.results.importers.fs as module_0
import json.decoder as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'scripts_folder'
    module_0.JsonResultsImporter(str_0)

def test_case_1():
    str_0 = ''
    json_results_importer_0 = module_0.JsonResultsImporter(str_0)
    assert f'{type(json_results_importer_0).__module__}.{type(json_results_importer_0).__qualname__}' == 'wrktoolbox.results.importers.fs.JsonResultsImporter'
    assert json_results_importer_0.filter_urls is None
    assert module_0.JsonResultsImporter.type_name == 'json'

def test_case_2():
    str_0 = ''
    bin_results_importer_0 = module_0.BinResultsImporter(str_0)
    assert f'{type(bin_results_importer_0).__module__}.{type(bin_results_importer_0).__qualname__}' == 'wrktoolbox.results.importers.fs.BinResultsImporter'
    assert bin_results_importer_0.filter_urls is None
    assert module_0.BinResultsImporter.type_name == 'bin'

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ''
    json_results_importer_0 = module_0.JsonResultsImporter(str_0)
    assert f'{type(json_results_importer_0).__module__}.{type(json_results_importer_0).__qualname__}' == 'wrktoolbox.results.importers.fs.JsonResultsImporter'
    assert json_results_importer_0.filter_urls is None
    assert module_0.JsonResultsImporter.type_name == 'json'
    bin_results_importer_0 = module_0.BinResultsImporter(str_0)
    assert f'{type(bin_results_importer_0).__module__}.{type(bin_results_importer_0).__qualname__}' == 'wrktoolbox.results.importers.fs.BinResultsImporter'
    assert bin_results_importer_0.filter_urls is None
    assert module_0.BinResultsImporter.type_name == 'bin'
    str_1 = '@vVN+BXu'
    bin_results_importer_0.parse_suite(str_1)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ''
    json_results_importer_0 = module_0.JsonResultsImporter(str_0)
    assert f'{type(json_results_importer_0).__module__}.{type(json_results_importer_0).__qualname__}' == 'wrktoolbox.results.importers.fs.JsonResultsImporter'
    assert json_results_importer_0.filter_urls is None
    assert module_0.JsonResultsImporter.type_name == 'json'
    json_results_importer_0.parse_suite(str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = ''
    bin_results_importer_0 = module_0.BinResultsImporter(str_0)
    assert f'{type(bin_results_importer_0).__module__}.{type(bin_results_importer_0).__qualname__}' == 'wrktoolbox.results.importers.fs.BinResultsImporter'
    assert bin_results_importer_0.filter_urls is None
    assert module_0.BinResultsImporter.type_name == 'bin'
    str_1 = 'M/ekuPH/.Hyqgh\n|s'
    str_2 = bin_results_importer_0.get_file_extension()
    assert str_2 == '.bin'
    bin_results_importer_0.parse_output(str_1)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = ''
    bin_results_importer_0 = module_0.BinResultsImporter(str_0)
    assert f'{type(bin_results_importer_0).__module__}.{type(bin_results_importer_0).__qualname__}' == 'wrktoolbox.results.importers.fs.BinResultsImporter'
    assert bin_results_importer_0.filter_urls is None
    assert module_0.BinResultsImporter.type_name == 'bin'
    module_0.JsonResultsImporter(str_0, bin_results_importer_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ''
    json_results_importer_0 = module_0.JsonResultsImporter(str_0)
    assert f'{type(json_results_importer_0).__module__}.{type(json_results_importer_0).__qualname__}' == 'wrktoolbox.results.importers.fs.JsonResultsImporter'
    assert json_results_importer_0.filter_urls is None
    assert module_0.JsonResultsImporter.type_name == 'json'
    bin_results_importer_0 = module_0.BinResultsImporter(str_0)
    assert f'{type(bin_results_importer_0).__module__}.{type(bin_results_importer_0).__qualname__}' == 'wrktoolbox.results.importers.fs.BinResultsImporter'
    assert bin_results_importer_0.filter_urls is None
    assert module_0.BinResultsImporter.type_name == 'bin'
    json_results_importer_0.parse_output(str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = ''
    bin_results_importer_0 = module_0.BinResultsImporter(str_0)
    assert f'{type(bin_results_importer_0).__module__}.{type(bin_results_importer_0).__qualname__}' == 'wrktoolbox.results.importers.fs.BinResultsImporter'
    assert bin_results_importer_0.filter_urls is None
    assert module_0.BinResultsImporter.type_name == 'bin'
    none_type_0 = None
    generator_0 = bin_results_importer_0.import_suites()
    module_1.JSONObject(generator_0, str_0, bin_results_importer_0, generator_0, none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = ''
    bin_results_importer_0 = module_0.BinResultsImporter(str_0)
    assert f'{type(bin_results_importer_0).__module__}.{type(bin_results_importer_0).__qualname__}' == 'wrktoolbox.results.importers.fs.BinResultsImporter'
    assert bin_results_importer_0.filter_urls is None
    assert module_0.BinResultsImporter.type_name == 'bin'
    json_results_importer_0 = module_0.JsonResultsImporter(str_0)
    assert f'{type(json_results_importer_0).__module__}.{type(json_results_importer_0).__qualname__}' == 'wrktoolbox.results.importers.fs.JsonResultsImporter'
    assert json_results_importer_0.filter_urls is None
    assert module_0.JsonResultsImporter.type_name == 'json'
    none_type_0 = None
    generator_0 = json_results_importer_0.import_results(str_0)
    str_1 = ''
    module_1.JSONObject(generator_0, str_1, none_type_0, bin_results_importer_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '/'
    bin_results_importer_0 = module_0.BinResultsImporter(str_0)
    assert f'{type(bin_results_importer_0).__module__}.{type(bin_results_importer_0).__qualname__}' == 'wrktoolbox.results.importers.fs.BinResultsImporter'
    assert bin_results_importer_0.filter_urls is None
    assert module_0.BinResultsImporter.type_name == 'bin'
    none_type_0 = None
    generator_0 = bin_results_importer_0.import_suites()
    module_1.JSONObject(generator_0, str_0, none_type_0, bin_results_importer_0, str_0)