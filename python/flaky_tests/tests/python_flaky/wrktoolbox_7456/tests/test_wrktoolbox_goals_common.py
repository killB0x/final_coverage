# Automatically generated by Pynguin.
import pytest
import wrktoolbox.goals.common as module_0
import wrktoolbox.wrkoutput as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '<.'
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, str_0]
    module_0.NoErrorsGoal(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    no_socket_errors_goal_0 = module_0.NoSocketErrorsGoal()
    assert f'{type(no_socket_errors_goal_0).__module__}.{type(no_socket_errors_goal_0).__qualname__}' == 'wrktoolbox.goals.common.NoSocketErrorsGoal'
    assert module_0.NoSocketErrorsGoal.type_name == 'no-socket-errors'
    no_socket_errors_goal_0.is_satisfied(no_socket_errors_goal_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    no_socket_errors_goal_0 = module_0.NoSocketErrorsGoal()
    assert f'{type(no_socket_errors_goal_0).__module__}.{type(no_socket_errors_goal_0).__qualname__}' == 'wrktoolbox.goals.common.NoSocketErrorsGoal'
    assert module_0.NoSocketErrorsGoal.type_name == 'no-socket-errors'
    var_0 = no_socket_errors_goal_0.assert_parsed(bool_0)
    var_1 = no_socket_errors_goal_0.__repr__()
    assert var_1 == 'No socket errors'
    var_2 = var_1.__repr__()
    assert var_2 == "'No socket errors'"
    var_3 = var_2.__repr__()
    assert var_3 == '"\'No socket errors\'"'
    var_3.assert_parsed(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    no_failed_requests_goal_0 = module_0.NoFailedRequestsGoal()
    assert f'{type(no_failed_requests_goal_0).__module__}.{type(no_failed_requests_goal_0).__qualname__}' == 'wrktoolbox.goals.common.NoFailedRequestsGoal'
    assert module_0.NoFailedRequestsGoal.type_name == 'no-failed-requests'
    var_0 = no_failed_requests_goal_0.assert_parsed(bool_0)
    var_1 = var_0.__repr__()
    requests_per_seconds_goal_0 = module_0.RequestsPerSecondsGoal(bool_0)
    assert f'{type(requests_per_seconds_goal_0).__module__}.{type(requests_per_seconds_goal_0).__qualname__}' == 'wrktoolbox.goals.common.RequestsPerSecondsGoal'
    assert requests_per_seconds_goal_0.minimum == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert module_0.RequestsPerSecondsGoal.type_name == 'requests-per-second'
    no_failed_requests_goal_0.is_satisfied(var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    no_errors_goal_0 = module_0.NoErrorsGoal()
    assert f'{type(no_errors_goal_0).__module__}.{type(no_errors_goal_0).__qualname__}' == 'wrktoolbox.goals.common.NoErrorsGoal'
    assert module_0.NoErrorsGoal.type_name == 'no-errors'
    var_0 = no_errors_goal_0.to_dict()
    var_1 = var_0.__repr__()
    assert var_1 == "{'repr': 'No socket errors and no responses with status not in 2xx or 3xx', 'type': 'no-errors'}"
    str_0 = 'K^@H(E{iAT><Lssw'
    none_type_0 = None
    bool_0 = True
    benchmark_output_0 = module_1.BenchmarkOutput(benchmark_id=str_0, threads=none_type_0, socket_errors=none_type_0, requests_summary=none_type_0, transfer_per_second=bool_0, suite_id=bool_0)
    var_2 = benchmark_output_0.__repr__()
    list_0 = [var_2]
    module_1.Result(*list_0)

def test_case_5():
    bool_0 = False
    list_0 = []
    no_failed_requests_goal_0 = module_0.NoFailedRequestsGoal(*list_0)
    assert f'{type(no_failed_requests_goal_0).__module__}.{type(no_failed_requests_goal_0).__qualname__}' == 'wrktoolbox.goals.common.NoFailedRequestsGoal'
    assert module_0.NoFailedRequestsGoal.type_name == 'no-failed-requests'
    requests_per_seconds_goal_0 = module_0.RequestsPerSecondsGoal(bool_0)
    assert f'{type(requests_per_seconds_goal_0).__module__}.{type(requests_per_seconds_goal_0).__qualname__}' == 'wrktoolbox.goals.common.RequestsPerSecondsGoal'
    assert requests_per_seconds_goal_0.minimum == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.RequestsPerSecondsGoal.type_name == 'requests-per-second'

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    bool_0 = True
    requests_per_seconds_goal_0 = module_0.RequestsPerSecondsGoal(bool_0)
    assert f'{type(requests_per_seconds_goal_0).__module__}.{type(requests_per_seconds_goal_0).__qualname__}' == 'wrktoolbox.goals.common.RequestsPerSecondsGoal'
    assert requests_per_seconds_goal_0.minimum == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert module_0.RequestsPerSecondsGoal.type_name == 'requests-per-second'
    var_0 = requests_per_seconds_goal_0.__repr__()
    assert var_0 == 'The minimum amount of handled requests per seconds is 1.0'
    var_1 = var_0.__repr__()
    assert var_1 == "'The minimum amount of handled requests per seconds is 1.0'"
    var_1.is_satisfied(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    benchmark_output_0 = module_1.BenchmarkOutput(raw_output=none_type_0, threads=none_type_0, connections=none_type_0, total=none_type_0, start_time=none_type_0)
    no_errors_goal_0 = module_0.NoErrorsGoal()
    assert f'{type(no_errors_goal_0).__module__}.{type(no_errors_goal_0).__qualname__}' == 'wrktoolbox.goals.common.NoErrorsGoal'
    assert module_0.NoErrorsGoal.type_name == 'no-errors'
    bool_0 = no_errors_goal_0.is_satisfied(benchmark_output_0)
    assert bool_0 is True
    var_0 = no_errors_goal_0.__repr__()
    assert var_0 == 'No socket errors and no responses with status not in 2xx or 3xx'
    var_1 = benchmark_output_0.__repr__()
    benchmark_output_0.to_dict()

@pytest.mark.xfail(strict=True)
def test_case_8():
    no_failed_requests_goal_0 = module_0.NoFailedRequestsGoal()
    assert f'{type(no_failed_requests_goal_0).__module__}.{type(no_failed_requests_goal_0).__qualname__}' == 'wrktoolbox.goals.common.NoFailedRequestsGoal'
    assert module_0.NoFailedRequestsGoal.type_name == 'no-failed-requests'
    var_0 = no_failed_requests_goal_0.__repr__()
    assert var_0 == 'No responses with status not in 2xx or 3xx'
    var_0.to_dict()

@pytest.mark.xfail(strict=True)
def test_case_9():
    no_errors_goal_0 = module_0.NoErrorsGoal()
    assert f'{type(no_errors_goal_0).__module__}.{type(no_errors_goal_0).__qualname__}' == 'wrktoolbox.goals.common.NoErrorsGoal'
    assert module_0.NoErrorsGoal.type_name == 'no-errors'
    bool_0 = True
    requests_per_seconds_goal_0 = module_0.RequestsPerSecondsGoal(bool_0)
    assert f'{type(requests_per_seconds_goal_0).__module__}.{type(requests_per_seconds_goal_0).__qualname__}' == 'wrktoolbox.goals.common.RequestsPerSecondsGoal'
    assert requests_per_seconds_goal_0.minimum == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert module_0.RequestsPerSecondsGoal.type_name == 'requests-per-second'
    var_0 = requests_per_seconds_goal_0.__repr__()
    assert var_0 == 'The minimum amount of handled requests per seconds is 1.0'
    var_1 = var_0.__repr__()
    assert var_1 == "'The minimum amount of handled requests per seconds is 1.0'"
    requests_per_seconds_goal_0.is_satisfied(var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    bool_0 = True
    benchmark_output_0 = module_1.BenchmarkOutput(raw_output=none_type_0, connections=none_type_0, not_successful_responses=bool_0, requests_per_second=bool_0)
    no_errors_goal_0 = module_0.NoErrorsGoal()
    assert f'{type(no_errors_goal_0).__module__}.{type(no_errors_goal_0).__qualname__}' == 'wrktoolbox.goals.common.NoErrorsGoal'
    assert module_0.NoErrorsGoal.type_name == 'no-errors'
    no_errors_goal_1 = module_0.NoErrorsGoal()
    bool_1 = no_errors_goal_1.is_satisfied(benchmark_output_0)
    assert bool_1 is False
    var_0 = benchmark_output_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_0.__repr__()
    var_0.to_dict()