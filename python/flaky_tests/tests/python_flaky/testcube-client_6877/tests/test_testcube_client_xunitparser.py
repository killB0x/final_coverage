# Automatically generated by Pynguin.
import pytest
import unittest.case as module_0
import testcube_client.xunitparser as module_1
import inspect as module_2
import tokenize as module_3
import dataclasses as module_4
import ast as module_5
import unittest.signals as module_6
import difflib as module_7
import pprint as module_8
import unittest.util as module_9
import locale as module_10

def test_case_0():
    test_result_0 = module_0.doModuleCleanups()
    var_0 = module_1.to_timedelta(test_result_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    test_result_0 = module_1.TestResult()
    module_1.to_timedelta(test_result_0)

def test_case_2():
    test_result_0 = module_1.TestResult()

@pytest.mark.xfail(strict=True)
def test_case_3():
    test_result_0 = module_1.TestResult()
    test_result_0.addError(test_result_0, test_result_0)

def test_case_4():
    none_type_0 = None
    test_case_0 = module_1.TestCase(none_type_0, none_type_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert test_case_0.classname is None
    assert test_case_0.methodname is None
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'

def test_case_5():
    test_suite_0 = module_1.TestSuite()
    assert test_suite_0.properties == {}
    assert test_suite_0.stdout is None
    assert test_suite_0.stderr is None

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_1.parse(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    list_0 = []
    test_case_0 = module_1.TestCase(list_0, list_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert test_case_0.classname == []
    assert test_case_0.methodname == []
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'
    var_0 = module_2.getmembers(test_case_0, list_0)
    test_case_0.runTest()

@pytest.mark.xfail(strict=True)
def test_case_8():
    test_result_0 = module_1.TestResult()
    var_0 = test_result_0.addResult(test_result_0)
    assert f'{type(test_result_0.tests).__module__}.{type(test_result_0.tests).__qualname__}' == 'builtins.list'
    assert len(test_result_0.tests) == 1
    assert test_result_0.passed == []
    var_1 = test_result_0.addSuccess(var_0)
    assert test_result_0.passed == [None]
    var_2 = module_3.maybe()
    module_1.parse(var_2)

@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    test_case_0 = module_1.TestCase(list_0, list_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert test_case_0.classname == []
    assert test_case_0.methodname == []
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'
    var_0 = module_2.getmembers(test_case_0, list_0)
    test_case_1 = module_1.TestCase(var_0, list_0)
    assert len(test_case_1.classname) == 132
    var_1 = var_0.__repr__()
    var_0.isidentifier()

@pytest.mark.xfail(strict=True)
def test_case_10():
    list_0 = []
    parser_0 = module_1.Parser(*list_0)
    test_case_0 = module_1.TestCase(list_0, list_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert test_case_0.classname == []
    assert test_case_0.methodname == []
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = test_case_0.seed(none_type_0)
    var_1 = test_case_0.run()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'testcube_client.xunitparser.TestResult'
    assert var_1.failfast is False
    assert var_1.failures == []
    assert var_1.errors == []
    assert var_1.testsRun == 1
    assert var_1.skipped == []
    assert var_1.expectedFailures == []
    assert var_1.unexpectedSuccesses == []
    assert var_1.shouldStop is False
    assert var_1.buffer is False
    assert var_1.tb_locals is False
    assert f'{type(var_1.tests).__module__}.{type(var_1.tests).__qualname__}' == 'builtins.list'
    assert len(var_1.tests) == 1
    assert var_1.passed == []
    var_2 = module_4.is_dataclass(none_type_0)
    var_3 = module_1.to_timedelta(var_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'datetime.timedelta'
    test_case_0.__hash__()

@pytest.mark.xfail(strict=True)
def test_case_11():
    list_0 = []
    test_case_0 = module_1.TestCase(list_0, list_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert test_case_0.classname == []
    assert test_case_0.methodname == []
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'
    var_0 = test_case_0.__str__()
    assert var_0 == '[] ([])'
    var_1 = test_case_0.seed(var_0)
    assert test_case_0.result == '[] ([])'
    var_2 = test_case_0.run()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'testcube_client.xunitparser.TestResult'
    assert var_2.failfast is False
    assert var_2.failures == []
    assert var_2.errors == []
    assert var_2.testsRun == 1
    assert var_2.skipped == []
    assert var_2.expectedFailures == []
    assert var_2.unexpectedSuccesses == []
    assert var_2.shouldStop is False
    assert var_2.buffer is False
    assert var_2.tb_locals is False
    assert f'{type(var_2.tests).__module__}.{type(var_2.tests).__qualname__}' == 'builtins.list'
    assert len(var_2.tests) == 1
    assert var_2.passed == []
    test_case_1 = module_1.TestCase(test_case_0, list_0)
    var_0.seed(var_1, var_0)

def test_case_12():
    list_0 = []
    test_case_0 = module_1.TestCase(list_0, list_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert test_case_0.classname == []
    assert test_case_0.methodname == []
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'
    var_0 = test_case_0.tearDown()
    var_1 = module_2.getmembers(test_case_0, list_0)
    var_2 = test_case_0.seed(var_1)
    assert len(test_case_0.result) == 132
    var_3 = test_case_0.runTest()

def test_case_13():
    var_0 = module_5._Precedence.POWER
    var_1 = module_1.to_timedelta(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'datetime.timedelta'

@pytest.mark.xfail(strict=True)
def test_case_14():
    list_0 = []
    parser_0 = module_1.Parser(*list_0)
    test_case_0 = module_1.TestCase(parser_0, list_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert f'{type(test_case_0.classname).__module__}.{type(test_case_0.classname).__qualname__}' == 'testcube_client.xunitparser.Parser'
    assert test_case_0.methodname == []
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'
    var_0 = parser_0.parse_properties(list_0, list_0)
    var_1 = test_case_0.seed(var_0)
    var_2 = test_case_0.run()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'testcube_client.xunitparser.TestResult'
    assert var_2.failfast is False
    assert var_2.failures == []
    assert var_2.errors == []
    assert var_2.testsRun == 1
    assert var_2.skipped == []
    assert var_2.expectedFailures == []
    assert var_2.unexpectedSuccesses == []
    assert var_2.shouldStop is False
    assert var_2.buffer is False
    assert var_2.tb_locals is False
    assert f'{type(var_2.tests).__module__}.{type(var_2.tests).__qualname__}' == 'builtins.list'
    assert len(var_2.tests) == 1
    assert var_2.passed == []
    var_3 = test_case_0.run(var_2)
    assert len(var_2.tests) == 2
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'testcube_client.xunitparser.TestResult'
    assert var_3.failures == []
    assert var_3.errors == []
    assert var_3.skipped == []
    assert f'{type(var_3.tests).__module__}.{type(var_3.tests).__qualname__}' == 'builtins.list'
    assert len(var_3.tests) == 2
    assert var_3.passed == []
    var_4 = module_4.is_dataclass(var_2)
    module_1.to_timedelta(parser_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    list_0 = []
    test_case_0 = module_1.TestCase(list_0, list_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert test_case_0.classname == []
    assert test_case_0.methodname == []
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'
    test_case_1 = module_1.TestCase(test_case_0, list_0)
    var_0 = test_case_0.id()
    assert var_0 == '[].[]'
    var_1 = test_case_0.__str__()
    assert var_1 == '[] ([])'
    var_2 = test_case_0.seed(var_1)
    assert test_case_0.result == '[] ([])'
    var_3 = test_case_0.run()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'testcube_client.xunitparser.TestResult'
    assert var_3.failfast is False
    assert var_3.failures == []
    assert var_3.errors == []
    assert var_3.testsRun == 1
    assert var_3.skipped == []
    assert var_3.expectedFailures == []
    assert var_3.unexpectedSuccesses == []
    assert var_3.shouldStop is False
    assert var_3.buffer is False
    assert var_3.tb_locals is False
    assert f'{type(var_3.tests).__module__}.{type(var_3.tests).__qualname__}' == 'builtins.list'
    assert len(var_3.tests) == 1
    assert var_3.passed == []
    module_1.to_timedelta(list_0)

def test_case_16():
    list_0 = []
    parser_0 = module_1.Parser(*list_0)
    test_case_0 = module_1.TestCase(list_0, list_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert test_case_0.classname == []
    assert test_case_0.methodname == []
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'
    var_0 = parser_0.parse_properties(list_0, list_0)
    var_1 = var_0.__repr__()
    var_2 = test_case_0.seed(var_1)
    var_3 = test_case_0.run()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'testcube_client.xunitparser.TestResult'
    assert var_3.failfast is False
    assert var_3.failures == []
    assert var_3.errors == []
    assert var_3.testsRun == 1
    assert var_3.skipped == []
    assert var_3.expectedFailures == []
    assert var_3.unexpectedSuccesses == []
    assert var_3.shouldStop is False
    assert var_3.buffer is False
    assert var_3.tb_locals is False
    assert f'{type(var_3.tests).__module__}.{type(var_3.tests).__qualname__}' == 'builtins.list'
    assert len(var_3.tests) == 1
    assert var_3.passed == []
    var_4 = test_case_0.setUp()

def test_case_17():
    list_0 = module_6.installHandler()
    test_case_0 = module_1.TestCase(list_0, list_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert test_case_0.classname is None
    assert test_case_0.methodname is None
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'
    var_0 = list_0.__repr__()
    var_1 = test_case_0.seed(var_0)
    var_2 = test_case_0.runTest()

def test_case_18():
    list_0 = []
    parser_0 = module_1.Parser(*list_0)
    none_type_0 = None
    var_0 = parser_0.parse_properties(list_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    list_0 = []
    parser_0 = module_1.Parser(*list_0)
    test_case_0 = module_1.TestCase(list_0, list_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert test_case_0.classname == []
    assert test_case_0.methodname == []
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'
    test_suite_0 = module_1.TestSuite()
    assert test_suite_0.properties == {}
    assert test_suite_0.stdout is None
    assert test_suite_0.stderr is None
    var_0 = test_case_0.seed(parser_0)
    var_1 = module_2.getmembers(test_case_0, list_0)
    var_2 = list_0.__repr__()
    var_3 = test_case_0.seed(var_2)
    parser_0.parse_properties(var_2, list_0)

def test_case_20():
    list_0 = []
    parser_0 = module_7.context_diff(list_0, list_0, list_0, list_0, lineterm=list_0)
    test_case_0 = module_1.TestCase(list_0, list_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert test_case_0.classname == []
    assert test_case_0.methodname == []
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'
    var_0 = test_case_0.seed(parser_0)
    var_1 = module_2.getmembers(test_case_0, list_0)
    var_2 = list_0.__repr__()

def test_case_21():
    list_0 = []
    test_case_0 = module_1.TestCase(list_0, list_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert test_case_0.classname == []
    assert test_case_0.methodname == []
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'
    var_0 = module_2.getmembers(test_case_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    list_0 = []
    parser_0 = module_1.Parser(*list_0)
    test_case_0 = module_1.TestCase(list_0, list_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert test_case_0.classname == []
    assert test_case_0.methodname == []
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'
    test_case_1 = module_1.TestCase(parser_0, list_0)
    var_0 = parser_0.__repr__()
    var_1 = test_case_0.seed(var_0)
    var_2 = test_case_0.run()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'testcube_client.xunitparser.TestResult'
    assert var_2.failfast is False
    assert var_2.failures == []
    assert var_2.errors == []
    assert var_2.testsRun == 1
    assert var_2.skipped == []
    assert var_2.expectedFailures == []
    assert var_2.unexpectedSuccesses == []
    assert var_2.shouldStop is False
    assert var_2.buffer is False
    assert var_2.tb_locals is False
    assert f'{type(var_2.tests).__module__}.{type(var_2.tests).__qualname__}' == 'builtins.list'
    assert len(var_2.tests) == 1
    assert var_2.passed == []
    var_3 = module_1.to_timedelta(var_1)
    var_4 = module_4.is_dataclass(list_0)
    var_5 = var_2.addFailure(var_2, var_0)
    assert len(var_2.failures) == 1
    var_4.testPartExecutor(var_4)

@pytest.mark.xfail(strict=True)
def test_case_23():
    list_0 = []
    parser_0 = module_1.Parser(*list_0)
    test_case_0 = module_1.TestCase(list_0, list_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert test_case_0.classname == []
    assert test_case_0.methodname == []
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'
    var_0 = module_8.isrecursive(parser_0)
    test_case_1 = module_1.TestCase(parser_0, var_0)
    var_1 = module_9.unorderable_list_difference(var_0, var_0)
    var_2 = test_case_0.seed(var_1)
    var_3 = test_case_0.run()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'testcube_client.xunitparser.TestResult'
    assert var_3.failfast is False
    assert var_3.failures == []
    assert var_3.errors == []
    assert var_3.testsRun == 1
    assert var_3.skipped == []
    assert var_3.expectedFailures == []
    assert var_3.unexpectedSuccesses == []
    assert var_3.shouldStop is False
    assert var_3.buffer is False
    assert var_3.tb_locals is False
    assert f'{type(var_3.tests).__module__}.{type(var_3.tests).__qualname__}' == 'builtins.list'
    assert len(var_3.tests) == 1
    assert var_3.passed == []
    test_case_2 = module_1.TestCase(var_0, parser_0)
    var_4 = module_1.to_timedelta(var_2)
    var_5 = parser_0.parse_properties(list_0, parser_0)
    var_6 = module_4.is_dataclass(list_0)
    var_7 = test_case_1.__hash__()
    var_8 = var_3.addFailure(var_5, var_1)
    assert var_3.failures == [(None, '')]
    var_9 = module_1.to_timedelta(var_6)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'datetime.timedelta'
    var_9.setUp()

@pytest.mark.xfail(strict=True)
def test_case_24():
    list_0 = []
    test_case_0 = module_1.TestCase(list_0, list_0)
    assert f'{type(test_case_0).__module__}.{type(test_case_0).__qualname__}' == 'testcube_client.xunitparser.TestCase'
    assert test_case_0.classname == []
    assert test_case_0.methodname == []
    assert f'{type(module_1.TestCase.alltext).__module__}.{type(module_1.TestCase.alltext).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.basename).__module__}.{type(module_1.TestCase.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.success).__module__}.{type(module_1.TestCase.success).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.skipped).__module__}.{type(module_1.TestCase.skipped).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.failed).__module__}.{type(module_1.TestCase.failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.errored).__module__}.{type(module_1.TestCase.errored).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.good).__module__}.{type(module_1.TestCase.good).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.bad).__module__}.{type(module_1.TestCase.bad).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.TestCase.stdall).__module__}.{type(module_1.TestCase.stdall).__qualname__}' == 'builtins.property'
    error_0 = module_10.Error(*list_0)
    var_0 = error_0.__repr__()
    var_1 = test_case_0.seed(var_0)
    var_2 = test_case_0.run()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'testcube_client.xunitparser.TestResult'
    assert var_2.failfast is False
    assert var_2.failures == []
    assert var_2.errors == []
    assert var_2.testsRun == 1
    assert var_2.skipped == []
    assert var_2.expectedFailures == []
    assert var_2.unexpectedSuccesses == []
    assert var_2.shouldStop is False
    assert var_2.buffer is False
    assert var_2.tb_locals is False
    assert f'{type(var_2.tests).__module__}.{type(var_2.tests).__qualname__}' == 'builtins.list'
    assert len(var_2.tests) == 1
    assert var_2.passed == []
    var_3 = module_1.to_timedelta(var_1)
    var_4 = module_4.is_dataclass(list_0)
    var_5 = test_case_0.seed(list_0, message=var_0)
    var_6 = module_2.getmembers(test_case_0)
    var_7 = var_1.__repr__()
    module_1.to_timedelta(error_0)