# Automatically generated by Pynguin.
import pytest
import pyautoupdate.posixcommonpath as module_0
import builtins as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -1106
    module_0.commonpath(int_0)

def test_case_1():
    str_0 = '\\R)XrY^4p['
    var_0 = module_0.commonpath(str_0)
    assert var_0 == ''
    bool_0 = False
    with pytest.raises(ValueError):
        module_0.commonpath(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'\xf0\xcd}m\xec\xe6 \x9d\xd4\xa3\xe8K\xc7\t\x9eA\xeb\xd1i'
    module_0.commonpath(bytes_0)

def test_case_3():
    str_0 = "%e0'.~.3XhpugKP)%1*"
    var_0 = module_0.commonpath(str_0)
    assert var_0 == ''

def test_case_4():
    str_0 = '+nZ\x0cRX&#pZ/i}_=dLh'
    with pytest.raises(ValueError):
        module_0.commonpath(str_0)

def test_case_5():
    str_0 = '2'
    var_0 = module_0.commonpath(str_0)
    assert var_0 == '2'

def test_case_6():
    str_0 = '{0} is corrupted and contains the invalid path {1}!'
    var_0 = module_0.commonpath(str_0)
    assert var_0 == ''

def test_case_7():
    str_0 = 'T@d3bB{%@AkyY'
    var_0 = module_0.commonpath(str_0)
    assert var_0 == ''
    var_1 = module_0.commonpath(str_0)
    assert var_1 == ''
    var_2 = module_0.commonpath(str_0)
    assert var_2 == ''
    list_0 = [var_0, var_2]
    var_3 = module_0.commonpath(list_0)
    assert var_3 == ''
    with pytest.raises(ValueError):
        module_0.commonpath(var_0)

def test_case_8():
    bytes_0 = b'\xf0\x97FeNd\x7f'
    tuple_0 = (bytes_0,)
    var_0 = module_0.commonpath(tuple_0)
    assert var_0 == b'\xf0\x97FeNd\x7f'
    str_0 = '!@{A|U]'
    var_1 = module_0.commonpath(str_0)
    assert var_1 == ''
    str_1 = '<i;P)/Sw!'
    with pytest.raises(ValueError):
        module_0.commonpath(str_1)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'T'
    var_0 = module_0.commonpath(str_0)
    assert var_0 == 'T'
    str_1 = '/'
    var_1 = module_0.commonpath(str_1)
    assert var_1 == '/'
    module_1.object(*var_0, **var_0)