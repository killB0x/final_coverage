# Automatically generated by Pynguin.
import pytest
import msteams.formatting as module_0

def test_case_0():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, bool_0, tuple_0, tuple_0}
    var_0 = module_0.ordered_list(set_0)
    assert var_0 == '<ol><li>False</li><li>(False, False)</li></ol>'
    str_0 = '_+v?ZSi-t=Jx(hF}s'
    var_1 = module_0.italic(str_0)
    assert var_1 == '<em>_+v?ZSi-t=Jx(hF}s</em>'
    var_2 = module_0.blockquote(bool_0)
    assert var_2 == '<blockquote>False</blockquote>'
    var_3 = module_0.unordered_list(var_2)
    assert var_3 == '<ul><li><</li><li>b</li><li>l</li><li>o</li><li>c</li><li>k</li><li>q</li><li>u</li><li>o</li><li>t</li><li>e</li><li>></li><li>F</li><li>a</li><li>l</li><li>s</li><li>e</li><li><</li><li>/</li><li>b</li><li>l</li><li>o</li><li>c</li><li>k</li><li>q</li><li>u</li><li>o</li><li>t</li><li>e</li><li>></li></ul>'
    var_4 = module_0.paragraph(str_0)
    assert var_4 == '<p>_+v?ZSi-t=Jx(hF}s</p>'
    var_5 = module_0.header(var_4)
    assert var_5 == '<h1><p>_+v?ZSi-t=Jx(hF}s</p></h1>'
    var_6 = module_0.italic(var_3)
    assert var_6 == '<em><ul><li><</li><li>b</li><li>l</li><li>o</li><li>c</li><li>k</li><li>q</li><li>u</li><li>o</li><li>t</li><li>e</li><li>></li><li>F</li><li>a</li><li>l</li><li>s</li><li>e</li><li><</li><li>/</li><li>b</li><li>l</li><li>o</li><li>c</li><li>k</li><li>q</li><li>u</li><li>o</li><li>t</li><li>e</li><li>></li></ul></em>'
    var_7 = module_0.paragraph(var_6)
    assert var_7 == '<p><em><ul><li><</li><li>b</li><li>l</li><li>o</li><li>c</li><li>k</li><li>q</li><li>u</li><li>o</li><li>t</li><li>e</li><li>></li><li>F</li><li>a</li><li>l</li><li>s</li><li>e</li><li><</li><li>/</li><li>b</li><li>l</li><li>o</li><li>c</li><li>k</li><li>q</li><li>u</li><li>o</li><li>t</li><li>e</li><li>></li></ul></em></p>'
    var_8 = module_0.strikethrough(set_0)
    assert var_8 == '<strike>{False, (False, False)}</strike>'
    var_9 = module_0.ordered_list(var_4)
    assert var_9 == '<ol><li><</li><li>p</li><li>></li><li>_</li><li>+</li><li>v</li><li>?</li><li>Z</li><li>S</li><li>i</li><li>-</li><li>t</li><li>=</li><li>J</li><li>x</li><li>(</li><li>h</li><li>F</li><li>}</li><li>s</li><li><</li><li>/</li><li>p</li><li>></li></ol>'
    var_10 = module_0.unordered_list(tuple_0)
    assert var_10 == '<ul><li>False</li><li>False</li></ul>'
    var_11 = module_0.blockquote(bool_0)
    assert var_11 == '<blockquote>False</blockquote>'
    bool_1 = False
    with pytest.raises(ValueError):
        module_0.header(var_10, bool_1)

def test_case_1():
    none_type_0 = None
    var_0 = module_0.strikethrough(none_type_0)
    assert var_0 == '<strike>None</strike>'
    var_1 = module_0.italic(none_type_0)
    assert var_1 == '<em>None</em>'
    var_2 = module_0.header(none_type_0)
    assert var_2 == '<h1>None</h1>'

def test_case_2():
    str_0 = '}fQ$\t+'
    var_0 = module_0.italic(str_0)
    assert var_0 == '<em>}fQ$\t+</em>'
    str_1 = 'Iq:['
    dict_0 = {str_1: str_1}
    var_1 = module_0.italic(dict_0)
    assert var_1 == "<em>{'Iq:[': 'Iq:['}</em>"
    var_2 = module_0.unordered_list(str_1)
    assert var_2 == '<ul><li>I</li><li>q</li><li>:</li><li>[</li></ul>'

def test_case_3():
    bytes_0 = b'\xf7=A>\x05\x06\xe1F\xde+'
    var_0 = module_0.ordered_list(bytes_0)
    assert var_0 == '<ol><li>247</li><li>61</li><li>65</li><li>62</li><li>5</li><li>6</li><li>225</li><li>70</li><li>222</li><li>43</li></ol>'
    var_1 = module_0.strikethrough(var_0)
    assert var_1 == '<strike><ol><li>247</li><li>61</li><li>65</li><li>62</li><li>5</li><li>6</li><li>225</li><li>70</li><li>222</li><li>43</li></ol></strike>'
    list_0 = []
    var_2 = module_0.header(var_1)
    assert var_2 == '<h1><strike><ol><li>247</li><li>61</li><li>65</li><li>62</li><li>5</li><li>6</li><li>225</li><li>70</li><li>222</li><li>43</li></ol></strike></h1>'
    var_3 = module_0.link(list_0, list_0)
    assert var_3 == '<a href="[]">[]</a>'

def test_case_4():
    str_0 = 'J!pg<,h\\2Q+'
    var_0 = module_0.paragraph(str_0)
    assert var_0 == '<p>J!pg<,h\\2Q+</p>'
    set_0 = {str_0}
    var_1 = module_0.img(var_0, set_0)
    assert var_1 == '<img src="<p>J!pg<,h\\2Q+</p>" alt="{\'J!pg<,h\\\\2Q+\'}"></img>'
    var_2 = module_0.paragraph(set_0)
    assert var_2 == "<p>{'J!pg<,h\\\\2Q+'}</p>"
    var_3 = module_0.blockquote(var_2)
    assert var_3 == "<blockquote><p>{'J!pg<,h\\\\2Q+'}</p></blockquote>"
    var_4 = module_0.blockquote(var_0)
    assert var_4 == '<blockquote><p>J!pg<,h\\2Q+</p></blockquote>'
    var_5 = module_0.link(var_2, set_0)
    assert var_5 == '<a href="{\'J!pg<,h\\\\2Q+\'}"><p>{\'J!pg<,h\\\\2Q+\'}</p></a>'
    var_6 = module_0.header(var_2)
    assert var_6 == "<h1><p>{'J!pg<,h\\\\2Q+'}</p></h1>"
    var_7 = module_0.bold(str_0)
    assert var_7 == '<strong>J!pg<,h\\2Q+</strong>'
    var_8 = module_0.img(str_0)
    assert var_8 == '<img src="J!pg<,h\\2Q+"></img>'
    var_9 = module_0.unordered_list(var_0)
    assert var_9 == '<ul><li><</li><li>p</li><li>></li><li>J</li><li>!</li><li>p</li><li>g</li><li><</li><li>,</li><li>h</li><li>\\</li><li>2</li><li>Q</li><li>+</li><li><</li><li>/</li><li>p</li><li>></li></ul>'
    bool_0 = False
    var_10 = module_0.italic(bool_0)
    assert var_10 == '<em>False</em>'
    var_11 = module_0.unordered_list(var_4)
    assert var_11 == '<ul><li><</li><li>b</li><li>l</li><li>o</li><li>c</li><li>k</li><li>q</li><li>u</li><li>o</li><li>t</li><li>e</li><li>></li><li><</li><li>p</li><li>></li><li>J</li><li>!</li><li>p</li><li>g</li><li><</li><li>,</li><li>h</li><li>\\</li><li>2</li><li>Q</li><li>+</li><li><</li><li>/</li><li>p</li><li>></li><li><</li><li>/</li><li>b</li><li>l</li><li>o</li><li>c</li><li>k</li><li>q</li><li>u</li><li>o</li><li>t</li><li>e</li><li>></li></ul>'
    var_12 = module_0.blockquote(bool_0)
    assert var_12 == '<blockquote>False</blockquote>'
    var_13 = module_0.blockquote(var_9)
    assert var_13 == '<blockquote><ul><li><</li><li>p</li><li>></li><li>J</li><li>!</li><li>p</li><li>g</li><li><</li><li>,</li><li>h</li><li>\\</li><li>2</li><li>Q</li><li>+</li><li><</li><li>/</li><li>p</li><li>></li></ul></blockquote>'

def test_case_5():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    var_0 = module_0.link(set_0, bool_0)
    assert var_0 == '<a href="True">{True}</a>'
    var_1 = module_0.img(set_0)
    assert var_1 == '<img src="{True}"></img>'

def test_case_6():
    str_0 = 'G5'
    var_0 = module_0.bold(str_0)
    assert var_0 == '<strong>G5</strong>'

def test_case_7():
    none_type_0 = None
    var_0 = module_0.italic(none_type_0)
    assert var_0 == '<em>None</em>'

@pytest.mark.xfail(strict=True)
def test_case_8():
    float_0 = 703.1528
    module_0.unordered_list(float_0)

def test_case_9():
    bytes_0 = b'\x1f_A\xdf5\xc4\xd8'
    var_0 = module_0.preformatted(bytes_0)
    assert var_0 == "<pre>b'\\x1f_A\\xdf5\\xc4\\xd8'</pre>"
    var_1 = module_0.paragraph(bytes_0)
    assert var_1 == "<p>b'\\x1f_A\\xdf5\\xc4\\xd8'</p>"

def test_case_10():
    set_0 = set()
    var_0 = module_0.unordered_list(set_0)
    assert var_0 == '<ul></ul>'
    var_1 = module_0.ordered_list(var_0)
    assert var_1 == '<ol><li><</li><li>u</li><li>l</li><li>></li><li><</li><li>/</li><li>u</li><li>l</li><li>></li></ol>'
    bool_0 = True
    var_2 = module_0.italic(bool_0)
    assert var_2 == '<em>True</em>'
    var_3 = module_0.unordered_list(set_0)
    assert var_3 == '<ul></ul>'
    var_4 = module_0.blockquote(var_2)
    assert var_4 == '<blockquote><em>True</em></blockquote>'
    var_5 = module_0.blockquote(bool_0)
    assert var_5 == '<blockquote>True</blockquote>'

def test_case_11():
    bool_0 = True
    var_0 = module_0.link(bool_0, bool_0)
    assert var_0 == '<a href="True">True</a>'
    var_1 = module_0.paragraph(var_0)
    assert var_1 == '<p><a href="True">True</a></p>'
    var_2 = module_0.blockquote(var_0)
    assert var_2 == '<blockquote><a href="True">True</a></blockquote>'
    dict_0 = {}
    var_3 = module_0.strikethrough(var_0)
    assert var_3 == '<strike><a href="True">True</a></strike>'
    var_4 = module_0.italic(dict_0)
    assert var_4 == '<em>{}</em>'
    var_5 = module_0.link(var_4, dict_0)
    assert var_5 == '<a href="{}"><em>{}</em></a>'
    var_6 = module_0.header(var_5)
    assert var_6 == '<h1><a href="{}"><em>{}</em></a></h1>'
    var_7 = module_0.ordered_list(dict_0)
    assert var_7 == '<ol></ol>'
    var_8 = module_0.ordered_list(var_4)
    assert var_8 == '<ol><li><</li><li>e</li><li>m</li><li>></li><li>{</li><li>}</li><li><</li><li>/</li><li>e</li><li>m</li><li>></li></ol>'
    var_9 = module_0.link(var_4, var_5)
    assert var_9 == '<a href="<a href="{}"><em>{}</em></a>"><em>{}</em></a>'
    var_10 = module_0.blockquote(var_8)
    assert var_10 == '<blockquote><ol><li><</li><li>e</li><li>m</li><li>></li><li>{</li><li>}</li><li><</li><li>/</li><li>e</li><li>m</li><li>></li></ol></blockquote>'
    var_11 = module_0.ordered_list(var_7)
    assert var_11 == '<ol><li><</li><li>o</li><li>l</li><li>></li><li><</li><li>/</li><li>o</li><li>l</li><li>></li></ol>'
    var_12 = module_0.img(var_1)
    assert var_12 == '<img src="<p><a href="True">True</a></p>"></img>'
    var_13 = module_0.paragraph(var_0)
    assert var_13 == '<p><a href="True">True</a></p>'
    var_14 = module_0.header(var_4)
    assert var_14 == '<h1><em>{}</em></h1>'
    var_15 = module_0.bold(var_5)
    assert var_15 == '<strong><a href="{}"><em>{}</em></a></strong>'
    var_16 = module_0.italic(var_0)
    assert var_16 == '<em><a href="True">True</a></em>'
    var_17 = module_0.paragraph(var_1)
    assert var_17 == '<p><p><a href="True">True</a></p></p>'
    var_18 = module_0.strikethrough(var_11)
    assert var_18 == '<strike><ol><li><</li><li>o</li><li>l</li><li>></li><li><</li><li>/</li><li>o</li><li>l</li><li>></li></ol></strike>'
    var_19 = module_0.unordered_list(var_16)
    assert var_19 == '<ul><li><</li><li>e</li><li>m</li><li>></li><li><</li><li>a</li><li> </li><li>h</li><li>r</li><li>e</li><li>f</li><li>=</li><li>"</li><li>T</li><li>r</li><li>u</li><li>e</li><li>"</li><li>></li><li>T</li><li>r</li><li>u</li><li>e</li><li><</li><li>/</li><li>a</li><li>></li><li><</li><li>/</li><li>e</li><li>m</li><li>></li></ul>'
    bytes_0 = b'O3\x9d\xf1;\xaa\xfeM'
    int_0 = 4
    with pytest.raises(ValueError):
        module_0.header(bytes_0, int_0)