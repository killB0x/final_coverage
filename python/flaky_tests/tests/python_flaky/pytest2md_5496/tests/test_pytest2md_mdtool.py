# Automatically generated by Pynguin.
import pytest
import pytest2md.mdtool as module_0
import enum as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    change_log_writer_0 = module_0.ChangeLogWriter()
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}
    assert module_0.ChangeLogWriter.prefixes == {'N': 'New', 'F': 'Fix', 'T': 'Task'}
    change_log_writer_0.make_changelog(change_log_writer_0, change_log_writer_0)

def test_case_1():
    str_0 = '#5+u"XZI>`h_,m=agZ'
    var_0 = module_0.MDTool(str_0, str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pytest2md.mdtool.MDTool'
    assert var_0.ctx == {'md': '#5+u"XZI>`h_,m=agZ', 'links': {}, 'links_log': [], 'd_repo_base': '#5+u"XZI>`h_,m=agZ', 'autogen_links_sep': '\n\n<!-- autogenlinks -->\n', 'src_link_tmpl_name': 'static', 'src_link_tmpl': 'file://%(d_repo_base)s/%(path)s', 'src_link_tmpl_raw': 'file://%(d_repo_base)s/%(path)s'}
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '#5+u"XZI>`h_,m=agZ'
    module_0.do_set_links(str_0)

def test_case_3():
    init_data_0 = module_0.InitData()
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    var_0 = module_0.info(none_type_0)
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}
    change_log_writer_0 = module_0.ChangeLogWriter()
    assert module_0.ChangeLogWriter.prefixes == {'N': 'New', 'F': 'Fix', 'T': 'Task'}
    change_log_writer_0.make_changelog(none_type_0, none_type_0)

def test_case_5():
    enum_dict_0 = module_1._EnumDict()
    item_getter_0 = module_0.ItemGetter(enum_dict_0)
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}
    var_0 = module_0.make_toc(item_getter_0)
    assert var_0 == '\n<!-- TOC -->\n\n# Table Of Contents\n\n\n<!-- TOC -->\n'

def test_case_6():
    none_type_0 = None
    commit_search_string_lookup_0 = module_0.CommitSearchStringLookup(none_type_0)
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}

@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 213
    module_0.MDTool(int_0, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    enum_dict_0 = module_1._EnumDict()
    module_0.build_src_link(enum_dict_0, enum_dict_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    init_data_0 = module_0.InitData()
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}
    init_data_0.git_rev(init_data_0)

def test_case_10():
    str_0 = ']HA@_"PnfbN@zBXH'
    with pytest.raises(Exception):
        module_0.to_dict(str_0)

def test_case_11():
    enum_dict_0 = module_1._EnumDict()
    var_0 = module_0.find_path(enum_dict_0, enum_dict_0)
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}

def test_case_12():
    str_0 = '#5+u"XZI>`_h_,mh=agZ'
    item_getter_0 = module_0.find_file(str_0, str_0)
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}

@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b'm\x18\xcb\xd2\x07\xf0k\x17r\x8d'
    commit_search_string_lookup_0 = module_0.CommitSearchStringLookup(bytes_0)
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}
    commit_search_string_lookup_0.__getitem__(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = '|x"f\t0y\\:<*n7'
    module_0.build_src_link(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '#5+u"XZI>`h_,m=agZ'
    module_0.build_src_link(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    enum_dict_0 = module_1._EnumDict()
    item_getter_0 = module_0.ItemGetter(enum_dict_0)
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}
    module_0.build_src_link(item_getter_0, enum_dict_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    commit_search_string_lookup_0 = module_0.CommitSearchStringLookup(bool_0)
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}
    module_0.do_set_links(commit_search_string_lookup_0)

def test_case_18():
    enum_dict_0 = module_1._EnumDict()
    commit_search_string_lookup_0 = module_0.CommitSearchStringLookup(enum_dict_0)
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}
    var_0 = module_0.make_toc(commit_search_string_lookup_0)
    assert var_0 == '\n<!-- TOC -->\n\n# Table Of Contents\n\n\n<!-- TOC -->\nmd'

@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = 0
    str_0 = ':oqzJ>"~,_d\nIj'
    module_0.MDTool(int_0, int_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    enum_dict_0 = module_1._EnumDict()
    item_getter_0 = module_0.ItemGetter(enum_dict_0)
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}
    var_0 = module_0.make_toc(item_getter_0, item_getter_0)
    assert var_0 == '\n<!-- TOC -->\n\n# Table Of Contents\n\n\n<!-- TOC -->\n'
    commit_search_string_lookup_0 = module_0.CommitSearchStringLookup(var_0)
    assert commit_search_string_lookup_0.mdt == '\n<!-- TOC -->\n\n# Table Of Contents\n\n\n<!-- TOC -->\n'
    var_1 = module_0.make_toc(commit_search_string_lookup_0)
    assert var_1 == '\n<!-- TOC -->\n\n# Table Of Contents\n\n\n<!-- TOC -->\nmd'
    m_d_tool_0 = module_0.MDTool(var_1, item_getter_0)
    assert f'{type(m_d_tool_0).__module__}.{type(m_d_tool_0).__qualname__}' == 'pytest2md.mdtool.MDTool'
    assert f'{type(m_d_tool_0.ctx).__module__}.{type(m_d_tool_0.ctx).__qualname__}' == 'builtins.dict'
    assert len(m_d_tool_0.ctx) == 8
    module_0.find_file(var_1, m_d_tool_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    enum_dict_0 = module_1._EnumDict()
    item_getter_0 = module_0.ItemGetter(enum_dict_0)
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}
    str_0 = '.'
    module_0.find_file(item_getter_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    enum_dict_0 = module_1._EnumDict()
    item_getter_0 = module_0.ItemGetter(enum_dict_0)
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}
    var_0 = module_0.find_path(enum_dict_0, enum_dict_0, item_getter_0)
    commit_search_string_lookup_0 = module_0.CommitSearchStringLookup(var_0)
    var_1 = module_0.make_toc(commit_search_string_lookup_0)
    assert var_1 == '\n<!-- TOC -->\n\n# Table Of Contents\n\n\n<!-- TOC -->\nmd'
    m_d_tool_0 = module_0.MDTool(var_1, item_getter_0)
    assert f'{type(m_d_tool_0).__module__}.{type(m_d_tool_0).__qualname__}' == 'pytest2md.mdtool.MDTool'
    assert f'{type(m_d_tool_0.ctx).__module__}.{type(m_d_tool_0.ctx).__qualname__}' == 'builtins.dict'
    assert len(m_d_tool_0.ctx) == 8
    str_0 = '\\,8z_'
    commit_search_string_lookup_0.__getitem__(str_0)

def test_case_23():
    enum_dict_0 = module_1._EnumDict()
    item_getter_0 = module_0.ItemGetter(enum_dict_0)
    assert module_0.known_src_links == {'github': 'https://github.com/%(gh_repo_name)s/blob/%(git_rev)s/%(path)s%(line:#L%s)s', 'github_raw': 'https://raw.githubusercontent.com/%(gh_repo_name)s/%(git_rev)s/%(path)s%(line:#L%s)s', 'static': 'file://%(d_repo_base)s/%(path)s', 'static_raw': 'file://%(d_repo_base)s/%(path)s'}
    init_data_0 = module_0.InitData()
    with pytest.raises(Exception):
        init_data_0.gh_repo_name(item_getter_0)