# Automatically generated by Pynguin.
import pytest
import cabrillo.parser as module_0
import cabrillo.errors as module_1
import collections as module_2

def test_case_0():
    bytes_0 = b'Xj\xf0_\xce\xd5mxdp\xba#\x11'
    with pytest.raises(module_1.InvalidQSOException):
        module_0.parse_qso(bytes_0, bytes_0)

def test_case_1():
    str_0 = ",4:4\tmzoG.U&%sT~5'g"
    with pytest.raises(module_1.InvalidLogException):
        module_0.parse_log_text(str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.parse_log_file(bool_0, check_categories=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_0.parse_qso(bool_0, bool_0)

def test_case_4():
    str_0 = ",4:4\tmzoG.U&%sT~5'g"
    var_0 = module_0.parse_log_text(str_0, str_0, ignore_order=str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'cabrillo.cabrillo.Cabrillo'
    assert var_0.callsign is None
    assert var_0.operators is None
    assert var_0.contest is None
    assert var_0.claimed_score is None
    assert var_0.certificate is None
    assert var_0.category_operator is None
    assert var_0.category_assisted is None
    assert var_0.category_band is None
    assert var_0.category_power is None
    assert var_0.category_mode is None
    assert var_0.category_station is None
    assert var_0.category_time is None
    assert var_0.category_transmitter is None
    assert var_0.category_overlay is None
    assert var_0.offtime is None
    assert var_0.club is None
    assert var_0.name is None
    assert var_0.email is None
    assert var_0.location is None
    assert var_0.address is None
    assert var_0.address_city is None
    assert var_0.address_state_province is None
    assert var_0.address_postalcode is None
    assert var_0.address_country is None
    assert var_0.created_by == 'cabrillo (Python)'
    assert var_0.soapbox is None
    assert f'{type(var_0.x_anything).__module__}.{type(var_0.x_anything).__qualname__}' == 'collections.OrderedDict'
    assert len(var_0.x_anything) == 0
    assert var_0.version == '3.0'
    assert var_0.qso == []
    assert var_0.ignore_order == ",4:4\tmzoG.U&%sT~5'g"

def test_case_5():
    str_0 = 'MRS:2"NxHD{'
    var_0 = module_2.UserList(str_0)
    var_1 = var_0.__repr__()
    with pytest.raises(module_1.InvalidQSOException):
        module_0.parse_qso(var_1, var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'DS:2"NxHD{'
    none_type_0 = None
    var_0 = module_0.parse_log_text(str_0, str_0, ignore_order=none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'cabrillo.cabrillo.Cabrillo'
    assert var_0.callsign is None
    assert var_0.operators is None
    assert var_0.contest is None
    assert var_0.claimed_score is None
    assert var_0.certificate is None
    assert var_0.category_operator is None
    assert var_0.category_assisted is None
    assert var_0.category_band is None
    assert var_0.category_power is None
    assert var_0.category_mode is None
    assert var_0.category_station is None
    assert var_0.category_time is None
    assert var_0.category_transmitter is None
    assert var_0.category_overlay is None
    assert var_0.offtime is None
    assert var_0.club is None
    assert var_0.name is None
    assert var_0.email is None
    assert var_0.location is None
    assert var_0.address is None
    assert var_0.address_city is None
    assert var_0.address_state_province is None
    assert var_0.address_postalcode is None
    assert var_0.address_country is None
    assert var_0.created_by == 'cabrillo (Python)'
    assert var_0.soapbox is None
    assert f'{type(var_0.x_anything).__module__}.{type(var_0.x_anything).__qualname__}' == 'collections.OrderedDict'
    assert len(var_0.x_anything) == 0
    assert var_0.version == '3.0'
    assert var_0.qso == []
    assert var_0.ignore_order is None
    user_list_0 = module_2.UserList(str_0)
    var_1 = user_list_0.__repr__()
    module_0.parse_qso(var_1, str_0)

def test_case_7():
    str_0 = 'DS:2Nx{'
    var_0 = module_0.parse_log_text(str_0, str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'cabrillo.cabrillo.Cabrillo'
    assert var_0.callsign is None
    assert var_0.operators is None
    assert var_0.contest is None
    assert var_0.claimed_score is None
    assert var_0.certificate is None
    assert var_0.category_operator is None
    assert var_0.category_assisted is None
    assert var_0.category_band is None
    assert var_0.category_power is None
    assert var_0.category_mode is None
    assert var_0.category_station is None
    assert var_0.category_time is None
    assert var_0.category_transmitter is None
    assert var_0.category_overlay is None
    assert var_0.offtime is None
    assert var_0.club is None
    assert var_0.name is None
    assert var_0.email is None
    assert var_0.location is None
    assert var_0.address is None
    assert var_0.address_city is None
    assert var_0.address_state_province is None
    assert var_0.address_postalcode is None
    assert var_0.address_country is None
    assert var_0.created_by == 'cabrillo (Python)'
    assert var_0.soapbox is None
    assert f'{type(var_0.x_anything).__module__}.{type(var_0.x_anything).__qualname__}' == 'collections.OrderedDict'
    assert len(var_0.x_anything) == 0
    assert var_0.version == '3.0'
    assert var_0.qso == []
    assert var_0.ignore_order is False
    var_1 = var_0.text()
    assert var_1 == 'START-OF-LOG: 3.0\nCREATED-BY: cabrillo (Python)\nEND-OF-LOG:\n'
    var_2 = module_0.parse_log_text(var_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'cabrillo.cabrillo.Cabrillo'
    assert var_2.callsign is None
    assert var_2.operators is None
    assert var_2.contest is None
    assert var_2.claimed_score is None
    assert var_2.certificate is None
    assert var_2.category_operator is None
    assert var_2.category_assisted is None
    assert var_2.category_band is None
    assert var_2.category_power is None
    assert var_2.category_mode is None
    assert var_2.category_station is None
    assert var_2.category_time is None
    assert var_2.category_transmitter is None
    assert var_2.category_overlay is None
    assert var_2.offtime is None
    assert var_2.club is None
    assert var_2.name is None
    assert var_2.email is None
    assert var_2.location is None
    assert var_2.address is None
    assert var_2.address_city is None
    assert var_2.address_state_province is None
    assert var_2.address_postalcode is None
    assert var_2.address_country is None
    assert var_2.created_by == 'cabrillo (Python)'
    assert var_2.soapbox is None
    assert f'{type(var_2.x_anything).__module__}.{type(var_2.x_anything).__qualname__}' == 'collections.OrderedDict'
    assert len(var_2.x_anything) == 0
    assert var_2.version == '3.0'
    assert var_2.qso == []
    assert var_2.ignore_order is False

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'QSO:2EN^_H'
    none_type_0 = None
    module_0.parse_log_text(str_0, str_0, ignore_order=none_type_0)