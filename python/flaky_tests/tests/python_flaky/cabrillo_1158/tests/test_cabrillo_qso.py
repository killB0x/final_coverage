# Automatically generated by Pynguin.
import pytest
import cabrillo.qso as module_0
import cabrillo.errors as module_1

def test_case_0():
    str_0 = 'X-QSO'
    var_0 = module_0.frequency_to_band(str_0)
    assert var_0 == 'X-QSO'

@pytest.mark.xfail(strict=True)
def test_case_1():
    complex_0 = (2584.18029-1555.18734j)
    module_0.frequency_to_band(complex_0)

def test_case_2():
    float_0 = -3636.4737
    var_0 = module_0.frequency_to_band(float_0)
    assert var_0 == pytest.approx(-3636.4737, abs=0.01, rel=0.01)

def test_case_3():
    none_type_0 = None
    with pytest.raises(module_1.InvalidQSOException):
        module_0.QSO(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

def test_case_4():
    int_0 = 21450
    var_0 = module_0.frequency_to_band(int_0)
    assert var_0 == '21000'

def test_case_5():
    str_0 = 'FM'
    q_s_o_0 = module_0.QSO(str_0, str_0, str_0, str_0, str_0, valid=str_0)
    assert f'{type(q_s_o_0).__module__}.{type(q_s_o_0).__qualname__}' == 'cabrillo.qso.QSO'
    assert q_s_o_0.freq == 'FM'
    assert q_s_o_0.mo == 'FM'
    assert q_s_o_0.date == 'FM'
    assert q_s_o_0.de_call == 'FM'
    assert q_s_o_0.de_exch == []
    assert q_s_o_0.dx_call == 'FM'
    assert q_s_o_0.dx_exch == []
    assert q_s_o_0.t is None
    assert q_s_o_0.valid == 'FM'

def test_case_6():
    str_0 = 'FM'
    q_s_o_0 = module_0.QSO(str_0, str_0, str_0, str_0, str_0, valid=str_0)
    assert f'{type(q_s_o_0).__module__}.{type(q_s_o_0).__qualname__}' == 'cabrillo.qso.QSO'
    assert q_s_o_0.freq == 'FM'
    assert q_s_o_0.mo == 'FM'
    assert q_s_o_0.date == 'FM'
    assert q_s_o_0.de_call == 'FM'
    assert q_s_o_0.de_exch == []
    assert q_s_o_0.dx_call == 'FM'
    assert q_s_o_0.dx_exch == []
    assert q_s_o_0.t is None
    assert q_s_o_0.valid == 'FM'
    var_0 = q_s_o_0.__eq__(q_s_o_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'FM'
    q_s_o_0 = module_0.QSO(str_0, str_0, str_0, str_0, str_0, valid=str_0)
    assert f'{type(q_s_o_0).__module__}.{type(q_s_o_0).__qualname__}' == 'cabrillo.qso.QSO'
    assert q_s_o_0.freq == 'FM'
    assert q_s_o_0.mo == 'FM'
    assert q_s_o_0.date == 'FM'
    assert q_s_o_0.de_call == 'FM'
    assert q_s_o_0.de_exch == []
    assert q_s_o_0.dx_call == 'FM'
    assert q_s_o_0.dx_exch == []
    assert q_s_o_0.t is None
    assert q_s_o_0.valid == 'FM'
    q_s_o_0.match_against(q_s_o_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'FM'
    var_0 = str_0.__str__()
    var_1 = var_0.__le__(var_0)
    bool_0 = True
    var_2 = module_0.frequency_to_band(bool_0)
    assert var_2 is True
    var_3 = module_0.frequency_to_band(var_0)
    assert var_3 == 'FM'
    q_s_o_0 = module_0.QSO(str_0, str_0, str_0, str_0, var_0, valid=str_0)
    assert f'{type(q_s_o_0).__module__}.{type(q_s_o_0).__qualname__}' == 'cabrillo.qso.QSO'
    assert q_s_o_0.freq == 'FM'
    assert q_s_o_0.mo == 'FM'
    assert q_s_o_0.date == 'FM'
    assert q_s_o_0.de_call == 'FM'
    assert q_s_o_0.de_exch == []
    assert q_s_o_0.dx_call == 'FM'
    assert q_s_o_0.dx_exch == []
    assert q_s_o_0.t is None
    assert q_s_o_0.valid == 'FM'
    var_4 = var_2.__neg__()
    assert var_4 == -1
    var_5 = q_s_o_0.__eq__(q_s_o_0)
    assert var_5 is True
    q_s_o_1 = module_0.QSO(var_5, str_0, var_3, var_3, var_3, var_2, valid=var_4)
    assert q_s_o_1.freq is True
    var_6 = var_0.__contains__(var_3)
    var_7 = q_s_o_0.__eq__(q_s_o_1)
    assert var_7 is False
    var_8 = module_0.frequency_to_band(var_5)
    assert var_8 is True
    var_9 = var_0.__eq__(str_0)
    var_10 = q_s_o_1.match_against(q_s_o_0, var_4, check_band=var_7)
    assert var_10 is False
    var_4.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'FM'
    bool_0 = True
    var_0 = module_0.frequency_to_band(str_0)
    assert var_0 == 'FM'
    var_1 = module_0.frequency_to_band(bool_0)
    assert var_1 is True
    var_2 = module_0.frequency_to_band(var_1)
    assert var_2 is True
    q_s_o_0 = module_0.QSO(str_0, str_0, str_0, str_0, var_1, valid=str_0)
    assert f'{type(q_s_o_0).__module__}.{type(q_s_o_0).__qualname__}' == 'cabrillo.qso.QSO'
    assert q_s_o_0.freq == 'FM'
    assert q_s_o_0.mo == 'FM'
    assert q_s_o_0.date == 'FM'
    assert q_s_o_0.de_call == 'FM'
    assert q_s_o_0.de_exch == []
    assert q_s_o_0.dx_call is True
    assert q_s_o_0.dx_exch == []
    assert q_s_o_0.t is None
    assert q_s_o_0.valid == 'FM'
    var_3 = var_0.isspace()
    var_4 = q_s_o_0.__eq__(q_s_o_0)
    assert var_4 is True
    var_5 = q_s_o_0.match_against(q_s_o_0, check_exch=var_1)
    assert var_5 is False
    var_6 = var_1.__rsub__(var_5)
    assert var_6 == -1
    var_7 = var_6.__eq__(var_1)
    var_8 = var_2.__eq__(q_s_o_0)
    var_9 = var_8.__eq__(var_6)
    var_10 = var_7.__eq__(var_2)
    var_11 = var_9.__eq__(str_0)
    var_12 = var_10.__eq__(var_8)
    var_13 = var_9.__eq__(q_s_o_0)
    var_14 = var_11.__str__()
    var_12.__float__()

def test_case_10():
    str_0 = 'FM'
    var_0 = str_0.__str__()
    bool_0 = True
    var_1 = module_0.frequency_to_band(bool_0)
    assert var_1 is True
    var_2 = module_0.frequency_to_band(var_0)
    assert var_2 == 'FM'
    q_s_o_0 = module_0.QSO(str_0, str_0, str_0, str_0, var_0, valid=str_0)
    assert f'{type(q_s_o_0).__module__}.{type(q_s_o_0).__qualname__}' == 'cabrillo.qso.QSO'
    assert q_s_o_0.freq == 'FM'
    assert q_s_o_0.mo == 'FM'
    assert q_s_o_0.date == 'FM'
    assert q_s_o_0.de_call == 'FM'
    assert q_s_o_0.de_exch == []
    assert q_s_o_0.dx_call == 'FM'
    assert q_s_o_0.dx_exch == []
    assert q_s_o_0.t is None
    assert q_s_o_0.valid == 'FM'
    var_3 = var_2.__hash__()
    var_4 = q_s_o_0.__eq__(q_s_o_0)
    assert var_4 is True
    var_5 = var_4.__eq__(q_s_o_0)
    with pytest.raises(ValueError):
        q_s_o_0.match_against(bool_0, var_3, var_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'FM'
    var_0 = str_0.__str__()
    bool_0 = True
    var_1 = module_0.frequency_to_band(bool_0)
    assert var_1 is True
    var_2 = module_0.frequency_to_band(var_0)
    assert var_2 == 'FM'
    q_s_o_0 = module_0.QSO(str_0, str_0, str_0, str_0, var_0, valid=str_0)
    assert f'{type(q_s_o_0).__module__}.{type(q_s_o_0).__qualname__}' == 'cabrillo.qso.QSO'
    assert q_s_o_0.freq == 'FM'
    assert q_s_o_0.mo == 'FM'
    assert q_s_o_0.date == 'FM'
    assert q_s_o_0.de_call == 'FM'
    assert q_s_o_0.de_exch == []
    assert q_s_o_0.dx_call == 'FM'
    assert q_s_o_0.dx_exch == []
    assert q_s_o_0.t is None
    assert q_s_o_0.valid == 'FM'
    var_3 = var_0.isspace()
    var_4 = var_2.isdigit()
    var_5 = q_s_o_0.__eq__(q_s_o_0)
    assert var_5 is True
    none_type_0 = None
    q_s_o_1 = module_0.QSO(var_4, str_0, none_type_0, var_2, none_type_0, var_1, valid=var_3)
    assert q_s_o_1.de_exch is True
    var_6 = var_0.__contains__(var_2)
    var_7 = q_s_o_0.__eq__(q_s_o_1)
    assert var_7 is False
    var_8 = var_2.__eq__(var_0)
    var_9 = q_s_o_1.match_against(q_s_o_0, var_3, check_band=none_type_0)
    assert var_9 is False
    q_s_o_1.match_against(var_5)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'FM'
    var_0 = str_0.__str__()
    bool_0 = True
    var_1 = module_0.frequency_to_band(bool_0)
    assert var_1 is True
    var_2 = module_0.frequency_to_band(var_0)
    assert var_2 == 'FM'
    var_3 = var_2.__lt__(var_2)
    q_s_o_0 = module_0.QSO(str_0, str_0, str_0, str_0, var_0, valid=str_0)
    assert f'{type(q_s_o_0).__module__}.{type(q_s_o_0).__qualname__}' == 'cabrillo.qso.QSO'
    assert q_s_o_0.freq == 'FM'
    assert q_s_o_0.mo == 'FM'
    assert q_s_o_0.date == 'FM'
    assert q_s_o_0.de_call == 'FM'
    assert q_s_o_0.de_exch == []
    assert q_s_o_0.dx_call == 'FM'
    assert q_s_o_0.dx_exch == []
    assert q_s_o_0.t is None
    assert q_s_o_0.valid == 'FM'
    var_4 = var_0.isspace()
    none_type_0 = None
    q_s_o_1 = module_0.QSO(var_0, str_0, none_type_0, var_2, none_type_0, var_1, valid=var_4)
    assert q_s_o_1.de_exch is True
    var_5 = var_0.__contains__(var_2)
    var_6 = q_s_o_0.__eq__(q_s_o_1)
    assert var_6 is False
    var_7 = var_2.__eq__(var_0)
    var_8 = q_s_o_1.match_against(q_s_o_0, var_4, check_band=none_type_0)
    assert var_8 is False
    q_s_o_1.match_against(var_5)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'FM'
    var_0 = str_0.__str__()
    bool_0 = True
    var_1 = module_0.frequency_to_band(bool_0)
    assert var_1 is True
    var_2 = module_0.frequency_to_band(var_0)
    assert var_2 == 'FM'
    q_s_o_0 = module_0.QSO(str_0, str_0, str_0, str_0, var_0, valid=str_0)
    assert f'{type(q_s_o_0).__module__}.{type(q_s_o_0).__qualname__}' == 'cabrillo.qso.QSO'
    assert q_s_o_0.freq == 'FM'
    assert q_s_o_0.mo == 'FM'
    assert q_s_o_0.date == 'FM'
    assert q_s_o_0.de_call == 'FM'
    assert q_s_o_0.de_exch == []
    assert q_s_o_0.dx_call == 'FM'
    assert q_s_o_0.dx_exch == []
    assert q_s_o_0.t is None
    assert q_s_o_0.valid == 'FM'
    var_3 = var_0.startswith(var_0)
    var_4 = var_0.isspace()
    q_s_o_1 = module_0.QSO(var_0, str_0, var_2, var_2, var_2, var_1, valid=var_4)
    assert q_s_o_1.de_exch is True
    var_5 = module_0.frequency_to_band(var_1)
    assert var_5 is True
    var_6 = var_0.__contains__(var_2)
    var_7 = q_s_o_0.__eq__(q_s_o_1)
    assert var_7 is False
    var_8 = var_2.__eq__(var_0)
    q_s_o_1.match_against(q_s_o_0, var_4, check_band=var_8)

def test_case_14():
    str_0 = 'FM'
    var_0 = str_0.__str__()
    bool_0 = True
    q_s_o_0 = module_0.QSO(str_0, str_0, str_0, str_0, var_0, valid=str_0)
    assert f'{type(q_s_o_0).__module__}.{type(q_s_o_0).__qualname__}' == 'cabrillo.qso.QSO'
    assert q_s_o_0.freq == 'FM'
    assert q_s_o_0.mo == 'FM'
    assert q_s_o_0.date == 'FM'
    assert q_s_o_0.de_call == 'FM'
    assert q_s_o_0.de_exch == []
    assert q_s_o_0.dx_call == 'FM'
    assert q_s_o_0.dx_exch == []
    assert q_s_o_0.t is None
    assert q_s_o_0.valid == 'FM'
    var_1 = bool_0.__neg__()
    var_2 = q_s_o_0.match_against(q_s_o_0, var_1, check_band=q_s_o_0)
    assert var_2 is True

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'FM'
    var_0 = str_0.__str__()
    bool_0 = True
    var_1 = module_0.frequency_to_band(bool_0)
    assert var_1 is True
    var_2 = module_0.frequency_to_band(var_0)
    assert var_2 == 'FM'
    q_s_o_0 = module_0.QSO(str_0, str_0, str_0, str_0, var_0, valid=str_0)
    assert f'{type(q_s_o_0).__module__}.{type(q_s_o_0).__qualname__}' == 'cabrillo.qso.QSO'
    assert q_s_o_0.freq == 'FM'
    assert q_s_o_0.mo == 'FM'
    assert q_s_o_0.date == 'FM'
    assert q_s_o_0.de_call == 'FM'
    assert q_s_o_0.de_exch == []
    assert q_s_o_0.dx_call == 'FM'
    assert q_s_o_0.dx_exch == []
    assert q_s_o_0.t is None
    assert q_s_o_0.valid == 'FM'
    var_3 = var_1.__neg__()
    assert var_3 == -1
    var_4 = q_s_o_0.__eq__(q_s_o_0)
    assert var_4 is True
    var_5 = var_0.__contains__(var_2)
    var_6 = module_0.frequency_to_band(var_4)
    assert var_6 is True
    none_type_0 = None
    var_7 = q_s_o_0.match_against(q_s_o_0, var_3, check_band=none_type_0)
    assert var_7 is True
    var_8 = str_0.__mul__(var_3)
    var_9 = var_5.__rsub__(var_8)
    var_10 = var_4.__eq__(var_3)
    var_11 = var_9.__eq__(var_7)
    set_0 = set()
    var_12 = var_0.__eq__(set_0)
    var_7.split(var_4)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = 'FM'
    var_0 = str_0.__str__()
    bool_0 = True
    var_1 = module_0.frequency_to_band(bool_0)
    assert var_1 is True
    var_2 = module_0.frequency_to_band(var_0)
    assert var_2 == 'FM'
    q_s_o_0 = module_0.QSO(str_0, str_0, str_0, str_0, var_0, valid=str_0)
    assert f'{type(q_s_o_0).__module__}.{type(q_s_o_0).__qualname__}' == 'cabrillo.qso.QSO'
    assert q_s_o_0.freq == 'FM'
    assert q_s_o_0.mo == 'FM'
    assert q_s_o_0.date == 'FM'
    assert q_s_o_0.de_call == 'FM'
    assert q_s_o_0.de_exch == []
    assert q_s_o_0.dx_call == 'FM'
    assert q_s_o_0.dx_exch == []
    assert q_s_o_0.t is None
    assert q_s_o_0.valid == 'FM'
    var_3 = module_0.frequency_to_band(var_2)
    q_s_o_1 = module_0.QSO(str_0, var_0, var_3, var_3, var_1)
    assert q_s_o_1.dx_call is True
    var_4 = var_1.__neg__()
    assert var_4 == -1
    var_5 = q_s_o_0.__eq__(q_s_o_1)
    assert var_5 is False
    var_2.match_against(var_1, check_exch=var_0)