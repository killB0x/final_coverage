# Automatically generated by Pynguin.
import pytest
import backport as module_0

def test_case_0():
    var_0 = module_0.find_initial_cpython_rev()
    assert var_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -1853
    module_0.apply_patch(int_0, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.cpython_revs_affecting_mock(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.cleanup_old_patches(none_type_0)
    module_0.apply_patch(var_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    module_0.extract_patch_for(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'f my_2**I!'
    module_0.rev_from_mock_patch(str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.skip_current(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    module_0.parse_args()

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'return_value'
    none_type_0 = None
    module_0.commit_last_sync(str_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = ''
    var_0 = module_0.munge(str_0, str_0)
    assert var_0 == ''
    var_1 = module_0.commit_last_sync(str_0, str_0)
    module_0.apply_patch(var_1, var_1, var_1)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = ''
    var_0 = module_0.commit_last_sync(str_0, str_0)
    module_0.apply_patch(var_0, str_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = ''
    var_0 = module_0.commit_last_sync(str_0, str_0)
    module_0.update_last_sync(str_0, var_0)