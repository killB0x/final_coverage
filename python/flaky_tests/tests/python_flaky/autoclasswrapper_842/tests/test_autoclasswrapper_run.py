# Automatically generated by Pynguin.
import autoclasswrapper.run as module_0
import autoclasswrapper.tools as module_1

def test_case_0():
    int_0 = 10
    run_0 = module_0.Run(int_0, int_0)
    assert module_0.RUN_SCRIPT_CONTENT == '\n# the "y" parameter validates warning\n# in case of a reproducible run\nautoclass -search {0}.db2 {0}.hd2 {0}.model {0}.s-params >autoclass-search.log 2>&1 <<EOF\ny\nEOF\nautoclass -reports {0}.results-bin {0}.search {0}.r-params >autoclass-report.log 2>&1\n\nif [ $? -eq 0 ]\nthen\n    touch autoclass-run-success\nelse\n    touch autoclass-run-failure\nfi\n'
    var_0 = run_0.create_run_file_test()
    assert run_0.had_error is True

def test_case_1():
    run_0 = module_0.Run()
    assert run_0.root_name == 'autoclass'
    assert module_0.RUN_SCRIPT_CONTENT == '\n# the "y" parameter validates warning\n# in case of a reproducible run\nautoclass -search {0}.db2 {0}.hd2 {0}.model {0}.s-params >autoclass-search.log 2>&1 <<EOF\ny\nEOF\nautoclass -reports {0}.results-bin {0}.search {0}.r-params >autoclass-report.log 2>&1\n\nif [ $? -eq 0 ]\nthen\n    touch autoclass-run-success\nelse\n    touch autoclass-run-failure\nfi\n'
    var_0 = run_0.run()

def test_case_2():
    run_0 = module_0.Run()
    assert run_0.root_name == 'autoclass'
    assert module_0.RUN_SCRIPT_CONTENT == '\n# the "y" parameter validates warning\n# in case of a reproducible run\nautoclass -search {0}.db2 {0}.hd2 {0}.model {0}.s-params >autoclass-search.log 2>&1 <<EOF\ny\nEOF\nautoclass -reports {0}.results-bin {0}.search {0}.r-params >autoclass-report.log 2>&1\n\nif [ $? -eq 0 ]\nthen\n    touch autoclass-run-success\nelse\n    touch autoclass-run-failure\nfi\n'

def test_case_3():
    run_0 = module_0.Run()
    assert run_0.root_name == 'autoclass'
    assert module_0.RUN_SCRIPT_CONTENT == '\n# the "y" parameter validates warning\n# in case of a reproducible run\nautoclass -search {0}.db2 {0}.hd2 {0}.model {0}.s-params >autoclass-search.log 2>&1 <<EOF\ny\nEOF\nautoclass -reports {0}.results-bin {0}.search {0}.r-params >autoclass-report.log 2>&1\n\nif [ $? -eq 0 ]\nthen\n    touch autoclass-run-success\nelse\n    touch autoclass-run-failure\nfi\n'
    list_0 = [run_0]
    var_0 = run_0.create_run_file(*list_0)
    assert run_0.had_error is True

def test_case_4():
    str_0 = ''
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    run_0 = module_0.Run(dict_0, str_0)
    assert module_0.RUN_SCRIPT_CONTENT == '\n# the "y" parameter validates warning\n# in case of a reproducible run\nautoclass -search {0}.db2 {0}.hd2 {0}.model {0}.s-params >autoclass-search.log 2>&1 <<EOF\ny\nEOF\nautoclass -reports {0}.results-bin {0}.search {0}.r-params >autoclass-report.log 2>&1\n\nif [ $? -eq 0 ]\nthen\n    touch autoclass-run-success\nelse\n    touch autoclass-run-failure\nfi\n'
    var_0 = run_0.create_run_file_test()
    assert run_0.had_error is True
    var_1 = module_1.get_autoclass_version()
    var_2 = run_0.run()