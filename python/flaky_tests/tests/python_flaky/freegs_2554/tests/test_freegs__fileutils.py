# Automatically generated by Pynguin.
import pytest
import freegs._fileutils as module_0
import re as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'Lu u*\\YugM'
    module_0.write_1d(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    module_0.write_1d(dict_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'\xef\xb2_'
    module_0.write_2d(bytes_0, bytes_0)

def test_case_3():
    none_type_0 = None
    chunk_output_0 = module_0.ChunkOutput(none_type_0)
    assert chunk_output_0.counter == 0
    assert chunk_output_0.chunk == 5
    assert chunk_output_0.extraspaces == 0

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -1085
    chunk_output_0 = module_0.ChunkOutput(int_0)
    assert chunk_output_0.counter == 0
    assert chunk_output_0.chunk == 5
    assert chunk_output_0.extraspaces == 0
    chunk_output_0.endblock()

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 3
    chunk_output_0 = module_0.ChunkOutput(int_0, int_0, int_0)
    assert chunk_output_0.counter == 0
    var_0 = chunk_output_0.__enter__()
    assert var_0.counter == 0
    chunk_output_0.write(int_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 3
    chunk_output_0 = module_0.ChunkOutput(int_0, int_0, int_0)
    assert chunk_output_0.counter == 0
    chunk_output_0.write(int_0)

def test_case_7():
    none_type_0 = None
    chunk_output_0 = module_0.ChunkOutput(none_type_0)
    assert chunk_output_0.counter == 0
    assert chunk_output_0.chunk == 5
    assert chunk_output_0.extraspaces == 0
    var_0 = chunk_output_0.__exit__(chunk_output_0, none_type_0, none_type_0)

def test_case_8():
    int_0 = 28
    var_0 = module_0.f2s(int_0)
    assert var_0 == ' 2.800000000E+01'

def test_case_9():
    int_0 = -77
    var_0 = module_0.f2s(int_0)
    assert var_0 == '-7.700000000E+01'

def test_case_10():
    int_0 = 3
    chunk_output_0 = module_0.ChunkOutput(int_0, int_0, int_0)
    assert chunk_output_0.counter == 0
    var_0 = chunk_output_0.newline()

@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = -1793
    chunk_output_0 = module_0.ChunkOutput(int_0, int_0, int_0)
    assert chunk_output_0.counter == 0
    list_0 = [int_0, int_0, int_0, int_0]
    chunk_output_0.write(list_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    chunk_output_0 = module_0.ChunkOutput(list_1)
    assert chunk_output_0.counter == 0
    assert chunk_output_0.chunk == 5
    assert chunk_output_0.extraspaces == 0
    var_0 = chunk_output_0.write(list_0)
    bool_0 = False
    var_1 = module_0.next_value(bool_0)
    none_type_0 = None
    var_2 = chunk_output_0.__exit__(list_0, var_1, var_1)
    bool_1 = True
    module_0.write_2d(none_type_0, bool_1)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'l! a(3ZJ>ja0^\r:~ze{U'
    var_0 = module_0.next_value(str_0)
    module_1.Scanner(var_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'Number of measured E-coil currents'
    var_0 = module_0.next_value(str_0)
    scanner_0 = module_1.Scanner(var_0)
    assert f'{type(scanner_0).__module__}.{type(scanner_0).__qualname__}' == 're.Scanner'
    assert f'{type(scanner_0.lexicon).__module__}.{type(scanner_0.lexicon).__qualname__}' == 'builtins.generator'
    assert f'{type(scanner_0.scanner).__module__}.{type(scanner_0.scanner).__qualname__}' == 're.Pattern'
    module_1.sub(scanner_0, var_0, str_0)