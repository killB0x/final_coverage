# Automatically generated by Pynguin.
import pytest
import freegs.multigrid as module_0
import scipy.sparse._lil as module_1
import scipy.sparse._construct as module_2
import builtins as module_3
import numpy as module_4

def test_case_0():
    laplacian_op_0 = module_0.LaplacianOp()

@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = 1529.44713
    module_0.createVcycle(float_0, float_0, float_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '\tF(rATj'
    module_0.smoothVcycle(str_0, str_0, str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_0.MGDirect(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'\xe8\xc2t\xa8\x7f'
    module_0.MGJacobi(bytes_0, subsolver=bytes_0)

def test_case_5():
    bool_0 = True
    var_0 = module_0.LaplaceSparse(bool_0, bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'freegs.multigrid.LaplaceSparse'
    assert var_0.Lx is True
    assert var_0.Ly is True

def test_case_6():
    bool_0 = False
    with pytest.raises(ValueError):
        module_0.sparseRestrict(bool_0, bool_0)

def test_case_7():
    bool_0 = True
    var_0 = module_0.sparseRestrict(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    laplacian_op_0 = module_0.LaplacianOp()
    none_type_0 = None
    laplacian_op_0.diag(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = 116.1
    lil_matrix_0 = module_1.lil_matrix(float_0, float_0, copy=float_0)
    module_0.smoothVcycle(lil_matrix_0, lil_matrix_0, lil_matrix_0, lil_matrix_0, float_0, direct=lil_matrix_0)

def test_case_10():
    bool_0 = False
    var_0 = module_0.smoothVcycle(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    assert var_0 is False

def test_case_11():
    float_0 = 115.83805134760895
    lil_matrix_0 = module_1.lil_matrix(float_0, float_0, copy=float_0)
    var_0 = module_0.interpolate(lil_matrix_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'numpy.ndarray'
    assert len(var_0) == 1
    var_1 = module_0.restrict(lil_matrix_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'numpy.ndarray'
    assert len(var_1) == 1
    var_2 = var_1.__bool__()
    assert var_2 is False
    var_3 = lil_matrix_0.__str__()
    bool_0 = False
    var_4 = module_0.smoothVcycle(float_0, lil_matrix_0, bool_0, bool_0, var_0, var_2, direct=float_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'scipy.sparse._lil.lil_matrix'
    assert var_4.maxprint == 50
    assert f'{type(var_4.dtype).__module__}.{type(var_4.dtype).__qualname__}' == 'numpy.dtype[float64]'
    assert len(var_4.dtype) == 0
    assert f'{type(var_4.rows).__module__}.{type(var_4.rows).__qualname__}' == 'numpy.ndarray'
    assert len(var_4.rows) == 1
    assert f'{type(var_4.data).__module__}.{type(var_4.data).__qualname__}' == 'numpy.ndarray'
    assert len(var_4.data) == 1
    with pytest.raises(ValueError):
        module_0.sparseRestrict(float_0, bool_0)

def test_case_12():
    float_0 = 116.1
    lil_matrix_0 = module_1.lil_matrix(float_0, float_0, copy=float_0)
    var_0 = module_0.interpolate(lil_matrix_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'numpy.ndarray'
    assert len(var_0) == 1

def test_case_13():
    bool_0 = False
    laplace_sparse_0 = module_0.LaplaceSparse(bool_0, bool_0)
    assert f'{type(laplace_sparse_0).__module__}.{type(laplace_sparse_0).__qualname__}' == 'freegs.multigrid.LaplaceSparse'
    assert laplace_sparse_0.Lx is False
    assert laplace_sparse_0.Ly is False
    var_0 = laplace_sparse_0.__call__(bool_0, bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'scipy.sparse._csr.csr_matrix'
    assert var_0.maxprint == 50
    assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'numpy.ndarray'
    assert len(var_0.data) == 0
    assert f'{type(var_0.indices).__module__}.{type(var_0.indices).__qualname__}' == 'numpy.ndarray'
    assert len(var_0.indices) == 0
    assert f'{type(var_0.indptr).__module__}.{type(var_0.indptr).__qualname__}' == 'numpy.ndarray'
    assert len(var_0.indptr) == 1

@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.smoothVcycle(bool_0, bool_0, list_0, list_0, bool_0, bool_0)
    assert var_0 is False
    float_0 = 0.01
    laplace_sparse_0 = module_0.LaplaceSparse(float_0, bool_0)
    var_1 = laplace_sparse_0.__call__(var_0, float_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'scipy.sparse._csr.csr_matrix'
    assert var_1.maxprint == 50
    assert f'{type(var_1.data).__module__}.{type(var_1.data).__qualname__}' == 'numpy.ndarray'
    assert len(var_1.data) == 0
    assert f'{type(var_1.indices).__module__}.{type(var_1.indices).__qualname__}' == 'numpy.ndarray'
    assert len(var_1.indices) == 0
    assert f'{type(var_1.indptr).__module__}.{type(var_1.indptr).__qualname__}' == 'numpy.ndarray'
    assert len(var_1.indptr) == 1
    module_0.createVcycle(float_0, var_0, float_0, niter=float_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.smoothVcycle(bool_0, bool_0, list_0, list_0, bool_0, bool_0)
    assert var_0 is False
    float_0 = 0.01
    laplace_sparse_0 = module_0.LaplaceSparse(float_0, bool_0)
    var_1 = laplace_sparse_0.__call__(var_0, float_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'scipy.sparse._csr.csr_matrix'
    assert var_1.maxprint == 50
    assert f'{type(var_1.data).__module__}.{type(var_1.data).__qualname__}' == 'numpy.ndarray'
    assert len(var_1.data) == 0
    assert f'{type(var_1.indices).__module__}.{type(var_1.indices).__qualname__}' == 'numpy.ndarray'
    assert len(var_1.indices) == 0
    assert f'{type(var_1.indptr).__module__}.{type(var_1.indptr).__qualname__}' == 'numpy.ndarray'
    assert len(var_1.indptr) == 1
    var_2 = module_0.interpolate(var_1, var_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'scipy.sparse._csr.csr_matrix'
    assert var_2.maxprint == 50
    assert f'{type(var_2.data).__module__}.{type(var_2.data).__qualname__}' == 'numpy.ndarray'
    assert len(var_2.data) == 0
    assert f'{type(var_2.indices).__module__}.{type(var_2.indices).__qualname__}' == 'numpy.ndarray'
    assert len(var_2.indices) == 0
    assert f'{type(var_2.indptr).__module__}.{type(var_2.indptr).__qualname__}' == 'numpy.ndarray'
    assert len(var_2.indptr) == 1
    var_3 = var_2.tocsr()
    module_0.smoothVcycle(var_2, var_3, var_2, var_2, var_3)

def test_case_16():
    float_0 = 116.1
    lil_matrix_0 = module_1.lil_matrix(float_0, float_0, copy=float_0)
    var_0 = module_0.restrict(lil_matrix_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'numpy.ndarray'
    assert len(var_0) == 1

@pytest.mark.xfail(strict=True)
def test_case_17():
    float_0 = 115.96822596180293
    var_0 = module_2.eye(float_0, float_0, float_0)
    module_0.restrict(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    float_0 = 116.1
    lil_matrix_0 = module_2.eye(float_0, float_0, float_0)
    var_0 = module_0.restrict(lil_matrix_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'scipy.sparse._dia.dia_matrix'
    assert var_0.maxprint == 50
    assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'numpy.ndarray'
    assert len(var_0.data) == 1
    assert f'{type(var_0.offsets).__module__}.{type(var_0.offsets).__qualname__}' == 'numpy.ndarray'
    assert len(var_0.offsets) == 1
    var_1 = float_0.__radd__(lil_matrix_0)
    module_0.interpolate(lil_matrix_0)

def test_case_19():
    float_0 = 116.1
    lil_matrix_0 = module_1.lil_matrix(float_0, float_0)
    var_0 = module_0.restrict(lil_matrix_0, avg=float_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'numpy.ndarray'
    assert len(var_0) == 1
    var_1 = module_0.interpolate(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'numpy.ndarray'
    assert len(var_1) == 1

def test_case_20():
    float_0 = 116.1
    var_0 = module_2.eye(float_0, float_0)
    var_1 = var_0.tocoo()
    var_2 = var_1.getH()
    lil_matrix_0 = module_1.lil_matrix(var_1, var_0, var_0, float_0)
    var_3 = module_0.restrict(var_1, avg=lil_matrix_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'scipy.sparse._coo.coo_matrix'
    assert var_3.maxprint == 50
    assert f'{type(var_3.row).__module__}.{type(var_3.row).__qualname__}' == 'numpy.ndarray'
    assert len(var_3.row) == 116
    assert f'{type(var_3.col).__module__}.{type(var_3.col).__qualname__}' == 'numpy.ndarray'
    assert len(var_3.col) == 116
    assert f'{type(var_3.data).__module__}.{type(var_3.data).__qualname__}' == 'numpy.ndarray'
    assert len(var_3.data) == 116
    assert var_3.has_canonical_format is True
    var_4 = module_0.restrict(var_2)
    var_5 = module_0.interpolate(lil_matrix_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'numpy.ndarray'
    assert len(var_5) == 231

@pytest.mark.xfail(strict=True)
def test_case_21():
    float_0 = 115.83805134760895
    lil_matrix_0 = module_1.lil_matrix(float_0, float_0, copy=float_0)
    var_0 = module_0.interpolate(lil_matrix_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'numpy.ndarray'
    assert len(var_0) == 1
    var_1 = module_0.restrict(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'numpy.ndarray'
    assert len(var_1) == 1
    tuple_0 = (var_1, var_0)
    var_2 = var_1.__radd__(tuple_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'numpy.ndarray'
    assert len(var_2) == 2
    module_0.smoothVcycle(var_2, var_2, lil_matrix_0, float_0, lil_matrix_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    float_0 = 116.1
    var_0 = module_2.eye(float_0, float_0)
    var_1 = var_0.tocoo()
    var_2 = var_1.getH()
    var_3 = var_1.multiply(var_2)
    lil_matrix_0 = module_1.lil_matrix(var_1, var_0, var_0, float_0)
    var_4 = module_0.restrict(var_1, avg=lil_matrix_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'scipy.sparse._coo.coo_matrix'
    assert var_4.maxprint == 50
    assert f'{type(var_4.row).__module__}.{type(var_4.row).__qualname__}' == 'numpy.ndarray'
    assert len(var_4.row) == 116
    assert f'{type(var_4.col).__module__}.{type(var_4.col).__qualname__}' == 'numpy.ndarray'
    assert len(var_4.col) == 116
    assert f'{type(var_4.data).__module__}.{type(var_4.data).__qualname__}' == 'numpy.ndarray'
    assert len(var_4.data) == 116
    assert var_4.has_canonical_format is True
    module_0.restrict(var_0, var_2)

@pytest.mark.xfail(strict=True)
def test_case_23():
    float_0 = 115.83805134760895
    lil_matrix_0 = module_1.lil_matrix(float_0, float_0, copy=float_0)
    var_0 = module_0.interpolate(lil_matrix_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'numpy.ndarray'
    assert len(var_0) == 1
    var_1 = module_0.restrict(lil_matrix_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'numpy.ndarray'
    assert len(var_1) == 1
    var_2 = var_1.__bool__()
    assert var_2 is False
    var_3 = module_0.restrict(var_0)
    assert len(var_3) == 1
    var_4 = var_3.__radd__(var_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'numpy.ndarray'
    assert len(var_4) == 1
    list_0 = [float_0, float_0, float_0, var_1]
    var_5 = var_3.__mul__(list_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'numpy.ndarray'
    assert len(var_5) == 1
    var_6 = module_0.restrict(var_5)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'numpy.ndarray'
    assert len(var_6) == 1
    module_0.smoothVcycle(float_0, var_1, var_1, lil_matrix_0, var_1, direct=var_6)

@pytest.mark.xfail(strict=True)
def test_case_24():
    float_0 = 115.96822596180293
    var_0 = module_2.eye(float_0, float_0, float_0)
    module_0.restrict(var_0)

def test_case_25():
    float_0 = 115.968
    var_0 = module_2.eye(float_0, float_0, float_0)
    var_1 = var_0.dot(var_0)
    var_2 = module_0.restrict(var_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'numpy.ndarray'
    assert len(var_2) == 58
    with pytest.raises(ValueError):
        var_1.__bool__()

@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = False
    laplace_sparse_0 = module_0.LaplaceSparse(bool_0, bool_0)
    assert f'{type(laplace_sparse_0).__module__}.{type(laplace_sparse_0).__qualname__}' == 'freegs.multigrid.LaplaceSparse'
    assert laplace_sparse_0.Lx is False
    assert laplace_sparse_0.Ly is False
    var_0 = module_0.createVcycle(bool_0, bool_0, laplace_sparse_0, niter=bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'freegs.multigrid.MGDirect'
    module_3.object(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.smoothVcycle(bool_0, bool_0, list_0, list_0, bool_0, bool_0)
    assert var_0 is False
    float_0 = 21.059264158836534
    bytes_0 = b''
    module_0.smoothVcycle(bytes_0, var_0, bytes_0, float_0, bool_0, var_0, float_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    int_0 = 98
    laplace_sparse_0 = module_0.LaplaceSparse(int_0, int_0)
    assert f'{type(laplace_sparse_0).__module__}.{type(laplace_sparse_0).__qualname__}' == 'freegs.multigrid.LaplaceSparse'
    assert laplace_sparse_0.Lx == 98
    assert laplace_sparse_0.Ly == 98
    var_0 = laplace_sparse_0.__call__(int_0, int_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'scipy.sparse._csr.csr_matrix'
    assert var_0.maxprint == 50
    assert f'{type(var_0.indices).__module__}.{type(var_0.indices).__qualname__}' == 'numpy.ndarray'
    assert len(var_0.indices) == 46468
    assert f'{type(var_0.indptr).__module__}.{type(var_0.indptr).__qualname__}' == 'numpy.ndarray'
    assert len(var_0.indptr) == 9605
    assert f'{type(var_0.data).__module__}.{type(var_0.data).__qualname__}' == 'numpy.ndarray'
    assert len(var_0.data) == 46468
    none_type_0 = None
    laplace_sparse_0.__call__(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.smoothVcycle(bool_0, bool_0, list_0, list_0, bool_0, bool_0)
    assert var_0 is False
    float_0 = 0.01
    laplace_sparse_0 = module_0.LaplaceSparse(float_0, bool_0)
    var_1 = laplace_sparse_0.__call__(var_0, float_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'scipy.sparse._csr.csr_matrix'
    assert var_1.maxprint == 50
    assert f'{type(var_1.data).__module__}.{type(var_1.data).__qualname__}' == 'numpy.ndarray'
    assert len(var_1.data) == 0
    assert f'{type(var_1.indices).__module__}.{type(var_1.indices).__qualname__}' == 'numpy.ndarray'
    assert len(var_1.indices) == 0
    assert f'{type(var_1.indptr).__module__}.{type(var_1.indptr).__qualname__}' == 'numpy.ndarray'
    assert len(var_1.indptr) == 1
    var_2 = var_1.getH()
    var_3 = module_0.createVcycle(var_0, float_0, laplace_sparse_0, niter=float_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'freegs.multigrid.MGDirect'
    var_4 = laplace_sparse_0.__call__(bool_0, var_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'scipy.sparse._csr.csr_matrix'
    assert var_4.maxprint == 50
    assert f'{type(var_4.data).__module__}.{type(var_4.data).__qualname__}' == 'numpy.ndarray'
    assert len(var_4.data) == 0
    assert f'{type(var_4.indices).__module__}.{type(var_4.indices).__qualname__}' == 'numpy.ndarray'
    assert len(var_4.indices) == 0
    assert f'{type(var_4.indptr).__module__}.{type(var_4.indptr).__qualname__}' == 'numpy.ndarray'
    assert len(var_4.indptr) == 1
    var_3.__call__(bool_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    bool_0 = False
    laplace_sparse_0 = module_0.LaplaceSparse(bool_0, bool_0)
    assert f'{type(laplace_sparse_0).__module__}.{type(laplace_sparse_0).__qualname__}' == 'freegs.multigrid.LaplaceSparse'
    assert laplace_sparse_0.Lx is False
    assert laplace_sparse_0.Ly is False
    var_0 = module_0.createVcycle(bool_0, bool_0, laplace_sparse_0, niter=bool_0, direct=bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'freegs.multigrid.MGJacobi'
    assert f'{type(var_0.A).__module__}.{type(var_0.A).__qualname__}' == 'scipy.sparse._csr.csr_matrix'
    assert f'{type(var_0.diag).__module__}.{type(var_0.diag).__qualname__}' == 'numpy.ndarray'
    assert len(var_0.diag) == 0
    assert var_0.subsolver is None
    assert var_0.niter is False
    assert var_0.ncycle == 1
    assert var_0.sub_b is None
    assert var_0.xupdate is None
    var_0.__call__(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    bool_0 = True
    bool_1 = False
    var_0 = module_4.amax(bool_1, initial=bool_0)
    var_1 = module_0.smoothVcycle(bool_1, bool_1, var_0, var_0, bool_1, bool_1)
    assert var_1 is False
    laplace_sparse_0 = module_0.LaplaceSparse(var_0, bool_1)
    var_2 = module_0.createVcycle(var_1, var_0, laplace_sparse_0, niter=var_0, direct=bool_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'freegs.multigrid.MGJacobi'
    assert f'{type(var_2.A).__module__}.{type(var_2.A).__qualname__}' == 'scipy.sparse._csr.csr_matrix'
    assert f'{type(var_2.diag).__module__}.{type(var_2.diag).__qualname__}' == 'numpy.ndarray'
    assert len(var_2.diag) == 0
    assert var_2.subsolver is None
    assert f'{type(var_2.niter).__module__}.{type(var_2.niter).__qualname__}' == 'numpy.bool_'
    assert var_2.ncycle == 1
    assert var_2.sub_b is None
    assert var_2.xupdate is None
    set_0 = set()
    var_2.__call__(set_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_32():
    bool_0 = False
    bool_1 = False
    var_0 = module_0.smoothVcycle(bool_1, bool_1, bool_0, bool_0, bool_1, bool_1)
    assert var_0 is False
    laplace_sparse_0 = module_0.LaplaceSparse(bool_1, bool_1)
    var_1 = module_0.createVcycle(var_0, bool_1, laplace_sparse_0, niter=bool_1, direct=bool_1)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'freegs.multigrid.MGJacobi'
    assert f'{type(var_1.A).__module__}.{type(var_1.A).__qualname__}' == 'scipy.sparse._csr.csr_matrix'
    assert f'{type(var_1.diag).__module__}.{type(var_1.diag).__qualname__}' == 'numpy.ndarray'
    assert len(var_1.diag) == 0
    assert var_1.subsolver is None
    assert var_1.niter is False
    assert var_1.ncycle == 1
    assert var_1.sub_b is None
    assert var_1.xupdate is None
    bool_2 = True
    var_1.__call__(bool_2, laplace_sparse_0, bool_1)

@pytest.mark.xfail(strict=True)
def test_case_33():
    bool_0 = True
    var_0 = module_0.sparseRestrict(bool_0, bool_0)
    bool_1 = False
    var_1 = module_0.smoothVcycle(bool_1, bool_1, var_0, var_0, bool_1, bool_1)
    assert var_1 is False
    laplace_sparse_0 = module_0.LaplaceSparse(bool_0, bool_1)
    var_2 = module_0.createVcycle(var_1, bool_1, laplace_sparse_0, niter=bool_1, direct=bool_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'freegs.multigrid.MGJacobi'
    assert f'{type(var_2.A).__module__}.{type(var_2.A).__qualname__}' == 'scipy.sparse._csr.csr_matrix'
    assert f'{type(var_2.diag).__module__}.{type(var_2.diag).__qualname__}' == 'numpy.ndarray'
    assert len(var_2.diag) == 0
    assert var_2.subsolver is None
    assert var_2.niter is False
    assert var_2.ncycle == 1
    assert var_2.sub_b is None
    assert var_2.xupdate is None
    set_0 = set()
    var_2.__call__(var_2, bool_0, niter=set_0)