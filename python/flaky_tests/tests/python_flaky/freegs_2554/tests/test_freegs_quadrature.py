# Automatically generated by Pynguin.
import pytest
import freegs.quadrature as module_0

def test_case_0():
    tuple_0 = ()
    with pytest.raises(AssertionError):
        module_0.triangle_quad(tuple_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'\xa7e\x9a\x14/\x1a\xa2\xb6\x19\xfe\xd9K\x04\xe5'
    module_0.average(bytes_0, bytes_0)

def test_case_2():
    tuple_0 = ()
    var_0 = module_0.average(tuple_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b'{K\xd4'
    module_0.triangle_quad(bytes_0, bytes_0)

def test_case_4():
    bytes_0 = b'\x05a'
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.triangle_quad(list_0)

def test_case_5():
    bytes_0 = b'\x05a'
    list_0 = [bytes_0, bytes_0, bytes_0]
    with pytest.raises(ValueError):
        module_0.triangle_quad(list_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b'\x05a'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.polygon_quad(list_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b'\x1e\xab'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0]
    bool_0 = True
    module_0.polygon_quad(list_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b'\x9d$'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0]
    float_0 = 3.0
    module_0.polygon_quad(list_0, float_0)