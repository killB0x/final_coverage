# Automatically generated by Pynguin.
import pytest
import freegs.polygons as module_0

def test_case_0():
    bytes_0 = b'L\x98\xaeB\t+\xa5}\x8bU\xf6\x8e_'
    var_0 = module_0.intersect(bytes_0, bytes_0, bytes_0, bytes_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x96\xea\xd2B\xaf'0\xfbl\xd7\xbbV\xf9\xc6\x84X\xe6Q"
    module_0.area(bytes_0)

def test_case_2():
    set_0 = set()
    var_0 = module_0.area(set_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)

@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    module_0.triangulate(set_0)

def test_case_4():
    tuple_0 = ()
    with pytest.raises(AssertionError):
        module_0.triangulate(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'L\x98\xaeB\t+\xa5}\x8bU\xf6\x8e_'
    module_0.clockwise(bytes_0)

def test_case_6():
    set_0 = set()
    var_0 = module_0.intersect(set_0, set_0, set_0, set_0, set_0)
    assert var_0 is False

def test_case_7():
    tuple_0 = ()
    var_0 = module_0.intersect(tuple_0, tuple_0, tuple_0, tuple_0, tuple_0, tuple_0)
    assert var_0 is False

def test_case_8():
    float_0 = -2499.6072600850994
    tuple_0 = (float_0, float_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0, tuple_0]
    var_0 = module_0.triangulate(list_0)
    with pytest.raises(AssertionError):
        module_0.intersect(var_0, tuple_0, list_0, var_0)

def test_case_9():
    float_0 = 251.21
    tuple_0 = (float_0, float_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0, tuple_0]
    var_0 = module_0.triangulate(list_0)
    with pytest.raises(AssertionError):
        module_0.intersect(var_0, var_0, var_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 88
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bytes_0 = b'A\xbb\xc1D\xdf\xbc\xcd\xfc\x9e\x0f\x13'
    bytes_1 = b'A\xbb\xc1i\xdf\xbc\xcd\xfc\xc5\x0f\x13'
    var_0 = module_0.intersect(bytes_0, bytes_1, bytes_0, bytes_0, int_0)
    assert var_0 is False
    module_0.clockwise(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = 88
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bytes_0 = b'A\xbb\xc1D\xdf\xbc\xcd\xfc\x9e\x0f\x13'
    bytes_1 = b'A\xbbj\xc1i\xdf\xbc\xcd\xc5\x0f\x13'
    var_0 = module_0.intersect(bytes_0, bytes_1, bytes_0, bytes_0, int_0)
    assert var_0 is True
    module_0.clockwise(dict_0)

def test_case_12():
    float_0 = -420.0
    tuple_0 = (float_0, float_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    var_0 = module_0.triangulate(list_0)

def test_case_13():
    float_0 = -420.22
    tuple_0 = (float_0, float_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0, tuple_0]
    var_0 = module_0.triangulate(list_0)