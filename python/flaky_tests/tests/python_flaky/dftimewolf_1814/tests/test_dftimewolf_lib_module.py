# Automatically generated by Pynguin.
import pytest
import dftimewolf.lib.module as module_0
import builtins as module_1
import dftimewolf.lib.errors as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    preflight_module_0 = module_0.PreflightModule(none_type_0, none_type_0)
    preflight_module_0.ModuleError(preflight_module_0)

def test_case_1():
    none_type_0 = None
    preflight_module_0 = module_0.PreflightModule(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    preflight_module_0 = module_0.PreflightModule(none_type_0, none_type_0)
    var_0 = preflight_module_0.CleanUp()
    preflight_module_0.ModuleError(preflight_module_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    base_exception_0 = module_1.BaseException()
    base_module_0 = module_0.BaseModule(base_exception_0)
    assert f'{type(module_0.BaseModule.name).__module__}.{type(module_0.BaseModule.name).__qualname__}' == 'builtins.property'
    var_0 = base_module_0.Process()
    base_module_0.ModuleError(base_exception_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    base_exception_0 = module_1.BaseException()
    base_module_0 = module_0.BaseModule(base_exception_0)
    assert f'{type(module_0.BaseModule.name).__module__}.{type(module_0.BaseModule.name).__qualname__}' == 'builtins.property'
    bad_configuration_error_0 = module_2.BadConfigurationError()
    var_0 = base_module_0.Process()
    str_0 = '\\;R'
    dict_0 = {str_0: base_module_0, str_0: bad_configuration_error_0}
    var_1 = base_module_0.SetUp(**dict_0)
    var_2 = base_module_0.Process()
    base_module_0.ModuleError(base_exception_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 3150
    preflight_module_0 = module_0.PreflightModule(int_0)
    var_0 = preflight_module_0.Process()
    var_0.Process()

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    preflight_module_0 = module_0.PreflightModule(none_type_0, none_type_0)
    str_0 = '\x0c&*NQbN,\t>P#MAPpY'
    dict_0 = {str_0: none_type_0, str_0: str_0, str_0: none_type_0, str_0: preflight_module_0}
    var_0 = preflight_module_0.SetUp(**dict_0)
    var_1 = preflight_module_0.CleanUp()
    preflight_module_1 = module_0.PreflightModule(preflight_module_0)
    preflight_module_1.ModuleError(preflight_module_1)