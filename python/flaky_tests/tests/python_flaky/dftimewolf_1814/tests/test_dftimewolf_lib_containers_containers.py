# Automatically generated by Pynguin.
import dftimewolf.lib.containers.containers as module_0

def test_case_0():
    none_type_0 = None
    report_0 = module_0.Report(none_type_0, none_type_0)
    assert f'{type(report_0).__module__}.{type(report_0).__qualname__}' == 'dftimewolf.lib.containers.containers.Report'
    assert report_0.module_name is None
    assert report_0.text is None
    assert report_0.text_format == 'plaintext'
    assert report_0.attributes == []
    assert module_0.Report.CONTAINER_TYPE == 'report'

def test_case_1():
    none_type_0 = None
    bool_0 = False
    report_0 = module_0.Report(bool_0, none_type_0)
    assert f'{type(report_0).__module__}.{type(report_0).__qualname__}' == 'dftimewolf.lib.containers.containers.Report'
    assert report_0.module_name is False
    assert report_0.text is None
    assert report_0.text_format == 'plaintext'
    assert report_0.attributes == []
    assert module_0.Report.CONTAINER_TYPE == 'report'
    var_0 = report_0.GetAttributeNames()
    report_1 = module_0.Report(none_type_0, none_type_0, var_0, bool_0)
    assert report_1.attributes is False
    str_0 = 'g\rj-6a \rK)gsd/'
    u_r_l_0 = module_0.URL(str_0)
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'dftimewolf.lib.containers.containers.URL'
    assert u_r_l_0.path == 'g\rj-6a \rK)gsd/'
    assert module_0.URL.CONTAINER_TYPE == 'url'

def test_case_2():
    int_0 = 564
    g_c_p_logs_0 = module_0.GCPLogs(int_0, int_0, int_0)
    assert f'{type(g_c_p_logs_0).__module__}.{type(g_c_p_logs_0).__qualname__}' == 'dftimewolf.lib.containers.containers.GCPLogs'
    assert g_c_p_logs_0.filter_expression == 564
    assert g_c_p_logs_0.path == 564
    assert g_c_p_logs_0.project_name == 564
    assert module_0.GCPLogs.CONTAINER_TYPE == 'gcp_logs'
    bytes_0 = b"\xb0\xda'"
    set_0 = {bytes_0}
    forensics_v_m_0 = module_0.ForensicsVM(g_c_p_logs_0, int_0, set_0)
    assert f'{type(forensics_v_m_0).__module__}.{type(forensics_v_m_0).__qualname__}' == 'dftimewolf.lib.containers.containers.ForensicsVM'
    assert f'{type(forensics_v_m_0.name).__module__}.{type(forensics_v_m_0.name).__qualname__}' == 'dftimewolf.lib.containers.containers.GCPLogs'
    assert forensics_v_m_0.evidence_disk == 564
    assert forensics_v_m_0.platform == {b"\xb0\xda'"}
    assert module_0.ForensicsVM.CONTAINER_TYPE == 'forensics_vm'

def test_case_3():
    bool_0 = False
    file_0 = module_0.File(bool_0, bool_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'dftimewolf.lib.containers.containers.File'
    assert file_0.name is False
    assert file_0.path is False
    assert module_0.File.CONTAINER_TYPE == 'file'
    list_0 = []
    threat_intelligence_0 = module_0.ThreatIntelligence(list_0, list_0, list_0)
    assert f'{type(threat_intelligence_0).__module__}.{type(threat_intelligence_0).__qualname__}' == 'dftimewolf.lib.containers.containers.ThreatIntelligence'
    assert threat_intelligence_0.name == []
    assert threat_intelligence_0.indicator == []
    assert threat_intelligence_0.path == []
    assert module_0.ThreatIntelligence.CONTAINER_TYPE == 'threat_intelligence'
    file_1 = module_0.File(threat_intelligence_0, threat_intelligence_0)
    threat_intelligence_1 = module_0.ThreatIntelligence(file_1, list_0, threat_intelligence_0)

def test_case_4():
    set_0 = set()
    bool_0 = True
    ticket_attribute_0 = module_0.TicketAttribute(set_0, set_0, bool_0)
    assert f'{type(ticket_attribute_0).__module__}.{type(ticket_attribute_0).__qualname__}' == 'dftimewolf.lib.containers.containers.TicketAttribute'
    assert ticket_attribute_0.type == {*()}
    assert ticket_attribute_0.name == {*()}
    assert ticket_attribute_0.value is True
    assert module_0.TicketAttribute.CONTAINER_TYPE == 'ticketattribute'

def test_case_5():
    none_type_0 = None
    u_r_l_0 = module_0.URL(none_type_0)
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'dftimewolf.lib.containers.containers.URL'
    assert u_r_l_0.path is None
    assert module_0.URL.CONTAINER_TYPE == 'url'