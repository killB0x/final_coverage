# Automatically generated by Pynguin.
import pytest
import dftimewolf.lib.logging_utils as module_0
import tests.test_modules.modules as module_1
import dftimewolf.lib.errors as module_2
import dftimewolf.lib.containers.containers as module_3

def test_case_0():
    wolf_formatter_0 = module_0.WolfFormatter()
    dummy_module1_0 = module_1.DummyModule1(wolf_formatter_0)
    assert dummy_module1_0.critical is False
    assert f'{type(dummy_module1_0.state).__module__}.{type(dummy_module1_0.state).__qualname__}' == 'dftimewolf.lib.logging_utils.WolfFormatter'
    assert f'{type(dummy_module1_0.logger).__module__}.{type(dummy_module1_0.logger).__qualname__}' == 'logging.Logger'

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    dummy_module1_0 = module_1.DummyModule1(bool_0)
    assert dummy_module1_0.critical is False
    assert dummy_module1_0.state is False
    assert f'{type(dummy_module1_0.logger).__module__}.{type(dummy_module1_0.logger).__qualname__}' == 'logging.Logger'
    dummy_module2_0 = module_1.DummyModule2(dummy_module1_0)
    assert dummy_module2_0.critical is False
    assert f'{type(dummy_module2_0.state).__module__}.{type(dummy_module2_0.state).__qualname__}' == 'tests.test_modules.modules.DummyModule1'
    assert f'{type(dummy_module2_0.logger).__module__}.{type(dummy_module2_0.logger).__qualname__}' == 'logging.Logger'
    dummy_module1_0.SetUp()

@pytest.mark.xfail(strict=True)
def test_case_2():
    d_f_timewolf_error_0 = module_2.DFTimewolfError()
    dummy_module1_0 = module_1.DummyModule1(d_f_timewolf_error_0)
    assert dummy_module1_0.critical is False
    assert f'{type(dummy_module1_0.state).__module__}.{type(dummy_module1_0.state).__qualname__}' == 'dftimewolf.lib.errors.DFTimewolfError'
    assert f'{type(dummy_module1_0.logger).__module__}.{type(dummy_module1_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = dummy_module1_0.Callback(d_f_timewolf_error_0)
    var_1 = dummy_module1_0.Callback(d_f_timewolf_error_0)
    dummy_module1_1 = module_1.DummyModule1(d_f_timewolf_error_0)
    assert dummy_module1_1.critical is False
    assert f'{type(dummy_module1_1.state).__module__}.{type(dummy_module1_1.state).__qualname__}' == 'dftimewolf.lib.errors.DFTimewolfError'
    assert f'{type(dummy_module1_1.logger).__module__}.{type(dummy_module1_1.logger).__qualname__}' == 'logging.Logger'
    var_1.Process()

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '`Hfe\rcNg}_|/}yM,'
    bytes_0 = b'\xc9\xa7\xb8\xce\xd9\xd3\xd7/p\xef\xc7Y\xb5\x8f\xff'
    dummy_module1_0 = module_1.DummyModule1(bytes_0)
    assert dummy_module1_0.critical is False
    assert dummy_module1_0.state == b'\xc9\xa7\xb8\xce\xd9\xd3\xd7/p\xef\xc7Y\xb5\x8f\xff'
    assert f'{type(dummy_module1_0.logger).__module__}.{type(dummy_module1_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = dummy_module1_0.Process()
    var_0.formatException(str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    dummy_module2_0 = module_1.DummyModule2(bool_0)
    assert dummy_module2_0.critical is False
    assert dummy_module2_0.state is False
    assert f'{type(dummy_module2_0.logger).__module__}.{type(dummy_module2_0.logger).__qualname__}' == 'logging.Logger'
    none_type_0 = None
    dummy_preflight_module_0 = module_1.DummyPreflightModule(none_type_0)
    assert dummy_preflight_module_0.critical is False
    assert dummy_preflight_module_0.state is None
    assert f'{type(dummy_preflight_module_0.logger).__module__}.{type(dummy_preflight_module_0.logger).__qualname__}' == 'logging.Logger'
    str_0 = '}[%svx|TQ'
    dict_0 = {str_0: str_0, str_0: str_0}
    dummy_preflight_module_0.SetUp(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    dummy_preflight_module_0 = module_1.DummyPreflightModule(bool_0)
    assert dummy_preflight_module_0.critical is False
    assert dummy_preflight_module_0.state is False
    assert f'{type(dummy_preflight_module_0.logger).__module__}.{type(dummy_preflight_module_0.logger).__qualname__}' == 'logging.Logger'
    dummy_module2_0 = module_1.DummyModule2(bool_0)
    assert dummy_module2_0.critical is False
    assert dummy_module2_0.state is False
    assert f'{type(dummy_module2_0.logger).__module__}.{type(dummy_module2_0.logger).__qualname__}' == 'logging.Logger'
    dummy_module1_0 = module_1.DummyModule1(dummy_module2_0)
    assert dummy_module1_0.critical is False
    assert f'{type(dummy_module1_0.state).__module__}.{type(dummy_module1_0.state).__qualname__}' == 'tests.test_modules.modules.DummyModule2'
    assert f'{type(dummy_module1_0.logger).__module__}.{type(dummy_module1_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = dummy_module2_0.SetUp()
    var_0.format(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = -1583.64
    dummy_module2_0 = module_1.DummyModule2(float_0)
    assert dummy_module2_0.critical is False
    assert dummy_module2_0.state == pytest.approx(-1583.64, abs=0.01, rel=0.01)
    assert f'{type(dummy_module2_0.logger).__module__}.{type(dummy_module2_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = dummy_module2_0.Process()
    var_1 = dummy_module2_0.SetupLogging()
    var_1.format(float_0)

def test_case_7():
    none_type_0 = None
    dummy_preflight_module_0 = module_1.DummyPreflightModule(none_type_0)
    assert dummy_preflight_module_0.critical is False
    assert dummy_preflight_module_0.state is None
    assert f'{type(dummy_preflight_module_0.logger).__module__}.{type(dummy_preflight_module_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = dummy_preflight_module_0.Process()
    dummy_module1_0 = module_1.DummyModule1(var_0)
    assert dummy_module1_0.critical is False
    assert dummy_module1_0.state is None
    assert f'{type(dummy_module1_0.logger).__module__}.{type(dummy_module1_0.logger).__qualname__}' == 'logging.Logger'

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    dummy_preflight_module_0 = module_1.DummyPreflightModule(none_type_0)
    assert dummy_preflight_module_0.critical is False
    assert dummy_preflight_module_0.state is None
    assert f'{type(dummy_preflight_module_0.logger).__module__}.{type(dummy_preflight_module_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = dummy_preflight_module_0.SetUp(dummy_preflight_module_0)
    var_1 = dummy_preflight_module_0.Process()
    var_2 = dummy_preflight_module_0.SetUp(none_type_0)
    report_0 = module_3.Report(none_type_0, none_type_0, attributes=dummy_preflight_module_0)
    dummy_module2_0 = module_1.DummyModule2(none_type_0)
    assert dummy_module2_0.critical is False
    assert dummy_module2_0.state is None
    assert f'{type(dummy_module2_0.logger).__module__}.{type(dummy_module2_0.logger).__qualname__}' == 'logging.Logger'
    var_2.SetUp(none_type_0)