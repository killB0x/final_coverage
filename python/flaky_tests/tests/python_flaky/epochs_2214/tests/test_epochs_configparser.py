# Automatically generated by Pynguin.
import pytest
import epochs.configparser as module_0
import _locale as module_1

def test_case_0():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'

def test_case_1():
    str_0 = '\ri2q%,7XgOpM7Z$o8'
    epoch_config_parser_0 = module_0.EpochConfigParser(str_0)
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'

def test_case_2():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    str_0 = epoch_config_parser_0.__str__()
    assert str_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_3():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    epoch_config_parser_0.get(epoch_config_parser_0, epoch_config_parser_0)

def test_case_4():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    with pytest.raises(KeyError):
        epoch_config_parser_0.get(epoch_config_parser_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    bool_0 = epoch_config_parser_0.is_valid()
    assert bool_0 is True
    str_0 = epoch_config_parser_0.__repr__()
    assert str_0 == 'EpochConfigParser("None")'
    str_1 = epoch_config_parser_0.__str__()
    assert str_1 == ''
    str_2 = epoch_config_parser_0.__repr__()
    assert str_2 == 'EpochConfigParser("None")'
    epoch_config_parser_0.write(bool_0)

def test_case_6():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    bool_0 = epoch_config_parser_0.is_valid()
    assert bool_0 is True

@pytest.mark.xfail(strict=True)
def test_case_7():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    epoch_config_parser_0.read(epoch_config_parser_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    str_0 = epoch_config_parser_0.__repr__()
    assert str_0 == 'EpochConfigParser("None")'
    bool_0 = True
    epoch_config_parser_0.write(str_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '\ri2q%,7XgOpM7Z$o8'
    epoch_config_parser_0 = module_0.EpochConfigParser(str_0)
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    epoch_config_parser_0.write(str_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '1:=dT_2]<afNiO\x0c_$'
    config_parser_0 = module_0.ConfigParser(str_0)
    assert f'{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(config_parser_0) == 1
    str_1 = config_parser_0.__repr__()
    assert str_1 == 'ConfigParser("1:=dT_2]<afNiO\x0c_$")'
    config_parser_0.getfloat(config_parser_0, config_parser_0, vars=config_parser_0)

def test_case_11():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    bool_0 = epoch_config_parser_0.is_valid(epoch_config_parser_0)
    assert bool_0 is True

@pytest.mark.xfail(strict=True)
def test_case_12():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    config_parser_0 = module_0.ConfigParser()
    assert len(config_parser_0) == 1
    bool_0 = True
    bool_1 = config_parser_0.is_valid(bool_0)
    assert bool_1 is True
    config_parser_0.getint(config_parser_0, config_parser_0, raw=config_parser_0)

def test_case_13():
    config_parser_0 = module_0.ConfigParser()
    assert f'{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(config_parser_0) == 1
    bool_0 = True
    bool_1 = config_parser_0.is_valid(bool_0)
    assert bool_1 is True

def test_case_14():
    str_0 = '4'
    config_parser_0 = module_0.ConfigParser(str_0)
    assert f'{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(config_parser_0) == 1
    none_type_0 = config_parser_0.write(str_0)

def test_case_15():
    config_parser_0 = module_0.ConfigParser()
    assert f'{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(config_parser_0) == 1
    str_0 = config_parser_0.__str__()
    assert str_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_16():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    str_0 = '4'
    bool_0 = True
    epoch_config_parser_0.get(epoch_config_parser_0, str_0, bool_0)

def test_case_17():
    str_0 = 'ivalid wype: '
    config_parser_0 = module_0.ConfigParser(str_0)
    assert f'{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(config_parser_0) == 1
    bool_0 = config_parser_0.is_valid()
    assert bool_0 is True

def test_case_18():
    str_0 = ';m'
    dict_0 = {}
    epoch_config_parser_0 = module_0.EpochConfigParser(str_0, **dict_0)
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    str_1 = '4'
    with pytest.raises(KeyError):
        epoch_config_parser_0.get(str_0, str_1, str_1)

@pytest.mark.xfail(strict=True)
def test_case_19():
    config_parser_0 = module_0.ConfigParser()
    assert f'{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(config_parser_0) == 1
    bool_0 = config_parser_0.is_valid()
    assert bool_0 is True
    var_0 = config_parser_0.__setitem__(bool_0, config_parser_0)
    assert len(config_parser_0) == 2
    var_1 = config_parser_0.defaults()
    str_0 = var_0.__str__()
    bool_1 = config_parser_0.is_valid()
    var_2 = var_1.__setitem__(str_0, config_parser_0)
    str_1 = 'C'
    config_parser_0.write(str_1)

@pytest.mark.xfail(strict=True)
def test_case_20():
    var_0 = module_1.localeconv()
    config_parser_0 = module_0.ConfigParser(var_0)
    assert f'{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(config_parser_0) == 1
    str_0 = config_parser_0.__str__()
    assert str_0 == ''
    bool_0 = True
    bool_1 = config_parser_0.is_valid(bool_0)
    none_type_0 = None
    none_type_0.write(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = '\rY,+a0M'
    bool_0 = True
    module_0.ConfigParser(str_0)
    assert f'{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(config_parser_0) == 1
    var_0 = config_parser_0.__setitem__(bool_0, config_parser_0)
    none_type_0 = config_parser_0.write(str_0, var_0)
    bool_1 = config_parser_0.is_valid()
    assert bool_1 is False
    str_1 = var_0.__repr__()
    var_1 = var_0.read_string(bool_1)

def test_case_22():
    str_0 = 'ivalid wype: '
    config_parser_0 = module_0.ConfigParser(str_0)
    assert f'{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(config_parser_0) == 1
    bool_0 = config_parser_0.is_valid()
    assert bool_0 is True

@pytest.mark.xfail(strict=True)
def test_case_23():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    str_0 = epoch_config_parser_0.__str__()
    assert str_0 == ''
    bool_0 = epoch_config_parser_0.is_valid()
    str_1 = '\rY,+a0M'
    str_2 = 'C'
    bool_1 = epoch_config_parser_0.is_valid()
    str_3 = ' nvalid type: '
    config_parser_0 = module_0.ConfigParser(str_2)
    assert f'{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(config_parser_0) == 1
    bool_2 = False
    config_parser_0.get(str_1, str_3, use_spec=bool_2)

def test_case_24():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    str_0 = 'C'
    var_0 = epoch_config_parser_0.read(str_0)
    assert len(epoch_config_parser_0.config) == 2
    bool_0 = epoch_config_parser_0.is_valid()
    assert bool_0 is False

@pytest.mark.xfail(strict=True)
def test_case_25():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    str_0 = epoch_config_parser_0.__repr__()
    assert str_0 == 'EpochConfigParser("None")'
    str_1 = 'C'
    config_parser_0 = module_0.ConfigParser(str_1)
    assert f'{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(config_parser_0) == 1
    var_0 = config_parser_0.__setitem__(epoch_config_parser_0, config_parser_0)
    assert len(config_parser_0) == 2
    none_type_0 = config_parser_0.write(str_1, var_0)
    bool_0 = config_parser_0.is_valid(var_0)
    assert bool_0 is True
    str_2 = none_type_0.__repr__()
    str_3 = var_0.__repr__()
    epoch_config_parser_0.get(epoch_config_parser_0, config_parser_0)

def test_case_26():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    bool_0 = epoch_config_parser_0.is_valid()
    assert bool_0 is True
    bool_1 = epoch_config_parser_0.is_valid(bool_0)
    str_0 = 'C'
    var_0 = epoch_config_parser_0.read(str_0)
    assert len(epoch_config_parser_0.config) == 2
    config_parser_0 = module_0.ConfigParser(str_0)
    assert f'{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(config_parser_0) == 1
    var_1 = config_parser_0.__setitem__(epoch_config_parser_0, config_parser_0)
    assert len(config_parser_0) == 2
    none_type_0 = config_parser_0.write(str_0, var_0)
    bool_2 = False
    bool_3 = config_parser_0.is_valid(bool_2)
    assert bool_3 is False
    str_1 = var_0.__repr__()

def test_case_27():
    str_0 = '\rY,+a0M'
    bool_0 = True
    module_0.ConfigParser(str_0)
    assert f'{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(config_parser_0) == 1
    var_0 = config_parser_0.__setitem__(bool_0, config_parser_0)
    none_type_0 = config_parser_0.write(str_0, var_0)
    str_1 = var_0.__eq__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    bool_0 = False
    bool_1 = epoch_config_parser_0.is_valid(bool_0)
    assert bool_1 is True
    str_0 = 'C'
    var_0 = epoch_config_parser_0.read(str_0)
    assert len(epoch_config_parser_0.config) == 2
    bool_2 = epoch_config_parser_0.is_valid()
    assert bool_2 is False
    str_1 = '/valid type: '
    config_parser_0 = module_0.ConfigParser()
    str_2 = config_parser_0.__repr__()
    assert str_2 == 'ConfigParser("None")'
    config_parser_0.__setitem__(str_1, str_1)

def test_case_29():
    epoch_config_parser_0 = module_0.EpochConfigParser()
    assert f'{type(epoch_config_parser_0).__module__}.{type(epoch_config_parser_0).__qualname__}' == 'epochs.configparser.EpochConfigParser'
    assert f'{type(epoch_config_parser_0.spec).__module__}.{type(epoch_config_parser_0.spec).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.spec) == 1
    assert f'{type(epoch_config_parser_0.config).__module__}.{type(epoch_config_parser_0.config).__qualname__}' == 'epochs.configparser.ConfigParser'
    assert len(epoch_config_parser_0.config) == 1
    assert f'{type(module_0.EpochConfigParser.date).__module__}.{type(module_0.EpochConfigParser.date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.EpochConfigParser.formats).__module__}.{type(module_0.EpochConfigParser.formats).__qualname__}' == 'builtins.property'
    bool_0 = True
    bool_1 = epoch_config_parser_0.is_valid(bool_0)
    assert bool_1 is True
    str_0 = epoch_config_parser_0.__repr__()
    assert str_0 == 'EpochConfigParser("None")'
    bool_2 = epoch_config_parser_0.is_valid()
    str_1 = epoch_config_parser_0.__str__()
    assert str_1 == ''
    bool_3 = True
    var_0 = epoch_config_parser_0.read(str_1)
    var_1 = var_0.__repr__()
    bool_4 = epoch_config_parser_0.is_valid()
    str_2 = '/valid type: '
    config_parser_0 = module_0.ConfigParser(str_2)
    var_2 = config_parser_0.__setitem__(bool_3, config_parser_0)
    none_type_0 = config_parser_0.write(var_1, var_1)
    bool_5 = config_parser_0.is_valid()
    assert bool_5 is False
    none_type_1 = config_parser_0.write(epoch_config_parser_0)