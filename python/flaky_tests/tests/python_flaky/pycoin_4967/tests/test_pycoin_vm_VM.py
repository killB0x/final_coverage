# Automatically generated by Pynguin.
import pytest
import pycoin.vm.VM as module_0
import pycoin.coins.SolutionChecker as module_1

def test_case_0():
    str_0 = 'E]\nm9=G}9s\\SN'
    var_0 = module_0.VM(str_0, str_0, str_0, str_0, str_0)
    assert var_0.pc == 0
    assert var_0.stack == 'E]\nm9=G}9s\\SN'
    assert var_0.op_count == 0
    assert var_0.begin_code_hash == 0
    assert module_0.VM.MAX_SCRIPT_LENGTH == 10000
    assert module_0.VM.MAX_BLOB_LENGTH == 520
    assert module_0.VM.MAX_OP_COUNT == 201
    assert module_0.VM.MAX_STACK_SIZE == 1000
    assert f'{type(module_0.VM.bool_from_script_bytes).__module__}.{type(module_0.VM.bool_from_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.bool_to_script_bytes).__module__}.{type(module_0.VM.bool_to_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.generator_for_signature_type).__module__}.{type(module_0.VM.generator_for_signature_type).__qualname__}' == 'builtins.method'

def test_case_1():
    tuple_0 = ()
    v_m_0 = module_0.VM(tuple_0, tuple_0, tuple_0, tuple_0, tuple_0)
    assert v_m_0.pc == 0
    assert v_m_0.stack == []
    assert v_m_0.op_count == 0
    assert v_m_0.begin_code_hash == 0
    assert module_0.VM.MAX_SCRIPT_LENGTH == 10000
    assert module_0.VM.MAX_BLOB_LENGTH == 520
    assert module_0.VM.MAX_OP_COUNT == 201
    assert module_0.VM.MAX_STACK_SIZE == 1000
    assert f'{type(module_0.VM.bool_from_script_bytes).__module__}.{type(module_0.VM.bool_from_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.bool_to_script_bytes).__module__}.{type(module_0.VM.bool_to_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.generator_for_signature_type).__module__}.{type(module_0.VM.generator_for_signature_type).__qualname__}' == 'builtins.method'

def test_case_2():
    none_type_0 = None
    v_m_0 = module_0.VM(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)
    assert v_m_0.pc == 0
    assert v_m_0.stack == []
    assert v_m_0.op_count == 0
    assert v_m_0.begin_code_hash == 0
    assert module_0.VM.MAX_SCRIPT_LENGTH == 10000
    assert module_0.VM.MAX_BLOB_LENGTH == 520
    assert module_0.VM.MAX_OP_COUNT == 201
    assert module_0.VM.MAX_STACK_SIZE == 1000
    assert f'{type(module_0.VM.bool_from_script_bytes).__module__}.{type(module_0.VM.bool_from_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.bool_to_script_bytes).__module__}.{type(module_0.VM.bool_to_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.generator_for_signature_type).__module__}.{type(module_0.VM.generator_for_signature_type).__qualname__}' == 'builtins.method'
    with pytest.raises(module_1.ScriptError):
        v_m_0.pop()

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    v_m_0 = module_0.VM(bool_0, bool_0, bool_0, bool_0)
    assert v_m_0.pc == 0
    assert v_m_0.stack == []
    assert v_m_0.op_count == 0
    assert v_m_0.begin_code_hash == 0
    assert module_0.VM.MAX_SCRIPT_LENGTH == 10000
    assert module_0.VM.MAX_BLOB_LENGTH == 520
    assert module_0.VM.MAX_OP_COUNT == 201
    assert module_0.VM.MAX_STACK_SIZE == 1000
    assert f'{type(module_0.VM.bool_from_script_bytes).__module__}.{type(module_0.VM.bool_from_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.bool_to_script_bytes).__module__}.{type(module_0.VM.bool_to_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.generator_for_signature_type).__module__}.{type(module_0.VM.generator_for_signature_type).__qualname__}' == 'builtins.method'
    var_0 = v_m_0.append(bool_0)
    assert v_m_0.stack == [True]
    var_1 = var_0.__repr__()
    dict_0 = {}
    v_m_1 = module_0.VM(dict_0, var_1, dict_0, bool_0)
    assert v_m_1.pc == 0
    assert v_m_1.op_count == 0
    assert v_m_1.begin_code_hash == 0
    var_2 = v_m_1.eval_script()
    v_m_2 = module_0.VM(var_1, bool_0, var_1, bool_0, var_1)
    assert v_m_2.pc == 0
    assert v_m_2.op_count == 0
    assert v_m_2.begin_code_hash == 0
    var_3 = v_m_2.post_script_check()
    v_m_2.pop()

@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    v_m_0 = module_0.VM(tuple_0, tuple_0, tuple_0, tuple_0, tuple_0)
    assert v_m_0.pc == 0
    assert v_m_0.stack == []
    assert v_m_0.op_count == 0
    assert v_m_0.begin_code_hash == 0
    assert module_0.VM.MAX_SCRIPT_LENGTH == 10000
    assert module_0.VM.MAX_BLOB_LENGTH == 520
    assert module_0.VM.MAX_OP_COUNT == 201
    assert module_0.VM.MAX_STACK_SIZE == 1000
    assert f'{type(module_0.VM.bool_from_script_bytes).__module__}.{type(module_0.VM.bool_from_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.bool_to_script_bytes).__module__}.{type(module_0.VM.bool_to_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.generator_for_signature_type).__module__}.{type(module_0.VM.generator_for_signature_type).__qualname__}' == 'builtins.method'
    list_0 = [v_m_0, v_m_0, tuple_0]
    str_0 = '<v211C><<g,RgA3OPiQ'
    dict_0 = {str_0: v_m_0}
    v_m_0.__getitem__(*list_0, **dict_0)

def test_case_5():
    tuple_0 = ()
    v_m_0 = module_0.VM(tuple_0, tuple_0, tuple_0, tuple_0, tuple_0)
    assert v_m_0.pc == 0
    assert v_m_0.stack == []
    assert v_m_0.op_count == 0
    assert v_m_0.begin_code_hash == 0
    assert module_0.VM.MAX_SCRIPT_LENGTH == 10000
    assert module_0.VM.MAX_BLOB_LENGTH == 520
    assert module_0.VM.MAX_OP_COUNT == 201
    assert module_0.VM.MAX_STACK_SIZE == 1000
    assert f'{type(module_0.VM.bool_from_script_bytes).__module__}.{type(module_0.VM.bool_from_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.bool_to_script_bytes).__module__}.{type(module_0.VM.bool_to_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.generator_for_signature_type).__module__}.{type(module_0.VM.generator_for_signature_type).__qualname__}' == 'builtins.method'
    var_0 = v_m_0.eval_script()

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    bool_0 = True
    v_m_0 = module_0.VM(none_type_0, none_type_0, bool_0, bool_0)
    assert v_m_0.pc == 0
    assert v_m_0.stack == []
    assert v_m_0.op_count == 0
    assert v_m_0.begin_code_hash == 0
    assert module_0.VM.MAX_SCRIPT_LENGTH == 10000
    assert module_0.VM.MAX_BLOB_LENGTH == 520
    assert module_0.VM.MAX_OP_COUNT == 201
    assert module_0.VM.MAX_STACK_SIZE == 1000
    assert f'{type(module_0.VM.bool_from_script_bytes).__module__}.{type(module_0.VM.bool_from_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.bool_to_script_bytes).__module__}.{type(module_0.VM.bool_to_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.generator_for_signature_type).__module__}.{type(module_0.VM.generator_for_signature_type).__qualname__}' == 'builtins.method'
    v_m_0.eval_instruction()

def test_case_7():
    str_0 = 'E]\nm9=G}9s\\SN'
    with pytest.raises(module_1.ScriptError):
        module_0.conditional_error_f(str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    bool_0 = True
    v_m_0 = module_0.VM(none_type_0, none_type_0, bool_0, bool_0)
    assert v_m_0.pc == 0
    assert v_m_0.stack == []
    assert v_m_0.op_count == 0
    assert v_m_0.begin_code_hash == 0
    assert module_0.VM.MAX_SCRIPT_LENGTH == 10000
    assert module_0.VM.MAX_BLOB_LENGTH == 520
    assert module_0.VM.MAX_OP_COUNT == 201
    assert module_0.VM.MAX_STACK_SIZE == 1000
    assert f'{type(module_0.VM.bool_from_script_bytes).__module__}.{type(module_0.VM.bool_from_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.bool_to_script_bytes).__module__}.{type(module_0.VM.bool_to_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.generator_for_signature_type).__module__}.{type(module_0.VM.generator_for_signature_type).__qualname__}' == 'builtins.method'
    var_0 = v_m_0.append(v_m_0)
    assert f'{type(v_m_0.stack).__module__}.{type(v_m_0.stack).__qualname__}' == 'builtins.list'
    assert len(v_m_0.stack) == 1
    v_m_0.eval_instruction()

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'E]\nm9=G}9s\\SN'
    v_m_0 = module_0.VM(str_0, str_0, str_0, str_0, str_0)
    assert v_m_0.pc == 0
    assert v_m_0.stack == 'E]\nm9=G}9s\\SN'
    assert v_m_0.op_count == 0
    assert v_m_0.begin_code_hash == 0
    assert module_0.VM.MAX_SCRIPT_LENGTH == 10000
    assert module_0.VM.MAX_BLOB_LENGTH == 520
    assert module_0.VM.MAX_OP_COUNT == 201
    assert module_0.VM.MAX_STACK_SIZE == 1000
    assert f'{type(module_0.VM.bool_from_script_bytes).__module__}.{type(module_0.VM.bool_from_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.bool_to_script_bytes).__module__}.{type(module_0.VM.bool_to_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.generator_for_signature_type).__module__}.{type(module_0.VM.generator_for_signature_type).__qualname__}' == 'builtins.method'
    v_m_0.eval_script()

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    v_m_0 = module_0.VM(bool_0, bool_0, bool_0, bool_0)
    assert v_m_0.pc == 0
    assert v_m_0.stack == []
    assert v_m_0.op_count == 0
    assert v_m_0.begin_code_hash == 0
    assert module_0.VM.MAX_SCRIPT_LENGTH == 10000
    assert module_0.VM.MAX_BLOB_LENGTH == 520
    assert module_0.VM.MAX_OP_COUNT == 201
    assert module_0.VM.MAX_STACK_SIZE == 1000
    assert f'{type(module_0.VM.bool_from_script_bytes).__module__}.{type(module_0.VM.bool_from_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.bool_to_script_bytes).__module__}.{type(module_0.VM.bool_to_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.generator_for_signature_type).__module__}.{type(module_0.VM.generator_for_signature_type).__qualname__}' == 'builtins.method'
    var_0 = v_m_0.append(bool_0)
    assert v_m_0.stack == [False]
    set_0 = {bool_0, v_m_0, bool_0, var_0, bool_0}
    dict_0 = {}
    v_m_1 = module_0.VM(dict_0, set_0, bool_0, bool_0)
    assert v_m_1.pc == 0
    assert v_m_1.op_count == 0
    assert v_m_1.begin_code_hash == 0
    var_1 = v_m_1.eval_script()
    v_m_2 = module_0.VM(set_0, bool_0, set_0, bool_0, set_0)
    assert v_m_2.pc == 0
    assert v_m_2.op_count == 0
    assert v_m_2.begin_code_hash == 0
    var_2 = v_m_2.post_script_check()
    v_m_0.pop_int()

@pytest.mark.xfail(strict=True)
def test_case_11():
    tuple_0 = ()
    v_m_0 = module_0.VM(tuple_0, tuple_0, tuple_0, tuple_0, tuple_0)
    assert v_m_0.pc == 0
    assert v_m_0.stack == []
    assert v_m_0.op_count == 0
    assert v_m_0.begin_code_hash == 0
    assert module_0.VM.MAX_SCRIPT_LENGTH == 10000
    assert module_0.VM.MAX_BLOB_LENGTH == 520
    assert module_0.VM.MAX_OP_COUNT == 201
    assert module_0.VM.MAX_STACK_SIZE == 1000
    assert f'{type(module_0.VM.bool_from_script_bytes).__module__}.{type(module_0.VM.bool_from_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.bool_to_script_bytes).__module__}.{type(module_0.VM.bool_to_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.generator_for_signature_type).__module__}.{type(module_0.VM.generator_for_signature_type).__qualname__}' == 'builtins.method'
    var_0 = v_m_0.eval_script()
    tuple_1 = (var_0,)
    v_m_0.push_int(tuple_1)

def test_case_12():
    bool_0 = True
    v_m_0 = module_0.VM(bool_0, bool_0, bool_0, bool_0, traceback_f=bool_0)
    assert v_m_0.pc == 0
    assert v_m_0.stack == []
    assert v_m_0.op_count == 0
    assert v_m_0.begin_code_hash == 0
    assert module_0.VM.MAX_SCRIPT_LENGTH == 10000
    assert module_0.VM.MAX_BLOB_LENGTH == 520
    assert module_0.VM.MAX_OP_COUNT == 201
    assert module_0.VM.MAX_STACK_SIZE == 1000
    assert f'{type(module_0.VM.bool_from_script_bytes).__module__}.{type(module_0.VM.bool_from_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.bool_to_script_bytes).__module__}.{type(module_0.VM.bool_to_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.generator_for_signature_type).__module__}.{type(module_0.VM.generator_for_signature_type).__qualname__}' == 'builtins.method'
    tuple_0 = ()
    v_m_1 = module_0.VM(tuple_0, tuple_0, tuple_0, tuple_0, tuple_0)
    assert v_m_1.pc == 0
    assert v_m_1.stack == []
    assert v_m_1.op_count == 0
    assert v_m_1.begin_code_hash == 0
    with pytest.raises(module_1.ScriptError):
        v_m_0.__getitem__(*v_m_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = 1868
    list_0 = [int_0, int_0]
    v_m_0 = module_0.VM(list_0, list_0, int_0, int_0)
    assert v_m_0.pc == 0
    assert v_m_0.stack == []
    assert v_m_0.op_count == 0
    assert v_m_0.begin_code_hash == 0
    assert module_0.VM.MAX_SCRIPT_LENGTH == 10000
    assert module_0.VM.MAX_BLOB_LENGTH == 520
    assert module_0.VM.MAX_OP_COUNT == 201
    assert module_0.VM.MAX_STACK_SIZE == 1000
    assert f'{type(module_0.VM.bool_from_script_bytes).__module__}.{type(module_0.VM.bool_from_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.bool_to_script_bytes).__module__}.{type(module_0.VM.bool_to_script_bytes).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.VM.generator_for_signature_type).__module__}.{type(module_0.VM.generator_for_signature_type).__qualname__}' == 'builtins.method'
    v_m_0.eval_script()