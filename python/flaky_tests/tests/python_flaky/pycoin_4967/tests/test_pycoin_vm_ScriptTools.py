# Automatically generated by Pynguin.
import pytest
import pycoin.vm.ScriptTools as module_0
import binascii as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '2n'
    list_0 = [str_0]
    script_tools_0 = module_0.ScriptTools(list_0, list_0, list_0)
    script_tools_0.compile(str_0)

def test_case_1():
    tuple_0 = ()
    script_tools_0 = module_0.ScriptTools(tuple_0, tuple_0, tuple_0)

def test_case_2():
    tuple_0 = ()
    script_tools_0 = module_0.ScriptTools(tuple_0, tuple_0, tuple_0)
    var_0 = script_tools_0.opcode_list(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    bool_0 = True
    script_tools_0 = module_0.ScriptTools(tuple_0, tuple_0, bool_0)
    var_0 = script_tools_0.int_for_opcode(bool_0)
    script_tools_0.disassemble(var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    script_tools_0 = module_0.ScriptTools(tuple_0, tuple_0, tuple_0)
    script_tools_0.disassemble(script_tools_0)

def test_case_5():
    tuple_0 = ()
    script_tools_0 = module_0.ScriptTools(tuple_0, tuple_0, tuple_0)
    var_0 = script_tools_0.disassemble_for_opcode_data(tuple_0, tuple_0)
    assert var_0 == '???'
    var_1 = script_tools_0.disassemble_for_opcode_data(tuple_0, var_0)
    assert var_1 == '???'

@pytest.mark.xfail(strict=True)
def test_case_6():
    set_0 = set()
    script_tools_0 = module_0.ScriptTools(set_0, set_0, set_0)
    var_0 = script_tools_0.compile_push_data_list(set_0)
    var_0.opcode_list(set_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "'9gP.\x0cP[nf"
    list_0 = []
    script_tools_0 = module_0.ScriptTools(list_0, list_0, list_0)
    script_tools_0.compile_push_data_list(str_0)

def test_case_8():
    tuple_0 = ()
    script_tools_0 = module_0.ScriptTools(tuple_0, tuple_0, tuple_0)
    var_0 = script_tools_0.write_push_data(tuple_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    tuple_0 = ()
    bool_0 = True
    script_tools_0 = module_0.ScriptTools(tuple_0, tuple_0, bool_0)
    var_0 = script_tools_0.disassemble_for_opcode_data(tuple_0, tuple_0)
    assert var_0 == '???'
    script_tools_0.disassemble(var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    tuple_0 = ()
    none_type_0 = None
    bool_0 = True
    script_tools_0 = module_0.ScriptTools(tuple_0, bool_0, bool_0)
    var_0 = script_tools_0.disassemble_for_opcode_data(none_type_0, none_type_0)
    assert var_0 == '???'
    module_1.Error(*var_0, **var_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '2'
    list_0 = []
    script_tools_0 = module_0.ScriptTools(list_0, list_0, list_0)
    script_tools_0.compile(str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'L##LL'
    list_0 = []
    script_tools_0 = module_0.ScriptTools(list_0, list_0, list_0)
    script_tools_0.compile(str_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '8B'
    list_0 = [str_0, str_0]
    script_tools_0 = module_0.ScriptTools(list_0, list_0, list_0)
    script_tools_0.compile(str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    tuple_0 = ()
    script_tools_0 = module_0.ScriptTools(tuple_0, tuple_0, tuple_0)
    var_0 = script_tools_0.disassemble(tuple_0)
    assert var_0 == ''
    var_1 = script_tools_0.int_for_opcode(var_0)
    var_2 = script_tools_0.compile(var_0)
    var_0.opcode_list(var_1)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '-'
    str_1 = '-K'
    list_0 = [str_1]
    script_tools_0 = module_0.ScriptTools(list_0, list_0, list_0)
    script_tools_0.compile(str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = '0'
    list_0 = []
    script_tools_0 = module_0.ScriptTools(list_0, list_0, list_0)
    script_tools_0.compile(str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = '0X'
    list_0 = []
    script_tools_0 = module_0.ScriptTools(list_0, list_0, list_0)
    var_0 = script_tools_0.opcode_list(list_0)
    var_1 = script_tools_0.disassemble_for_opcode_data(str_0, str_0)
    assert var_1 == '???'
    list_1 = []
    var_2 = script_tools_0.disassemble(list_1)
    var_3 = script_tools_0.compile_push_data_list(list_0)
    var_4 = script_tools_0.compile(str_0)
    assert var_4 == b''
    bool_0 = True
    var_3.compile_expression(bool_0)

def test_case_18():
    str_0 = "'9gP.\x0cP[nf"
    list_0 = []
    script_tools_0 = module_0.ScriptTools(list_0, list_0, list_0)
    with pytest.raises(SyntaxError):
        script_tools_0.compile_expression(str_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = "'"
    list_0 = []
    script_tools_0 = module_0.ScriptTools(list_0, list_0, list_0)
    var_0 = script_tools_0.opcode_list(list_0)
    var_1 = script_tools_0.disassemble_for_opcode_data(str_0, str_0)
    assert var_1 == '???'
    list_1 = []
    var_2 = script_tools_0.disassemble(list_1)
    var_3 = script_tools_0.compile_push_data_list(list_0)
    script_tools_0.compile(str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = '-K'
    list_0 = [str_0]
    script_tools_0 = module_0.ScriptTools(list_0, list_0, list_0)
    var_0 = script_tools_0.int_for_opcode(script_tools_0)
    list_1 = [var_0, str_0]
    script_tools_0.compile_push_data_list(list_1)