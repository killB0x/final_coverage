# Automatically generated by Pynguin.
import pytest
import happybase_mock.connection as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b'\xb6R\xa3\xb9\x98A\xa6:\xe6\x96\x86\xe8?\x13\xd9\x8e+\x15'
    dict_0 = {bytes_0: bytes_0}
    module_0.Connection(dict_0, table_prefix=dict_0, table_prefix_separator=bytes_0)

def test_case_1():
    singleton_0 = module_0.Singleton()
    assert f'{type(singleton_0).__module__}.{type(singleton_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert f'{type(singleton_0.host).__module__}.{type(singleton_0.host).__qualname__}' == 'happybase_mock.table.Table'
    assert singleton_0.port == 9090
    assert singleton_0.timeout is None
    assert singleton_0.table_prefix is None
    assert singleton_0.table_prefix_separator == '_'
    assert singleton_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'

def test_case_2():
    singleton_0 = module_0.Singleton()
    assert f'{type(singleton_0).__module__}.{type(singleton_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert singleton_0.port == 9090
    assert singleton_0.timeout is None
    assert singleton_0.table_prefix is None
    assert singleton_0.table_prefix_separator == '_'
    assert singleton_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'

@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.SingletonMeta()

def test_case_4():
    connection_0 = module_0.Connection()
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert f'{type(connection_0.host).__module__}.{type(connection_0.host).__qualname__}' == 'happybase_mock.table.Table'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    connection_0 = module_0.Connection(port=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port is True
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    var_0 = connection_0.compact_table(bool_0)
    module_0.Connection(bool_0, table_prefix=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    bool_0 = False
    connection_0 = module_0.Connection(port=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    var_0 = connection_0.table(none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'happybase_mock.table.Table'
    assert var_0.name is None
    assert f'{type(var_0.connection).__module__}.{type(var_0.connection).__qualname__}' == 'happybase_mock.connection.Connection'
    var_1 = connection_0.open()
    var_2 = connection_0.__del__()
    connection_1 = module_0.Connection(var_0, table_prefix=none_type_0)
    assert f'{type(connection_1).__module__}.{type(connection_1).__qualname__}' == 'happybase_mock.connection.Connection'
    assert f'{type(connection_1.host).__module__}.{type(connection_1.host).__qualname__}' == 'happybase_mock.table.Table'
    assert connection_1.port == 9090
    assert connection_1.timeout is None
    assert connection_1.table_prefix is None
    assert connection_1.table_prefix_separator == '_'
    assert connection_1.compat == '0.96'
    var_3 = connection_1.table(var_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'happybase_mock.table.Table'
    assert f'{type(var_3.name).__module__}.{type(var_3.name).__qualname__}' == 'happybase_mock.table.Table'
    assert f'{type(var_3.connection).__module__}.{type(var_3.connection).__qualname__}' == 'happybase_mock.connection.Connection'
    connection_0.delete_table(var_1, connection_1)

def test_case_7():
    bool_0 = False
    connection_0 = module_0.Connection(port=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    var_0 = module_0.Singleton()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert var_0.port == 9090
    assert var_0.timeout is None
    assert var_0.table_prefix is None
    assert var_0.table_prefix_separator == '_'
    assert var_0.compat == '0.96'
    connection_1 = module_0.Connection(bool_0, table_prefix=bool_0)
    assert f'{type(connection_1).__module__}.{type(connection_1).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_1.port == 9090
    assert connection_1.timeout is None
    assert connection_1.table_prefix is None
    assert connection_1.table_prefix_separator == '_'
    assert connection_1.compat == '0.96'
    var_1 = connection_1.open()

@pytest.mark.xfail(strict=True)
def test_case_8():
    connection_0 = module_0.Connection()
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert f'{type(connection_0.host).__module__}.{type(connection_0.host).__qualname__}' == 'happybase_mock.table.Table'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    connection_0.disable_table(connection_0)

def test_case_9():
    bool_0 = False
    connection_0 = module_0.Connection(bool_0, table_prefix=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert f'{type(connection_0.host).__module__}.{type(connection_0.host).__qualname__}' == 'happybase_mock.table.Table'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    var_0 = connection_0.open()
    connection_1 = module_0.Connection()
    assert f'{type(connection_1.host).__module__}.{type(connection_1.host).__qualname__}' == 'happybase_mock.table.Table'
    assert connection_1.port == 9090
    assert connection_1.table_prefix_separator == '_'
    assert connection_1.compat == '0.96'
    var_1 = connection_0.table(bool_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'happybase_mock.table.Table'
    assert var_1.name is False
    assert f'{type(var_1.connection).__module__}.{type(var_1.connection).__qualname__}' == 'happybase_mock.connection.Connection'

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    connection_0 = module_0.Connection(bool_0, table_prefix=bool_0, table_prefix_separator=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert f'{type(connection_0.host).__module__}.{type(connection_0.host).__qualname__}' == 'happybase_mock.table.Table'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    var_0 = connection_0.close()
    connection_0.disable_table(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    connection_0 = module_0.Connection(bool_0, table_prefix=bool_0, table_prefix_separator=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host is True
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is True
    assert connection_0.table_prefix_separator is True
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    singleton_0 = module_0.Singleton()
    assert f'{type(singleton_0).__module__}.{type(singleton_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert f'{type(singleton_0.host).__module__}.{type(singleton_0.host).__qualname__}' == 'happybase_mock.table.Table'
    assert singleton_0.port == 9090
    assert singleton_0.timeout is None
    assert singleton_0.table_prefix is None
    assert singleton_0.table_prefix_separator == '_'
    assert singleton_0.compat == '0.96'
    var_0 = connection_0.__del__()
    connection_0.tables()

@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    connection_0 = module_0.Connection(port=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port is True
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    connection_0.enable_table(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    list_0 = []
    bool_0 = False
    connection_0 = module_0.Connection(port=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    singleton_0 = module_0.Singleton()
    assert f'{type(singleton_0).__module__}.{type(singleton_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert f'{type(singleton_0.host).__module__}.{type(singleton_0.host).__qualname__}' == 'happybase_mock.table.Table'
    assert singleton_0.port == 9090
    assert singleton_0.timeout is None
    assert singleton_0.table_prefix is None
    assert singleton_0.table_prefix_separator == '_'
    assert singleton_0.compat == '0.96'
    connection_1 = connection_0.close()
    var_0 = connection_0.tables()
    connection_2 = module_0.Connection()
    assert f'{type(connection_2).__module__}.{type(connection_2).__qualname__}' == 'happybase_mock.connection.Connection'
    assert f'{type(connection_2.host).__module__}.{type(connection_2.host).__qualname__}' == 'happybase_mock.table.Table'
    assert connection_2.port == 9090
    assert connection_2.timeout is None
    assert connection_2.table_prefix is None
    assert connection_2.table_prefix_separator == '_'
    assert connection_2.compat == '0.96'
    var_0.create_table(connection_2, list_0)

def test_case_14():
    none_type_0 = None
    connection_0 = module_0.Connection()
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    var_0 = connection_0.table(none_type_0, none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'happybase_mock.table.Table'
    assert var_0.name is None
    assert f'{type(var_0.connection).__module__}.{type(var_0.connection).__qualname__}' == 'happybase_mock.connection.Connection'

def test_case_15():
    bool_0 = True
    connection_0 = module_0.Connection(port=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port is True
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    singleton_0 = connection_0.table(bool_0)
    assert f'{type(singleton_0).__module__}.{type(singleton_0).__qualname__}' == 'happybase_mock.table.Table'
    assert singleton_0.name is True
    assert f'{type(singleton_0.connection).__module__}.{type(singleton_0.connection).__qualname__}' == 'happybase_mock.connection.Connection'

@pytest.mark.xfail(strict=True)
def test_case_16():
    connection_0 = module_0.Connection()
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    connection_0.delete_table(connection_0)

def test_case_17():
    bool_0 = False
    connection_0 = module_0.Connection(port=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    var_0 = connection_0.is_table_enabled(bool_0)
    assert var_0 is True
    singleton_0 = module_0.Singleton()
    assert f'{type(singleton_0).__module__}.{type(singleton_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert singleton_0.port == 9090
    assert singleton_0.timeout is None
    assert singleton_0.table_prefix is None
    assert singleton_0.table_prefix_separator == '_'
    assert singleton_0.compat == '0.96'

@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    bool_0 = False
    connection_0 = module_0.Connection(port=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    set_0 = {none_type_0, bool_0}
    connection_0.create_table(none_type_0, set_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = False
    connection_0 = module_0.Connection(bool_0, table_prefix=bool_0, table_prefix_separator=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    var_0 = connection_0.close()
    connection_0.disable_table(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    bool_0 = False
    connection_0 = module_0.Connection(port=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    set_0 = {none_type_0, bool_0}
    connection_0.is_table_enabled(set_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    bool_0 = False
    connection_0 = module_0.Connection(port=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    dict_0 = {none_type_0: none_type_0}
    connection_0.enable_table(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = None
    bool_0 = False
    connection_0 = module_0.Connection(port=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    var_0 = connection_0.__del__()
    connection_1 = module_0.Connection(none_type_0, var_0, var_0, none_type_0, connection_0, none_type_0, none_type_0, var_0)
    assert f'{type(connection_1).__module__}.{type(connection_1).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_1.host == 'localhost'
    assert connection_1.port == 9090
    assert connection_1.timeout is None
    assert f'{type(connection_1.table_prefix).__module__}.{type(connection_1.table_prefix).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_1.table_prefix_separator is None
    assert connection_1.compat is None
    connection_1.table(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    list_0 = []
    bool_0 = False
    connection_0 = module_0.Connection(port=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    singleton_0 = module_0.Singleton()
    assert f'{type(singleton_0).__module__}.{type(singleton_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert singleton_0.host == 'localhost'
    assert singleton_0.port == 9090
    assert singleton_0.timeout is None
    connection_1 = module_0.Connection(bool_0, table_prefix=bool_0)
    assert f'{type(connection_1).__module__}.{type(connection_1).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_1.host == 'localhost'
    assert connection_1.port == 9090
    assert connection_1.timeout is None
    connection_0.disable_table(list_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    str_0 = 'id'
    connection_0 = module_0.Connection(none_type_0, table_prefix=str_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix == 'id'
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    var_0 = connection_0.tables()
    connection_0.table(connection_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    none_type_0 = None
    bool_0 = False
    connection_0 = module_0.Connection(port=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    var_0 = connection_0.is_table_enabled(bool_0)
    assert var_0 is True
    var_1 = connection_0.table(none_type_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'happybase_mock.table.Table'
    assert var_1.name is None
    assert f'{type(var_1.connection).__module__}.{type(var_1.connection).__qualname__}' == 'happybase_mock.connection.Connection'
    var_2 = connection_0.open()
    var_3 = connection_0.__del__()
    connection_1 = module_0.Connection(var_1, table_prefix=none_type_0)
    assert f'{type(connection_1).__module__}.{type(connection_1).__qualname__}' == 'happybase_mock.connection.Connection'
    assert f'{type(connection_1.host).__module__}.{type(connection_1.host).__qualname__}' == 'happybase_mock.table.Table'
    assert connection_1.port == 9090
    assert connection_1.timeout is None
    assert connection_1.table_prefix is None
    assert connection_1.table_prefix_separator == '_'
    assert connection_1.compat == '0.96'
    var_4 = connection_1.table(var_1)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'happybase_mock.table.Table'
    assert f'{type(var_4.name).__module__}.{type(var_4.name).__qualname__}' == 'happybase_mock.table.Table'
    assert f'{type(var_4.connection).__module__}.{type(var_4.connection).__qualname__}' == 'happybase_mock.connection.Connection'
    var_5 = connection_0.table(bool_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'happybase_mock.table.Table'
    assert var_5.name is False
    assert f'{type(var_5.connection).__module__}.{type(var_5.connection).__qualname__}' == 'happybase_mock.connection.Connection'
    var_0.regions()

@pytest.mark.xfail(strict=True)
def test_case_26():
    none_type_0 = None
    bool_0 = False
    connection_0 = module_0.Connection(port=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    var_0 = connection_0.is_table_enabled(bool_0)
    assert var_0 is True
    var_1 = connection_0.__del__()
    connection_1 = module_0.Connection(none_type_0, table_prefix=none_type_0)
    assert f'{type(connection_1).__module__}.{type(connection_1).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_1.host == 'localhost'
    assert connection_1.port == 9090
    assert connection_1.timeout is None
    assert connection_1.table_prefix is None
    assert connection_1.table_prefix_separator == '_'
    assert connection_1.compat == '0.96'
    var_2 = connection_1.table(connection_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'happybase_mock.table.Table'
    assert f'{type(var_2.name).__module__}.{type(var_2.name).__qualname__}' == 'happybase_mock.connection.Connection'
    assert f'{type(var_2.connection).__module__}.{type(var_2.connection).__qualname__}' == 'happybase_mock.connection.Connection'
    connection_0.delete_table(var_0, connection_1)
    var_3 = var_2.create_table(var_2, connection_1)

@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = False
    connection_0 = module_0.Connection(port=bool_0)
    assert f'{type(connection_0).__module__}.{type(connection_0).__qualname__}' == 'happybase_mock.connection.Connection'
    assert connection_0.host == 'localhost'
    assert connection_0.port == 9090
    assert connection_0.timeout is None
    assert connection_0.table_prefix is None
    assert connection_0.table_prefix_separator == '_'
    assert connection_0.compat == '0.96'
    assert module_0.DEFAULT_HOST == 'localhost'
    assert module_0.DEFAULT_PORT == 9090
    assert module_0.DEFAULT_TRANSPORT == 'buffered'
    assert module_0.DEFAULT_COMPAT == '0.96'
    var_0 = connection_0.is_table_enabled(bool_0)
    assert var_0 is True
    connection_0.delete_table(bool_0, bool_0)