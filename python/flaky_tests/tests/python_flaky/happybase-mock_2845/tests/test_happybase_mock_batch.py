# Automatically generated by Pynguin.
import pytest
import happybase_mock.batch as module_0

def test_case_0():
    str_0 = 'kLa!xFkG4&go+2,3>J\x0c'
    batch_0 = module_0.Batch(str_0)
    var_0 = batch_0.send()

def test_case_1():
    int_0 = 2406
    batch_0 = module_0.Batch(int_0, transaction=int_0)
    var_0 = batch_0.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 423.01389
    str_0 = '>3(<_d'
    tuple_0 = (float_0, str_0)
    batch_0 = module_0.Batch(tuple_0, tuple_0, str_0, wal=float_0)
    batch_0.put()

@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b'\xd1'
    list_0 = [bytes_0]
    batch_0 = module_0.Batch(bytes_0)
    batch_0.delete(*list_0)

def test_case_4():
    int_0 = 2406
    batch_0 = module_0.Batch(int_0, transaction=int_0)
    var_0 = batch_0.__enter__()
    var_1 = var_0.__exit__(var_0, int_0, batch_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'\xfa\x89\xabl'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    str_0 = '^@H(E{iAT><'
    batch_0 = module_0.Batch(str_0)
    var_0 = batch_0.__enter__()
    var_1 = var_0.__exit__(bytes_0, set_0, bytes_0)
    var_2 = module_0.Batch(var_0)
    var_3 = var_2.put()
    var_3.put()

@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b'\xfa\x89\xabl'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    str_0 = '^@H(E{iAT><'
    batch_0 = module_0.Batch(str_0)
    var_0 = batch_0.__enter__()
    batch_1 = module_0.Batch(batch_0, transaction=batch_0)
    var_1 = batch_0.__exit__(var_0, var_0, batch_0)
    var_2 = batch_1.delete(*set_0)
    batch_2 = module_0.Batch(set_0, batch_size=var_2, wal=var_0)
    batch_1.send()