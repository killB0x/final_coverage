# Automatically generated by Pynguin.
import pytest
import paragraph.types as module_0
import attr._next_gen as module_1
import inspect as module_2
import platform as module_3

def test_case_0():
    variable_0 = module_0.Variable()

def test_case_1():
    op_0 = module_0.Op()
    variable_0 = module_1.asdict(op_0, filter=op_0, value_serializer=op_0)

def test_case_2():
    op_0 = module_0.Op()

def test_case_3():
    op_0 = module_0.Op()
    var_0 = op_0.__repr__()
    variable_0 = op_0.op(*var_0)
    assert f'{type(variable_0).__module__}.{type(variable_0).__qualname__}' == 'paragraph.types.Variable'
    assert variable_0.name is None
    assert variable_0.args == {0: '_', 1: 'r', 2: 'u', 3: 'n'}
    assert variable_0.dependencies == {}

@pytest.mark.xfail(strict=True)
def test_case_4():
    op_0 = module_0.Op()
    var_0 = module_2.isgeneratorfunction(op_0)
    var_1 = var_0.__gt__(op_0)
    requirement_0 = op_0.arg_requirements(op_0)
    var_2 = op_0.__call__()
    var_3 = var_1.__hash__()
    requirement_0.merge(var_3)

def test_case_5():
    bool_0 = False
    op_0 = module_0.Op()
    var_0 = op_0.__repr__()
    variable_0 = module_0.Variable(bool_0)
    variable_1 = op_0.op(*var_0)
    assert f'{type(variable_1).__module__}.{type(variable_1).__qualname__}' == 'paragraph.types.Variable'
    assert variable_1.name is None
    assert variable_1.args == {0: '_', 1: 'r', 2: 'u', 3: 'n'}
    assert variable_1.dependencies == {}
    op_1 = module_0.op(var_0)
    var_1 = variable_1.__hash__()
    var_2 = op_0.__call__(*var_0)

def test_case_6():
    op_0 = module_0.Op()
    var_0 = module_3.mac_ver(machine=op_0)
    variable_0 = op_0.op(*var_0)
    assert f'{type(variable_0).__module__}.{type(variable_0).__qualname__}' == 'paragraph.types.Variable'
    assert variable_0.name is None
    assert f'{type(variable_0.args).__module__}.{type(variable_0.args).__qualname__}' == 'builtins.dict'
    assert len(variable_0.args) == 3
    assert variable_0.dependencies == {}

def test_case_7():
    op_0 = module_0.Op()
    var_0 = module_3.mac_ver(machine=op_0)
    variable_0 = module_0.Variable(var_0)
    variable_1 = op_0.op(*var_0)
    assert f'{type(variable_1).__module__}.{type(variable_1).__qualname__}' == 'paragraph.types.Variable'
    assert variable_1.name is None
    assert f'{type(variable_1.args).__module__}.{type(variable_1.args).__qualname__}' == 'builtins.dict'
    assert len(variable_1.args) == 3
    assert variable_1.dependencies == {}
    var_1 = op_0.__call__(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    op_0 = module_0.Op()
    var_0 = op_0.__repr__()
    variable_0 = module_0.Variable(bool_0)
    bool_1 = variable_0.isdependent()
    assert bool_1 is False
    variable_1 = module_0.Variable(dependencies=var_0)
    op_1 = module_0.op(op_0)
    var_1 = var_0.__ne__(var_0)
    variable_2 = op_0.op(*var_0)
    assert f'{type(variable_2).__module__}.{type(variable_2).__qualname__}' == 'paragraph.types.Variable'
    assert variable_2.name is None
    assert variable_2.args == {0: '_', 1: 'r', 2: 'u', 3: 'n'}
    assert variable_2.dependencies == {}
    list_0 = [variable_1, op_0, op_0]
    var_2 = op_0.__call__(*list_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'paragraph.types.Variable'
    assert var_2.name is None
    assert f'{type(var_2.args).__module__}.{type(var_2.args).__qualname__}' == 'builtins.dict'
    assert len(var_2.args) == 2
    assert f'{type(var_2.dependencies).__module__}.{type(var_2.dependencies).__qualname__}' == 'builtins.dict'
    assert len(var_2.dependencies) == 1
    var_0.__setattr__(op_1, op_0)

def test_case_9():
    bool_0 = False
    op_0 = module_0.Op()
    var_0 = op_0.__repr__()
    variable_0 = module_0.Variable(bool_0)
    var_1 = var_0.swapcase()
    variable_1 = op_0.op(*var_0)
    assert f'{type(variable_1).__module__}.{type(variable_1).__qualname__}' == 'paragraph.types.Variable'
    assert variable_1.name is None
    assert variable_1.args == {0: '_', 1: 'r', 2: 'u', 3: 'n'}
    assert variable_1.dependencies == {}
    var_2 = variable_1.__repr__()
    assert var_2 == '_run(_, r, u, n)'
    var_3 = var_1.__hash__()
    var_4 = op_0.__lt__(variable_1)
    var_5 = op_0.__call__(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    op_0 = module_0.Op()
    var_0 = op_0.__repr__()
    var_1 = var_0.__repr__()
    dict_0 = {bool_0: var_0, var_0: var_0, var_0: var_1}
    variable_0 = module_0.Variable(dependencies=dict_0)
    module_2.getargspec(variable_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    op_0 = module_0.Op()
    var_0 = op_0.__repr__()
    variable_0 = module_0.Variable(bool_0)
    bool_1 = variable_0.isdependent()
    assert bool_1 is False
    var_1 = var_0.__ne__(var_0)
    variable_1 = op_0.op(*var_0)
    assert f'{type(variable_1).__module__}.{type(variable_1).__qualname__}' == 'paragraph.types.Variable'
    assert variable_1.name is None
    assert variable_1.args == {0: '_', 1: 'r', 2: 'u', 3: 'n'}
    assert variable_1.dependencies == {}
    var_2 = variable_0.__repr__()
    assert var_2 is True
    var_3 = var_1.__hash__()
    var_1.__setattr__(var_3, variable_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    op_0 = module_0.Op()
    var_0 = op_0.__repr__()
    variable_0 = module_0.Variable(var_0)
    bool_0 = variable_0.isdependent()
    assert bool_0 is False
    bool_1 = variable_0.isinput()
    assert bool_1 is True
    op_1 = module_0.op(op_0)
    var_1 = var_0.__ne__(var_0)
    variable_1 = op_0.op(*var_0)
    assert f'{type(variable_1).__module__}.{type(variable_1).__qualname__}' == 'paragraph.types.Variable'
    assert variable_1.name is None
    assert variable_1.args == {0: '_', 1: 'r', 2: 'u', 3: 'n'}
    assert variable_1.dependencies == {}
    var_2 = var_1.__hash__()
    var_3 = op_0.__call__()
    var_1.__setattr__(var_2, variable_0)

def test_case_13():
    op_0 = module_0.Op()
    bool_0 = False
    op_1 = module_0.Op(thread_safe=bool_0)
    var_0 = op_1.__repr__()
    variable_0 = module_0.Variable(op_1, op_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    op_0 = module_0.Op()
    op_1 = module_0.Op()
    var_0 = op_0.__repr__()
    variable_0 = module_0.Variable(dependencies=var_0)
    str_0 = 'G&X58H-]`*nogK'
    str_1 = "K$Ie8-8aA,:|sBRQOs'5"
    dict_0 = {str_0: variable_0, str_1: op_0, var_0: op_0}
    variable_1 = op_1.op(**dict_0)
    assert f'{type(variable_1).__module__}.{type(variable_1).__qualname__}' == 'paragraph.types.Variable'
    assert variable_1.name is None
    assert f'{type(variable_1.args).__module__}.{type(variable_1.args).__qualname__}' == 'builtins.dict'
    assert len(variable_1.args) == 2
    assert f'{type(variable_1.dependencies).__module__}.{type(variable_1.dependencies).__qualname__}' == 'builtins.dict'
    assert len(variable_1.dependencies) == 1
    var_1 = var_0.__hash__()
    var_0.__call__(*op_0)