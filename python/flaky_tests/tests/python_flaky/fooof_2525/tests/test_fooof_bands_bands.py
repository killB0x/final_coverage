# Automatically generated by Pynguin.
import pytest
import fooof.bands.bands as module_0
import builtins as module_1

def test_case_0():
    bands_0 = module_0.Bands()
    assert len(bands_0) == 0
    assert f'{type(module_0.Bands.labels).__module__}.{type(module_0.Bands.labels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.definitions).__module__}.{type(module_0.Bands.definitions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.n_bands).__module__}.{type(module_0.Bands.n_bands).__qualname__}' == 'builtins.property'

def test_case_1():
    bands_0 = module_0.Bands()
    assert len(bands_0) == 0
    assert f'{type(module_0.Bands.labels).__module__}.{type(module_0.Bands.labels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.definitions).__module__}.{type(module_0.Bands.definitions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.n_bands).__module__}.{type(module_0.Bands.n_bands).__qualname__}' == 'builtins.property'
    with pytest.raises(ValueError):
        bands_0.__getitem__(bands_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bands_0 = module_0.Bands()
    assert len(bands_0) == 0
    assert f'{type(module_0.Bands.labels).__module__}.{type(module_0.Bands.labels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.definitions).__module__}.{type(module_0.Bands.definitions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.n_bands).__module__}.{type(module_0.Bands.n_bands).__qualname__}' == 'builtins.property'
    bands_1 = module_0.Bands()
    assert len(bands_1) == 0
    var_0 = bands_1.__repr__()
    set_0 = set()
    bands_0.__getitem__(set_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bands_0 = module_0.Bands()
    assert len(bands_0) == 0
    assert f'{type(module_0.Bands.labels).__module__}.{type(module_0.Bands.labels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.definitions).__module__}.{type(module_0.Bands.definitions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.n_bands).__module__}.{type(module_0.Bands.n_bands).__qualname__}' == 'builtins.property'
    object_0 = module_1.object(*bands_0)
    var_0 = bands_0.__repr__()
    bands_0.add_band(bands_0, bands_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bands_0 = module_0.Bands()
    assert len(bands_0) == 0
    assert f'{type(module_0.Bands.labels).__module__}.{type(module_0.Bands.labels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.definitions).__module__}.{type(module_0.Bands.definitions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.n_bands).__module__}.{type(module_0.Bands.n_bands).__qualname__}' == 'builtins.property'
    bands_0.__getattr__(bands_0)

def test_case_5():
    bands_0 = module_0.Bands()
    assert len(bands_0) == 0
    assert f'{type(module_0.Bands.labels).__module__}.{type(module_0.Bands.labels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.definitions).__module__}.{type(module_0.Bands.definitions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.n_bands).__module__}.{type(module_0.Bands.n_bands).__qualname__}' == 'builtins.property'
    object_0 = module_1.object(*bands_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    bands_0 = module_0.Bands()
    assert len(bands_0) == 0
    assert f'{type(module_0.Bands.labels).__module__}.{type(module_0.Bands.labels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.definitions).__module__}.{type(module_0.Bands.definitions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.n_bands).__module__}.{type(module_0.Bands.n_bands).__qualname__}' == 'builtins.property'
    bands_0.remove_band(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bands_0 = module_0.Bands()
    assert len(bands_0) == 0
    assert f'{type(module_0.Bands.labels).__module__}.{type(module_0.Bands.labels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.definitions).__module__}.{type(module_0.Bands.definitions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.n_bands).__module__}.{type(module_0.Bands.n_bands).__qualname__}' == 'builtins.property'
    var_0 = bands_0.__repr__()
    var_1 = var_0.__repr__()
    bands_0.add_band(var_1, var_1)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bands_0 = module_0.Bands()
    assert len(bands_0) == 0
    assert f'{type(module_0.Bands.labels).__module__}.{type(module_0.Bands.labels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.definitions).__module__}.{type(module_0.Bands.definitions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.n_bands).__module__}.{type(module_0.Bands.n_bands).__qualname__}' == 'builtins.property'
    object_0 = module_1.object(*bands_0)
    bands_1 = module_0.Bands()
    assert len(bands_1) == 0
    var_0 = object_0.__repr__()
    bands_0.add_band(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.Bands(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '\x0b/'
    bands_0 = module_0.Bands()
    assert len(bands_0) == 0
    assert f'{type(module_0.Bands.labels).__module__}.{type(module_0.Bands.labels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.definitions).__module__}.{type(module_0.Bands.definitions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.n_bands).__module__}.{type(module_0.Bands.n_bands).__qualname__}' == 'builtins.property'
    var_0 = bands_0.add_band(str_0, str_0)
    assert len(bands_0) == 1
    var_1 = bands_0.__repr__()
    assert var_1 == '\x0b/       :  \x0b  - /   Hz'
    bands_1 = module_0.Bands()
    assert len(bands_1) == 0
    var_2 = bands_1.__iter__()
    object_0 = module_1.object(*var_2)
    var_3 = bands_1.__repr__()
    var_4 = var_3.__repr__()
    bands_1.add_band(var_4, var_4)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '\x0b/'
    bands_0 = module_0.Bands()
    assert len(bands_0) == 0
    assert f'{type(module_0.Bands.labels).__module__}.{type(module_0.Bands.labels).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.definitions).__module__}.{type(module_0.Bands.definitions).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Bands.n_bands).__module__}.{type(module_0.Bands.n_bands).__qualname__}' == 'builtins.property'
    var_0 = bands_0.add_band(str_0, str_0)
    assert len(bands_0) == 1
    var_1 = bands_0.__repr__()
    assert var_1 == '\x0b/       :  \x0b  - /   Hz'
    bands_1 = bands_0.__iter__()
    var_2 = bands_1.__iter__()
    module_1.object(*var_2)