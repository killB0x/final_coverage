# Automatically generated by Pynguin.
import pytest
import fooof.core.io as module_0
import codecs as module_1
import json.encoder as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '_6F3&Gb*Yxl<K\rQ[=-Sz'
    module_0.load_json(str_0, str_0)

def test_case_1():
    bytes_0 = b'\x86\x1c\x1aV,\x0e'
    var_0 = module_0.fpath(bytes_0, bytes_0)
    assert var_0 == b'\x86\x1c\x1aV,\x0e/\x86\x1c\x1aV,\x0e'

def test_case_2():
    none_type_0 = None
    var_0 = module_0.fpath(none_type_0, none_type_0)

def test_case_3():
    bytes_0 = b'\x86p\x1c\x1a,\x0e'
    with pytest.raises(ValueError):
        module_0.save_fg(bytes_0, bytes_0, save_data=bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.load_json(none_type_0, none_type_0)

def test_case_5():
    bytes_0 = b'\x86p\x1c\x1a,\x0e'
    with pytest.raises(ValueError):
        module_0.save_fg(bytes_0, bytes_0, save_settings=bytes_0)

def test_case_6():
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.save_fg(none_type_0, none_type_0, append=none_type_0, save_data=none_type_0)

def test_case_7():
    bytes_0 = b'\x86p\x1c\x1a,\x0e'
    with pytest.raises(ValueError):
        module_0.save_fg(bytes_0, bytes_0, append=bytes_0, save_results=bytes_0)

def test_case_8():
    buffered_incremental_decoder_0 = module_1.BufferedIncrementalDecoder()
    with pytest.raises(ValueError):
        module_0.save_fm(buffered_incremental_decoder_0, buffered_incremental_decoder_0)

def test_case_9():
    buffered_incremental_decoder_0 = module_1.BufferedIncrementalDecoder()
    with pytest.raises(ValueError):
        module_0.save_fm(buffered_incremental_decoder_0, buffered_incremental_decoder_0, buffered_incremental_decoder_0, save_settings=buffered_incremental_decoder_0, save_data=buffered_incremental_decoder_0)

def test_case_10():
    buffered_incremental_decoder_0 = module_1.BufferedIncrementalDecoder()
    str_0 = '1'
    var_0 = module_0.save_fm(buffered_incremental_decoder_0, str_0, save_results=str_0, save_settings=str_0)

def test_case_11():
    buffered_incremental_decoder_0 = module_1.BufferedIncrementalDecoder()
    str_0 = ''
    var_0 = module_0.save_fm(buffered_incremental_decoder_0, str_0, save_results=str_0, save_settings=str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = '9)iC>_Z.\n_eif'
    module_0.load_json(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '_'
    module_0.save_fg(str_0, str_0, save_results=str_0, save_data=str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'E`\tMB$X!1-`xX'
    module_0.save_fg(str_0, str_0, append=str_0, save_data=str_0)

def test_case_15():
    buffered_incremental_decoder_0 = module_1.BufferedIncrementalDecoder()
    str_0 = 'Q'
    var_0 = module_0.save_fm(buffered_incremental_decoder_0, str_0, append=str_0, save_results=buffered_incremental_decoder_0)

def test_case_16():
    none_type_0 = None
    buffered_incremental_decoder_0 = module_1.BufferedIncrementalDecoder(none_type_0)
    str_0 = ''
    var_0 = module_0.save_fg(buffered_incremental_decoder_0, str_0, append=buffered_incremental_decoder_0, save_settings=buffered_incremental_decoder_0)

def test_case_17():
    str_0 = ''
    module_0.load_json(str_0, str_0)

def test_case_18():
    buffered_incremental_decoder_0 = module_1.BufferedIncrementalDecoder()
    str_0 = ''
    var_0 = module_0.load_jsonlines(str_0, str_0)
    buffered_incremental_decoder_1 = module_1.BufferedIncrementalDecoder(var_0)
    assert f'{type(buffered_incremental_decoder_1.errors).__module__}.{type(buffered_incremental_decoder_1.errors).__qualname__}' == 'builtins.generator'
    var_0.__next__()

@pytest.mark.xfail(strict=True)
def test_case_19():
    buffered_incremental_decoder_0 = module_1.BufferedIncrementalDecoder()
    str_0 = ''
    var_0 = module_2.py_encode_basestring(str_0)
    var_1 = module_0.save_fm(buffered_incremental_decoder_0, str_0, save_results=str_0, save_settings=str_0)
    var_2 = module_0.load_json(str_0, var_1)
    var_3 = module_0.save_fm(buffered_incremental_decoder_0, var_0, append=var_0, save_settings=var_1, save_data=buffered_incremental_decoder_0)
    var_4 = module_0.save_fg(buffered_incremental_decoder_0, str_0, str_0, var_1, save_settings=buffered_incremental_decoder_0)
    var_5 = module_0.load_jsonlines(buffered_incremental_decoder_0, var_4)
    module_1.make_identity_dict(var_5)