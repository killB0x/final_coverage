# Automatically generated by Pynguin.
import pytest
import vcver.scm.git as module_0

def test_case_0():
    str_0 = "''7tI.-p\tHG\\R)XrY^"
    git_0 = module_0.Git(str_0)
    assert module_0.CMD_LATEST_VERSION_TAG == "git describe --tags --match 'v*' --abbrev=0"
    assert module_0.CMD_BRANCH == 'git rev-parse --abbrev-ref HEAD'
    assert module_0.CMD_REV_LIST == 'git rev-list HEAD --reverse'
    assert module_0.CMD_LIST_TAGS == 'git tag --list'
    assert module_0.CMD_REV_COUNT == 'git rev-list {start}..{end} --count'
    assert module_0.CMD_SHORT_HASH == 'git rev-parse --short HEAD'
    assert module_0.ENVIRONMENT_VARIABLES_SPECIFYING_BRANCH == ['GIT_BRANCH', 'CI_COMMIT_REF_NAME']
    assert module_0.Git.RELEASE_BRANCH_REGEX == 'master'
    var_0 = git_0.is_repo(str_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    git_0 = module_0.Git(none_type_0)
    assert module_0.CMD_LATEST_VERSION_TAG == "git describe --tags --match 'v*' --abbrev=0"
    assert module_0.CMD_BRANCH == 'git rev-parse --abbrev-ref HEAD'
    assert module_0.CMD_REV_LIST == 'git rev-list HEAD --reverse'
    assert module_0.CMD_LIST_TAGS == 'git tag --list'
    assert module_0.CMD_REV_COUNT == 'git rev-list {start}..{end} --count'
    assert module_0.CMD_SHORT_HASH == 'git rev-parse --short HEAD'
    assert module_0.ENVIRONMENT_VARIABLES_SPECIFYING_BRANCH == ['GIT_BRANCH', 'CI_COMMIT_REF_NAME']
    assert module_0.Git.RELEASE_BRANCH_REGEX == 'master'
    git_0.get_latest_version_tag()

@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -1151
    git_0 = module_0.Git(int_0)
    assert module_0.CMD_LATEST_VERSION_TAG == "git describe --tags --match 'v*' --abbrev=0"
    assert module_0.CMD_BRANCH == 'git rev-parse --abbrev-ref HEAD'
    assert module_0.CMD_REV_LIST == 'git rev-list HEAD --reverse'
    assert module_0.CMD_LIST_TAGS == 'git tag --list'
    assert module_0.CMD_REV_COUNT == 'git rev-list {start}..{end} --count'
    assert module_0.CMD_SHORT_HASH == 'git rev-parse --short HEAD'
    assert module_0.ENVIRONMENT_VARIABLES_SPECIFYING_BRANCH == ['GIT_BRANCH', 'CI_COMMIT_REF_NAME']
    assert module_0.Git.RELEASE_BRANCH_REGEX == 'master'
    git_0.get_latest_version_tag()

def test_case_3():
    git_command_error_0 = module_0.GitCommandError()
    assert module_0.CMD_LATEST_VERSION_TAG == "git describe --tags --match 'v*' --abbrev=0"
    assert module_0.CMD_BRANCH == 'git rev-parse --abbrev-ref HEAD'
    assert module_0.CMD_REV_LIST == 'git rev-list HEAD --reverse'
    assert module_0.CMD_LIST_TAGS == 'git tag --list'
    assert module_0.CMD_REV_COUNT == 'git rev-list {start}..{end} --count'
    assert module_0.CMD_SHORT_HASH == 'git rev-parse --short HEAD'
    assert module_0.ENVIRONMENT_VARIABLES_SPECIFYING_BRANCH == ['GIT_BRANCH', 'CI_COMMIT_REF_NAME']

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    git_0 = module_0.Git(none_type_0)
    assert module_0.CMD_LATEST_VERSION_TAG == "git describe --tags --match 'v*' --abbrev=0"
    assert module_0.CMD_BRANCH == 'git rev-parse --abbrev-ref HEAD'
    assert module_0.CMD_REV_LIST == 'git rev-list HEAD --reverse'
    assert module_0.CMD_LIST_TAGS == 'git tag --list'
    assert module_0.CMD_REV_COUNT == 'git rev-list {start}..{end} --count'
    assert module_0.CMD_SHORT_HASH == 'git rev-parse --short HEAD'
    assert module_0.ENVIRONMENT_VARIABLES_SPECIFYING_BRANCH == ['GIT_BRANCH', 'CI_COMMIT_REF_NAME']
    assert module_0.Git.RELEASE_BRANCH_REGEX == 'master'
    git_0.get_properties()

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '/'
    none_type_0 = None
    git_0 = module_0.Git(none_type_0)
    assert module_0.CMD_LATEST_VERSION_TAG == "git describe --tags --match 'v*' --abbrev=0"
    assert module_0.CMD_BRANCH == 'git rev-parse --abbrev-ref HEAD'
    assert module_0.CMD_REV_LIST == 'git rev-list HEAD --reverse'
    assert module_0.CMD_LIST_TAGS == 'git tag --list'
    assert module_0.CMD_REV_COUNT == 'git rev-list {start}..{end} --count'
    assert module_0.CMD_SHORT_HASH == 'git rev-parse --short HEAD'
    assert module_0.ENVIRONMENT_VARIABLES_SPECIFYING_BRANCH == ['GIT_BRANCH', 'CI_COMMIT_REF_NAME']
    assert module_0.Git.RELEASE_BRANCH_REGEX == 'master'
    var_0 = git_0.is_repo(str_0)
    assert var_0 is False
    git_0.get_properties()