# Automatically generated by Pynguin.
import pytest
import recipe_scrapers.justbento as module_0
import recipe_scrapers._utils as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 4.063426212736065
    module_0.JustBento(float_0)

def test_case_1():
    str_0 = 'https://www.finedininglovers.com'
    just_bento_0 = module_0.JustBento(str_0)
    assert f'{type(just_bento_0).__module__}.{type(just_bento_0).__qualname__}' == 'recipe_scrapers.justbento.JustBento'
    assert just_bento_0.exception_handling is True
    assert just_bento_0.meta_http_equiv is False
    assert f'{type(just_bento_0.schema).__module__}.{type(just_bento_0.schema).__qualname__}' == 'recipe_scrapers._schemaorg.SchemaOrg'
    assert just_bento_0.url == 'https://www.finedininglovers.com'
    assert f'{type(module_0.JustBento.host).__module__}.{type(module_0.JustBento.host).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 2.489250627254638
    str_0 = 'https://www.finedininglovers.com'
    just_bento_0 = module_0.JustBento(str_0, meta_http_equiv=float_0)
    assert f'{type(just_bento_0).__module__}.{type(just_bento_0).__qualname__}' == 'recipe_scrapers.justbento.JustBento'
    assert just_bento_0.exception_handling is True
    assert just_bento_0.meta_http_equiv == pytest.approx(2.489250627254638, abs=0.01, rel=0.01)
    assert f'{type(just_bento_0.schema).__module__}.{type(just_bento_0.schema).__qualname__}' == 'recipe_scrapers._schemaorg.SchemaOrg'
    assert just_bento_0.url == 'https://www.finedininglovers.com'
    assert f'{type(module_0.JustBento.host).__module__}.{type(module_0.JustBento.host).__qualname__}' == 'builtins.method'
    var_0 = just_bento_0.yields()
    assert var_0 == '1'
    var_1 = just_bento_0.language()
    var_2 = just_bento_0.title()
    assert var_2 == 'Home'
    module_0.JustBento(var_2)

@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 2.489250627254638
    str_0 = 'https://www.finedininglovers.com'
    just_bento_0 = module_0.JustBento(str_0, meta_http_equiv=float_0)
    assert f'{type(just_bento_0).__module__}.{type(just_bento_0).__qualname__}' == 'recipe_scrapers.justbento.JustBento'
    assert just_bento_0.exception_handling is True
    assert just_bento_0.meta_http_equiv == pytest.approx(2.489250627254638, abs=0.01, rel=0.01)
    assert f'{type(just_bento_0.schema).__module__}.{type(just_bento_0.schema).__qualname__}' == 'recipe_scrapers._schemaorg.SchemaOrg'
    assert just_bento_0.url == 'https://www.finedininglovers.com'
    assert f'{type(module_0.JustBento.host).__module__}.{type(module_0.JustBento.host).__qualname__}' == 'builtins.method'
    var_0 = just_bento_0.yields()
    assert var_0 == '1'
    var_1 = just_bento_0.yields()
    assert var_1 == '1'
    var_2 = just_bento_0.links()
    var_3 = just_bento_0.total_time()
    assert var_3 == 0
    module_0.JustBento(var_3)

@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 2.489250627254638
    str_0 = 'https://www.finedininglovers.com'
    var_0 = module_1.normalize_string(str_0)
    var_1 = var_0.title()
    just_bento_0 = module_0.JustBento(str_0, meta_http_equiv=float_0)
    assert f'{type(just_bento_0).__module__}.{type(just_bento_0).__qualname__}' == 'recipe_scrapers.justbento.JustBento'
    assert just_bento_0.exception_handling is True
    assert just_bento_0.meta_http_equiv == pytest.approx(2.489250627254638, abs=0.01, rel=0.01)
    assert f'{type(just_bento_0.schema).__module__}.{type(just_bento_0.schema).__qualname__}' == 'recipe_scrapers._schemaorg.SchemaOrg'
    assert just_bento_0.url == 'https://www.finedininglovers.com'
    assert f'{type(module_0.JustBento.host).__module__}.{type(module_0.JustBento.host).__qualname__}' == 'builtins.method'
    var_2 = just_bento_0.ingredients()
    var_3 = just_bento_0.language()
    var_4 = just_bento_0.title()
    assert var_4 == 'Home'
    module_0.JustBento(var_4)