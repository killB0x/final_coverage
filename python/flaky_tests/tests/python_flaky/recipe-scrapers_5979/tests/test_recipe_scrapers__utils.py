# Automatically generated by Pynguin.
import pytest
import recipe_scrapers._utils as module_0
import re as module_1
import builtins as module_2

def test_case_0():
    none_type_0 = None
    var_0 = module_0.get_minutes(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'\xe0'
    module_0.get_minutes(bytes_0)

def test_case_2():
    str_0 = "&L0H~IxtE'qzeCfU@|e<"
    var_0 = module_0.get_yields(str_0)
    assert var_0 == '0 serving(s)'

@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    module_0.get_yields(tuple_0)

def test_case_4():
    str_0 = 'u;c`oWX6=j<-7pb:G '
    var_0 = module_0.normalize_string(str_0)
    assert var_0 == 'u;c`oWX6=j<-7pb:G'
    none_type_0 = None
    var_1 = module_0.get_minutes(none_type_0)

def test_case_5():
    str_0 = 'P'
    var_0 = module_0.get_minutes(str_0)
    assert var_0 == 0

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'H_-j3+'
    none_type_0 = None
    var_0 = module_0.get_minutes(none_type_0)
    var_1 = module_0.get_minutes(str_0)
    assert var_1 == 0
    var_1.__reversed__(var_1)

def test_case_7():
    str_0 = "&L0H~IxtE'qzeCkU@|e<"
    var_0 = module_0.get_minutes(str_0)
    assert var_0 == 0

def test_case_8():
    str_0 = "&LH~IxtE'qzeCfU@|e<"
    var_0 = module_0.get_yields(str_0)
    assert var_0 == '0 serving(s)'

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'H_-j3mc'
    var_0 = module_0.normalize_string(str_0)
    assert var_0 == 'H_-j3mc'
    var_1 = module_0.get_yields(var_0)
    assert var_1 == '3 serving(s)'
    none_type_0 = None
    var_2 = module_0.get_minutes(none_type_0)
    var_3 = module_0.get_minutes(str_0)
    assert var_3 == 3
    module_1.search(str_0, var_2)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '0\\0;R9hBvU'
    var_0 = module_0.normalize_string(str_0)
    assert var_0 == '0\\0;R9hBvU'
    var_1 = module_0.get_yields(var_0)
    assert var_1 == '0 serving(s)'
    var_2 = module_2.object()
    var_3 = module_0.get_minutes(str_0)
    assert var_3 == 0
    var_3.__reversed__(var_3)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '6-3m'
    var_0 = module_0.normalize_string(str_0)
    assert var_0 == '6-3m'
    var_1 = module_0.get_yields(var_0)
    assert var_1 == '3 serving(s)'
    none_type_0 = None
    var_2 = module_0.get_minutes(none_type_0)
    var_3 = module_0.get_minutes(str_0)
    assert var_3 == 3
    module_1.search(str_0, var_2)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'PT'
    var_0 = module_0.normalize_string(str_0)
    assert var_0 == 'PT'
    var_1 = module_0.get_minutes(var_0)
    assert var_1 == 0
    var_2 = module_0.get_yields(var_0)
    assert var_2 == '0 serving(s)'
    none_type_0 = None
    var_3 = module_0.get_minutes(none_type_0)
    var_4 = module_0.get_minutes(str_0)
    assert var_4 == 0
    var_4.__reversed__(var_4)