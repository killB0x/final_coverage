# Automatically generated by Pynguin.
import pytest
import recipe_scrapers.panelinha as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b'\x89\xf5\xfa\x9eh=t\x15\xf2cX\x1d\xe0\x05!\xde\xb1'
    module_0.Panelinha(bytes_0, meta_http_equiv=bytes_0, test=bytes_0)

def test_case_1():
    str_0 = 'https://www.finedininglovers.com'
    panelinha_0 = module_0.Panelinha(str_0)
    assert f'{type(panelinha_0).__module__}.{type(panelinha_0).__qualname__}' == 'recipe_scrapers.panelinha.Panelinha'
    assert panelinha_0.exception_handling is True
    assert panelinha_0.meta_http_equiv is False
    assert f'{type(panelinha_0.schema).__module__}.{type(panelinha_0.schema).__qualname__}' == 'recipe_scrapers._schemaorg.SchemaOrg'
    assert panelinha_0.url == 'https://www.finedininglovers.com'
    assert f'{type(module_0.Panelinha.host).__module__}.{type(module_0.Panelinha.host).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'https://www.finedininglovers.com'
    panelinha_0 = module_0.Panelinha(str_0)
    assert f'{type(panelinha_0).__module__}.{type(panelinha_0).__qualname__}' == 'recipe_scrapers.panelinha.Panelinha'
    assert panelinha_0.exception_handling is True
    assert panelinha_0.meta_http_equiv is False
    assert f'{type(panelinha_0.schema).__module__}.{type(panelinha_0.schema).__qualname__}' == 'recipe_scrapers._schemaorg.SchemaOrg'
    assert panelinha_0.url == 'https://www.finedininglovers.com'
    assert f'{type(module_0.Panelinha.host).__module__}.{type(module_0.Panelinha.host).__qualname__}' == 'builtins.method'
    var_0 = panelinha_0.total_time()
    var_1 = panelinha_0.instructions()
    var_2 = panelinha_0.total_time()
    var_3 = panelinha_0.ratings()
    module_0.Panelinha(var_2, meta_http_equiv=var_3)

def test_case_3():
    str_0 = 'https://www.finedininglovers.com'
    panelinha_0 = module_0.Panelinha(str_0)
    assert f'{type(panelinha_0).__module__}.{type(panelinha_0).__qualname__}' == 'recipe_scrapers.panelinha.Panelinha'
    assert panelinha_0.exception_handling is True
    assert panelinha_0.meta_http_equiv is False
    assert f'{type(panelinha_0.schema).__module__}.{type(panelinha_0.schema).__qualname__}' == 'recipe_scrapers._schemaorg.SchemaOrg'
    assert panelinha_0.url == 'https://www.finedininglovers.com'
    assert f'{type(module_0.Panelinha.host).__module__}.{type(module_0.Panelinha.host).__qualname__}' == 'builtins.method'
    panelinha_1 = module_0.Panelinha(str_0)
    var_0 = panelinha_1.ingredients()

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'https://www.finedininglovers.com'
    panelinha_0 = module_0.Panelinha(str_0)
    assert f'{type(panelinha_0).__module__}.{type(panelinha_0).__qualname__}' == 'recipe_scrapers.panelinha.Panelinha'
    assert panelinha_0.exception_handling is True
    assert panelinha_0.meta_http_equiv is False
    assert f'{type(panelinha_0.schema).__module__}.{type(panelinha_0.schema).__qualname__}' == 'recipe_scrapers._schemaorg.SchemaOrg'
    assert panelinha_0.url == 'https://www.finedininglovers.com'
    assert f'{type(module_0.Panelinha.host).__module__}.{type(module_0.Panelinha.host).__qualname__}' == 'builtins.method'
    var_0 = panelinha_0.title()
    assert var_0 == 'Home'
    panelinha_1 = module_0.Panelinha(str_0)
    var_1 = panelinha_1.total_time()
    var_2 = panelinha_1.instructions()
    var_3 = panelinha_1.ratings()
    module_0.Panelinha(var_3, meta_http_equiv=var_3)

def test_case_5():
    str_0 = 'https://www.finedininglovers.com'
    panelinha_0 = module_0.Panelinha(str_0, str_0, str_0)
    assert f'{type(panelinha_0).__module__}.{type(panelinha_0).__qualname__}' == 'recipe_scrapers.panelinha.Panelinha'
    assert panelinha_0.exception_handling == 'https://www.finedininglovers.com'
    assert panelinha_0.meta_http_equiv == 'https://www.finedininglovers.com'
    assert f'{type(panelinha_0.schema).__module__}.{type(panelinha_0.schema).__qualname__}' == 'recipe_scrapers._schemaorg.SchemaOrg'
    assert panelinha_0.url == 'https://www.finedininglovers.com'
    assert f'{type(module_0.Panelinha.host).__module__}.{type(module_0.Panelinha.host).__qualname__}' == 'builtins.method'
    var_0 = panelinha_0.yields()