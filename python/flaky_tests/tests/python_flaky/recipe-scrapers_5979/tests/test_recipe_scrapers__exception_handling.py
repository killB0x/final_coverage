# Automatically generated by Pynguin.
import pytest
import recipe_scrapers._exception_handling as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.ExceptionHandlingMetaclass()

def test_case_1():
    list_0 = []
    var_0 = module_0.exception_handling(list_0)
    assert module_0.ON_EXCEPTION_RETURN_VALUES == {'title': '', 'total_time': 0, 'yields': '', 'image': '', 'ingredients': [], 'instructions': '', 'ratings': -1, 'reviews': None, 'links': [], 'language': 'en'}

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0, none_type_0: none_type_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.ExceptionHandlingMetaclass(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "'kDU\nt@gDX/ci|~b&&"
    none_type_0 = None
    var_0 = module_0.exception_handling(none_type_0)
    assert module_0.ON_EXCEPTION_RETURN_VALUES == {'title': '', 'total_time': 0, 'yields': '', 'image': '', 'ingredients': [], 'instructions': '', 'ratings': -1, 'reviews': None, 'links': [], 'language': 'en'}
    str_1 = 'language'
    dict_0 = {str_1: str_1}
    var_1 = module_0.exception_handling(none_type_0)
    list_0 = [str_1, str_0, dict_0]
    module_0.ExceptionHandlingMetaclass(*list_0)