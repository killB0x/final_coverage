# Automatically generated by Pynguin.
import pytest
import odc_pycommons.security as module_0
import re as module_1
import decimal as module_2
import locale as module_3
import enum as module_4

def test_case_0():
    str_0 = '@U3cYiI2,EGWx"R'
    var_0 = module_0.is_valid_email(str_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    bool_0 = string_data_validator_0.validate(none_type_0)
    assert bool_0 is False
    bool_1 = False
    data_validator_0 = module_0.DataValidator()
    module_0.is_valid_email(bool_1)

def test_case_2():
    bytes_0 = b"'\xbc7Tqo\x0f\nM@\xc4\x91"
    bool_0 = True
    bool_1 = module_0.validate_string(bytes_0, contain_at_least_one_space=bool_0)
    assert bool_1 is False

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '@U3cYiI2,EGWx"R'
    var_0 = module_0.is_valid_email(str_0)
    assert var_0 is False
    var_1 = module_0.is_valid_email(str_0)
    assert var_1 is False
    module_0.mask_sensitive_string(var_1, mask_length=str_0, mask_char=str_0, logger_impl=var_1)

def test_case_4():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0, bool_0)
    int_0 = -445
    str_0 = 'Cannot validate file - invalid data type. Expected a GenericDataContainer'
    str_1 = module_0.mask_sensitive_string(tuple_0, set_0, mask_length=int_0, mask_char=str_0)
    assert str_1 == ''

@pytest.mark.xfail(strict=True)
def test_case_5():
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    bool_0 = string_data_validator_0.validate(string_data_validator_0)
    assert bool_0 is False
    bool_1 = string_data_validator_0.validate(string_data_validator_0)
    data_validator_0 = module_0.DataValidator()
    bool_2 = string_data_validator_0.validate(string_data_validator_0)
    data_validator_1 = module_0.DataValidator(string_data_validator_0)
    module_0.is_valid_email(bool_0)

def test_case_6():
    number_data_validator_0 = module_0.NumberDataValidator()
    assert f'{type(number_data_validator_0.logger).__module__}.{type(number_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    with pytest.raises(Exception):
        number_data_validator_0.validate(number_data_validator_0)

def test_case_7():
    number_data_validator_0 = module_0.NumberDataValidator()
    assert f'{type(number_data_validator_0.logger).__module__}.{type(number_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'

def test_case_8():
    bool_0 = False
    data_validator_0 = module_0.DataValidator()
    str_0 = module_0.mask_sensitive_string(data_validator_0)
    assert str_0 == '********'
    bool_1 = data_validator_0.validate(bool_0)
    dict_0 = {str_0: str_0}
    data_validator_1 = module_0.DataValidator()
    var_0 = module_0.is_valid_email(dict_0)
    assert var_0 is False
    data_validator_2 = module_0.DataValidator()
    str_1 = ''
    str_2 = module_0.mask_sensitive_string(str_1, mask_length=bool_0)
    assert str_2 == ''

def test_case_9():
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'

def test_case_10():
    str_0 = 'EL d\\;R\\\tvD~$K^@H(E'
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    int_0 = 1097
    bool_0 = string_data_validator_0.validate(string_data_validator_0)
    assert bool_0 is False
    str_1 = '9FJH?GWD.TvHZ`>"xaL'
    dict_0 = {str_1: bool_0, str_1: str_0, str_0: str_0}
    list_0 = [int_0, int_0, str_0, int_0]
    bool_1 = module_0.validate_string(str_0, max_length=int_0, contain_at_least_one_space=list_0)
    assert bool_1 is True
    var_0 = module_0.is_valid_email(dict_0)
    assert var_0 is False
    var_1 = module_0.is_valid_email(str_1)
    assert var_1 is False

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '"6P8c781e^UnSEk\x0c'
    none_type_0 = None
    module_0.mask_sensitive_string(str_0, none_type_0, mask_length=none_type_0, mask_char=none_type_0)

def test_case_12():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0, bool_0)
    int_0 = -445
    str_0 = 'Cannot validate file - invalid data type. Expected a GenericDataContainer'
    str_1 = module_0.mask_sensitive_string(tuple_0, set_0, mask_length=int_0, mask_char=str_0)
    assert str_1 == ''
    str_2 = module_0.mask_sensitive_string(str_1, use_fixed_mask_length=bool_0)
    assert str_2 == '********'

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'j8*;_3dWi#[ bOPL|$'
    str_1 = module_0.mask_sensitive_string(str_0)
    assert str_1 == '********'
    str_2 = '-$1x.5e2~[i:O'
    bool_0 = False
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    bool_1 = module_0.validate_string(str_2, max_length=bool_0)
    string_data_validator_1 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_1.logger).__module__}.{type(string_data_validator_1.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    float_0 = 0.0
    module_1.sub(float_0, float_0, float_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    bool_0 = string_data_validator_0.validate(string_data_validator_0)
    assert bool_0 is False
    str_0 = 'sKR2B\n<p%!3#QO4'
    bool_1 = string_data_validator_0.validate(string_data_validator_0)
    data_validator_0 = module_0.DataValidator()
    str_1 = module_0.mask_sensitive_string(data_validator_0)
    assert str_1 == '********'
    dict_0 = {str_0: str_0}
    bool_2 = string_data_validator_0.validate(string_data_validator_0)
    bool_3 = data_validator_0.validate(dict_0)
    bool_4 = string_data_validator_0.validate(bool_3)
    bool_5 = module_0.validate_string(str_1, start_with_alpha=bool_3, contain_at_least_one_space=bool_4)
    assert bool_5 is True
    data_validator_1 = module_0.DataValidator(string_data_validator_0)
    module_0.is_valid_email(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    data_validator_0 = module_0.DataValidator()
    str_0 = 'Wbv60sB'
    bool_0 = module_0.validate_string(str_0, can_be_none=data_validator_0)
    assert bool_0 is True
    bool_1 = False
    bool_2 = data_validator_0.validate(data_validator_0)
    bool_3 = module_0.validate_string(str_0, contain_at_least_one_space=bool_1)
    assert bool_3 is True
    bool_4 = data_validator_0.validate(data_validator_0)
    int_0 = 405
    str_1 = 'Cx)YC!z65^uR\x0cNK!'
    data_validator_1 = module_0.DataValidator()
    none_type_0 = None
    module_0.mask_sensitive_string(str_0, mask_length=int_0, mask_char=str_1, logger_impl=none_type_0)

def test_case_16():
    data_validator_0 = module_0.DataValidator()
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    str_0 = '&z#YQ'
    int_0 = 818
    bool_0 = string_data_validator_0.validate(str_0)
    assert bool_0 is False
    bool_1 = module_0.validate_string(str_0, max_length=int_0)
    assert bool_1 is False
    data_validator_1 = module_0.DataValidator()
    str_1 = 'PQJ!0[H33XQMlUDmH.3'
    data_validator_2 = module_0.DataValidator()
    bool_2 = module_0.validate_string(str_1, contain_at_least_one_space=data_validator_1)
    assert bool_2 is False

def test_case_17():
    string_data_validator_0 = module_1.purge()
    str_0 = ' '
    var_0 = module_0.is_valid_email(str_0)
    number_data_validator_0 = module_0.NumberDataValidator()
    assert f'{type(number_data_validator_0.logger).__module__}.{type(number_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    decimal_0 = module_2.Decimal()
    bool_0 = number_data_validator_0.validate(decimal_0)
    assert bool_0 is True

def test_case_18():
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    str_0 = 'GenericDataContainer "{}" ready'
    str_1 = 'w3%dM'
    str_2 = 'Refer to the appropriate HTTP error code: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes'
    number_data_validator_0 = module_0.NumberDataValidator()
    assert f'{type(number_data_validator_0.logger).__module__}.{type(number_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    bool_0 = number_data_validator_0.validate(str_0)
    assert bool_0 is False
    str_3 = module_0.mask_sensitive_string(str_1, str_2)
    assert str_3 == '********'
    var_0 = module_0.is_valid_email(str_0)
    var_1 = module_0.is_valid_email(str_2)
    bool_1 = number_data_validator_0.validate(bool_0)
    assert bool_1 is True

def test_case_19():
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    string_data_validator_1 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_1.logger).__module__}.{type(string_data_validator_1.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    string_data_validator_2 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_2.logger).__module__}.{type(string_data_validator_2.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    str_0 = 'float'
    dict_0 = {str_0: string_data_validator_2, str_0: str_0, str_0: str_0}
    bool_0 = string_data_validator_1.validate(string_data_validator_2, **dict_0)
    assert bool_0 is False
    str_1 = 'V#V1-Gon'
    str_2 = ''
    str_3 = module_0.mask_sensitive_string(str_2)
    assert str_3 == '********'
    str_4 = ' '
    dict_1 = {str_1: string_data_validator_2, str_1: str_1, str_4: str_1, str_4: string_data_validator_2}
    none_type_0 = None
    bool_1 = string_data_validator_1.validate(none_type_0, **dict_1)
    assert bool_1 is False
    var_0 = module_1.purge()
    bool_2 = string_data_validator_2.validate(string_data_validator_2)
    bool_3 = module_0.validate_string(str_4, start_with_alpha=str_4, contain_at_least_one_space=var_0)
    assert bool_3 is False
    var_1 = module_0.is_valid_email(str_2)
    number_data_validator_0 = module_0.NumberDataValidator()
    assert f'{type(number_data_validator_0.logger).__module__}.{type(number_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    decimal_0 = module_2.Decimal()
    str_5 = 'G "+K'
    str_6 = module_0.mask_sensitive_string(str_5, use_fixed_mask_length=bool_3, mask_length=number_data_validator_0)
    assert str_6 == '*****'
    bool_4 = number_data_validator_0.validate(decimal_0)
    assert bool_4 is True
    bool_5 = number_data_validator_0.validate(str_5)
    assert bool_5 is False

@pytest.mark.xfail(strict=True)
def test_case_20():
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    bool_0 = string_data_validator_0.validate(string_data_validator_0)
    assert bool_0 is False
    bool_1 = string_data_validator_0.validate(string_data_validator_0)
    str_0 = module_0.mask_sensitive_string(string_data_validator_0)
    assert str_0 == '********'
    none_type_0 = None
    module_0.mask_sensitive_string(none_type_0, mask_length=bool_0, logger_impl=bool_1)

@pytest.mark.xfail(strict=True)
def test_case_21():
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    string_data_validator_1 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_1.logger).__module__}.{type(string_data_validator_1.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    str_0 = 'float'
    bool_0 = string_data_validator_0.validate(string_data_validator_0)
    assert bool_0 is False
    dict_0 = {str_0: string_data_validator_1, str_0: str_0, str_0: str_0}
    bool_1 = string_data_validator_0.validate(string_data_validator_1, **dict_0)
    str_1 = 'V#V1-Gon'
    str_2 = ''
    str_3 = module_0.mask_sensitive_string(str_2)
    assert str_3 == '********'
    dict_1 = {str_1: string_data_validator_1, str_1: str_1, str_3: str_1, str_3: string_data_validator_1}
    var_0 = module_1.escape(str_2)
    str_4 = module_0.mask_sensitive_string(str_3)
    assert str_4 == '********'
    string_data_validator_2 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_2.logger).__module__}.{type(string_data_validator_2.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    none_type_0 = None
    bool_2 = string_data_validator_0.validate(none_type_0, **dict_1)
    assert bool_2 is False
    var_1 = module_1.purge()
    bool_3 = string_data_validator_1.validate(string_data_validator_1)
    bool_4 = module_0.validate_string(var_0, start_with_alpha=var_0, contain_at_least_one_space=var_1)
    assert bool_4 is False
    bool_5 = string_data_validator_0.validate(str_1)
    assert bool_5 is True
    var_2 = module_0.is_valid_email(str_4)
    assert var_2 is False
    number_data_validator_0 = module_0.NumberDataValidator()
    assert f'{type(number_data_validator_0.logger).__module__}.{type(number_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    bool_6 = number_data_validator_0.validate(bool_3)
    assert bool_6 is True
    number_data_validator_0.validate(string_data_validator_1)

@pytest.mark.xfail(strict=True)
def test_case_22():
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    bool_0 = string_data_validator_0.validate(string_data_validator_0)
    assert bool_0 is False
    bool_1 = string_data_validator_0.validate(string_data_validator_0)
    data_validator_0 = module_0.DataValidator()
    str_0 = module_0.mask_sensitive_string(data_validator_0)
    assert str_0 == '********'
    dict_0 = {str_0: str_0}
    bool_2 = string_data_validator_0.validate(string_data_validator_0)
    bool_3 = string_data_validator_0.validate(str_0)
    assert bool_3 is False
    bool_4 = module_0.validate_string(str_0, start_with_alpha=str_0, contain_at_least_one_space=bool_3)
    bool_5 = True
    bool_6 = module_0.validate_string(bool_3, max_length=bool_1, contain_at_least_one_space=bool_5)
    number_data_validator_0 = module_0.NumberDataValidator()
    assert f'{type(number_data_validator_0.logger).__module__}.{type(number_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    bool_7 = data_validator_0.validate(string_data_validator_0)
    bool_8 = number_data_validator_0.validate(bool_6, **dict_0)
    assert bool_8 is True
    bool_9 = True
    data_validator_1 = module_0.DataValidator()
    none_type_0 = None
    bool_10 = data_validator_1.validate(none_type_0, **dict_0)
    bool_11 = module_0.validate_string(none_type_0, string_data_validator_0, start_with_alpha=bool_1, can_be_none=bool_9)
    assert bool_11 is True
    tuple_0 = (bool_6, bool_6, bool_2, bool_6)
    data_validator_2 = module_0.DataValidator(tuple_0)
    module_0.is_valid_email(bool_1)

@pytest.mark.xfail(strict=True)
def test_case_23():
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    bool_0 = string_data_validator_0.validate(string_data_validator_0)
    assert bool_0 is False
    str_0 = 'mF"Elq01E'
    str_1 = module_0.mask_sensitive_string(str_0, mask_length=bool_0)
    assert str_1 == ''
    str_2 = 'oC1'
    str_3 = 'x-descriptive-name'
    str_4 = 'Decimal'
    bool_1 = False
    dict_0 = {str_2: string_data_validator_0, str_3: str_2, str_2: str_3, str_4: bool_1}
    bool_2 = string_data_validator_0.validate(bool_0, **dict_0)
    bool_3 = string_data_validator_0.validate(bool_0)
    data_validator_0 = module_0.DataValidator()
    str_5 = module_0.mask_sensitive_string(data_validator_0)
    assert str_5 == '********'
    bool_4 = string_data_validator_0.validate(string_data_validator_0)
    data_validator_1 = module_0.DataValidator()
    bool_5 = string_data_validator_0.validate(str_5)
    assert bool_5 is False
    bool_6 = module_0.validate_string(str_5, start_with_alpha=str_5, contain_at_least_one_space=bool_5)
    data_validator_2 = module_0.DataValidator(string_data_validator_0)
    var_0 = module_0.is_valid_email(dict_0)
    assert var_0 is False
    bool_7 = False
    bool_8 = module_0.validate_string(str_1, bool_3, contain_at_least_one_space=bool_7)
    assert bool_8 is True
    data_validator_3 = module_0.DataValidator()
    var_1 = module_0.is_valid_email(str_0)
    assert var_1 is False
    var_2 = module_0.is_valid_email(str_3)
    assert var_2 is False
    var_0.info(str_3)

@pytest.mark.xfail(strict=True)
def test_case_24():
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    string_data_validator_1 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_1.logger).__module__}.{type(string_data_validator_1.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    string_data_validator_2 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_2.logger).__module__}.{type(string_data_validator_2.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    str_0 = 'floata'
    bool_0 = string_data_validator_2.validate(str_0)
    assert bool_0 is True
    dict_0 = {str_0: string_data_validator_2, str_0: str_0, str_0: str_0}
    bool_1 = string_data_validator_1.validate(string_data_validator_2, **dict_0)
    assert bool_1 is False
    str_1 = 'V#V1-Gon'
    str_2 = ''
    str_3 = module_0.mask_sensitive_string(str_2)
    assert str_3 == '********'
    str_4 = ' '
    dict_1 = {str_1: string_data_validator_2, str_1: str_1, str_4: str_1, str_4: string_data_validator_2}
    bool_2 = string_data_validator_2.validate(str_1)
    assert bool_2 is True
    str_5 = module_0.mask_sensitive_string(str_4)
    assert str_5 == '********'
    none_type_0 = None
    bool_3 = string_data_validator_1.validate(none_type_0, **dict_1)
    assert bool_3 is False
    var_0 = module_1.purge()
    bool_4 = string_data_validator_2.validate(string_data_validator_2)
    bool_5 = module_0.validate_string(str_4, start_with_alpha=str_4, contain_at_least_one_space=var_0)
    assert bool_5 is False
    bool_6 = string_data_validator_1.validate(str_1)
    assert bool_6 is True
    var_1 = module_0.is_valid_email(str_5)
    assert var_1 is False
    number_data_validator_0 = module_0.NumberDataValidator()
    assert f'{type(number_data_validator_0.logger).__module__}.{type(number_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    decimal_0 = module_2.Decimal()
    bool_7 = number_data_validator_0.validate(str_3)
    assert bool_7 is False
    str_6 = 'Q^W]\x0cOzg*@_@)R\x0cN"Am'
    str_7 = 'Cache reset forced.'
    dict_2 = {str_6: dict_1, str_7: dict_1, str_7: dict_0}
    bool_8 = number_data_validator_0.validate(bool_4, **dict_2)
    assert bool_8 is True
    str_8 = module_0.mask_sensitive_string(decimal_0, mask_char=string_data_validator_1)
    bool_9 = number_data_validator_0.validate(decimal_0)
    assert bool_9 is True
    bool_10 = number_data_validator_0.validate(bool_4, **dict_0)
    assert bool_10 is True
    module_0.mask_sensitive_string(str_2, bool_2, str_5, var_1, logger_impl=var_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    string_data_validator_1 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_1.logger).__module__}.{type(string_data_validator_1.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    string_data_validator_2 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_2.logger).__module__}.{type(string_data_validator_2.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    str_0 = 'loata'
    bool_0 = string_data_validator_2.validate(str_0)
    assert bool_0 is True
    str_1 = 'can_be_none'
    str_2 = 'A response code must be provided as an integer [1]'
    dict_0 = {str_0: str_0, str_1: string_data_validator_0, str_2: str_0, str_1: str_0}
    bool_1 = string_data_validator_0.validate(bool_0, **dict_0)
    assert bool_1 is False
    dict_1 = {str_0: string_data_validator_2, str_0: str_0, str_0: str_0}
    bool_2 = string_data_validator_1.validate(string_data_validator_2, **dict_1)
    module_1.subn(bool_1, bool_2, bool_1)

@pytest.mark.xfail(strict=True)
def test_case_26():
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    string_data_validator_1 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_1.logger).__module__}.{type(string_data_validator_1.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    str_0 = 'loata'
    bool_0 = string_data_validator_0.validate(str_0)
    assert bool_0 is True
    var_0 = module_0.is_valid_email(str_0)
    str_1 = 'The mask_flag parameter is deprecated and will be removed entirely in a future release. At the moment it is just ignored and has no effet.'
    str_2 = 'start_with_alpha'
    str_3 = 'A response code must be provided as an integer [1]'
    dict_0 = {str_1: str_0, str_2: string_data_validator_0, str_3: str_0, str_2: str_1}
    bool_1 = string_data_validator_0.validate(var_0, **dict_0)
    assert bool_1 is False
    dict_1 = {str_0: string_data_validator_1, str_0: str_0, str_0: str_0}
    bool_2 = string_data_validator_0.validate(string_data_validator_1, **dict_1)
    str_4 = 'V#V1-Gon'
    str_5 = ''
    str_6 = module_0.mask_sensitive_string(str_5)
    assert str_6 == '********'
    str_7 = ' '
    dict_2 = {str_4: string_data_validator_1, str_4: str_4, str_7: str_4, str_7: string_data_validator_1}
    str_8 = module_0.mask_sensitive_string(str_7)
    assert str_8 == '********'
    none_type_0 = None
    str_9 = module_0.mask_sensitive_string(str_7)
    assert str_9 == '********'
    bool_3 = string_data_validator_1.validate(none_type_0, **dict_2)
    assert bool_3 is False
    var_1 = module_0.is_valid_email(str_6)
    assert var_1 is False
    var_2 = module_1.purge()
    module_1.findall(var_2, str_8)

@pytest.mark.xfail(strict=True)
def test_case_27():
    data_validator_0 = module_0.DataValidator()
    str_0 = 'Jh#l;4\tz@*h+.v}?'
    bool_0 = data_validator_0.validate(data_validator_0)
    var_0 = module_0.is_valid_email(str_0)
    assert var_0 is True
    dict_0 = {}
    var_0.error(var_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    number_data_validator_0 = module_0.NumberDataValidator()
    assert f'{type(number_data_validator_0.logger).__module__}.{type(number_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    data_validator_0 = module_0.DataValidator()
    float_0 = 0.0
    bool_0 = number_data_validator_0.validate(float_0)
    assert bool_0 is True
    module_1.template(float_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    string_data_validator_0 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_0.logger).__module__}.{type(string_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    string_data_validator_1 = module_0.StringDataValidator()
    assert f'{type(string_data_validator_1.logger).__module__}.{type(string_data_validator_1.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    str_0 = 'oaa'
    bool_0 = string_data_validator_0.validate(str_0)
    assert bool_0 is True
    str_1 = 'ieD9Du(nwad;;h\r:'
    bool_1 = string_data_validator_0.validate(string_data_validator_1)
    assert bool_1 is False
    str_2 = 'can_aenon'
    str_3 = 'min_value'
    dict_0 = {str_1: str_0, str_2: string_data_validator_0, str_3: str_0, str_2: str_1}
    bool_2 = string_data_validator_0.validate(bool_0, **dict_0)
    error_0 = module_3.Error()
    bool_3 = string_data_validator_0.validate(error_0)
    str_4 = 'V#V1-Gon'
    str_5 = ''
    dict_1 = {str_4: string_data_validator_1, str_4: str_4, str_5: string_data_validator_1}
    str_6 = module_0.mask_sensitive_string(str_5)
    assert str_6 == '********'
    none_type_0 = None
    var_0 = module_0.is_valid_email(str_6)
    assert var_0 is False
    bool_4 = string_data_validator_1.validate(none_type_0, **dict_1)
    assert bool_4 is False
    var_1 = module_0.is_valid_email(str_0)
    var_2 = module_1.purge()
    bool_5 = string_data_validator_0.validate(string_data_validator_0)
    auto_0 = module_4.auto()
    number_data_validator_0 = module_0.NumberDataValidator()
    assert f'{type(number_data_validator_0.logger).__module__}.{type(number_data_validator_0.logger).__qualname__}' == 'odc_pycommons.OculusDLogger'
    str_7 = module_0.mask_sensitive_string(var_0, mask_char=string_data_validator_1)
    bool_6 = number_data_validator_0.validate(var_0)
    assert bool_6 is True
    number_data_validator_0.validate(bool_5, **dict_0)