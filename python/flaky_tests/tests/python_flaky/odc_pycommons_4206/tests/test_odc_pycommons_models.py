# Automatically generated by Pynguin.
import pytest
import odc_pycommons.models as module_0
import re as module_1
import json.encoder as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = ''
    module_0.CommsRequest(str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'IsError'
    comms_response_0 = module_0.CommsResponse(response_data=str_0)
    assert f'{type(comms_response_0).__module__}.{type(comms_response_0).__qualname__}' == 'odc_pycommons.models.CommsResponse'
    assert comms_response_0.is_error is True
    assert comms_response_0.response_code == -1
    assert comms_response_0.response_code_description == 'Response code undefined'
    assert comms_response_0.response_data == 'IsError'
    assert comms_response_0.trace_id is None
    assert comms_response_0.warnings == []
    module_0.CommsRestFulRequest(str_0, trace_id=str_0)

def test_case_2():
    str_0 = 'h(6='
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    comms_rest_ful_request_0 = module_0.CommsRestFulRequest(str_0, dict_0, str_0)
    assert f'{type(comms_rest_ful_request_0).__module__}.{type(comms_rest_ful_request_0).__qualname__}' == 'odc_pycommons.models.CommsRestFulRequest'
    assert comms_rest_ful_request_0.data == {'h(6=': 'h(6='}
    assert comms_rest_ful_request_0.trace_id == 'h(6='
    assert comms_rest_ful_request_0.uri == 'h(6='
    var_0 = comms_rest_ful_request_0.to_dict()

def test_case_3():
    bool_0 = True
    comms_response_0 = module_0.CommsResponse(bool_0, bool_0)
    assert f'{type(comms_response_0).__module__}.{type(comms_response_0).__qualname__}' == 'odc_pycommons.models.CommsResponse'
    assert comms_response_0.is_error is True
    assert comms_response_0.response_code is True
    assert comms_response_0.response_code_description == 'Response code undefined'
    assert comms_response_0.response_data is None
    assert comms_response_0.trace_id is None
    assert comms_response_0.warnings == []

def test_case_4():
    comms_response_0 = module_0.CommsResponse()
    assert f'{type(comms_response_0).__module__}.{type(comms_response_0).__qualname__}' == 'odc_pycommons.models.CommsResponse'
    assert comms_response_0.is_error is True
    assert comms_response_0.response_code == -1
    assert comms_response_0.response_code_description == 'Response code undefined'
    assert comms_response_0.response_data is None
    assert comms_response_0.trace_id is None
    assert comms_response_0.warnings == []
    var_0 = comms_response_0.to_dict()
    str_0 = 'u9Yyg_K-"\tUr%'
    comms_rest_ful_request_0 = module_0.CommsRestFulRequest(str_0, var_0)
    assert f'{type(comms_rest_ful_request_0).__module__}.{type(comms_rest_ful_request_0).__qualname__}' == 'odc_pycommons.models.CommsRestFulRequest'
    assert comms_rest_ful_request_0.data == {'IsError': True, 'ResponseCode': -1, 'ResponseDescription': 'Response code undefined', 'Data': None, 'TraceId': None, 'Warnings': []}
    assert comms_rest_ful_request_0.trace_id is None
    assert comms_rest_ful_request_0.uri == 'u9Yyg_K-"\tUr%'
    var_1 = comms_rest_ful_request_0.to_dict()

def test_case_5():
    str_0 = 'STRING'
    comms_request_0 = module_0.CommsRequest(str_0, str_0)
    assert f'{type(comms_request_0).__module__}.{type(comms_request_0).__qualname__}' == 'odc_pycommons.models.CommsRequest'
    assert comms_request_0.trace_id == 'STRING'
    assert comms_request_0.uri == 'STRING'
    bool_0 = True
    comms_response_0 = module_0.CommsResponse(bool_0)
    assert f'{type(comms_response_0).__module__}.{type(comms_response_0).__qualname__}' == 'odc_pycommons.models.CommsResponse'
    assert comms_response_0.is_error is True
    assert comms_response_0.response_code == -1
    assert comms_response_0.response_code_description == 'Response code undefined'
    assert comms_response_0.response_data is None
    assert comms_response_0.trace_id is None
    assert comms_response_0.warnings == []
    with pytest.raises(Exception):
        comms_request_0.to_dict()

@pytest.mark.xfail(strict=True)
def test_case_6():
    comms_response_0 = module_0.CommsResponse()
    assert f'{type(comms_response_0).__module__}.{type(comms_response_0).__qualname__}' == 'odc_pycommons.models.CommsResponse'
    assert comms_response_0.is_error is True
    assert comms_response_0.response_code == -1
    assert comms_response_0.response_code_description == 'Response code undefined'
    assert comms_response_0.response_data is None
    assert comms_response_0.trace_id is None
    assert comms_response_0.warnings == []
    var_0 = comms_response_0.to_dict()
    module_0.CommsRequest(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '6w Gv%H'
    comms_request_0 = module_0.CommsRequest(str_0)
    assert f'{type(comms_request_0).__module__}.{type(comms_request_0).__qualname__}' == 'odc_pycommons.models.CommsRequest'
    assert comms_request_0.trace_id is None
    assert comms_request_0.uri == '6w Gv%H'
    module_0.CommsRestFulRequest(str_0, comms_request_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'et'
    comms_request_0 = module_0.CommsRequest(str_0, str_0)
    assert f'{type(comms_request_0).__module__}.{type(comms_request_0).__qualname__}' == 'odc_pycommons.models.CommsRequest'
    assert comms_request_0.trace_id == 'et'
    assert comms_request_0.uri == 'et'
    module_0.CommsRestFulRequest(comms_request_0)

def test_case_9():
    str_0 = 'Gn5a'
    dict_0 = {}
    comms_rest_ful_request_0 = module_0.CommsRestFulRequest(str_0, dict_0)
    assert f'{type(comms_rest_ful_request_0).__module__}.{type(comms_rest_ful_request_0).__qualname__}' == 'odc_pycommons.models.CommsRestFulRequest'
    assert comms_rest_ful_request_0.data == {}
    assert comms_rest_ful_request_0.trace_id is None
    assert comms_rest_ful_request_0.uri == 'Gn5a'
    dict_1 = comms_rest_ful_request_0.to_dict()

def test_case_10():
    str_0 = 'IsError'
    comms_response_0 = module_0.CommsResponse(response_data=str_0)
    assert f'{type(comms_response_0).__module__}.{type(comms_response_0).__qualname__}' == 'odc_pycommons.models.CommsResponse'
    assert comms_response_0.is_error is True
    assert comms_response_0.response_code == -1
    assert comms_response_0.response_code_description == 'Response code undefined'
    assert comms_response_0.response_data == 'IsError'
    assert comms_response_0.trace_id is None
    assert comms_response_0.warnings == []
    var_0 = comms_response_0.to_dict()

@pytest.mark.xfail(strict=True)
def test_case_11():
    comms_response_0 = module_0.CommsResponse()
    assert f'{type(comms_response_0).__module__}.{type(comms_response_0).__qualname__}' == 'odc_pycommons.models.CommsResponse'
    assert comms_response_0.is_error is True
    assert comms_response_0.response_code == -1
    assert comms_response_0.response_code_description == 'Response code undefined'
    assert comms_response_0.response_data is None
    assert comms_response_0.trace_id is None
    assert comms_response_0.warnings == []
    none_type_0 = None
    module_0.CommsResponse(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    comms_response_0 = module_0.CommsResponse()
    assert f'{type(comms_response_0).__module__}.{type(comms_response_0).__qualname__}' == 'odc_pycommons.models.CommsResponse'
    assert comms_response_0.is_error is True
    assert comms_response_0.response_code == -1
    assert comms_response_0.response_code_description == 'Response code undefined'
    assert comms_response_0.response_data is None
    assert comms_response_0.trace_id is None
    assert comms_response_0.warnings == []
    var_0 = comms_response_0.to_dict()
    var_1 = comms_response_0.to_dict()
    module_0.CommsResponse(var_0, response_code_description=var_0)

def test_case_13():
    str_0 = 'STRING'
    comms_response_0 = module_0.CommsResponse(trace_id=str_0)
    assert f'{type(comms_response_0).__module__}.{type(comms_response_0).__qualname__}' == 'odc_pycommons.models.CommsResponse'
    assert comms_response_0.is_error is True
    assert comms_response_0.response_code == -1
    assert comms_response_0.response_code_description == 'Response code undefined'
    assert comms_response_0.response_data is None
    assert comms_response_0.trace_id == 'STRING'
    assert comms_response_0.warnings == []

@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    bool_1 = False
    str_0 = ''
    comms_response_0 = module_0.CommsResponse(bool_0, bool_1, str_0)
    assert f'{type(comms_response_0).__module__}.{type(comms_response_0).__qualname__}' == 'odc_pycommons.models.CommsResponse'
    assert comms_response_0.is_error is False
    assert comms_response_0.response_code is False
    assert comms_response_0.response_code_description == ''
    assert comms_response_0.response_data is None
    assert comms_response_0.trace_id is None
    assert comms_response_0.warnings == []
    bool_2 = True
    comms_response_1 = module_0.CommsResponse(bool_2)
    assert comms_response_1.response_code == -1
    assert comms_response_1.response_code_description == 'Response code undefined'
    str_1 = 's\x0c-b'
    module_0.CommsResponse(response_code_description=str_1, trace_id=comms_response_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    comms_response_0 = module_0.CommsResponse(trace_id=none_type_0)
    assert f'{type(comms_response_0).__module__}.{type(comms_response_0).__qualname__}' == 'odc_pycommons.models.CommsResponse'
    assert comms_response_0.is_error is True
    assert comms_response_0.response_code == -1
    assert comms_response_0.response_code_description == 'Response code undefined'
    assert comms_response_0.response_data is None
    assert comms_response_0.trace_id is None
    assert comms_response_0.warnings == []
    str_0 = '"vJ;3M!B'
    comms_response_1 = module_0.CommsResponse(response_code_description=none_type_0)
    assert f'{type(comms_response_1).__module__}.{type(comms_response_1).__qualname__}' == 'odc_pycommons.models.CommsResponse'
    assert comms_response_1.is_error is True
    assert comms_response_1.response_code == -1
    assert comms_response_1.response_code_description is None
    assert comms_response_1.response_data is None
    assert comms_response_1.trace_id is None
    assert comms_response_1.warnings == []
    module_1.finditer(str_0, comms_response_1)

@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    module_0.CommsRequest(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = 'STRING'
    comms_request_0 = module_0.CommsRequest(str_0, str_0)
    assert f'{type(comms_request_0).__module__}.{type(comms_request_0).__qualname__}' == 'odc_pycommons.models.CommsRequest'
    assert comms_request_0.trace_id == 'STRING'
    assert comms_request_0.uri == 'STRING'
    module_0.CommsResponse(response_code_description=str_0, response_data=comms_request_0, trace_id=str_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    comms_response_0 = module_0.CommsResponse()
    assert f'{type(comms_response_0).__module__}.{type(comms_response_0).__qualname__}' == 'odc_pycommons.models.CommsResponse'
    assert comms_response_0.is_error is True
    assert comms_response_0.response_code == -1
    assert comms_response_0.response_code_description == 'Response code undefined'
    assert comms_response_0.response_data is None
    assert comms_response_0.trace_id is None
    assert comms_response_0.warnings == []
    module_0.CommsResponse(response_code=comms_response_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    comms_response_0 = module_0.CommsResponse()
    assert f'{type(comms_response_0).__module__}.{type(comms_response_0).__qualname__}' == 'odc_pycommons.models.CommsResponse'
    assert comms_response_0.is_error is True
    assert comms_response_0.response_code == -1
    assert comms_response_0.response_code_description == 'Response code undefined'
    assert comms_response_0.response_data is None
    assert comms_response_0.trace_id is None
    assert comms_response_0.warnings == []
    str_0 = 'STRING'
    comms_request_0 = module_0.CommsRequest(str_0, str_0)
    assert f'{type(comms_request_0).__module__}.{type(comms_request_0).__qualname__}' == 'odc_pycommons.models.CommsRequest'
    assert comms_request_0.trace_id == 'STRING'
    assert comms_request_0.uri == 'STRING'
    var_0 = comms_response_0.to_dict()
    str_1 = "'rI(={-p!"
    comms_rest_ful_request_0 = module_0.CommsRestFulRequest(str_1, var_0, var_0)
    assert f'{type(comms_rest_ful_request_0).__module__}.{type(comms_rest_ful_request_0).__qualname__}' == 'odc_pycommons.models.CommsRestFulRequest'
    assert comms_rest_ful_request_0.data == {'IsError': True, 'ResponseCode': -1, 'ResponseDescription': 'Response code undefined', 'Data': None, 'TraceId': None, 'Warnings': []}
    assert comms_rest_ful_request_0.trace_id is None
    assert comms_rest_ful_request_0.uri == "'rI(={-p!"
    var_1 = comms_rest_ful_request_0.to_dict()
    module_0.CommsRestFulRequest(str_0, trace_id=var_1)

@pytest.mark.xfail(strict=True)
def test_case_20():
    comms_response_0 = module_1.purge()
    module_0.CommsResponse(response_code=comms_response_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    comms_response_0 = module_0.CommsResponse()
    assert f'{type(comms_response_0).__module__}.{type(comms_response_0).__qualname__}' == 'odc_pycommons.models.CommsResponse'
    assert comms_response_0.is_error is True
    assert comms_response_0.response_code == -1
    assert comms_response_0.response_code_description == 'Response code undefined'
    assert comms_response_0.response_data is None
    assert comms_response_0.trace_id is None
    assert comms_response_0.warnings == []
    var_0 = comms_response_0.to_dict()
    module_0.CommsResponse(response_code_description=var_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = '/\t$2EE`vj6 f~].:E'
    dict_0 = {}
    comms_rest_ful_request_0 = module_0.CommsRestFulRequest(str_0, dict_0)
    assert f'{type(comms_rest_ful_request_0).__module__}.{type(comms_rest_ful_request_0).__qualname__}' == 'odc_pycommons.models.CommsRestFulRequest'
    assert comms_rest_ful_request_0.data == {}
    assert comms_rest_ful_request_0.trace_id is None
    assert comms_rest_ful_request_0.uri == '/\t$2EE`vj6 f~].:E'
    var_0 = comms_rest_ful_request_0.to_json()
    assert var_0 == '{}'
    module_2.py_encode_basestring(comms_rest_ful_request_0)