# Automatically generated by Pynguin.
import pytest
import flata.database as module_0
import flata.utils as module_1
import flata.storages as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '\n        Read the last stored state.\n\n        Any kind of deserialization should go here.\n        Return ``None`` here to indicate that the storage is empty.\n\n        :rtype: dict\n        '
    set_0 = {str_0, str_0}
    module_0.Element(set_0)

def test_case_1():
    element_0 = module_0.Element()
    assert f'{type(element_0).__module__}.{type(element_0).__qualname__}' == 'flata.database.Element'
    assert len(element_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    storage_proxy_0 = module_0.StorageProxy(none_type_0, none_type_0)
    assert module_0.StorageProxy.DEFAULT_ID_FIELD == 'id'
    assert f'{type(module_0.StorageProxy.table_name).__module__}.{type(module_0.StorageProxy.table_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StorageProxy.id_field).__module__}.{type(module_0.StorageProxy.id_field).__qualname__}' == 'builtins.property'
    storage_proxy_0.read()

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    storage_proxy_0 = module_0.StorageProxy(none_type_0, none_type_0)
    assert module_0.StorageProxy.DEFAULT_ID_FIELD == 'id'
    assert f'{type(module_0.StorageProxy.table_name).__module__}.{type(module_0.StorageProxy.table_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StorageProxy.id_field).__module__}.{type(module_0.StorageProxy.id_field).__qualname__}' == 'builtins.property'
    storage_proxy_0.purge_table()

@pytest.mark.xfail(strict=True)
def test_case_4():
    module_0.Flata()

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    storage_proxy_0 = module_0.StorageProxy(none_type_0, none_type_0)
    assert module_0.StorageProxy.DEFAULT_ID_FIELD == 'id'
    assert f'{type(module_0.StorageProxy.table_name).__module__}.{type(module_0.StorageProxy.table_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StorageProxy.id_field).__module__}.{type(module_0.StorageProxy.id_field).__qualname__}' == 'builtins.property'
    module_0.Table(storage_proxy_0, storage_proxy_0)

def test_case_6():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = '?Duw'
    var_0 = flata_0.table(str_0)
    assert len(flata_0) == 0
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'flata.database.Table'
    assert len(var_0) == 0
    var_1 = var_0.update(flata_0, ids=flata_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b'\x0f\xdf\xf4\x9e|9\xed?\x90\x06\xc8'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    var_0 = module_1.LRUCache()
    var_1 = flata_0.get(bytes_0)
    module_0.StorageProxy(var_1, var_1, **bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b'\x0f\xdf\xf4\x9e|9\xed?\x90\x06\xc8'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    var_0 = flata_0.__enter__()
    var_0.purge_table()

@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b'\x0f\xdf\xf4\x9e|9\xed?\x90\x06\xc8'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    flata_0.get(list_0)

def test_case_10():
    bytes_0 = b'\x8c\x8f-`o$\xab\x0biDd\xf0\x06\xe8\xf7\xda3\x96'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    var_0 = flata_0.tables()
    var_1 = flata_0.__exit__()

@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b'\x0f\xdf\xf4\x9e|9\xed?\x90\x06\xc8'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    var_0 = flata_0.all()
    var_1 = flata_0.__enter__()
    var_2 = flata_0.get(bytes_0)
    var_3 = var_1.tables()
    var_3.close()

@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b'\x0f\xdf\xf4\x9e|9?\x06\xc8'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    var_0 = flata_0.purge_tables()
    flata_1 = module_0.Flata(*list_0)
    var_0.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b'\x0f\xdf\xf4\x9e|9\xed?\x90\x06\xc8'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    flata_0.table(flata_0)

def test_case_14():
    bytes_0 = b'\x0f\xdf\xf4\x9e|9\xed?\x90\x06'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    var_0 = flata_0.purge_table(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    flata_0.table(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1"\x02\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    flata_0.table(bytes_0)

def test_case_17():
    complex_0 = (-1847.5861729740682+2400j)
    bytes_0 = b'\x8c\x8f-`o$\xab\x0biDd\xf0\x06\xe8\xf7\xda3\x96'
    element_0 = module_0.Element(id=complex_0)
    assert f'{type(element_0).__module__}.{type(element_0).__qualname__}' == 'flata.database.Element'
    assert len(element_0) == 0
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    none_type_0 = None
    with pytest.raises(ValueError):
        flata_0.table(none_type_0)

def test_case_18():
    bytes_0 = b'\x8c\x8f-`o$\xab\x0biDd\xf0\x06\xe8\xf7\xda3\x96'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    var_0 = flata_0.close()
    var_1 = flata_0.__exit__()

def test_case_19():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = 'Dil'
    var_0 = flata_0.table(str_0)
    assert len(flata_0) == 0
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'flata.database.Table'
    assert len(var_0) == 0
    var_1 = var_0.search(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    var_0 = flata_0.purge_table(bytes_0)
    str_0 = '?Duw'
    var_1 = flata_0.table(str_0)
    assert len(flata_0) == 0
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'flata.database.Table'
    assert len(var_1) == 0
    var_1.insert_multiple(bytes_0)

def test_case_21():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = 'Dil'
    var_0 = flata_0.table(str_0)
    assert len(flata_0) == 0
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'flata.database.Table'
    assert len(var_0) == 0
    var_1 = var_0.get(var_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = 'DKl.'
    var_0 = flata_0.table(str_0)
    assert len(flata_0) == 0
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'flata.database.Table'
    assert len(var_0) == 0
    var_1 = var_0.remove(str_0)
    module_2.JSONStorage(var_0, var_0)

def test_case_23():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = 'Dil'
    var_0 = flata_0.table(str_0)
    assert len(flata_0) == 0
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'flata.database.Table'
    assert len(var_0) == 0
    var_1 = var_0.remove(str_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    var_0 = flata_0.purge_table(bytes_0)
    str_0 = '?Du'
    var_1 = flata_0.tables()
    var_2 = flata_0.table(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'flata.database.Table'
    module_0.Element(flata_0)
    var_3 = var_2.purge()
    var_4 = var_2.remove(ids=element_0)
    var_5 = var_2.update(flata_0)
    var_6 = var_2.search(bytes_0)
    var_7 = var_2.get(var_2)
    var_8 = var_2.insert_multiple(str_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = '?Duw'
    var_0 = flata_0.table(str_0)
    assert len(flata_0) == 0
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'flata.database.Table'
    assert len(var_0) == 0
    var_0.update(str_0, ids=bytes_0)

def test_case_26():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = 'Dil'
    var_0 = flata_0.table(str_0)
    assert len(flata_0) == 0
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'flata.database.Table'
    assert len(var_0) == 0
    var_1 = var_0.count(bytes_0)
    assert var_1 == 0

@pytest.mark.xfail(strict=True)
def test_case_27():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = "'Al.d$&'Upm"
    var_0 = flata_0.tables()
    var_1 = flata_0.table(str_0)
    assert len(flata_0) == 1
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'flata.database.Table'
    assert len(var_1) == 1
    element_0 = module_0.Element(flata_0)
    var_2 = var_1.remove(ids=element_0)
    var_3 = var_1.update(flata_0)
    var_4 = var_1.search(bytes_0)
    var_5 = var_1.get(var_1)
    var_1.remove(var_4, list_0)

def test_case_28():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = 'Dil'
    var_0 = flata_0.table(str_0)
    assert len(flata_0) == 0
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'flata.database.Table'
    assert len(var_0) == 0
    with pytest.raises(ValueError):
        var_0.insert(list_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = '?Duw'
    var_0 = flata_0.table(str_0)
    assert len(flata_0) == 0
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'flata.database.Table'
    assert len(var_0) == 0
    var_0.insert_multiple(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    none_type_0 = None
    str_0 = 'QWB!1&'
    dict_0 = {str_0: flata_0, str_0: str_0, str_0: none_type_0, str_0: flata_0, str_0: list_0}
    storage_proxy_0 = module_0.StorageProxy(none_type_0, flata_0, **dict_0)
    assert module_0.StorageProxy.DEFAULT_ID_FIELD == 'id'
    assert f'{type(module_0.StorageProxy.table_name).__module__}.{type(module_0.StorageProxy.table_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.StorageProxy.id_field).__module__}.{type(module_0.StorageProxy.id_field).__qualname__}' == 'builtins.property'
    var_0 = flata_0.tables()
    var_1 = flata_0.table(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'flata.database.Table'
    module_0.Element(flata_0)
    var_2 = var_1.remove(ids=element_0)
    var_3 = var_1.update(flata_0)
    var_4 = var_1.search(bytes_0)
    var_5 = var_1.clear_cache()
    var_6 = var_1.get(var_1)
    var_7 = var_1.insert(var_3)

def test_case_31():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    var_0 = flata_0.purge_table(bytes_0)
    str_0 = '\n        Flush all unwritten data to disk.\n        '
    var_1 = flata_0.table(str_0)
    assert len(flata_0) == 0
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'flata.database.Table'
    assert len(var_1) == 0
    var_2 = var_1.update(flata_0)
    var_3 = flata_0.tables()
    var_4 = var_1.search(bytes_0)
    var_5 = var_1.insert_multiple(flata_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'flata.database.Flata'
    assert len(var_5) == 0

def test_case_32():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = '?Duw'
    var_0 = flata_0.table(str_0)
    assert len(flata_0) == 0
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'flata.database.Table'
    assert len(var_0) == 0
    var_1 = var_0.contains()
    assert var_1 is False
    var_2 = flata_0.table(str_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = '?Du'
    var_0 = flata_0.tables()
    var_1 = flata_0.table(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'flata.database.Table'
    var_1.remove(ids=var_1)
    var_2 = var_1.update(flata_0)
    var_3 = var_1.search(bytes_0)
    var_4 = var_1.search(bytes_0)
    var_5 = var_1.get(var_1)
    var_6 = var_1.insert_multiple(str_0)

def test_case_34():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = '?Duw'
    var_0 = flata_0.table(str_0)
    assert len(flata_0) == 0
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'flata.database.Table'
    assert len(var_0) == 0
    var_1 = flata_0.table(str_0)
    var_2 = var_0.update(str_0, ids=var_1)

@pytest.mark.xfail(strict=True)
def test_case_35():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    var_0 = flata_0.purge_table(bytes_0)
    str_0 = '?Duw'
    var_1 = flata_0.table(str_0)
    assert len(flata_0) == 0
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'flata.database.Table'
    assert len(var_1) == 0
    var_2 = flata_0.table(str_0)
    var_2.get(bytes_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = "'A.$&\rUpm"
    var_0 = flata_0.purge_table(bytes_0)
    var_1 = flata_0.table(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'flata.database.Table'
    module_0.Element(flata_0)
    var_2 = var_1.insert_multiple(flata_0)
    assert len(var_2) == 0
    var_3 = var_1.contains(ids=var_1)
    assert var_3 is False
    var_4 = var_1.update(flata_0)
    var_5 = var_1.insert(element_0)
    assert len(flata_0) == 1
    assert len(var_1) == 1
    assert len(var_2) == 1
    var_6 = var_1.remove()

@pytest.mark.xfail(strict=True)
def test_case_37():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    var_0 = flata_0.purge_table(bytes_0)
    str_0 = '?Du'
    var_1 = flata_0.table(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'flata.database.Table'
    var_1.update(flata_0)
    var_2 = flata_0.tables()
    var_3 = var_1.search(bytes_0)
    var_4 = var_1.remove()
    var_5 = var_1.get(var_4)
    var_6 = var_1.contains(ids=bytes_0)
    var_7 = var_1.contains()
    var_8 = var_4.write(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_38():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = 'QWB!1&'
    var_0 = flata_0.purge_table(bytes_0)
    var_1 = flata_0.table(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'flata.database.Table'
    var_2 = flata_0.purge_table(str_0)
    assert len(flata_0) == 0
    assert len(var_1) == 0
    element_0 = module_0.Element(flata_0)
    assert f'{type(element_0).__module__}.{type(element_0).__qualname__}' == 'flata.database.Element'
    assert len(element_0) == 0
    var_3 = var_1.insert_multiple(flata_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'flata.database.Flata'
    assert len(var_3) == 0
    var_4 = var_1.remove(ids=element_0)
    var_5 = var_1.update(flata_0)
    var_6 = var_1.search(bytes_0)
    var_7 = var_1.get(var_1)
    var_8 = var_1.insert(element_0)
    assert len(flata_0) == 1
    assert len(var_1) == 1
    assert len(element_0) == 1
    assert len(var_3) == 1
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'flata.database.Element'
    assert len(var_8) == 1
    var_1.count(var_7)

def test_case_39():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = '?Du'
    var_0 = flata_0.table(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'flata.database.Table'
    with pytest.raises(ValueError):
        var_0.insert(flata_0)

def test_case_40():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    var_0 = flata_0.purge_table(bytes_0)
    str_0 = '?Du'
    var_1 = flata_0.tables()
    var_2 = flata_0.table(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'flata.database.Table'
    module_0.Element(flata_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    var_0 = flata_0.purge_table(bytes_0)
    str_0 = '?Du'
    var_1 = flata_0.tables()
    var_2 = flata_0.table(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'flata.database.Table'
    var_3 = var_2.__len__()
    module_0.Element(flata_0)
    var_4 = var_2.insert(element_0)
    assert len(flata_0) == 1
    assert len(var_2) == 1
    var_5 = var_1.get(bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_42():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = 'QWB!1&'
    var_0 = flata_0.purge_table(bytes_0)
    var_1 = flata_0.table(str_0)
    assert len(flata_0) == 1
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'flata.database.Table'
    assert len(var_1) == 1
    module_0.Element(flata_0)
    var_2 = var_1.search(bytes_0)
    var_3 = var_1.get(var_1)
    var_4 = var_1.insert(element_0)
    var_5 = var_1.count(var_3)

@pytest.mark.xfail(strict=True)
def test_case_43():
    bytes_0 = b'\x95\xdc2A\xcbXDe\xce\xb1\x02\x83\xd3'
    list_0 = [bytes_0]
    flata_0 = module_0.Flata(*list_0)
    str_0 = "'Al.wd$&\t\npm"
    var_0 = flata_0.table(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'flata.database.Table'
    module_0.Element(flata_0)
    var_1 = var_0.remove(ids=element_0)
    var_2 = var_0.update(flata_0)
    var_3 = var_0.search(bytes_0)
    var_4 = var_0.get(var_0)
    var_5 = var_0.insert(element_0)
    assert len(flata_0) == 1
    assert len(var_0) == 1
    var_6 = var_0.get(var_5)

@pytest.mark.xfail(strict=True)
def test_case_44():
    str_0 = '\n        Test a dict value for inequality.\n\n        >>> Query().f1 != 42\n\n        :param rhs: The value to compare against\n        '
    str_1 = 'cache'
    dict_0 = {str_1: str_0, str_1: str_0, str_0: str_1, str_1: str_1}
    flata_0 = module_0.Flata(**dict_0)
    assert f'{type(flata_0).__module__}.{type(flata_0).__qualname__}' == 'flata.database.Flata'
    module_0.Flata()