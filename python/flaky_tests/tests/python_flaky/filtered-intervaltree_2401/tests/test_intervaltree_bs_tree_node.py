# Automatically generated by Pynguin.
import pytest
import intervaltree.bs_tree_node as module_0
import builtins as module_1

def test_case_0():
    b_s_tree_node_0 = module_0.BSTreeNode()
    assert f'{type(module_0.BSTreeNode.parent_relationship).__module__}.{type(module_0.BSTreeNode.parent_relationship).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.BSTreeNode.depth).__module__}.{type(module_0.BSTreeNode.depth).__qualname__}' == 'builtins.property'
    b_s_tree_node_1 = module_0.BSTreeNode(parent=b_s_tree_node_0, left_child=b_s_tree_node_0)
    var_0 = b_s_tree_node_0.get_successor_for_node(b_s_tree_node_1)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert var_0.key is None
    assert var_0.parent is None
    assert var_0.left_child is None
    assert var_0.right_child is None
    assert var_0.tree is None
    var_1 = b_s_tree_node_0.get_depth(b_s_tree_node_0)
    assert var_1 == 0

def test_case_1():
    b_s_tree_node_0 = module_0.BSTreeNode()
    assert f'{type(module_0.BSTreeNode.parent_relationship).__module__}.{type(module_0.BSTreeNode.parent_relationship).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.BSTreeNode.depth).__module__}.{type(module_0.BSTreeNode.depth).__qualname__}' == 'builtins.property'
    var_0 = b_s_tree_node_0.inorder_walk(b_s_tree_node_0)
    b_s_tree_node_1 = module_0.BSTreeNode(b_s_tree_node_0, b_s_tree_node_0, right_child=b_s_tree_node_0, tree=b_s_tree_node_0)
    var_1 = b_s_tree_node_1.get_predecessor_for_node(b_s_tree_node_1)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert var_1.key is None
    assert var_1.parent is None
    assert var_1.left_child is None
    assert var_1.right_child is None
    assert var_1.tree is None

def test_case_2():
    b_s_tree_node_0 = module_0.BSTreeNode()
    assert f'{type(module_0.BSTreeNode.parent_relationship).__module__}.{type(module_0.BSTreeNode.parent_relationship).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.BSTreeNode.depth).__module__}.{type(module_0.BSTreeNode.depth).__qualname__}' == 'builtins.property'

def test_case_3():
    b_s_tree_node_0 = module_0.BSTreeNode()
    assert f'{type(module_0.BSTreeNode.parent_relationship).__module__}.{type(module_0.BSTreeNode.parent_relationship).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.BSTreeNode.depth).__module__}.{type(module_0.BSTreeNode.depth).__qualname__}' == 'builtins.property'
    b_s_tree_node_1 = module_0.BSTreeNode(parent=b_s_tree_node_0, left_child=b_s_tree_node_0)
    var_0 = b_s_tree_node_0.get_successor_for_node(b_s_tree_node_1)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert var_0.key is None
    assert var_0.parent is None
    assert var_0.left_child is None
    assert var_0.right_child is None
    assert var_0.tree is None
    bool_0 = False
    b_s_tree_node_2 = module_0.BSTreeNode(parent=bool_0)
    var_1 = b_s_tree_node_0.get_predecessor_for_node(b_s_tree_node_1)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert var_1.key is None
    assert var_1.parent is None
    assert var_1.left_child is None
    assert var_1.right_child is None
    assert var_1.tree is None

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'right_child'
    none_type_0 = None
    b_s_tree_node_0 = module_0.BSTreeNode(none_type_0, left_child=none_type_0)
    assert f'{type(module_0.BSTreeNode.parent_relationship).__module__}.{type(module_0.BSTreeNode.parent_relationship).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.BSTreeNode.depth).__module__}.{type(module_0.BSTreeNode.depth).__qualname__}' == 'builtins.property'
    b_s_tree_node_0.get_maximum(str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    b_s_tree_node_0 = module_0.BSTreeNode()
    assert f'{type(module_0.BSTreeNode.parent_relationship).__module__}.{type(module_0.BSTreeNode.parent_relationship).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.BSTreeNode.depth).__module__}.{type(module_0.BSTreeNode.depth).__qualname__}' == 'builtins.property'
    b_s_tree_node_1 = module_0.BSTreeNode(parent=b_s_tree_node_0, left_child=b_s_tree_node_0)
    var_0 = b_s_tree_node_0.get_successor_for_node(b_s_tree_node_1)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert var_0.key is None
    assert var_0.parent is None
    assert var_0.left_child is None
    assert var_0.right_child is None
    assert var_0.tree is None
    var_1 = b_s_tree_node_1.get_relationship_between_nodes(b_s_tree_node_1, b_s_tree_node_0)
    var_2 = b_s_tree_node_0.get_depth(b_s_tree_node_0)
    assert var_2 == 0
    b_s_tree_node_2 = module_0.BSTreeNode(left_child=var_1, right_child=var_1, tree=var_0)
    assert f'{type(b_s_tree_node_2.tree).__module__}.{type(b_s_tree_node_2.tree).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    var_2.get_predecessor_for_node(var_2)

@pytest.mark.xfail(strict=True)
def test_case_6():
    b_s_tree_node_0 = module_0.BSTreeNode()
    assert f'{type(module_0.BSTreeNode.parent_relationship).__module__}.{type(module_0.BSTreeNode.parent_relationship).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.BSTreeNode.depth).__module__}.{type(module_0.BSTreeNode.depth).__qualname__}' == 'builtins.property'
    var_0 = b_s_tree_node_0.get_successor_for_node(b_s_tree_node_0)
    b_s_tree_node_0.delete_node(b_s_tree_node_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    b_s_tree_node_0 = module_0.BSTreeNode()
    assert f'{type(module_0.BSTreeNode.parent_relationship).__module__}.{type(module_0.BSTreeNode.parent_relationship).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.BSTreeNode.depth).__module__}.{type(module_0.BSTreeNode.depth).__qualname__}' == 'builtins.property'
    var_0 = b_s_tree_node_0.get_predecessor_for_node(b_s_tree_node_0)
    bool_0 = False
    bool_1 = True
    b_s_tree_node_1 = module_0.BSTreeNode(left_child=var_0, right_child=bool_0, tree=bool_1)
    var_0.get_predecessor_for_node(b_s_tree_node_1)

def test_case_8():
    b_s_tree_node_0 = module_0.BSTreeNode()
    assert f'{type(module_0.BSTreeNode.parent_relationship).__module__}.{type(module_0.BSTreeNode.parent_relationship).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.BSTreeNode.depth).__module__}.{type(module_0.BSTreeNode.depth).__qualname__}' == 'builtins.property'
    b_s_tree_node_1 = module_0.BSTreeNode(parent=b_s_tree_node_0, left_child=b_s_tree_node_0)
    var_0 = b_s_tree_node_0.get_successor_for_node(b_s_tree_node_1)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert var_0.key is None
    assert var_0.parent is None
    assert var_0.left_child is None
    assert var_0.right_child is None
    assert var_0.tree is None

def test_case_9():
    b_s_tree_node_0 = module_0.BSTreeNode()
    assert f'{type(module_0.BSTreeNode.parent_relationship).__module__}.{type(module_0.BSTreeNode.parent_relationship).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.BSTreeNode.depth).__module__}.{type(module_0.BSTreeNode.depth).__qualname__}' == 'builtins.property'
    var_0 = b_s_tree_node_0.inorder_walk(b_s_tree_node_0)
    b_s_tree_node_1 = module_0.BSTreeNode(b_s_tree_node_0, b_s_tree_node_0, right_child=b_s_tree_node_0, tree=b_s_tree_node_0)
    var_1 = b_s_tree_node_1.get_depth(b_s_tree_node_1)
    assert var_1 == 1
    var_2 = b_s_tree_node_1.get_predecessor_for_node(b_s_tree_node_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert var_2.key is None
    assert var_2.parent is None
    assert var_2.left_child is None
    assert var_2.right_child is None
    assert var_2.tree is None

@pytest.mark.xfail(strict=True)
def test_case_10():
    b_s_tree_node_0 = module_0.BSTreeNode()
    assert f'{type(module_0.BSTreeNode.parent_relationship).__module__}.{type(module_0.BSTreeNode.parent_relationship).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.BSTreeNode.depth).__module__}.{type(module_0.BSTreeNode.depth).__qualname__}' == 'builtins.property'
    var_0 = b_s_tree_node_0.get_maximum(b_s_tree_node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert var_0.key is None
    assert var_0.parent is None
    assert var_0.left_child is None
    assert var_0.right_child is None
    assert var_0.tree is None
    b_s_tree_node_1 = module_0.BSTreeNode(parent=var_0, left_child=b_s_tree_node_0)
    var_1 = module_0.BSTreeNode(parent=b_s_tree_node_1, left_child=b_s_tree_node_1, right_child=b_s_tree_node_1)
    var_2 = b_s_tree_node_0.get_depth(var_1)
    assert var_2 == 2
    var_2.get_maximum(var_1)

def test_case_11():
    b_s_tree_node_0 = module_0.BSTreeNode()
    assert f'{type(module_0.BSTreeNode.parent_relationship).__module__}.{type(module_0.BSTreeNode.parent_relationship).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.BSTreeNode.depth).__module__}.{type(module_0.BSTreeNode.depth).__qualname__}' == 'builtins.property'
    var_0 = b_s_tree_node_0.get_maximum(b_s_tree_node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert var_0.key is None
    assert var_0.parent is None
    assert var_0.left_child is None
    assert var_0.right_child is None
    assert var_0.tree is None
    none_type_0 = None
    b_s_tree_node_1 = module_0.BSTreeNode(parent=none_type_0, left_child=var_0, right_child=var_0, tree=none_type_0)
    var_1 = b_s_tree_node_0.get_successor_for_node(b_s_tree_node_1)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert var_1.key is None
    assert var_1.parent is None
    assert var_1.left_child is None
    assert var_1.right_child is None
    assert var_1.tree is None
    var_2 = b_s_tree_node_0.get_predecessor_for_node(var_1)
    var_3 = module_1.object()
    b_s_tree_node_2 = module_0.BSTreeNode(var_3, b_s_tree_node_0, right_child=b_s_tree_node_0, tree=var_0)
    bool_0 = False
    var_4 = var_0.get_depth(var_0)
    assert var_4 == 0
    bool_1 = True
    b_s_tree_node_3 = module_0.BSTreeNode(left_child=var_0, right_child=bool_0, tree=bool_1)
    var_5 = b_s_tree_node_1.get_predecessor_for_node(b_s_tree_node_2)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert var_5.key is None
    assert var_5.parent is None
    assert var_5.left_child is None
    assert var_5.right_child is None
    assert var_5.tree is None