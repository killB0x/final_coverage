# Automatically generated by Pynguin.
import pytest
import intervaltree.bs_tree as module_0
import builtins as module_1

def test_case_0():
    b_s_tree_0 = module_0.BSTree()
    int_0 = -3555
    tuple_0 = (int_0,)
    var_0 = b_s_tree_0.search_for_key(tuple_0)
    var_1 = b_s_tree_0.add_node(b_s_tree_0)
    assert f'{type(b_s_tree_0.root).__module__}.{type(b_s_tree_0.root).__qualname__}' == 'intervaltree.bs_tree.BSTree'
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervaltree.bs_tree.BSTree'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.bs_tree.BSTree'
    b_s_tree_0.add_node(var_1)

def test_case_1():
    b_s_tree_0 = module_0.BSTree()
    str_0 = ')/G^Xa*z='
    var_0 = b_s_tree_0.add_node(str_0)
    assert var_0 == ')/G^Xa*z='
    assert b_s_tree_0.root == ')/G^Xa*z='
    var_1 = b_s_tree_0.inorder_walk()

def test_case_2():
    b_s_tree_0 = module_0.BSTree()

@pytest.mark.xfail(strict=True)
def test_case_3():
    b_s_tree_0 = module_0.BSTree()
    b_s_tree_0.delete_node(b_s_tree_0)

def test_case_4():
    b_s_tree_0 = module_0.BSTree()
    list_0 = b_s_tree_0.search_for_key(b_s_tree_0)
    var_0 = module_1.object(*list_0)
    b_s_tree_1 = module_0.BSTree()
    var_1 = b_s_tree_1.add_node(var_0)
    assert f'{type(b_s_tree_1.root).__module__}.{type(b_s_tree_1.root).__qualname__}' == 'builtins.object'
    var_2 = b_s_tree_0.add_node(var_0)
    var_2.get_predecessor_for_node(list_0)

def test_case_5():
    b_s_tree_0 = module_0.BSTree()
    var_0 = b_s_tree_0.inorder_walk()
    object_0 = module_1.object(*var_0)
    b_s_tree_1 = module_0.BSTree()
    var_1 = b_s_tree_1.add_node(object_0)
    assert f'{type(b_s_tree_1.root).__module__}.{type(b_s_tree_1.root).__qualname__}' == 'builtins.object'
    var_2 = b_s_tree_0.add_node(object_0)
    var_2.get_predecessor_for_node(var_0)