# Automatically generated by Pynguin.
import pytest
import intervaltree.rb_tree as module_0
import intervaltree.rb_tree_funcs as module_1
import intervaltree.rb_tree_node as module_2
import intervaltree.bs_tree_node as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    r_b_tree_0 = module_0.RBTree()
    module_1.rb_delete_fixup(r_b_tree_0, r_b_tree_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '\n        gets the relationship between the parent and this child\n        :return: "left_child" if the node is the left child, else "right_child"\n        '
    module_1.rb_delete_fixup(str_0, str_0, str_0, str_0)

def test_case_2():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_1.tree_minimum(var_0, r_b_tree_0)

def test_case_3():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_1 = module_1.rb_delete_fixup(r_b_tree_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_1 = module_1.rb_delete_fixup(r_b_tree_0, r_b_tree_node_0, right_rotate_func=var_0)
    module_1.delete_node(r_b_tree_0, r_b_tree_node_0, var_0)

def test_case_5():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_1 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1.nil).__module__}.{type(var_1.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.tree).__module__}.{type(var_1.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1.left_child).__module__}.{type(var_1.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_1.right_child is None
    assert var_1.black is True
    assert f'{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'

@pytest.mark.xfail(strict=True)
def test_case_6():
    r_b_tree_0 = module_0.RBTree()
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_0 = r_b_tree_0.add_node(r_b_tree_node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert var_0.key is None
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    var_1 = module_1.delete_node(r_b_tree_0, r_b_tree_node_0, r_b_tree_0)
    module_1.rb_delete_fixup(r_b_tree_0, var_0, r_b_tree_node_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_1 = module_1.rb_delete_fixup(r_b_tree_0, r_b_tree_node_0, right_rotate_func=var_0)
    var_2 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.nil).__module__}.{type(var_2.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.root).__module__}.{type(var_2.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.tree).__module__}.{type(var_2.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.left_child).__module__}.{type(var_2.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_2.right_child is None
    assert var_2.black is True
    assert f'{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_3 = module_1.right_rotate(r_b_tree_0, var_0)
    assert f'{type(var_3.root).__module__}.{type(var_3.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    module_1.rb_delete_fixup(var_2, var_0)

def test_case_8():
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_0 = r_b_tree_node_0.right_rotate(r_b_tree_node_0, r_b_tree_node_0)
    r_b_tree_node_1 = module_1.tree_successor(r_b_tree_node_0, r_b_tree_node_0)

def test_case_9():
    r_b_tree_node_0 = module_2.RBTreeNode()
    r_b_tree_node_1 = module_1.tree_successor(r_b_tree_node_0, r_b_tree_node_0)

def test_case_10():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_1 = module_1.transplant(r_b_tree_0, r_b_tree_0, r_b_tree_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_2.RBTreeNode(left_child=var_0)
    var_1 = module_1.rb_delete_fixup(r_b_tree_0, r_b_tree_0)
    r_b_tree_node_1 = module_1.tree_minimum(var_0, r_b_tree_node_0)
    module_1.left_rotate(r_b_tree_node_0, r_b_tree_node_1)

@pytest.mark.xfail(strict=True)
def test_case_12():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_1 = module_0.RBTree(r_b_tree_0)
    module_1.tree_minimum(var_1, var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    b_s_tree_node_0 = module_3.BSTreeNode()
    none_type_0 = None
    r_b_tree_node_0 = module_2.RBTreeNode(none_type_0, none_type_0, b_s_tree_node_0, none_type_0)
    module_1.right_rotate(b_s_tree_node_0, r_b_tree_node_0)

def test_case_14():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_1 = r_b_tree_node_0.get_minimum(r_b_tree_0)
    var_2 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.nil).__module__}.{type(var_2.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.root).__module__}.{type(var_2.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.tree).__module__}.{type(var_2.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.left_child).__module__}.{type(var_2.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_2.right_child is None
    assert var_2.black is True
    assert f'{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_3 = var_0.add_node(r_b_tree_node_0)
    assert r_b_tree_node_0.black is True
    assert f'{type(r_b_tree_node_0.parent).__module__}.{type(r_b_tree_node_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_3.black is True
    assert var_3.key is None
    assert f'{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_3.left_child).__module__}.{type(var_3.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_3.right_child).__module__}.{type(var_3.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_3.tree).__module__}.{type(var_3.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    r_b_tree_node_1 = module_2.RBTreeNode(var_0, right_child=var_3)
    var_4 = module_1.right_rotate(var_1, r_b_tree_node_1)
    module_1.delete_node(var_2, var_4, var_2)

@pytest.mark.xfail(strict=True)
def test_case_15():
    r_b_tree_0 = module_0.RBTree()
    r_b_tree_node_0 = module_2.RBTreeNode()
    module_1.delete_node(r_b_tree_0, r_b_tree_node_0, r_b_tree_0)

def test_case_16():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_1 = r_b_tree_node_0.get_minimum(r_b_tree_0)
    var_2 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.nil).__module__}.{type(var_2.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.root).__module__}.{type(var_2.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.tree).__module__}.{type(var_2.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.left_child).__module__}.{type(var_2.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_2.right_child is None
    assert var_2.black is True
    assert f'{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_3 = var_0.add_node(r_b_tree_node_0)
    r_b_tree_node_1 = module_1.tree_successor(var_2, r_b_tree_node_0)
    var_4 = module_1.right_rotate(var_1, r_b_tree_node_1)
    var_5 = var_2.rb_delete_fixup(var_2, var_2)
    r_b_tree_node_2 = module_2.RBTreeNode(var_0, right_child=var_3)
    var_6 = module_1.transplant(var_2, r_b_tree_node_1, r_b_tree_node_0)
    var_7 = module_1.right_rotate(var_1, r_b_tree_node_2)
    module_1.delete_node(var_2, var_7, var_2)

@pytest.mark.xfail(strict=True)
def test_case_17():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_1 = module_0.RBTree()
    var_1 = module_1.transplant(r_b_tree_1, var_0, var_0)
    var_2 = r_b_tree_1.inorder_walk()
    r_b_tree_node_0 = module_1.tree_minimum(r_b_tree_0, var_0)
    r_b_tree_node_0.get_successor_for_node(r_b_tree_1)

def test_case_18():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_1 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1.nil).__module__}.{type(var_1.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.tree).__module__}.{type(var_1.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1.left_child).__module__}.{type(var_1.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_1.right_child is None
    assert var_1.black is True
    assert f'{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_2 = var_0.add_node(var_1)
    var_3 = module_1.left_rotate(r_b_tree_0, var_0)

def test_case_19():
    r_b_tree_0 = module_0.RBTree()
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_0 = r_b_tree_0.add_node(r_b_tree_node_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert var_0.key is None
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    var_1 = module_1.delete_node(r_b_tree_0, r_b_tree_node_0, r_b_tree_0)

def test_case_20():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_1.tree_successor(r_b_tree_0, var_0)
    var_1 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(r_b_tree_node_0.parent).__module__}.{type(r_b_tree_node_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(r_b_tree_node_0.left_child).__module__}.{type(r_b_tree_node_0.left_child).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1.nil).__module__}.{type(var_1.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.tree).__module__}.{type(var_1.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1.left_child).__module__}.{type(var_1.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_1.right_child is None
    assert var_1.black is True
    assert f'{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_2 = var_0.add_node(r_b_tree_node_0)
    r_b_tree_node_1 = module_1.tree_successor(var_2, var_0)
    var_3 = r_b_tree_0.rb_delete_fixup(var_0, r_b_tree_0)

def test_case_21():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_1.tree_successor(var_0, var_0)
    var_1 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(r_b_tree_node_0.parent).__module__}.{type(r_b_tree_node_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(r_b_tree_node_0.left_child).__module__}.{type(r_b_tree_node_0.left_child).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1.nil).__module__}.{type(var_1.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.tree).__module__}.{type(var_1.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1.left_child).__module__}.{type(var_1.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_1.right_child is None
    assert var_1.black is True
    assert f'{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_2 = module_1.right_rotate(r_b_tree_0, r_b_tree_node_0)
    module_1.tree_minimum(var_2, var_1)

def test_case_22():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_2.RBTreeNode()
    r_b_tree_node_1 = module_1.tree_minimum(r_b_tree_0, var_0)
    var_1 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(r_b_tree_node_1.root).__module__}.{type(r_b_tree_node_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1.nil).__module__}.{type(var_1.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.tree).__module__}.{type(var_1.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1.left_child).__module__}.{type(var_1.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_1.right_child is None
    assert var_1.black is True
    assert f'{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_2 = module_2.RBTreeNode(left_child=r_b_tree_0)
    var_2 = module_1.right_rotate(var_0, r_b_tree_node_2)
    var_3 = module_1.right_rotate(r_b_tree_0, r_b_tree_node_2)
    module_1.left_rotate(var_1, r_b_tree_node_0)

def test_case_23():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_2.RBTreeNode(r_b_tree_0, r_b_tree_0, var_0)
    r_b_tree_node_1 = module_1.tree_minimum(r_b_tree_0, r_b_tree_node_0)
    r_b_tree_1 = module_0.RBTree(r_b_tree_node_0)
    var_1 = module_1.left_rotate(r_b_tree_1, r_b_tree_node_1)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1.nil).__module__}.{type(var_1.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1.tree).__module__}.{type(var_1.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1.left_child).__module__}.{type(var_1.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_1.right_child is None
    assert var_1.black is True
    assert f'{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_2 = var_0.rb_delete_fixup(var_0, r_b_tree_1)
    var_3 = module_1.right_rotate(var_1, var_1)
    module_1.left_rotate(r_b_tree_0, var_2)

def test_case_24():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_1.tree_minimum(r_b_tree_0, var_0)
    var_1 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(r_b_tree_node_0.root).__module__}.{type(r_b_tree_node_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1.nil).__module__}.{type(var_1.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.tree).__module__}.{type(var_1.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_1.left_child).__module__}.{type(var_1.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_1.right_child is None
    assert var_1.black is True
    assert f'{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_2 = var_0.add_node(var_1)
    r_b_tree_node_1 = module_1.tree_successor(var_1, var_0)
    var_3 = module_1.right_rotate(r_b_tree_0, var_0)
    var_4 = module_1.left_rotate(var_3, r_b_tree_node_0)
    r_b_tree_0.rb_delete_fixup(r_b_tree_node_1, var_3)

def test_case_25():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_1 = module_1.right_rotate(r_b_tree_0, var_0)
    r_b_tree_node_0 = module_2.RBTreeNode()
    r_b_tree_node_1 = module_1.tree_minimum(r_b_tree_0, var_0)
    var_2 = r_b_tree_node_0.get_minimum(r_b_tree_0)
    var_3 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(r_b_tree_node_1.root).__module__}.{type(r_b_tree_node_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.root).__module__}.{type(var_2.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_3.nil).__module__}.{type(var_3.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_3.root).__module__}.{type(var_3.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_3.tree).__module__}.{type(var_3.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_3.left_child).__module__}.{type(var_3.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_3.right_child is None
    assert var_3.black is True
    assert f'{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_4 = r_b_tree_0.rb_delete_fixup(r_b_tree_node_0, r_b_tree_0)
    var_5 = var_0.add_node(r_b_tree_node_0)
    r_b_tree_node_2 = module_1.tree_successor(var_5, r_b_tree_node_0)
    r_b_tree_node_3 = module_1.tree_successor(var_4, r_b_tree_node_0)
    var_6 = module_1.left_rotate(r_b_tree_0, r_b_tree_node_0)
    var_7 = module_1.right_rotate(var_0, r_b_tree_node_3)
    module_1.delete_node(var_0, r_b_tree_node_3, fixup_func=r_b_tree_node_1)

def test_case_26():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_1 = module_1.transplant(r_b_tree_0, var_0, var_0)
    var_2 = module_1.right_rotate(r_b_tree_0, var_0)
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_3 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.root).__module__}.{type(var_2.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_3.nil).__module__}.{type(var_3.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_3.root).__module__}.{type(var_3.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_3.tree).__module__}.{type(var_3.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_3.left_child).__module__}.{type(var_3.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_3.right_child is None
    assert var_3.black is True
    assert f'{type(var_3.parent).__module__}.{type(var_3.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_4 = r_b_tree_0.rb_delete_fixup(r_b_tree_node_0, r_b_tree_0)
    var_5 = var_0.add_node(r_b_tree_node_0)
    r_b_tree_node_1 = module_1.tree_successor(var_1, r_b_tree_node_0)
    r_b_tree_node_2 = module_2.RBTreeNode(right_child=r_b_tree_node_1)
    var_6 = module_1.right_rotate(var_0, r_b_tree_node_2)
    var_7 = module_1.delete_node(var_3, r_b_tree_node_0)
    module_1.delete_node(r_b_tree_0, var_6, fixup_func=var_4)

@pytest.mark.xfail(strict=True)
def test_case_27():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_1.tree_minimum(r_b_tree_0, var_0)
    r_b_tree_node_1 = module_2.RBTreeNode()
    r_b_tree_node_2 = module_2.RBTreeNode(parent=r_b_tree_node_1, left_child=r_b_tree_0, tree=r_b_tree_0)
    module_1.redblack_insert_fixup(r_b_tree_0, r_b_tree_node_2)

def test_case_28():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_1 = r_b_tree_node_0.get_minimum(r_b_tree_0)
    var_2 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.nil).__module__}.{type(var_2.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.root).__module__}.{type(var_2.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.tree).__module__}.{type(var_2.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.left_child).__module__}.{type(var_2.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_2.right_child is None
    assert var_2.black is True
    assert f'{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_3 = var_0.add_node(r_b_tree_node_0)
    r_b_tree_node_1 = module_1.tree_successor(var_1, r_b_tree_node_0)
    r_b_tree_node_2 = module_1.tree_successor(r_b_tree_node_1, r_b_tree_node_0)
    var_4 = module_1.right_rotate(var_0, r_b_tree_node_2)
    var_5 = module_1.left_rotate(var_2, r_b_tree_node_0)
    r_b_tree_1 = module_0.RBTree(var_5)
    var_6 = module_1.left_rotate(r_b_tree_1, var_0)
    var_7 = r_b_tree_1.rb_delete_fixup(var_5, r_b_tree_0)

def test_case_29():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_1 = r_b_tree_node_0.get_minimum(r_b_tree_0)
    var_2 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.nil).__module__}.{type(var_2.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.root).__module__}.{type(var_2.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.tree).__module__}.{type(var_2.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.left_child).__module__}.{type(var_2.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_2.right_child is None
    assert var_2.black is True
    assert f'{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_3 = r_b_tree_0.rb_delete_fixup(r_b_tree_node_0, r_b_tree_0)
    var_4 = var_0.add_node(r_b_tree_node_0)
    r_b_tree_node_1 = module_1.tree_successor(var_1, r_b_tree_node_0)
    r_b_tree_node_2 = module_1.tree_successor(var_3, r_b_tree_node_0)
    var_5 = module_1.right_rotate(var_0, r_b_tree_node_2)
    var_6 = r_b_tree_node_1.get_maximum(var_2)
    var_7 = module_1.left_rotate(var_2, r_b_tree_node_0)
    r_b_tree_1 = module_0.RBTree(var_7)
    var_8 = module_1.left_rotate(r_b_tree_1, var_0)
    var_9 = module_1.rb_delete_fixup(var_6, var_6, right_rotate_func=var_3)
    var_10 = r_b_tree_1.rb_delete_fixup(r_b_tree_node_0, r_b_tree_0)
    r_b_tree_node_3 = module_1.tree_minimum(var_1, var_0)
    module_1.redblack_insert_fixup(var_10, var_7)

def test_case_30():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_1 = r_b_tree_node_0.get_minimum(r_b_tree_0)
    var_2 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.nil).__module__}.{type(var_2.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.root).__module__}.{type(var_2.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.tree).__module__}.{type(var_2.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.left_child).__module__}.{type(var_2.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_2.right_child is None
    assert var_2.black is True
    assert f'{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_3 = var_0.add_node(r_b_tree_node_0)
    r_b_tree_node_1 = module_1.tree_successor(var_1, r_b_tree_node_0)
    var_4 = module_1.right_rotate(var_2, r_b_tree_node_1)
    var_5 = module_1.redblack_insert_fixup(var_0, var_0)
    var_6 = r_b_tree_node_1.get_maximum(var_4)
    var_7 = module_1.left_rotate(var_2, r_b_tree_node_0)
    r_b_tree_1 = module_0.RBTree(var_7)
    var_8 = var_0.inorder_walk()
    var_9 = module_1.left_rotate(r_b_tree_1, var_0)
    var_10 = module_1.rb_delete_fixup(var_2, var_2, right_rotate_func=var_1)
    var_11 = r_b_tree_1.rb_delete_fixup(r_b_tree_node_0, r_b_tree_0)
    r_b_tree_node_2 = module_1.tree_minimum(var_1, var_4)
    var_12 = module_1.redblack_insert_fixup(var_1, r_b_tree_node_2)
    var_1.get_depth(var_10)

def test_case_31():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_1 = r_b_tree_node_0.get_minimum(r_b_tree_0)
    var_2 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.nil).__module__}.{type(var_2.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.root).__module__}.{type(var_2.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.tree).__module__}.{type(var_2.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.left_child).__module__}.{type(var_2.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_2.right_child is None
    assert var_2.black is True
    assert f'{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_3 = r_b_tree_0.rb_delete_fixup(r_b_tree_node_0, r_b_tree_0)
    var_4 = var_0.add_node(r_b_tree_node_0)
    r_b_tree_node_1 = module_1.tree_successor(var_1, r_b_tree_node_0)
    r_b_tree_node_2 = module_1.tree_successor(var_3, r_b_tree_node_0)
    var_5 = module_1.right_rotate(var_0, r_b_tree_node_2)
    var_6 = module_1.delete_node(var_2, r_b_tree_node_0)
    var_7 = r_b_tree_node_1.get_maximum(var_2)
    var_8 = r_b_tree_node_1.get_maximum(r_b_tree_node_2)
    var_9 = module_1.left_rotate(var_2, r_b_tree_node_0)
    r_b_tree_1 = module_0.RBTree(var_9)
    var_10 = module_1.left_rotate(r_b_tree_1, var_2)
    var_11 = module_1.left_rotate(r_b_tree_1, var_0)
    module_1.rb_delete_fixup(var_7, var_7, right_rotate_func=var_3)

def test_case_32():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_1 = r_b_tree_node_0.get_minimum(r_b_tree_0)
    var_2 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.nil).__module__}.{type(var_2.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.root).__module__}.{type(var_2.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.tree).__module__}.{type(var_2.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.left_child).__module__}.{type(var_2.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_2.right_child is None
    assert var_2.black is True
    assert f'{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_3 = r_b_tree_0.rb_delete_fixup(r_b_tree_node_0, r_b_tree_0)
    var_4 = var_0.add_node(r_b_tree_node_0)
    r_b_tree_node_1 = module_1.tree_successor(var_1, r_b_tree_node_0)
    r_b_tree_node_2 = module_1.tree_minimum(var_0, var_2)
    r_b_tree_node_3 = module_1.tree_successor(var_3, r_b_tree_node_0)
    var_5 = module_1.right_rotate(var_0, r_b_tree_node_3)
    var_6 = module_1.delete_node(var_2, r_b_tree_node_0)
    var_7 = r_b_tree_node_1.get_maximum(var_2)
    var_8 = r_b_tree_node_1.get_maximum(r_b_tree_node_3)
    var_9 = module_1.left_rotate(var_2, r_b_tree_node_0)
    r_b_tree_1 = module_0.RBTree(var_9)
    var_10 = module_1.left_rotate(r_b_tree_1, var_0)
    var_11 = module_1.left_rotate(r_b_tree_1, r_b_tree_node_3)
    var_12 = r_b_tree_1.rb_delete_fixup(r_b_tree_node_0, r_b_tree_0)
    var_11.inorder_walk()

def test_case_33():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_1 = r_b_tree_node_0.get_minimum(r_b_tree_0)
    var_2 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.nil).__module__}.{type(var_2.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.root).__module__}.{type(var_2.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.tree).__module__}.{type(var_2.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.left_child).__module__}.{type(var_2.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_2.right_child is None
    assert var_2.black is True
    assert f'{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_3 = var_0.add_node(r_b_tree_node_0)
    r_b_tree_node_1 = module_1.tree_successor(var_1, r_b_tree_node_0)
    var_4 = module_1.right_rotate(var_2, r_b_tree_node_1)
    var_5 = module_1.right_rotate(var_0, var_4)
    var_6 = module_1.delete_node(var_2, r_b_tree_node_0)
    var_7 = r_b_tree_node_1.get_maximum(var_2)
    var_8 = r_b_tree_node_1.get_maximum(var_4)
    var_9 = module_1.left_rotate(var_2, r_b_tree_node_0)
    r_b_tree_1 = module_0.RBTree(var_9)
    var_10 = module_1.left_rotate(r_b_tree_1, var_0)
    var_11 = module_1.rb_delete_fixup(var_7, var_7, right_rotate_func=var_1)
    var_12 = r_b_tree_1.rb_delete_fixup(r_b_tree_node_0, r_b_tree_0)
    var_13 = module_1.redblack_insert_fixup(var_1, var_8)
    r_b_tree_node_2 = module_1.tree_minimum(var_1, var_4)
    module_1.redblack_insert_fixup(var_13, var_8)

def test_case_34():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_1 = r_b_tree_node_0.get_minimum(r_b_tree_0)
    var_2 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.nil).__module__}.{type(var_2.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.root).__module__}.{type(var_2.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.tree).__module__}.{type(var_2.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.left_child).__module__}.{type(var_2.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_2.right_child is None
    assert var_2.black is True
    assert f'{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_3 = r_b_tree_0.rb_delete_fixup(r_b_tree_node_0, r_b_tree_0)
    var_4 = var_0.add_node(r_b_tree_node_0)
    r_b_tree_node_1 = module_1.tree_successor(var_1, r_b_tree_node_0)
    var_5 = module_1.right_rotate(var_2, r_b_tree_node_1)
    var_6 = module_1.right_rotate(var_0, var_5)
    var_7 = module_1.delete_node(var_2, r_b_tree_node_0)
    var_8 = var_0.add_node(var_6)
    var_9 = module_1.left_rotate(var_2, r_b_tree_node_0)
    r_b_tree_1 = module_0.RBTree(var_9)
    var_10 = module_1.left_rotate(r_b_tree_1, var_0)
    var_11 = module_1.rb_delete_fixup(var_1, var_1, right_rotate_func=var_3)
    var_12 = r_b_tree_1.rb_delete_fixup(r_b_tree_node_0, r_b_tree_0)
    var_13 = module_1.redblack_insert_fixup(var_1, var_8)
    module_1.redblack_insert_fixup(var_13, var_8)

def test_case_35():
    r_b_tree_0 = module_0.RBTree()
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    r_b_tree_node_0 = module_2.RBTreeNode()
    var_1 = r_b_tree_node_0.get_minimum(r_b_tree_0)
    var_2 = module_1.left_rotate(r_b_tree_0, var_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_1.root).__module__}.{type(var_1.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.nil).__module__}.{type(var_2.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.root).__module__}.{type(var_2.root).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_2.tree).__module__}.{type(var_2.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_2.left_child).__module__}.{type(var_2.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_2.right_child is None
    assert var_2.black is True
    assert f'{type(var_2.parent).__module__}.{type(var_2.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_3 = var_0.add_node(r_b_tree_node_0)
    var_4 = module_1.right_rotate(var_2, var_0)
    r_b_tree_node_1 = module_1.tree_successor(var_1, r_b_tree_node_0)
    var_5 = module_1.left_rotate(r_b_tree_0, var_3)
    var_6 = module_1.right_rotate(var_2, r_b_tree_node_1)
    var_7 = module_1.right_rotate(var_0, var_6)
    var_8 = module_1.delete_node(var_2, r_b_tree_node_0)
    var_9 = r_b_tree_node_1.get_maximum(var_2)
    var_10 = r_b_tree_node_1.get_maximum(var_6)
    var_11 = module_1.left_rotate(var_2, r_b_tree_node_0)
    r_b_tree_1 = module_0.RBTree(var_11)
    var_12 = module_1.left_rotate(r_b_tree_1, var_0)
    var_13 = module_1.rb_delete_fixup(var_9, var_9, right_rotate_func=var_1)
    var_14 = r_b_tree_1.rb_delete_fixup(r_b_tree_node_0, r_b_tree_0)
    var_15 = module_1.redblack_insert_fixup(var_1, var_10)
    r_b_tree_node_2 = module_1.tree_minimum(var_1, var_6)
    module_1.redblack_insert_fixup(var_15, var_10)