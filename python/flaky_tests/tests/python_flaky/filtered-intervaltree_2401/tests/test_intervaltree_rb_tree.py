# Automatically generated by Pynguin.
import pytest
import intervaltree.rb_tree as module_0

def test_case_0():
    r_b_tree_0 = module_0.RBTree()
    assert f'{type(r_b_tree_0.nil).__module__}.{type(r_b_tree_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert r_b_tree_0.root is None
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(r_b_tree_0.tree).__module__}.{type(r_b_tree_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(r_b_tree_0.left_child).__module__}.{type(r_b_tree_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(r_b_tree_0.right_child).__module__}.{type(r_b_tree_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert r_b_tree_0.black is True
    assert f'{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'

@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'\x13G\xb3\xd9\xc8\xfb,\xbb\xa1\x1e\xee\x94y\xb6fcd\xb5\x12\xba'
    r_b_tree_0 = module_0.RBTree()
    assert f'{type(r_b_tree_0.nil).__module__}.{type(r_b_tree_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert r_b_tree_0.root is None
    bytes_1 = b'\xc4]\x08.?MQ\xe40M\x15i\xc4\xae\xa9\xfa\xfe'
    var_0 = r_b_tree_0.search_for_key(bytes_1)
    r_b_tree_0.delete_node(bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    r_b_tree_0 = module_0.RBTree()
    assert f'{type(r_b_tree_0.nil).__module__}.{type(r_b_tree_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert r_b_tree_0.root is None
    var_0 = r_b_tree_0.add_node(r_b_tree_0)
    assert f'{type(r_b_tree_0.root).__module__}.{type(r_b_tree_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(r_b_tree_0.tree).__module__}.{type(r_b_tree_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(r_b_tree_0.left_child).__module__}.{type(r_b_tree_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(r_b_tree_0.right_child).__module__}.{type(r_b_tree_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert r_b_tree_0.black is True
    assert f'{type(r_b_tree_0.parent).__module__}.{type(r_b_tree_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.nil).__module__}.{type(var_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.root).__module__}.{type(var_0.root).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.tree).__module__}.{type(var_0.tree).__qualname__}' == 'intervaltree.rb_tree.RBTree'
    assert f'{type(var_0.left_child).__module__}.{type(var_0.left_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert f'{type(var_0.right_child).__module__}.{type(var_0.right_child).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert var_0.black is True
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    var_1 = r_b_tree_0.rb_delete_fixup(var_0, var_0)
    var_1.delete_node(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    r_b_tree_0 = module_0.RBTree()
    assert f'{type(r_b_tree_0.nil).__module__}.{type(r_b_tree_0.nil).__qualname__}' == 'intervaltree.rb_tree_node.RBTreeNode'
    assert r_b_tree_0.root is None
    var_0 = r_b_tree_0.inorder_walk()
    float_0 = 1113.422452
    r_b_tree_0.transplant(r_b_tree_0, float_0, float_0)