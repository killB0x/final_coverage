# Automatically generated by Pynguin.
import pytest
import intervaltree.rb_tree_node as module_0

def test_case_0():
    r_b_tree_node_0 = module_0.RBTreeNode()
    assert r_b_tree_node_0.black is None
    assert r_b_tree_node_0.key is None
    assert r_b_tree_node_0.parent is None
    assert r_b_tree_node_0.left_child is None
    assert r_b_tree_node_0.right_child is None
    assert r_b_tree_node_0.tree is None
    assert f'{type(module_0.RBTreeNode.color).__module__}.{type(module_0.RBTreeNode.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RBTreeNode.is_root).__module__}.{type(module_0.RBTreeNode.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RBTreeNode.red).__module__}.{type(module_0.RBTreeNode.red).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    r_b_tree_node_0 = module_0.RBTreeNode(left_child=bool_0, tree=bool_0)
    assert r_b_tree_node_0.black is None
    assert r_b_tree_node_0.key is None
    assert r_b_tree_node_0.parent is None
    assert r_b_tree_node_0.left_child is True
    assert r_b_tree_node_0.right_child is None
    assert r_b_tree_node_0.tree is True
    assert f'{type(module_0.RBTreeNode.color).__module__}.{type(module_0.RBTreeNode.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RBTreeNode.is_root).__module__}.{type(module_0.RBTreeNode.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RBTreeNode.red).__module__}.{type(module_0.RBTreeNode.red).__qualname__}' == 'builtins.property'
    r_b_tree_node_0.left_rotate(bool_0, bool_0)

def test_case_2():
    r_b_tree_node_0 = module_0.RBTreeNode()
    assert r_b_tree_node_0.black is None
    assert r_b_tree_node_0.key is None
    assert r_b_tree_node_0.parent is None
    assert r_b_tree_node_0.left_child is None
    assert r_b_tree_node_0.right_child is None
    assert r_b_tree_node_0.tree is None
    assert f'{type(module_0.RBTreeNode.color).__module__}.{type(module_0.RBTreeNode.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RBTreeNode.is_root).__module__}.{type(module_0.RBTreeNode.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RBTreeNode.red).__module__}.{type(module_0.RBTreeNode.red).__qualname__}' == 'builtins.property'
    var_0 = r_b_tree_node_0.right_rotate(r_b_tree_node_0, r_b_tree_node_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    r_b_tree_node_0 = module_0.RBTreeNode(parent=none_type_0)
    assert r_b_tree_node_0.black is None
    assert r_b_tree_node_0.key is None
    assert r_b_tree_node_0.parent is None
    assert r_b_tree_node_0.left_child is None
    assert r_b_tree_node_0.right_child is None
    assert r_b_tree_node_0.tree is None
    assert f'{type(module_0.RBTreeNode.color).__module__}.{type(module_0.RBTreeNode.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RBTreeNode.is_root).__module__}.{type(module_0.RBTreeNode.is_root).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RBTreeNode.red).__module__}.{type(module_0.RBTreeNode.red).__qualname__}' == 'builtins.property'
    r_b_tree_node_0.__bool__()