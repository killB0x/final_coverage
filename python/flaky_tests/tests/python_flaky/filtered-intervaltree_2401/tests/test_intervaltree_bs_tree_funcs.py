# Automatically generated by Pynguin.
import pytest
import intervaltree.bs_tree_funcs as module_0
import intervaltree.bs_tree as module_1
import builtins as module_2
import intervaltree.bs_tree_node as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.get_relationship_between_nodes(bool_0, bool_0)

def test_case_1():
    bool_0 = False
    str_0 = module_0.get_relationship_between_nodes(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    b_s_tree_0 = module_1.BSTree()
    generator_0 = module_0.search_node(b_s_tree_0, b_s_tree_0, b_s_tree_0)
    object_0 = module_2.object(*generator_0)
    module_0.add_node(b_s_tree_0, b_s_tree_0)

def test_case_3():
    b_s_tree_0 = module_1.BSTree()
    none_type_0 = None
    b_s_tree_node_0 = module_3.BSTreeNode(left_child=b_s_tree_0, right_child=none_type_0)
    b_s_tree_node_1 = module_3.BSTreeNode(parent=b_s_tree_node_0, left_child=none_type_0)
    var_0 = module_0.transplant(b_s_tree_node_0, b_s_tree_node_1, b_s_tree_node_1)
    assert f'{type(b_s_tree_node_0.right_child).__module__}.{type(b_s_tree_node_0.right_child).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'

@pytest.mark.xfail(strict=True)
def test_case_4():
    b_s_tree_node_0 = module_3.BSTreeNode()
    b_s_tree_node_0.delete_node(b_s_tree_node_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = -2085.63373
    module_0.get_extreme_from_node(float_0)

def test_case_6():
    str_0 = ''
    b_s_tree_node_0 = module_0.get_extreme_from_node(str_0)
    assert b_s_tree_node_0 == ''

def test_case_7():
    none_type_0 = None
    b_s_tree_node_0 = module_0.get_extreme_from_node(none_type_0, none_type_0)

def test_case_8():
    float_0 = 706.5030829639915
    b_s_tree_node_0 = module_3.BSTreeNode()
    str_0 = module_0.get_relationship_between_nodes(b_s_tree_node_0, b_s_tree_node_0, float_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    b_s_tree_0 = module_1.BSTree()
    dict_0 = {b_s_tree_0: b_s_tree_0, b_s_tree_0: b_s_tree_0}
    b_s_tree_node_0 = module_3.BSTreeNode(parent=dict_0, tree=dict_0)
    str_0 = module_0.get_relationship_between_nodes(b_s_tree_node_0, b_s_tree_node_0)
    module_0.add_node(b_s_tree_0, b_s_tree_node_0)

def test_case_10():
    b_s_tree_node_0 = module_3.BSTreeNode()
    b_s_tree_node_1 = module_0.get_extreme_from_node(b_s_tree_node_0)
    assert f'{type(b_s_tree_node_1).__module__}.{type(b_s_tree_node_1).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert b_s_tree_node_1.key is None
    assert b_s_tree_node_1.parent is None
    assert b_s_tree_node_1.left_child is None
    assert b_s_tree_node_1.right_child is None
    assert b_s_tree_node_1.tree is None

@pytest.mark.xfail(strict=True)
def test_case_11():
    float_0 = 684.0624190129976
    b_s_tree_node_0 = module_3.BSTreeNode()
    b_s_tree_node_1 = module_0.get_extreme_from_node(b_s_tree_node_0)
    assert f'{type(b_s_tree_node_1).__module__}.{type(b_s_tree_node_1).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert b_s_tree_node_1.key is None
    assert b_s_tree_node_1.parent is None
    assert b_s_tree_node_1.left_child is None
    assert b_s_tree_node_1.right_child is None
    assert b_s_tree_node_1.tree is None
    var_0 = b_s_tree_node_0.get_successor_for_node(b_s_tree_node_0)
    str_0 = module_0.get_relationship_between_nodes(b_s_tree_node_0, b_s_tree_node_0, float_0)
    var_1 = b_s_tree_node_1.get_relationship_between_nodes(str_0, b_s_tree_node_0)
    assert var_1 == 'left_child'
    module_0.delete_node(var_1, b_s_tree_node_1)

@pytest.mark.xfail(strict=True)
def test_case_12():
    b_s_tree_0 = module_1.BSTree()
    b_s_tree_node_0 = module_3.BSTreeNode(parent=b_s_tree_0, left_child=b_s_tree_0)
    module_0.delete_node(b_s_tree_0, b_s_tree_node_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    b_s_tree_0 = module_1.BSTree()
    dict_0 = {b_s_tree_0: b_s_tree_0, b_s_tree_0: b_s_tree_0}
    b_s_tree_node_0 = module_3.BSTreeNode(tree=dict_0)
    var_0 = b_s_tree_0.add_node(b_s_tree_node_0)
    module_0.add_node(b_s_tree_0, b_s_tree_node_0)

def test_case_14():
    b_s_tree_node_0 = module_3.BSTreeNode()
    b_s_tree_node_1 = module_3.BSTreeNode(parent=b_s_tree_node_0, tree=b_s_tree_node_0)
    var_0 = module_0.delete_node(b_s_tree_node_1, b_s_tree_node_1)

@pytest.mark.xfail(strict=True)
def test_case_15():
    b_s_tree_0 = module_1.BSTree()
    generator_0 = module_0.search_node(b_s_tree_0, b_s_tree_0, b_s_tree_0)
    none_type_0 = None
    b_s_tree_node_0 = module_3.BSTreeNode(left_child=b_s_tree_0, right_child=none_type_0)
    none_type_1 = None
    var_0 = module_0.delete_node(b_s_tree_0, b_s_tree_node_0)
    assert f'{type(b_s_tree_0.root).__module__}.{type(b_s_tree_0.root).__qualname__}' == 'intervaltree.bs_tree.BSTree'
    assert b_s_tree_0.parent is None
    b_s_tree_node_1 = module_3.BSTreeNode(b_s_tree_0, left_child=none_type_1)
    b_s_tree_node_1.get_minimum(b_s_tree_node_0)

def test_case_16():
    b_s_tree_0 = module_1.BSTree()
    none_type_0 = None
    b_s_tree_node_0 = module_3.BSTreeNode(left_child=b_s_tree_0, right_child=none_type_0)
    b_s_tree_node_1 = module_3.BSTreeNode(parent=b_s_tree_node_0, left_child=none_type_0)
    var_0 = module_0.transplant(b_s_tree_node_0, b_s_tree_node_1, b_s_tree_node_1)
    assert f'{type(b_s_tree_node_0.right_child).__module__}.{type(b_s_tree_node_0.right_child).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    var_1 = b_s_tree_0.delete_node(b_s_tree_node_0)
    assert f'{type(b_s_tree_0.root).__module__}.{type(b_s_tree_0.root).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert f'{type(b_s_tree_0.parent).__module__}.{type(b_s_tree_0.parent).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert b_s_tree_node_1.parent is None
    assert f'{type(b_s_tree_node_1.left_child).__module__}.{type(b_s_tree_node_1.left_child).__qualname__}' == 'intervaltree.bs_tree.BSTree'

@pytest.mark.xfail(strict=True)
def test_case_17():
    b_s_tree_0 = module_1.BSTree()
    generator_0 = module_0.search_node(b_s_tree_0, b_s_tree_0)
    b_s_tree_node_0 = module_3.BSTreeNode(generator_0, generator_0)
    b_s_tree_node_1 = module_0.get_extreme_from_node(b_s_tree_node_0)
    assert f'{type(b_s_tree_node_1).__module__}.{type(b_s_tree_node_1).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert f'{type(b_s_tree_node_1.key).__module__}.{type(b_s_tree_node_1.key).__qualname__}' == 'builtins.generator'
    assert f'{type(b_s_tree_node_1.parent).__module__}.{type(b_s_tree_node_1.parent).__qualname__}' == 'builtins.generator'
    assert b_s_tree_node_1.left_child is None
    assert b_s_tree_node_1.right_child is None
    assert b_s_tree_node_1.tree is None
    var_0 = b_s_tree_0.inorder_walk()
    b_s_tree_node_2 = module_3.BSTreeNode(b_s_tree_node_0, b_s_tree_node_0)
    var_1 = b_s_tree_0.search_for_key(var_0)
    var_2 = module_0.transplant(b_s_tree_node_2, b_s_tree_node_2, b_s_tree_0)
    assert f'{type(b_s_tree_0.parent).__module__}.{type(b_s_tree_0.parent).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert f'{type(b_s_tree_node_0.right_child).__module__}.{type(b_s_tree_node_0.right_child).__qualname__}' == 'intervaltree.bs_tree.BSTree'
    assert f'{type(b_s_tree_node_1.right_child).__module__}.{type(b_s_tree_node_1.right_child).__qualname__}' == 'intervaltree.bs_tree.BSTree'
    object_0 = module_2.object(*generator_0)
    var_3 = b_s_tree_0.add_node(b_s_tree_node_1)
    assert var_3.left_child is None
    assert f'{type(var_3.right_child).__module__}.{type(var_3.right_child).__qualname__}' == 'intervaltree.bs_tree.BSTree'
    module_0.add_node(b_s_tree_0, var_2)

@pytest.mark.xfail(strict=True)
def test_case_18():
    b_s_tree_0 = module_1.BSTree()
    generator_0 = b_s_tree_0.inorder_walk()
    none_type_0 = None
    b_s_tree_node_0 = module_3.BSTreeNode(left_child=b_s_tree_0, right_child=none_type_0)
    str_0 = module_0.get_relationship_between_nodes(none_type_0, none_type_0)
    var_0 = module_0.transplant(b_s_tree_0, b_s_tree_node_0, b_s_tree_node_0)
    assert f'{type(b_s_tree_0.root).__module__}.{type(b_s_tree_0.root).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    module_2.object(*generator_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    b_s_tree_0 = module_1.BSTree()
    var_0 = b_s_tree_0.inorder_walk()
    b_s_tree_node_0 = module_3.BSTreeNode(left_child=b_s_tree_0, right_child=var_0)
    object_0 = module_2.object(*var_0)
    module_0.delete_node(b_s_tree_0, b_s_tree_0)

def test_case_20():
    b_s_tree_0 = module_1.BSTree()
    generator_0 = module_0.search_node(b_s_tree_0, b_s_tree_0)
    object_0 = module_2.object(*generator_0)

def test_case_21():
    b_s_tree_0 = module_1.BSTree()
    generator_0 = module_0.search_node(b_s_tree_0, b_s_tree_0, b_s_tree_0)
    object_0 = module_2.object(*generator_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    b_s_tree_0 = module_1.BSTree()
    generator_0 = module_0.search_node(b_s_tree_0, b_s_tree_0, b_s_tree_0)
    none_type_0 = None
    b_s_tree_node_0 = module_3.BSTreeNode(left_child=b_s_tree_0, right_child=none_type_0)
    var_0 = module_0.transplant(b_s_tree_0, b_s_tree_node_0, b_s_tree_node_0)
    assert f'{type(b_s_tree_0.root).__module__}.{type(b_s_tree_0.root).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    module_2.object(*generator_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    b_s_tree_0 = module_1.BSTree()
    var_0 = b_s_tree_0.search_for_key(b_s_tree_0)
    none_type_0 = None
    b_s_tree_node_0 = module_3.BSTreeNode(left_child=b_s_tree_0, right_child=none_type_0)
    var_1 = module_0.transplant(b_s_tree_0, b_s_tree_node_0, b_s_tree_node_0)
    assert f'{type(b_s_tree_0.root).__module__}.{type(b_s_tree_0.root).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    module_2.object(*var_0)

def test_case_24():
    float_0 = 684.7576509490153
    b_s_tree_node_0 = module_3.BSTreeNode()
    b_s_tree_node_1 = module_3.BSTreeNode(parent=b_s_tree_node_0, tree=b_s_tree_node_0)
    str_0 = module_0.get_relationship_between_nodes(b_s_tree_node_1, b_s_tree_node_0, float_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    float_0 = 684.9269933424305
    b_s_tree_node_0 = module_3.BSTreeNode()
    b_s_tree_node_1 = module_0.get_extreme_from_node(b_s_tree_node_0)
    assert f'{type(b_s_tree_node_1).__module__}.{type(b_s_tree_node_1).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert b_s_tree_node_1.key is None
    assert b_s_tree_node_1.parent is None
    assert b_s_tree_node_1.left_child is None
    assert b_s_tree_node_1.right_child is None
    assert b_s_tree_node_1.tree is None
    b_s_tree_node_2 = module_3.BSTreeNode(left_child=b_s_tree_node_0, right_child=b_s_tree_node_1, tree=float_0)
    str_0 = module_0.get_relationship_between_nodes(b_s_tree_node_0, b_s_tree_node_0, float_0)
    var_0 = b_s_tree_node_0.get_relationship_between_nodes(str_0, b_s_tree_node_0)
    assert var_0 == 'left_child'
    module_0.delete_node(var_0, b_s_tree_node_2)

@pytest.mark.xfail(strict=True)
def test_case_26():
    b_s_tree_node_0 = module_3.BSTreeNode()
    b_s_tree_node_1 = module_0.get_extreme_from_node(b_s_tree_node_0)
    assert f'{type(b_s_tree_node_1).__module__}.{type(b_s_tree_node_1).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert b_s_tree_node_1.key is None
    assert b_s_tree_node_1.parent is None
    assert b_s_tree_node_1.left_child is None
    assert b_s_tree_node_1.right_child is None
    assert b_s_tree_node_1.tree is None
    b_s_tree_node_2 = module_3.BSTreeNode(parent=b_s_tree_node_1)
    b_s_tree_node_3 = module_0.get_extreme_from_node(b_s_tree_node_2)
    str_0 = module_0.get_relationship_between_nodes(b_s_tree_node_3, b_s_tree_node_3)
    var_0 = module_0.inorder_walk(b_s_tree_node_1)
    var_1 = module_0.transplant(var_0, b_s_tree_node_2, b_s_tree_node_2)
    assert f'{type(b_s_tree_node_0.right_child).__module__}.{type(b_s_tree_node_0.right_child).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert f'{type(b_s_tree_node_1.right_child).__module__}.{type(b_s_tree_node_1.right_child).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    module_2.object(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    b_s_tree_node_0 = module_3.BSTreeNode()
    b_s_tree_node_1 = module_0.get_extreme_from_node(b_s_tree_node_0)
    assert f'{type(b_s_tree_node_1).__module__}.{type(b_s_tree_node_1).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert b_s_tree_node_1.key is None
    assert b_s_tree_node_1.parent is None
    assert b_s_tree_node_1.left_child is None
    assert b_s_tree_node_1.right_child is None
    assert b_s_tree_node_1.tree is None
    b_s_tree_0 = module_1.BSTree()
    generator_0 = module_0.search_node(b_s_tree_0, b_s_tree_0)
    b_s_tree_node_2 = module_3.BSTreeNode(b_s_tree_0, generator_0)
    b_s_tree_node_3 = module_3.BSTreeNode(parent=b_s_tree_0)
    b_s_tree_1 = module_1.BSTree()
    b_s_tree_node_4 = b_s_tree_0.add_node(b_s_tree_node_2)
    b_s_tree_node_5 = module_3.BSTreeNode(b_s_tree_node_2, b_s_tree_node_2)
    var_0 = module_0.delete_node(b_s_tree_0, b_s_tree_node_5)
    var_1 = module_0.transplant(b_s_tree_node_4, b_s_tree_node_5, b_s_tree_0)
    assert f'{type(b_s_tree_node_2.right_child).__module__}.{type(b_s_tree_node_2.right_child).__qualname__}' == 'intervaltree.bs_tree.BSTree'
    assert f'{type(b_s_tree_node_4.right_child).__module__}.{type(b_s_tree_node_4.right_child).__qualname__}' == 'intervaltree.bs_tree.BSTree'
    var_2 = b_s_tree_node_4.preorder_walk(b_s_tree_1)
    module_2.object(*generator_0)

def test_case_28():
    b_s_tree_0 = module_1.BSTree()
    none_type_0 = None
    b_s_tree_node_0 = module_3.BSTreeNode(left_child=b_s_tree_0, right_child=none_type_0)
    b_s_tree_node_1 = module_3.BSTreeNode(parent=b_s_tree_node_0, left_child=none_type_0)
    var_0 = b_s_tree_node_0.preorder_walk(none_type_0)
    var_1 = module_0.transplant(b_s_tree_node_0, b_s_tree_node_1, b_s_tree_node_1)
    assert f'{type(b_s_tree_node_0.right_child).__module__}.{type(b_s_tree_node_0.right_child).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    var_2 = b_s_tree_0.delete_node(b_s_tree_node_0)
    assert f'{type(b_s_tree_0.root).__module__}.{type(b_s_tree_0.root).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert f'{type(b_s_tree_0.parent).__module__}.{type(b_s_tree_0.parent).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert b_s_tree_node_1.parent is None
    assert f'{type(b_s_tree_node_1.left_child).__module__}.{type(b_s_tree_node_1.left_child).__qualname__}' == 'intervaltree.bs_tree.BSTree'
    var_3 = module_0.transplant(b_s_tree_node_1, b_s_tree_0, b_s_tree_node_0)
    assert f'{type(b_s_tree_node_0.parent).__module__}.{type(b_s_tree_node_0.parent).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'
    assert f'{type(b_s_tree_node_1.left_child).__module__}.{type(b_s_tree_node_1.left_child).__qualname__}' == 'intervaltree.bs_tree_node.BSTreeNode'