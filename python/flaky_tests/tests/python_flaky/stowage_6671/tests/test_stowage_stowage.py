# Automatically generated by Pynguin.
import pytest
import stowage.stowage as module_0
import builtins as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.cli()

def test_case_1():
    bool_0 = False
    tuple_0 = (bool_0,)
    var_0 = module_0.parse_args(tuple_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'argparse.Namespace'
    assert var_0.dryrun is False
    assert var_0.verbose is False
    assert var_0.source == '~/dotfiles'
    assert var_0.destination == '~'
    assert var_0.backup == '~/.config/stowage/backup/'
    assert var_0.skip_backup is False
    assert var_0.packages == [False]
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'

def test_case_2():
    str_0 = 'stowage.stowage'
    var_0 = module_0.needed_symlink_walk(str_0, str_0)
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'
    var_1 = module_0.parse_args(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'argparse.Namespace'
    assert var_1.dryrun is False
    assert var_1.verbose is False
    assert var_1.source == '~/dotfiles'
    assert var_1.destination == '~'
    assert var_1.backup == '~/.config/stowage/backup/'
    assert var_1.skip_backup is False
    assert var_1.packages == []

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'hK}'
    var_0 = module_0.parse_args(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'argparse.Namespace'
    assert var_0.dryrun is False
    assert var_0.verbose is False
    assert var_0.source == '~/dotfiles'
    assert var_0.destination == '~'
    assert var_0.backup == '~/.config/stowage/backup/'
    assert var_0.skip_backup is False
    assert var_0.packages == ['h', 'K', '}']
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'
    var_1 = module_0.check_args(var_0)
    assert var_0.source == '/root/dotfiles'
    assert var_0.destination == '/root'
    assert var_0.backup == '/root/.config/stowage/backup/'
    var_2 = module_0.get_backup_path(var_0, str_0)
    assert var_2 == '/root/.config/stowage/backup/../pynguin/hK}.9'
    module_0.do_backup(var_1, var_2)

@pytest.mark.xfail(strict=True)
def test_case_4():
    set_0 = set()
    var_0 = module_0.directory_walk(set_0, set_0)
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'
    list_0 = [var_0]
    arg_error_0 = module_0.ArgError(*list_0)
    module_0.do_backup(arg_error_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'stowage.stowage'
    var_0 = module_0.needed_symlink_walk(str_0, str_0)
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'
    exception_0 = module_1.Exception(*var_0)
    module_0.do_symlink(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'stowage.stowage'
    var_0 = module_0.parse_args(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'argparse.Namespace'
    assert var_0.dryrun is False
    assert var_0.verbose is False
    assert var_0.source == '~/dotfiles'
    assert var_0.destination == '~'
    assert var_0.backup == '~/.config/stowage/backup/'
    assert var_0.skip_backup is False
    assert var_0.packages == ['s', 't', 'o', 'w', 'a', 'g', 'e', '.', 's', 't', 'o', 'w', 'a', 'g', 'e']
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'
    module_0.do_symlink(str_0, var_0)

def test_case_7():
    str_0 = 'stowage.stowage'
    var_0 = module_0.needed_symlink_walk(str_0, str_0)
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'
    var_1 = module_0.parse_args(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'argparse.Namespace'
    assert var_1.dryrun is False
    assert var_1.verbose is False
    assert var_1.source == '~/dotfiles'
    assert var_1.destination == '~'
    assert var_1.backup == '~/.config/stowage/backup/'
    assert var_1.skip_backup is False
    assert var_1.packages == ['s', 't', 'o', 'w', 'a', 'g', 'e', '.', 's', 't', 'o', 'w', 'a', 'g', 'e']
    var_2 = module_0.munge_path(str_0)
    assert var_2 == 'stowage.stowage'

def test_case_8():
    str_0 = 'stowage.stowage'
    var_0 = module_0.parse_args(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'argparse.Namespace'
    assert var_0.dryrun is False
    assert var_0.verbose is False
    assert var_0.source == '~/dotfiles'
    assert var_0.destination == '~'
    assert var_0.backup == '~/.config/stowage/backup/'
    assert var_0.skip_backup is False
    assert var_0.packages == ['s', 't', 'o', 'w', 'a', 'g', 'e', '.', 's', 't', 'o', 'w', 'a', 'g', 'e']
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'
    var_1 = module_0.check_args(var_0)
    assert var_0.source == '/root/dotfiles'
    assert var_0.destination == '/root'
    assert var_0.backup == '/root/.config/stowage/backup/'

def test_case_9():
    str_0 = 'stowage.stowage'
    var_0 = module_0.needed_symlink_walk(str_0, str_0)
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'
    var_1 = module_0.parse_args(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'argparse.Namespace'
    assert var_1.dryrun is False
    assert var_1.verbose is False
    assert var_1.source == '~/dotfiles'
    assert var_1.destination == '~'
    assert var_1.backup == '~/.config/stowage/backup/'
    assert var_1.skip_backup is False
    assert var_1.packages == []
    var_2 = module_0.munge_path(str_0)
    assert var_2 == 'stowage.stowage'
    var_3 = module_0.munge_path(var_2)
    assert var_3 == 'stowage.stowage'
    var_4 = module_0.needed_symlink_walk(var_0, var_0)
    with pytest.raises(module_0.ArgError):
        module_0.check_args(var_1)

def test_case_10():
    str_0 = 'stowage.stowage'
    var_0 = module_0.parse_args(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'argparse.Namespace'
    assert var_0.dryrun is False
    assert var_0.verbose is False
    assert var_0.source == '~/dotfiles'
    assert var_0.destination == '~'
    assert var_0.backup == '~/.config/stowage/backup/'
    assert var_0.skip_backup is False
    assert var_0.packages == ['s', 't', 'o', 'w', 'a', 'g', 'e', '.', 's', 't', 'o', 'w', 'a', 'g', 'e']
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'
    var_1 = module_0.get_backup_path(var_0, str_0)
    assert var_1 == '~/.config/stowage/backup/../stowage.stowage'

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '__main__'
    var_0 = module_0.needed_symlink_walk(str_0, str_0)
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'
    var_1 = module_0.parse_args(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'argparse.Namespace'
    assert var_1.dryrun is False
    assert var_1.verbose is False
    assert var_1.source == '~/dotfiles'
    assert var_1.destination == '~'
    assert var_1.backup == '~/.config/stowage/backup/'
    assert var_1.skip_backup is False
    assert var_1.packages == []
    exception_0 = module_1.Exception(*var_0)
    var_2 = module_0.needed_symlink_walk(exception_0, str_0)
    var_3 = module_0.munge_path(str_0)
    assert var_3 == '._main__'
    module_1.Exception(*var_1)

def test_case_12():
    str_0 = 'stozwage.stowage'
    var_0 = module_0.parse_args(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'argparse.Namespace'
    assert var_0.dryrun is False
    assert var_0.verbose is False
    assert var_0.source == '~/dotfiles'
    assert var_0.destination == '~'
    assert var_0.backup == '~/.config/stowage/backup/'
    assert var_0.skip_backup is False
    assert var_0.packages == ['s', 't', 'o', 'z', 'w', 'a', 'g', 'e', '.', 's', 't', 'o', 'w', 'a', 'g', 'e']
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'
    var_1 = module_0.source_directories(var_0)
    exception_0 = module_1.Exception(*var_1)
    var_2 = module_0.munge_path(str_0)
    assert var_2 == 'stozwage.stowage'
    arg_error_0 = module_0.ArgError()
    var_3 = module_0.get_backup_path(var_0, var_2)
    assert var_3 == '~/.config/stowage/backup/../stozwage.stowage'
    var_4 = module_0.source_directories(var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'hK}'
    var_0 = module_0.munge_path(str_0)
    assert var_0 == 'hK}'
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'
    bytes_0 = b'g}[8W\x15\xf1X\xa8\x15'
    var_1 = module_0.directory_walk(bytes_0, bytes_0)
    var_2 = module_0.needed_symlink_walk(var_0, var_0)
    var_3 = module_0.parse_args(str_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'argparse.Namespace'
    assert var_3.dryrun is False
    assert var_3.verbose is False
    assert var_3.source == '~/dotfiles'
    assert var_3.destination == '~'
    assert var_3.backup == '~/.config/stowage/backup/'
    assert var_3.skip_backup is False
    assert var_3.packages == ['h', 'K', '}']
    var_4 = module_0.check_args(var_3)
    assert var_3.source == '/root/dotfiles'
    assert var_3.destination == '/root'
    assert var_3.backup == '/root/.config/stowage/backup/'
    arg_error_0 = module_0.ArgError(*var_2)
    assert f'{type(arg_error_0).__module__}.{type(arg_error_0).__qualname__}' == 'stowage.stowage.ArgError'
    module_0.cli()

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = './'
    var_0 = module_0.needed_symlink_walk(str_0, str_0)
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'
    exception_0 = module_1.Exception(*var_0)
    bytes_0 = b'.[Qd/'
    var_1 = module_0.directory_walk(bytes_0, bytes_0)
    var_2 = module_0.needed_symlink_walk(exception_0, exception_0)
    var_3 = module_0.needed_symlink_walk(exception_0, var_2)
    module_1.Exception(*var_1)

def test_case_15():
    str_0 = 'hK}'
    var_0 = module_0.parse_args(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'argparse.Namespace'
    assert var_0.dryrun is False
    assert var_0.verbose is False
    assert var_0.source == '~/dotfiles'
    assert var_0.destination == '~'
    assert var_0.backup == '~/.config/stowage/backup/'
    assert var_0.skip_backup is False
    assert var_0.packages == ['h', 'K', '}']
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'
    var_1 = module_0.check_args(var_0)
    assert var_0.source == '/root/dotfiles'
    assert var_0.destination == '/root'
    assert var_0.backup == '/root/.config/stowage/backup/'
    var_2 = module_0.get_backup_path(var_0, str_0)
    assert var_2 == '/root/.config/stowage/backup/../pynguin/hK}.9'

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = 'soale|s/wygn'
    list_0 = [str_0, str_0]
    var_0 = module_0.parse_args(list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'argparse.Namespace'
    assert var_0.dryrun is False
    assert var_0.verbose is False
    assert var_0.source == '~/dotfiles'
    assert var_0.destination == '~'
    assert var_0.backup == '~/.config/stowage/backup/'
    assert var_0.skip_backup is False
    assert var_0.packages == ['soale|s/wygn', 'soale|s/wygn']
    assert module_0.parser.description == 'Symlink files recursively, good for dotfiles.'
    assert module_0.parser.prog == 'stowage'
    str_1 = 'hK}'
    var_1 = module_0.get_backup_path(var_0, str_0)
    assert var_1 == '~/.config/stowage/backup/../soale|s/wygn'
    str_2 = '68AG$lQof8(eDqF d'
    var_2 = module_0.needed_symlink_walk(str_1, str_2)
    exception_0 = module_1.Exception(*var_2)
    var_3 = module_0.munge_path(str_1)
    assert var_3 == 'hK}'
    var_4 = module_0.parse_args(str_0)
    assert var_4.source == '~/dotfiles'
    assert var_4.destination == '~'
    assert var_4.backup == '~/.config/stowage/backup/'
    base_exception_0 = module_1.BaseException()
    var_5 = module_0.parse_args(str_1)
    assert var_5.source == '~/dotfiles'
    assert var_5.destination == '~'
    assert var_5.backup == '~/.config/stowage/backup/'
    var_6 = module_0.check_args(var_5)
    assert var_5.source == '/root/dotfiles'
    assert var_5.destination == '/root'
    assert var_5.backup == '/root/.config/stowage/backup/'
    var_7 = module_0.directory_walk(str_1, var_6)
    var_8 = module_0.get_backup_path(var_5, str_1)
    assert var_8 == '/root/.config/stowage/backup/../pynguin/hK}.9'
    exception_1 = module_1.Exception()
    module_1.Exception(**str_1)