# Automatically generated by Pynguin.
import pytest
import pypiscout.SCout as module_0
import pypiscout.SCout_Logger as module_1

def test_case_0():
    var_0 = module_0.warning()
    dict_0 = {var_0: var_0}
    logger_0 = module_1.Logger(actionWarning=dict_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    var_1 = logger_0.__call__()
    var_2 = module_0.warning(disableColour=var_1)

def test_case_1():
    bytes_0 = b'\xb5'
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    logger_0 = module_1.Logger(none_type_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    var_0 = logger_0.debug(disableColour=set_0)
    assert var_0 == '       (debug) : '

@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_0.warning()
    logger_0 = module_1.Logger(actionWarning=var_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    var_1 = logger_0.info(*var_0)
    assert var_1 == '\x1b[37m        (info) : \x1b [ 9 3 m           ( w a r n i n g )   :   \x1b [ 0 m\x1b[0m'
    var_2 = logger_0.warning(disableColour=var_0)
    assert var_2 == '     (warning) : '
    var_3 = module_0.warning()
    var_3.info()

def test_case_3():
    var_0 = module_0.warning()
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    logger_0 = module_1.Logger(actionWarning=dict_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    var_1 = logger_0.__call__()
    var_2 = logger_0.wwarning()
    assert var_2 == '\x1b[33m(weak warning) : \x1b[0m'

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    var_0 = module_1.Logger(actionWarning=bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    var_1 = var_0.error(disableColour=bool_0)
    var_0.warning(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_0.warning()
    dict_0 = {var_0: var_0}
    logger_0 = module_1.Logger(actionWarning=dict_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    var_1 = logger_0.header(symbol=var_0)
    assert var_1 == '\x1b[94m\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\n\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m  \x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\n\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\x1b[93m     (warning) : \x1b[0m\n\x1b[0m'
    var_2 = logger_0.__call__()
    list_0 = [var_0, var_0, logger_0, var_0]
    var_3 = logger_0.warning(disableColour=var_0)
    assert var_3 == '     (warning) : '
    var_3.debug(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_0.warning()
    logger_0 = module_1.Logger(actionError=var_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    logger_0.__call__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    logger_0 = module_1.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    list_0 = [logger_0, logger_0]
    var_0 = module_0.warning(*list_0)
    assert var_0 == '\x1b[93m     (warning) : <pypiscout.SCout_Logger.Logger object at 0x7f77aa49a2c0> <pypiscout.SCout_Logger.Logger object at 0x7f77aa49a2c0>\x1b[0m'
    var_1 = module_0.warning()
    var_1.__call__()

def test_case_8():
    bool_0 = False
    logger_0 = module_1.Logger(bool_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'

@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_0.warning()
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    logger_0 = module_1.Logger(actionWarning=dict_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    var_1 = logger_0.__call__()
    var_2 = logger_0.warning(*dict_0, disableColour=dict_0)
    assert var_2 == '     (warning) : ()'
    var_1.error(disableColour=var_2)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    logger_0 = module_1.Logger(bool_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    var_0 = logger_0.warning()
    assert var_0 == '\x1b[93m     (warning) : \x1b[0m'
    var_1 = logger_0.warning()
    assert var_1 == '\x1b[93m     (warning) : \x1b[0m'
    var_2 = logger_0.error()
    var_3 = logger_0.debug()
    assert var_3 == '\x1b[36m       (debug) : \x1b[0m'
    var_2.warning()

@pytest.mark.xfail(strict=True)
def test_case_11():
    var_0 = module_0.warning()
    dict_0 = {var_0: var_0}
    logger_0 = module_1.Logger(actionWarning=dict_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    var_1 = logger_0.warning(*dict_0, disableColour=dict_0)
    assert var_1 == '     (warning) : \x1b[93m     (warning) : \x1b[0m'
    var_0.__call__()

@pytest.mark.xfail(strict=True)
def test_case_12():
    var_0 = module_0.warning()
    dict_0 = {var_0: var_0}
    logger_0 = module_1.Logger(actionWarning=dict_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    var_1 = logger_0.wwarning()
    assert var_1 == '\x1b[33m(weak warning) : \x1b[0m'
    logger_0.__call__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_0.warning()
    dict_0 = {var_0: var_0}
    logger_0 = module_1.Logger(actionWarning=dict_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    var_1 = logger_0.info(*dict_0)
    assert var_1 == '\x1b[37m        (info) : \x1b[93m     (warning) : \x1b[0m\x1b[0m'
    var_2 = logger_0.__call__()
    var_3 = logger_0.warning(disableColour=var_0)
    assert var_3 == '     (warning) : '
    var_4 = logger_0.info()
    assert var_4 == '\x1b[37m        (info) : \x1b[0m'
    var_5 = module_0.warning()
    var_5.info()

@pytest.mark.xfail(strict=True)
def test_case_14():
    logger_0 = module_1.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    list_0 = [logger_0, logger_0]
    var_0 = module_0.warning(*list_0)
    assert var_0 == '\x1b[93m     (warning) : <pypiscout.SCout_Logger.Logger object at 0x7f77aa49a2c0> <pypiscout.SCout_Logger.Logger object at 0x7f77aa49a2c0>\x1b[0m'
    logger_0.header(symbol=logger_0)
    var_1 = module_0.warning()
    var_2 = var_1.__call__()

@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    logger_0 = module_1.Logger(bool_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    var_0 = logger_0.debug()
    assert var_0 == '\x1b[36m       (debug) : \x1b[0m'
    list_0 = [logger_0, logger_0, bool_0, bool_0]
    var_1 = logger_0.__call__(actionWarning=logger_0, actionError=bool_0)
    logger_0.error(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    logger_0 = module_1.Logger(bool_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'pypiscout.SCout_Logger.Logger'
    assert module_1.VERSION == '2.0.1'
    list_0 = [logger_0, logger_0, bool_0, bool_0]
    int_0 = 4
    var_0 = logger_0.__call__(int_0, logger_0)
    var_1 = logger_0.error(*list_0)
    var_2 = logger_0.warning()
    var_3 = logger_0.info()
    assert var_3 == '\x1b[37m        (info) : \x1b[0m'
    var_4 = logger_0.__call__()
    var_5 = logger_0.debug()
    assert var_5 == '\x1b[36m       (debug) : \x1b[0m'
    module_0.header(symbol=list_0, disableColour=var_5)