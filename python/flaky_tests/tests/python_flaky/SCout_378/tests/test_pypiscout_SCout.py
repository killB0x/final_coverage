# Automatically generated by Pynguin.
import pytest
import pypiscout.SCout as module_0

def test_case_0():
    var_0 = module_0.header()
    assert var_0 == '\x1b[94m////////\n///  ///\n////////\n\x1b[0m'

def test_case_1():
    var_0 = module_0.debug()
    assert var_0 == '\x1b[36m       (debug) : \x1b[0m'

def test_case_2():
    var_0 = module_0.info()
    assert var_0 == '\x1b[37m        (info) : \x1b[0m'

def test_case_3():
    var_0 = module_0.wwarning()
    assert var_0 == '\x1b[33m(weak warning) : \x1b[0m'

def test_case_4():
    var_0 = module_0.warning()
    assert var_0 == '\x1b[93m     (warning) : \x1b[0m'

def test_case_5():
    var_0 = module_0.error()
    assert var_0 == '\x1b[91m       (error) : \x1b[0m'

def test_case_6():
    var_0 = module_0.custom()
    assert var_0 == '\x1b[\x1b[37mm(info             ) : \x1b[0m'

def test_case_7():
    bytes_0 = b'\xa9_\xd2V\xbbTU\x04!\xe1'
    var_0 = module_0.debug(disableColour=bytes_0)
    assert var_0 == '       (debug) : '

@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_0.header()
    assert var_0 == '\x1b[94m////////\n///  ///\n////////\n\x1b[0m'
    var_1 = module_0.error()
    assert var_1 == '\x1b[91m       (error) : \x1b[0m'
    var_2 = module_0.warning()
    assert var_2 == '\x1b[93m     (warning) : \x1b[0m'
    var_3 = module_0.wwarning(*var_0)
    assert var_3 == '\x1b[33m(weak warning) : \x1b [ 9 4 m / / / / / / / / \n / / /     / / / \n / / / / / / / / \n \x1b [ 0 m\x1b[0m'
    var_4 = module_0.info(*var_1, disableColour=var_0)
    assert var_4 == '        (info) : \x1b [ 9 1 m               ( e r r o r )   :   \x1b [ 0 m'
    module_0.custom(alignment=var_4)

def test_case_9():
    bool_0 = True
    var_0 = module_0.wwarning(disableColour=bool_0)
    assert var_0 == '(weak warning) : '

@pytest.mark.xfail(strict=True)
def test_case_10():
    float_0 = 2630.17936
    list_0 = [float_0]
    var_0 = module_0.warning(*list_0, disableColour=list_0)
    assert var_0 == '     (warning) : 2630.17936'
    var_1 = module_0.debug(disableColour=var_0)
    assert var_1 == '       (debug) : '
    var_2 = module_0.header(disableColour=float_0)
    assert var_2 == '////////\n///  ///\n////////\n'
    var_2.gen(var_1)

def test_case_11():
    var_0 = module_0.info()
    assert var_0 == '\x1b[37m        (info) : \x1b[0m'
    var_1 = module_0.error(*var_0, disableColour=var_0)
    assert var_1 == '       (error) : \x1b [ 3 7 m                 ( i n f o )   :   \x1b [ 0 m'

def test_case_12():
    bool_0 = True
    var_0 = module_0.custom(disableColour=bool_0)
    assert var_0 == '(info             ) : '

@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_0.error()
    assert var_0 == '\x1b[91m       (error) : \x1b[0m'
    var_1 = module_0.wwarning(*var_0, disableColour=var_0)
    assert var_1 == '(weak warning) : \x1b [ 9 1 m               ( e r r o r )   :   \x1b [ 0 m'
    float_0 = 2630.17936
    var_2 = module_0.info()
    assert var_2 == '\x1b[37m        (info) : \x1b[0m'
    var_3 = module_0.wwarning()
    assert var_3 == '\x1b[33m(weak warning) : \x1b[0m'
    var_4 = module_0.debug(disableColour=var_3)
    assert var_4 == '       (debug) : '
    var_5 = module_0.header(*var_4)
    assert var_5 == '\x1b[94m/////////////////////////////////////////\n///               ( d e b u g )   :   ///\n/////////////////////////////////////////\n\x1b[0m'
    var_6 = module_0.header(disableColour=float_0)
    assert var_6 == '////////\n///  ///\n////////\n'
    var_7 = module_0.warning(disableColour=var_2)
    assert var_7 == '     (warning) : '
    var_8 = module_0.warning(*var_0, disableColour=var_5)
    assert var_8 == '     (warning) : \x1b [ 9 1 m               ( e r r o r )   :   \x1b [ 0 m'
    var_9 = module_0.custom(disableColour=var_2)
    assert var_9 == '(info             ) : '
    var_10 = module_0.info()
    assert var_10 == '\x1b[37m        (info) : \x1b[0m'
    var_11 = module_0.debug()
    assert var_11 == '\x1b[36m       (debug) : \x1b[0m'
    var_12 = module_0.debug()
    assert var_12 == '\x1b[36m       (debug) : \x1b[0m'
    var_13 = module_0.error(disableColour=float_0)
    assert var_13 == '       (error) : '
    var_14 = module_0.header(*var_5)
    assert var_14 == '\x1b[94m/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/// \x1b [ 9 4 m / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / \n / / /                               (   d   e   b   u   g   )       :       / / / \n / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / \n \x1b [ 0 m ///\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\x1b[0m'
    var_10.gen(var_14)