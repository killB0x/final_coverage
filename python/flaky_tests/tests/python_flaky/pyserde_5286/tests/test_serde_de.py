# Automatically generated by Pynguin.
import pytest
import serde.de as module_0
import jinja2.runtime as module_1
import serde.core as module_2
import tokenize as module_3
import inspect as module_4

def test_case_0():
    type_0 = module_0.deserialize()
    assert module_0.index == ''
    assert module_0.data == 'data'

def test_case_1():
    none_type_0 = None
    var_0 = module_0.from_tuple(none_type_0, none_type_0)
    assert module_0.index == ''
    assert module_0.data == 'data'

def test_case_2():
    type_0 = module_0.deserialize()
    assert module_0.index == ''
    assert module_0.data == 'data'
    var_0 = module_0.from_tuple(type_0, type_0)

def test_case_3():
    tuple_0 = ()
    var_0 = module_0.from_dict(tuple_0, tuple_0)
    assert module_0.index == ''
    assert module_0.data == 'data'

def test_case_4():
    str_0 = 'nI'
    renderer_0 = module_0.Renderer(str_0, str_0)
    assert module_0.index == ''
    assert module_0.data == 'data'
    str_1 = module_0.render_from_iter(renderer_0, renderer_0)
    assert str_1 == '\ndef __serde_from_iter__(data):\n  if data is None:\n    return None\n  return cls(\n  \n  data[0],\n  \n  __custom_deserializer__(fs[1], data[1]) if data[1] is not None else None,\n  \n  )\n    '

@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_1.make_logging_undefined()
    module_0.render_from_iter(var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '?b D"\t94\'D'
    module_0.deserialize(str_0)

def test_case_7():
    list_0 = []
    var_0 = module_0.from_obj(list_0, list_0, strict=list_0, named=list_0)
    assert module_0.index == ''
    assert module_0.data == 'data'

@pytest.mark.xfail(strict=True)
def test_case_8():
    type_0 = module_0.deserialize()
    assert module_0.index == ''
    assert module_0.data == 'data'
    module_0.de_func(type_0, type_0, type_0, type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '`kV=V"WM'
    type_0 = module_0.deserialize(rename_all=str_0)
    assert module_0.index == ''
    assert module_0.data == 'data'
    str_1 = ';.}\x0b'
    dict_0 = {}
    module_0.de_func(str_0, str_0, str_1, local=dict_0)

def test_case_10():
    str_0 = ''
    hidden_0 = module_2.Hidden(str_0)
    str_1 = module_0.render_from_dict(hidden_0, custom=str_0)
    assert str_1 == '\ndef __serde_from_dict__(data):\n  if data is None:\n    return None\n  fs = fields(cls)\n  return cls(\n  \n  {k: v for k, v in data["code"].items()},\n  \n  )\n    '
    assert module_0.index == ''
    assert module_0.data == 'data'

@pytest.mark.xfail(strict=True)
def test_case_11():
    untokenizer_0 = module_3.Untokenizer()
    type_0 = module_0.deserialize()
    assert module_0.index == ''
    assert module_0.data == 'data'
    module_0.de_func(type_0, untokenizer_0, untokenizer_0, local=untokenizer_0)

def test_case_12():
    dict_0 = {}
    var_0 = module_0.from_dict(dict_0, dict_0)
    assert module_0.index == ''
    assert module_0.data == 'data'

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = ''
    renderer_0 = module_0.Renderer(str_0)
    assert module_0.index == ''
    assert module_0.data == 'data'
    type_0 = module_4.trace(renderer_0)
    none_type_0 = None
    hidden_0 = module_2.Hidden(none_type_0)
    str_1 = 'oj^6WB6de:wc'
    none_type_1 = None
    int_0 = -18
    element_field_0 = module_0.ElementField(type_0, str_1, rename=none_type_1, skip_if_false=none_type_1, index=int_0)
    assert f'{type(module_0.ElementField.data).__module__}.{type(module_0.ElementField.data).__qualname__}' == 'builtins.property'
    var_0 = module_0.from_dict(hidden_0, hidden_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'serde.core.Hidden'
    assert var_0.code is None
    renderer_0.render(element_field_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    list_0 = []
    str_0 = 'X&a?*'
    renderer_0 = module_0.Renderer(str_0)
    assert module_0.index == ''
    assert module_0.data == 'data'
    module_0.from_tuple(list_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'I'
    renderer_0 = module_0.Renderer(str_0)
    assert module_0.index == ''
    assert module_0.data == 'data'
    var_0 = module_0.from_dict(str_0, renderer_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'serde.de.Renderer'
    assert var_0.func == 'I'
    assert var_0.custom is None
    renderer_0.dataclass(renderer_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = 'nI'
    renderer_0 = module_0.Renderer(str_0, str_0)
    assert module_0.index == ''
    assert module_0.data == 'data'
    module_0.from_obj(str_0, str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = '(W+YEu]b'
    tuple_0 = (str_0, str_0)
    module_0.from_obj(tuple_0, str_0)

def test_case_18():
    str_0 = 'I'
    renderer_0 = module_0.Renderer(str_0)
    assert module_0.index == ''
    assert module_0.data == 'data'
    str_1 = module_0.render_from_dict(renderer_0)
    assert str_1 == '\ndef __serde_from_dict__(data):\n  if data is None:\n    return None\n  fs = fields(cls)\n  return cls(\n  \n  data["func"],\n  \n  __custom_deserializer__(fs[1], data["custom"]) if "custom" in data else None,\n  \n  )\n    '

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'I'
    renderer_0 = module_0.Renderer(str_0)
    assert module_0.index == ''
    assert module_0.data == 'data'
    module_0.deserialize(renderer_0)

def test_case_20():
    type_0 = module_0.deserialize()
    assert module_0.index == ''
    assert module_0.data == 'data'
    str_0 = '--full'
    element_field_0 = module_0.ElementField(type_0, str_0, rename=str_0)
    assert element_field_0.index == 0
    assert f'{type(module_0.ElementField.data).__module__}.{type(module_0.ElementField.data).__qualname__}' == 'builtins.property'
    var_0 = element_field_0.__eq__(type_0)
    de_field_0 = module_0.to_arg(element_field_0, element_field_0)
    assert element_field_0.datavar == 'data'
    assert f'{type(element_field_0.parent).__module__}.{type(element_field_0.parent).__qualname__}' == 'serde.de.DeField'
    assert f'{type(de_field_0).__module__}.{type(de_field_0).__qualname__}' == 'serde.de.ElementField'
    assert de_field_0.name == '--full'
    assert f'{type(de_field_0.default).__module__}.{type(de_field_0.default).__qualname__}' == 'dataclasses._MISSING_TYPE'
    assert de_field_0.case is None
    assert de_field_0.rename == '--full'
    assert de_field_0.skip is None
    assert de_field_0.skip_if is None
    assert de_field_0.skip_if_false is None
    assert de_field_0.datavar == 'data'
    assert f'{type(de_field_0.index).__module__}.{type(de_field_0.index).__qualname__}' == 'serde.de.ElementField'
    assert f'{type(de_field_0.parent).__module__}.{type(de_field_0.parent).__qualname__}' == 'serde.de.DeField'
    assert de_field_0.iterbased is False

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = ''
    renderer_0 = module_0.Renderer(str_0)
    assert module_0.index == ''
    assert module_0.data == 'data'
    type_0 = module_0.deserialize(rename_all=renderer_0)
    str_1 = 'zJ\t/ }nZi '
    str_2 = 'syeMq~N &v'
    dict_0 = {str_1: str_2}
    hidden_0 = module_2.Hidden(dict_0)
    module_0.from_dict(dict_0, dict_0)

def test_case_22():
    type_0 = module_0.deserialize()
    assert module_0.index == ''
    assert module_0.data == 'data'
    str_0 = '--full'
    none_type_0 = None
    element_field_0 = module_0.ElementField(type_0, str_0, case=str_0, rename=none_type_0)
    assert element_field_0.index == 0
    assert f'{type(module_0.ElementField.data).__module__}.{type(module_0.ElementField.data).__qualname__}' == 'builtins.property'
    var_0 = element_field_0.__eq__(type_0)
    de_field_0 = module_0.to_arg(element_field_0, element_field_0)
    assert element_field_0.datavar == 'data'
    assert f'{type(element_field_0.parent).__module__}.{type(element_field_0.parent).__qualname__}' == 'serde.de.DeField'
    assert f'{type(de_field_0).__module__}.{type(de_field_0).__qualname__}' == 'serde.de.ElementField'
    assert de_field_0.name == '--full'
    assert f'{type(de_field_0.default).__module__}.{type(de_field_0.default).__qualname__}' == 'dataclasses._MISSING_TYPE'
    assert de_field_0.case == '--full'
    assert de_field_0.rename is None
    assert de_field_0.skip is None
    assert de_field_0.skip_if is None
    assert de_field_0.skip_if_false is None
    assert de_field_0.datavar == 'data'
    assert f'{type(de_field_0.index).__module__}.{type(de_field_0.index).__qualname__}' == 'serde.de.ElementField'
    assert f'{type(de_field_0.parent).__module__}.{type(de_field_0.parent).__qualname__}' == 'serde.de.DeField'
    assert de_field_0.iterbased is False

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = ''
    renderer_0 = module_0.Renderer(str_0)
    assert module_0.index == ''
    assert module_0.data == 'data'
    type_0 = module_0.deserialize()
    hidden_0 = module_2.Hidden(str_0)
    str_1 = 'oj^6WB6de:wc'
    none_type_0 = None
    int_0 = 11
    element_field_0 = module_0.ElementField(type_0, str_1, rename=none_type_0, skip_if_false=none_type_0, index=int_0)
    assert f'{type(module_0.ElementField.data).__module__}.{type(module_0.ElementField.data).__qualname__}' == 'builtins.property'
    var_0 = module_0.from_dict(hidden_0, hidden_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'serde.core.Hidden'
    assert var_0.code == ''
    str_2 = renderer_0.render(element_field_0)
    assert str_2 == '__custom_deserializer__(fs[11], )'
    var_1 = module_0.from_tuple(str_0, str_0)
    assert var_1 == ''
    renderer_1 = module_0.Renderer(hidden_0)
    var_2 = var_1.isascii()
    str_3 = module_0.render_from_iter(hidden_0)
    assert str_3 == '\ndef __serde_from_iter__(data):\n  if data is None:\n    return None\n  return cls(\n  \n  {k: v for k, v in data[0].items()},\n  \n  )\n    '
    module_0.deserialize(renderer_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = ''
    renderer_0 = module_0.Renderer(str_0)
    assert module_0.index == ''
    assert module_0.data == 'data'
    type_0 = module_0.deserialize()
    hidden_0 = module_2.Hidden(str_0)
    none_type_0 = None
    element_field_0 = module_0.ElementField(hidden_0, str_0, skip=none_type_0, datavar=none_type_0)
    assert element_field_0.index == 0
    assert f'{type(module_0.ElementField.data).__module__}.{type(module_0.ElementField.data).__qualname__}' == 'builtins.property'
    var_0 = module_0.from_dict(type_0, none_type_0)
    renderer_0.render(element_field_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = ''
    renderer_0 = module_0.Renderer(str_0)
    assert module_0.index == ''
    assert module_0.data == 'data'
    hidden_0 = module_2.Hidden(str_0)
    hidden_1 = module_2.Hidden()
    str_1 = 'oj^6WB6de:wc'
    int_0 = 11
    element_field_0 = module_0.ElementField(int_0, str_1, str_0)
    assert element_field_0.index == 0
    assert f'{type(module_0.ElementField.data).__module__}.{type(module_0.ElementField.data).__qualname__}' == 'builtins.property'
    var_0 = module_0.from_dict(str_1, renderer_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'serde.de.Renderer'
    assert var_0.func == ''
    assert var_0.custom is None
    str_2 = var_0.render(element_field_0)
    assert str_2 == 'None.get("oj^6WB6de:wc", "")'
    var_0.set_precedence(str_1)

@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = ''
    renderer_0 = module_0.Renderer(str_0)
    assert module_0.index == ''
    assert module_0.data == 'data'
    type_0 = module_0.deserialize()
    hidden_0 = module_2.Hidden(str_0)
    var_0 = module_0.from_dict(hidden_0, hidden_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'serde.core.Hidden'
    assert var_0.code == ''
    var_1 = module_0.from_tuple(str_0, str_0)
    assert var_1 == ''
    element_field_0 = module_0.ElementField(var_1, var_1, var_0, skip_if=var_1, datavar=renderer_0)
    assert element_field_0.index == 0
    assert f'{type(module_0.ElementField.data).__module__}.{type(module_0.ElementField.data).__qualname__}' == 'builtins.property'
    var_2 = module_0.from_dict(str_0, var_1)
    str_1 = renderer_0.render(element_field_0)
    assert str_1 == 'Renderer(func=\'\', custom=None).get("", Hidden(code=\'\'))'
    var_3 = module_0.from_tuple(str_1, str_0)
    module_0.render_from_dict(var_3)

@pytest.mark.xfail(strict=True)
def test_case_27():
    type_0 = module_0.deserialize()
    assert module_0.index == ''
    assert module_0.data == 'data'
    none_type_0 = None
    str_0 = 'typing'
    type_1 = module_0.de_func(type_0, str_0, str_0, none_type_0, none_type_0)
    var_0 = module_4.isabstract(none_type_0)
    var_0.format_map(type_0)