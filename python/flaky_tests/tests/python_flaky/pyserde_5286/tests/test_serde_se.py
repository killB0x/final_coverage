# Automatically generated by Pynguin.
import pytest
import serde.se as module_0
import enum as module_1
import inspect as module_2
import re as module_3
import serde.core as module_4
import jinja2.filters as module_5

def test_case_0():
    type_0 = module_0.serialize()

def test_case_1():
    none_type_0 = None
    var_0 = module_0.astuple(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_1._EnumDict()
    module_0.se_func(var_0, var_0, var_0)

def test_case_3():
    none_type_0 = None
    dict_0 = module_0.to_dict(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    enum_dict_0 = module_1._EnumDict()
    none_type_0 = None
    se_field_0 = module_0.SeField(none_type_0, none_type_0, case=none_type_0, skip=none_type_0, skip_if_false=none_type_0)
    assert f'{type(module_0.SeField.varname).__module__}.{type(module_0.SeField.varname).__qualname__}' == 'builtins.property'
    module_0.serialize(se_field_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '$q3q8@\t+Gi",7A6K,N'
    var_0 = str_0.__getnewargs__()
    var_1 = var_0.__repr__()
    var_2 = module_0.astuple(str_0)
    assert var_2 == '$q3q8@\t+Gi",7A6K,N'
    renderer_0 = module_0.Renderer(str_0)
    renderer_0.dataclass(var_2)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '?0OiXDz^y,lkyIu'
    renderer_0 = module_0.Renderer(str_0)
    var_0 = renderer_0.__eq__(renderer_0)
    renderer_0.list(var_0)

def test_case_7():
    none_type_0 = None
    var_0 = module_0.asdict(none_type_0)

def test_case_8():
    var_0 = module_2.trace()
    var_1 = module_0.asdict(var_0)

def test_case_9():
    var_0 = module_2.trace()
    dict_0 = module_0.to_dict(var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    var_0 = module_2.trace()
    module_0.serialize(var_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    enum_dict_0 = module_1._EnumDict()
    str_0 = module_0.render_asdict(enum_dict_0)
    assert str_0 == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    dict_0 = module_0.to_dict(enum_dict_0)
    se_field_0 = module_0.SeField(str_0, str_0, case=str_0, skip=str_0, skip_if_false=str_0)
    assert se_field_0.type == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    assert se_field_0.name == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    assert se_field_0.case == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    assert se_field_0.skip == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    assert se_field_0.skip_if_false == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    assert f'{type(module_0.SeField.varname).__module__}.{type(module_0.SeField.varname).__qualname__}' == 'builtins.property'
    var_0 = module_0.astuple(dict_0)
    module_0.serialize(se_field_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    var_0 = module_2.trace()
    var_1 = module_0.asdict(var_0)
    var_2 = var_0.__contains__(var_0)
    var_3 = module_0.astuple(var_1)
    module_0.serialize(var_1)

@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_2.trace()
    dict_0 = module_0.to_dict(var_0)
    str_0 = 'pyserde-inspect'
    str_1 = 'xJ|MmE\x0cK5.I\x0cd'
    module_0.se_func(var_0, str_1, var_0, local=str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    var_0 = module_2.trace()
    dict_0 = module_0.to_dict(var_0)
    var_1 = module_0.asdict(var_0)
    str_0 = module_0.render_asdict(var_1)
    assert str_0 == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    dict_1 = module_0.to_dict(var_1)
    var_2 = module_0.astuple(dict_0)
    var_3 = var_1.__eq__(var_1)
    var_1.visit_withitem(var_3)

@pytest.mark.xfail(strict=True)
def test_case_15():
    enum_dict_0 = module_1._EnumDict()
    var_0 = module_0.asdict(enum_dict_0)
    module_0.se_func(enum_dict_0, enum_dict_0, enum_dict_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    var_0 = module_2.trace()
    dict_0 = module_0.to_dict(var_0)
    var_1 = module_0.asdict(var_0)
    tuple_0 = (var_1, var_0)
    var_2 = module_0.asdict(tuple_0)
    str_0 = module_0.render_asdict(var_1)
    assert str_0 == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    dict_1 = module_0.to_dict(var_1)
    var_3 = module_0.astuple(str_0)
    assert var_3 == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    bool_0 = module_0.is_serializable(tuple_0)
    var_4 = var_3.__eq__(var_2)
    str_1 = '8dD'
    module_0.se_func(var_3, str_1, var_3)

@pytest.mark.xfail(strict=True)
def test_case_17():
    enum_dict_0 = module_1._EnumDict()
    dict_0 = module_0.to_dict(enum_dict_0)
    none_type_0 = None
    se_field_0 = module_0.SeField(none_type_0, none_type_0, case=none_type_0, skip=none_type_0, skip_if_false=none_type_0)
    assert f'{type(module_0.SeField.varname).__module__}.{type(module_0.SeField.varname).__qualname__}' == 'builtins.property'
    module_0.serialize(se_field_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    var_0 = module_3.RegexFlag.DEBUG
    dict_0 = module_0.to_dict(var_0)
    assert dict_0 == module_3.RegexFlag.DEBUG
    var_1 = module_0.asdict(var_0)
    assert var_1 == module_3.RegexFlag.DEBUG
    var_2 = var_1.__reduce__()
    str_0 = module_0.render_asdict(var_2)
    assert str_0 == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    dict_1 = module_0.to_dict(var_0)
    var_3 = module_0.astuple(var_2)
    var_0.reverse()

@pytest.mark.xfail(strict=True)
def test_case_19():
    var_0 = module_2.trace()
    dict_0 = module_0.to_dict(var_0)
    var_1 = module_0.asdict(var_0)
    str_0 = module_0.render_asdict(var_1)
    assert str_0 == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    dict_1 = module_0.to_dict(var_1)
    str_1 = module_0.render_asdict(var_1, var_0)
    assert str_1 == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    var_2 = var_0.__dir__()
    dict_2 = module_0.to_dict(var_2)
    var_3 = module_0.astuple(var_1)
    bool_0 = module_0.is_serializable(str_1)
    var_4 = var_2.__eq__(var_0)
    str_2 = '+z\x0ca&x^E$YahoH'
    module_0.se_func(var_1, str_2, var_4, local=var_4)

@pytest.mark.xfail(strict=True)
def test_case_20():
    enum_dict_0 = module_1._EnumDict()
    dict_0 = module_0.to_dict(enum_dict_0)
    var_0 = module_0.asdict(enum_dict_0)
    float_0 = 1663.490047
    tuple_0 = (enum_dict_0, var_0, float_0, enum_dict_0)
    dict_1 = module_0.to_dict(tuple_0)
    none_type_0 = None
    var_1 = module_0.astuple(var_0)
    bool_0 = module_0.is_serializable(var_1)
    var_2 = var_1.__eq__(var_1)
    none_type_0.visit_withitem(var_2)

@pytest.mark.xfail(strict=True)
def test_case_21():
    type_0 = module_0.serialize()
    str_0 = 'FV'
    dict_0 = {str_0: type_0, str_0: str_0, type_0: type_0}
    type_1 = module_0.se_func(type_0, str_0, str_0, local=dict_0)
    str_0.writelines(type_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = 'EI5n> _k5vYj8P*awEY'
    renderer_0 = module_0.Renderer(str_0)
    str_1 = '5q7\x0bzL'
    renderer_1 = module_0.Renderer(str_1)
    renderer_0.opt(str_1)

@pytest.mark.xfail(strict=True)
def test_case_23():
    enum_dict_0 = module_1._EnumDict()
    var_0 = module_0.asdict(enum_dict_0)
    str_0 = module_0.render_asdict(var_0)
    assert str_0 == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    dict_0 = var_0.__repr__()
    none_type_0 = None
    var_1 = module_0.astuple(dict_0)
    assert var_1 == '{}'
    se_field_0 = module_0.SeField(none_type_0, var_0, case=var_0, skip=var_0, skip_if_false=var_1)
    assert f'{type(module_0.SeField.varname).__module__}.{type(module_0.SeField.varname).__qualname__}' == 'builtins.property'
    bool_0 = module_0.is_serializable(none_type_0)
    str_1 = '\n    Hidden infomation encoded in serde classes.\n    '
    se_field_0.mangle(var_1, str_1)

@pytest.mark.xfail(strict=True)
def test_case_24():
    enum_dict_0 = module_1._EnumDict()
    var_0 = module_0.asdict(enum_dict_0)
    str_0 = module_0.render_asdict(var_0)
    assert str_0 == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    dict_0 = module_0.to_dict(var_0)
    none_type_0 = None
    var_1 = module_0.astuple(dict_0)
    se_field_0 = module_0.SeField(none_type_0, var_0, case=var_0, skip=var_0, skip_if_false=var_1)
    assert se_field_0.skip_if_false == {}
    assert f'{type(module_0.SeField.varname).__module__}.{type(module_0.SeField.varname).__qualname__}' == 'builtins.property'
    bool_0 = module_0.is_serializable(none_type_0)
    bool_1 = module_0.is_serializable(var_1)
    var_2 = var_0.__eq__(str_0)
    str_1 = 'Unkown case type: '
    var_3 = module_0.asdict(se_field_0)
    module_0.serialize(dict_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_25():
    enum_dict_0 = module_1._EnumDict()
    var_0 = module_4.Hidden()
    str_0 = module_0.render_asdict(var_0)
    assert str_0 == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n  res = {}\n  \n    \n  res["code"] = {k: v for k, v in obj.code.items()}\n    \n  \n\n  return res\n  \n    '
    dict_0 = module_0.to_dict(var_0)
    assert f'{type(dict_0).__module__}.{type(dict_0).__qualname__}' == 'serde.core.Hidden'
    assert dict_0.code == {}
    none_type_0 = None
    var_1 = module_0.astuple(dict_0)
    se_field_0 = module_0.SeField(none_type_0, var_0, case=var_0, skip=var_0, skip_if_false=var_1)
    assert se_field_0.skip_if_false == ({},)
    assert f'{type(module_0.SeField.varname).__module__}.{type(module_0.SeField.varname).__qualname__}' == 'builtins.property'
    var_2 = module_0.astuple(none_type_0)
    bool_0 = module_0.is_serializable(var_2)
    bool_1 = module_3.purge()
    module_0.serialize(se_field_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = '\x0b'
    renderer_0 = module_0.Renderer(str_0)
    list_0 = [str_0, renderer_0]
    type_0 = module_0.serialize(rename_all=str_0)
    var_0 = module_5.sync_do_map(renderer_0, str_0, *list_0)
    renderer_0.dict(var_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    enum_dict_0 = module_1._EnumDict()
    var_0 = module_2.getmembers(enum_dict_0, enum_dict_0)
    str_0 = module_0.render_asdict(var_0)
    assert str_0 == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    dict_0 = module_0.to_dict(var_0)
    none_type_0 = None
    var_1 = module_0.astuple(dict_0)
    se_field_0 = module_0.SeField(none_type_0, var_0, case=var_0, skip=var_0, skip_if_false=var_1)
    assert f'{type(se_field_0.skip_if_false).__module__}.{type(se_field_0.skip_if_false).__qualname__}' == 'builtins.tuple'
    assert f'{type(module_0.SeField.varname).__module__}.{type(module_0.SeField.varname).__qualname__}' == 'builtins.property'
    var_2 = module_0.astuple(none_type_0)
    bool_0 = module_0.is_serializable(var_2)
    var_3 = se_field_0.__repr__()
    bool_1 = module_0.is_serializable(enum_dict_0)
    var_4 = var_0.__eq__(none_type_0)
    module_0.serialize(se_field_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    enum_dict_0 = module_1._EnumDict()
    var_0 = module_2._ParameterKind.KEYWORD_ONLY
    str_0 = module_0.render_asdict(var_0)
    assert str_0 == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    module_0.to_dict(var_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    regex_flag_0 = module_3.RegexFlag.DEBUG
    dict_0 = module_0.to_dict(regex_flag_0)
    assert dict_0 == module_3.RegexFlag.DEBUG
    var_0 = module_0.asdict(regex_flag_0)
    assert var_0 == module_3.RegexFlag.DEBUG
    var_1 = var_0.__reduce__()
    var_2 = module_0.asdict(var_1)
    str_0 = module_0.render_asdict(var_1)
    assert str_0 == '\ndef __serde_to_dict__(obj):\n  if not is_dataclass(obj):\n    return copy.deepcopy(obj)\n\n  \n    '
    dict_1 = module_0.to_dict(regex_flag_0)
    var_3 = module_0.astuple(var_1)
    regex_flag_0.reverse()