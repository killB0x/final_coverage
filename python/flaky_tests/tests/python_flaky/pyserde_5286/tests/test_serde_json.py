# Automatically generated by Pynguin.
import pytest
import serde.json as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.JsonDeserializer(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    str_0 = module_0.to_json(list_0)
    assert str_0 == '[]'
    json_serializer_0 = module_0.JsonSerializer(*list_0)
    assert f'{type(json_serializer_0).__module__}.{type(json_serializer_0).__qualname__}' == 'serde.json.JsonSerializer'
    json_deserializer_0 = module_0.JsonDeserializer()
    assert f'{type(json_deserializer_0).__module__}.{type(json_deserializer_0).__qualname__}' == 'serde.json.JsonDeserializer'
    assert f'{type(module_0.JsonDeserializer.deserialize).__module__}.{type(module_0.JsonDeserializer.deserialize).__qualname__}' == 'builtins.method'
    none_type_0 = None
    str_1 = module_0.to_json(none_type_0)
    str_2 = 'RD;;(_i/6:rygDx'
    dict_0 = {str_2: none_type_0}
    module_0.JsonDeserializer(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 675.8917
    str_0 = '\nDefines classess and functions for `deserialize` decorator.\n\n`deserialize` is a decorator to make a `dataclasses.dataclass` class deserializable.\n`is_deserializable` is used to test a class is with `deserialize`.\n`Deserializer` is a deserializer base class used in `from_obj`,\n`serde.json.from_json`. You can subclass it to make your own deserializer.\n`from_obj` deserializes from an object into an instance of the class with\n`deserialize`.\n\n`args_from_iter` and `args_from_dict` are private functions but they are the core\nparts of pyserde.\n'
    json_serializer_0 = module_0.JsonSerializer()
    assert f'{type(json_serializer_0).__module__}.{type(json_serializer_0).__qualname__}' == 'serde.json.JsonSerializer'
    assert f'{type(module_0.JsonSerializer.serialize).__module__}.{type(module_0.JsonSerializer.serialize).__qualname__}' == 'builtins.method'
    module_0.from_json(float_0, str_0)