# Automatically generated by Pynguin.
import pytest
import serde.core as module_0
import dataclasses as module_1
import re as module_2
import enum as module_3
import stringcase as module_4

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'l7\'.P"!>V] 9Dztn]%Jg'
    module_0.gen(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    module_0.typecheck(list_0, list_0)

def test_case_2():
    hidden_0 = module_0.Hidden()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'serde'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SE_NAME == '__serde_serialize__'
    assert module_0.FROM_ITER == '__serde_from_iter__'
    assert module_0.FROM_DICT == '__serde_from_dict__'
    assert module_0.TO_ITER == '__serde_to_iter__'
    assert module_0.TO_DICT == '__serde_to_dict__'
    assert module_0.HIDDEN_NAME == '__serde_hidden__'

def test_case_3():
    var_0 = module_0.init()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'serde'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SE_NAME == '__serde_serialize__'
    assert module_0.FROM_ITER == '__serde_from_iter__'
    assert module_0.FROM_DICT == '__serde_from_dict__'
    assert module_0.TO_ITER == '__serde_to_iter__'
    assert module_0.TO_DICT == '__serde_to_dict__'
    assert module_0.HIDDEN_NAME == '__serde_hidden__'
    assert module_0.SETTINGS == {'debug': False}

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'haUlLmi4'
    var_0 = module_1.field(compare=str_0, kw_only=str_0)
    module_0.fields(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_2.RegexFlag.ASCII
    module_0.typecheck(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '!V;G'
    module_0.gen(str_0, cls=str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_3._EnumDict()
    module_0.typecheck(var_0, var_0)

def test_case_8():
    str_0 = 'B}kd9z'
    var_0 = module_4.alphanumcase(str_0)
    field_0 = module_0.Field(str_0, str_0, skip_if=var_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'serde'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SE_NAME == '__serde_serialize__'
    assert module_0.FROM_ITER == '__serde_from_iter__'
    assert module_0.FROM_DICT == '__serde_from_dict__'
    assert module_0.TO_ITER == '__serde_to_iter__'
    assert module_0.TO_DICT == '__serde_to_dict__'
    assert module_0.HIDDEN_NAME == '__serde_hidden__'
    assert module_0.SETTINGS == {'debug': False}
    assert f'{type(module_0.Field.from_dataclass).__module__}.{type(module_0.Field.from_dataclass).__qualname__}' == 'builtins.method'
    str_1 = module_0.conv(field_0)
    assert str_1 == 'B}kd9z'

def test_case_9():
    list_0 = []
    var_0 = module_0.init()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'serde'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SE_NAME == '__serde_serialize__'
    assert module_0.FROM_ITER == '__serde_from_iter__'
    assert module_0.FROM_DICT == '__serde_from_dict__'
    assert module_0.TO_ITER == '__serde_to_iter__'
    assert module_0.TO_DICT == '__serde_to_dict__'
    assert module_0.HIDDEN_NAME == '__serde_hidden__'
    assert module_0.SETTINGS == {'debug': False}
    none_type_0 = module_0.typecheck(list_0, var_0)
    str_0 = '["'
    field_0 = module_0.Field(str_0, str_0, none_type_0, list_0, none_type_0)
    assert f'{type(module_0.Field.from_dataclass).__module__}.{type(module_0.Field.from_dataclass).__qualname__}' == 'builtins.method'
    str_1 = module_0.conv(field_0)
    assert str_1 == '["'
    var_1 = module_4.pascalcase(field_0)
    bool_0 = True
    var_2 = module_4.camelcase(bool_0)
    dict_0 = {var_1: bool_0, str_1: list_0}
    none_type_1 = module_0.typecheck(dict_0, var_1)

def test_case_10():
    var_0 = module_2.purge()
    list_0 = []
    none_type_0 = module_0.typecheck(list_0, var_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'serde'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SE_NAME == '__serde_serialize__'
    assert module_0.FROM_ITER == '__serde_from_iter__'
    assert module_0.FROM_DICT == '__serde_from_dict__'
    assert module_0.TO_ITER == '__serde_to_iter__'
    assert module_0.TO_DICT == '__serde_to_dict__'
    assert module_0.HIDDEN_NAME == '__serde_hidden__'
    assert module_0.SETTINGS == {'debug': False}

def test_case_11():
    var_0 = module_2.purge()
    list_0 = []
    str_0 = '["'
    var_1 = var_0.__eq__(var_0)
    field_0 = module_0.Field(var_0, str_0, var_1, list_0, var_1)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'serde'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SE_NAME == '__serde_serialize__'
    assert module_0.FROM_ITER == '__serde_from_iter__'
    assert module_0.FROM_DICT == '__serde_from_dict__'
    assert module_0.TO_ITER == '__serde_to_iter__'
    assert module_0.TO_DICT == '__serde_to_dict__'
    assert module_0.HIDDEN_NAME == '__serde_hidden__'
    assert module_0.SETTINGS == {'debug': False}
    assert f'{type(module_0.Field.from_dataclass).__module__}.{type(module_0.Field.from_dataclass).__qualname__}' == 'builtins.method'
    str_1 = module_0.conv(field_0)
    assert str_1 is True
    var_2 = field_0.__eq__(list_0)
    var_3 = module_4.camelcase(str_1)
    assert var_3 == 'true'

def test_case_12():
    enum_dict_0 = module_3._EnumDict()
    list_0 = []
    field_0 = module_0.Field(enum_dict_0, list_0, rename=enum_dict_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'serde'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SE_NAME == '__serde_serialize__'
    assert module_0.FROM_ITER == '__serde_from_iter__'
    assert module_0.FROM_DICT == '__serde_from_dict__'
    assert module_0.TO_ITER == '__serde_to_iter__'
    assert module_0.TO_DICT == '__serde_to_dict__'
    assert module_0.HIDDEN_NAME == '__serde_hidden__'
    assert module_0.SETTINGS == {'debug': False}
    assert f'{type(module_0.Field.from_dataclass).__module__}.{type(module_0.Field.from_dataclass).__qualname__}' == 'builtins.method'
    with pytest.raises(ValueError):
        module_0.typecheck(enum_dict_0, field_0)

def test_case_13():
    list_0 = []
    none_type_0 = module_4.sentencecase(list_0)
    field_0 = module_0.Field(list_0, list_0, none_type_0, list_0, none_type_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'serde'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SE_NAME == '__serde_serialize__'
    assert module_0.FROM_ITER == '__serde_from_iter__'
    assert module_0.FROM_DICT == '__serde_from_dict__'
    assert module_0.TO_ITER == '__serde_to_iter__'
    assert module_0.TO_DICT == '__serde_to_dict__'
    assert module_0.HIDDEN_NAME == '__serde_hidden__'
    assert module_0.SETTINGS == {'debug': False}
    assert f'{type(module_0.Field.from_dataclass).__module__}.{type(module_0.Field.from_dataclass).__qualname__}' == 'builtins.method'
    with pytest.raises(module_0.SerdeError):
        module_0.conv(field_0, none_type_0)

def test_case_14():
    str_0 = '#JG3&Z\\@kT'
    str_1 = module_0.gen(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'serde'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SE_NAME == '__serde_serialize__'
    assert module_0.FROM_ITER == '__serde_from_iter__'
    assert module_0.FROM_DICT == '__serde_from_dict__'
    assert module_0.TO_ITER == '__serde_to_iter__'
    assert module_0.TO_DICT == '__serde_to_dict__'
    assert module_0.HIDDEN_NAME == '__serde_hidden__'
    assert module_0.SETTINGS == {'debug': False}
    hidden_0 = module_0.Hidden()
    bool_0 = True
    none_type_0 = module_0.typecheck(bool_0, hidden_0)

def test_case_15():
    var_0 = module_2.purge()
    field_0 = module_0.Field(var_0, var_0, var_0, var_0, var_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'serde'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SE_NAME == '__serde_serialize__'
    assert module_0.FROM_ITER == '__serde_from_iter__'
    assert module_0.FROM_DICT == '__serde_from_dict__'
    assert module_0.TO_ITER == '__serde_to_iter__'
    assert module_0.TO_DICT == '__serde_to_dict__'
    assert module_0.HIDDEN_NAME == '__serde_hidden__'
    assert module_0.SETTINGS == {'debug': False}
    assert f'{type(module_0.Field.from_dataclass).__module__}.{type(module_0.Field.from_dataclass).__qualname__}' == 'builtins.method'
    tuple_0 = (var_0, var_0)
    none_type_0 = module_0.typecheck(tuple_0, var_0)

def test_case_16():
    var_0 = module_2.purge()
    var_1 = var_0.__dir__()
    none_type_0 = module_0.typecheck(var_1, var_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'serde'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SE_NAME == '__serde_serialize__'
    assert module_0.FROM_ITER == '__serde_from_iter__'
    assert module_0.FROM_DICT == '__serde_from_dict__'
    assert module_0.TO_ITER == '__serde_to_iter__'
    assert module_0.TO_DICT == '__serde_to_dict__'
    assert module_0.HIDDEN_NAME == '__serde_hidden__'
    assert module_0.SETTINGS == {'debug': False}
    str_0 = '[R"'
    var_2 = var_1.__eq__(var_1)
    field_0 = module_0.Field(var_0, str_0, none_type_0, var_1, none_type_0)
    assert f'{type(module_0.Field.from_dataclass).__module__}.{type(module_0.Field.from_dataclass).__qualname__}' == 'builtins.method'
    str_1 = '#JG3&Z\\@kT'
    none_type_1 = None
    str_2 = module_0.gen(str_1, none_type_1)
    str_3 = '=$A?\x0bz\x0bwLO|\nE?|U:~#'
    str_4 = '2Mb^wFR\tQ126k(f4'
    dict_0 = {str_2: str_3, str_4: var_0}
    hidden_0 = module_0.Hidden(dict_0)
    with pytest.raises(ValueError):
        module_0.typecheck(dict_0, hidden_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    var_0 = module_2.purge()
    tuple_0 = (var_0, var_0)
    none_type_0 = module_0.typecheck(tuple_0, var_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'serde'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SE_NAME == '__serde_serialize__'
    assert module_0.FROM_ITER == '__serde_from_iter__'
    assert module_0.FROM_DICT == '__serde_from_dict__'
    assert module_0.TO_ITER == '__serde_to_iter__'
    assert module_0.TO_DICT == '__serde_to_dict__'
    assert module_0.HIDDEN_NAME == '__serde_hidden__'
    assert module_0.SETTINGS == {'debug': False}
    module_0.typecheck(tuple_0, tuple_0)