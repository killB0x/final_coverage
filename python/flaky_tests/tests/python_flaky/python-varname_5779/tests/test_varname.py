# Automatically generated by Pynguin.
import pytest
import varname as module_0
import re as module_1
import inspect as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.will()
    module_0.varname(var_0)

def test_case_1():
    var_0 = module_0.varname()

@pytest.mark.xfail(strict=True)
def test_case_2():
    module_0.namedtuple()

def test_case_3():
    var_0 = module_0.will()

def test_case_4():
    var_0 = module_1.purge()
    with pytest.raises(module_0.VarnameRetrievingError):
        module_0.inject(var_0)

def test_case_5():
    with pytest.raises(module_0.VarnameRetrievingError):
        module_0.nameof()

def test_case_6():
    var_0 = module_0.will()
    wrapper_0 = module_0.Wrapper(var_0)
    assert f'{type(wrapper_0).__module__}.{type(wrapper_0).__qualname__}' == 'varname.Wrapper'
    assert wrapper_0.value is None
    with pytest.raises(module_0.VarnameRetrievingError):
        module_0.nameof()

def test_case_7():
    multiple_target_assignment_warning_0 = module_0.MultipleTargetAssignmentWarning()
    var_0 = module_0.inject(multiple_target_assignment_warning_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'varname.MultipleTargetAssignmentWarning'
    with pytest.raises(module_0.VarnameRetrievingError):
        module_0.varname(raise_exc=var_0)

def test_case_8():
    parameter_kind_0 = module_2._ParameterKind.KEYWORD_ONLY
    var_0 = module_0.nameof(caller=parameter_kind_0)
    with pytest.raises(module_0.VarnameRetrievingError):
        module_0.will(parameter_kind_0, var_0)

def test_case_9():
    str_0 = 'sQ}v9D8L DD{'
    wrapper_0 = module_0.Wrapper(str_0)
    assert f'{type(wrapper_0).__module__}.{type(wrapper_0).__qualname__}' == 'varname.Wrapper'
    assert wrapper_0.value == 'sQ}v9D8L DD{'
    var_0 = module_0.will()
    var_1 = wrapper_0.__str__()
    var_2 = module_0.varname()
    with pytest.raises(module_0.VarnameRetrievingError):
        module_0.inject(var_2)

def test_case_10():
    var_0 = module_2._ParameterKind.VAR_KEYWORD
    list_0 = [var_0]
    with pytest.raises(module_0.VarnameRetrievingError):
        module_0.nameof(*list_0)

def test_case_11():
    str_0 = 'sQ}v9D8L DD{'
    wrapper_0 = module_0.Wrapper(str_0)
    assert f'{type(wrapper_0).__module__}.{type(wrapper_0).__qualname__}' == 'varname.Wrapper'
    assert wrapper_0.value == 'sQ}v9D8L DD{'
    multiple_target_assignment_warning_0 = module_0.MultipleTargetAssignmentWarning()
    var_0 = wrapper_0.__repr__()
    var_1 = module_0.will()
    var_2 = module_0.varname()
    with pytest.raises(module_0.VarnameRetrievingError):
        module_0.inject(var_2)

def test_case_12():
    float_0 = 2378.5
    var_0 = module_0.will(float_0)

def test_case_13():
    bool_0 = False
    with pytest.raises(module_0.VarnameRetrievingError):
        module_0.nameof(caller=bool_0)

def test_case_14():
    parameter_kind_0 = module_2._ParameterKind.KEYWORD_ONLY
    var_0 = module_0.nameof(caller=parameter_kind_0)
    wrapper_0 = module_0.Wrapper(var_0)
    assert f'{type(wrapper_0).__module__}.{type(wrapper_0).__qualname__}' == 'varname.Wrapper'
    assert wrapper_0.value == ('ast_node', 'exec_ctx')
    var_1 = var_0.__hash__()
    assert var_1 == -3734571553513113425
    var_2 = module_0.varname()
    wrapper_1 = module_0.Wrapper(var_2)
    with pytest.raises(module_0.VarnameRetrievingError):
        module_0.will(var_1, wrapper_0)

def test_case_15():
    parameter_kind_0 = module_2._ParameterKind.VAR_POSITIONAL
    var_0 = module_0.nameof(caller=parameter_kind_0)

def test_case_16():
    parameter_kind_0 = module_2._ParameterKind.VAR_KEYWORD
    with pytest.raises(module_0.VarnameRetrievingError):
        module_0.nameof(caller=parameter_kind_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    parameter_kind_0 = module_2._ParameterKind.VAR_POSITIONAL
    var_0 = module_0.varname(parameter_kind_0)
    assert var_0 == 'exception'
    parameter_kind_0.visit_Lambda(parameter_kind_0)

def test_case_18():
    parameter_kind_0 = module_2._ParameterKind.VAR_POSITIONAL
    list_0 = [parameter_kind_0]
    var_0 = module_0.nameof(*list_0, caller=parameter_kind_0)
    assert var_0 == 'code'
    var_1 = module_0.nameof(caller=parameter_kind_0)
    var_2 = module_0.will()
    wrapper_0 = module_0.Wrapper(var_2)
    assert f'{type(wrapper_0).__module__}.{type(wrapper_0).__qualname__}' == 'varname.Wrapper'
    assert wrapper_0.value is None
    var_3 = module_0.varname(parameter_kind_0)
    assert var_3 == 'exception'
    var_4 = var_2.__hash__()
    var_5 = module_0.will(var_4, var_2)
    with pytest.raises(module_0.VarnameRetrievingError):
        module_0.inject(var_1)