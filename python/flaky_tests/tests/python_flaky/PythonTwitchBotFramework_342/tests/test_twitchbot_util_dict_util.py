# Automatically generated by Pynguin.
import pytest
import twitchbot.util.dict_util as module_0
import re as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'PubSubData'
    dict_0 = {}
    bytes_0 = b'q\x08_\x1a\x82]f\x1bi\x027\x97[l\x95\x0e\x1e'
    bool_0 = module_0.dict_has_keys(dict_0, *bytes_0)
    assert bool_0 is False
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.dict_get_value(dict_0, *list_0)
    var_1 = module_0.dict_get_value(dict_0, *list_0)
    dict_1 = module_0.try_parse_json(str_0)
    var_0.seek(bool_0)

def test_case_1():
    none_type_0 = None
    dict_0 = module_0.try_parse_json(none_type_0)
    bool_0 = module_0.dict_has_keys(dict_0)
    dict_1 = module_0.try_parse_json(none_type_0)
    var_0 = module_0.dict_get_value(dict_1, default=dict_1)

def test_case_2():
    str_0 = '!Y^8ki`[-u{_Tz!3O47'
    var_0 = module_0.dict_get_value(str_0, *str_0, default=str_0)
    assert var_0 == '!Y^8ki`[-u{_Tz!3O47'

def test_case_3():
    str_0 = '!Y^8ki`[-u{_Tz!3O47'
    var_0 = module_0.dict_get_value(str_0)
    var_1 = module_0.dict_get_value(var_0, *var_0, default=str_0)
    assert var_1 == '!Y^8ki`[-u{_Tz!3O47'

def test_case_4():
    bool_0 = True
    var_0 = module_0.dict_get_value(bool_0)
    dict_0 = module_0.try_parse_json(bool_0)
    dict_1 = module_0.try_parse_json(var_0)
    dict_2 = module_0.try_parse_json(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'\xa1'
    module_0.try_parse_json(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'ehi5:A!fL=]7t|;$'
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = module_0.dict_has_keys(dict_0)
    list_0 = [bool_0, dict_0]
    bool_1 = module_0.dict_has_keys(dict_0)
    bool_2 = module_0.dict_has_keys(dict_0, *list_0)
    assert bool_2 is False
    bool_3 = module_0.dict_has_keys(list_0, *list_0)
    assert bool_3 is False
    var_0 = module_0.dict_get_value(dict_0)
    bool_4 = module_0.dict_has_keys(dict_0)
    none_type_0 = None
    dict_1 = module_0.try_parse_json(none_type_0)
    bool_5 = False
    module_1.fullmatch(bool_0, bool_5)

def test_case_7():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    dict_1 = {bool_0: dict_0}
    list_0 = [bool_0, dict_0, dict_0, dict_1]
    bool_1 = module_0.dict_has_keys(dict_0, *list_0)
    assert bool_1 is False