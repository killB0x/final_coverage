# Automatically generated by Pynguin.
import pytest
import twitchbot.database.quotes as module_0
import twitchbot.database.models as module_1

def test_case_0():
    str_0 = "*]oAR!'p{fXOzC[kp"
    bool_0 = module_0.quote_exist(str_0)
    var_0 = module_0.delete_all_quotes()
    str_1 = 'that timer is not running'
    bool_1 = module_0.quote_exist(str_0, alias=var_0)
    var_1 = module_0.get_quote(str_1, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'e:lb0:'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [str_0, dict_0]
    module_0.quote_exist(str_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    quote_0 = module_1.Quote()
    module_0.add_quote(quote_0)

def test_case_3():
    str_0 = ''
    bool_0 = False
    var_0 = module_0.get_quote_by_id(str_0, bool_0)
    bool_1 = False
    var_1 = module_0.get_quote_by_id(var_0, bool_1)
    with pytest.raises(AssertionError):
        module_0.add_quote(var_1)

def test_case_4():
    var_0 = module_0.delete_all_quotes()
    str_0 = 'Zd92tfmi5L'
    with pytest.raises(AssertionError):
        module_0.get_quote_by_id(str_0, var_0)

def test_case_5():
    str_0 = 'jK?G'
    var_0 = module_0.get_quote_by_alias(str_0, str_0)

def test_case_6():
    str_0 = '}&H%qECPEq)A_Zlb`i'
    str_1 = 'W.m,GiaSnn\t+U6W^k24'
    var_0 = module_0.get_quote_by_alias(str_1, str_1)
    none_type_0 = module_0.delete_quote_by_alias(str_0, str_0)
    bool_0 = module_0.quote_exist(none_type_0)
    str_2 = 'views info about the poll using the passed poll id'
    var_1 = module_0.get_quote(str_2, str_2)
    with pytest.raises(AssertionError):
        module_0.get_quote_by_alias(str_1, var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "\r$v_%,cnu3\r$'zYk;H"
    var_0 = module_0.get_quote(str_0, str_0)
    quote_0 = module_1.Quote()
    module_0.add_quote(quote_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '\\"~}f'
    var_0 = module_0.get_quote(str_0, str_0)
    none_type_0 = None
    module_0.get_quote(none_type_0, none_type_0)

def test_case_9():
    none_type_0 = None
    bool_0 = True
    none_type_1 = module_0.delete_quote_by_id(none_type_0, bool_0)

def test_case_10():
    str_0 = 'msg-param-cumulative-months'
    str_1 = ']['
    str_2 = 'R!;e>Al4%9\r>1x'
    bool_0 = module_0.quote_exist(str_2)
    with pytest.raises(AssertionError):
        module_0.delete_quote_by_id(str_1, str_0)

def test_case_11():
    str_0 = 'fw0^I9l('
    int_0 = 551
    none_type_0 = module_0.delete_quote_by_id(str_0, int_0)
    str_1 = 'interval must be a valid integer, ex: 10'
    int_1 = -3050
    var_0 = module_0.get_quote_by_id(str_1, int_1)
    str_2 = 'vn~z]`+LH5'
    str_3 = ' does not have '
    none_type_1 = module_0.delete_quote_by_alias(str_3, str_2)
    var_1 = module_0.get_quote_by_alias(str_2, str_2)

def test_case_12():
    str_0 = '<question>'
    bool_0 = module_0.quote_exist(str_0)
    none_type_0 = module_0.delete_quote_by_alias(str_0, str_0)
    str_1 = ''
    bool_1 = module_0.quote_exist(str_1, alias=none_type_0)
    bool_2 = module_0.quote_exist(str_0, none_type_0)
    bool_3 = True
    str_2 = 'pK8\\oj.'
    bool_4 = module_0.quote_exist(none_type_0, alias=str_0)
    var_0 = module_0.get_quote(str_2, bool_3)
    var_1 = module_0.get_quote_by_id(str_0, bool_3)
    var_2 = module_0.delete_all_quotes()
    var_3 = module_0.delete_all_quotes()
    var_4 = module_0.delete_all_quotes()
    str_3 = ' d\\;R\\\tvD~$'
    str_4 = 'uUQ\x0c'
    int_0 = -4148
    none_type_1 = module_0.delete_quote_by_id(str_4, int_0)
    int_1 = -791
    var_5 = module_0.get_quote_by_alias(str_0, str_2)
    str_5 = '): '
    bool_5 = True
    var_6 = module_0.get_quote_by_id(str_5, bool_5)
    with pytest.raises(AssertionError):
        module_0.delete_quote_by_alias(str_3, int_1)

def test_case_13():
    var_0 = module_0.delete_all_quotes()

def test_case_14():
    str_0 = 'D,-'
    var_0 = module_0.get_quote_by_alias(str_0, str_0)
    var_1 = module_0.get_quote(str_0, str_0)
    str_1 = '<)3#,Av/x,O>'
    var_2 = module_0.get_quote(str_1, str_0)
    bool_0 = module_0.quote_exist(str_1, alias=str_1)
    with pytest.raises(AssertionError):
        module_0.add_quote(var_1)