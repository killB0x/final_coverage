# Automatically generated by Pynguin.
import pytest
import twitchbot.permission as module_0

def test_case_0():
    var_0 = module_0.generate_permission_files()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300

@pytest.mark.xfail(strict=True)
def test_case_1():
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    none_type_0 = None
    str_0 = '.ER*|+nk\r~d1\n'
    var_0 = permissions_0.load_permissions(str_0)
    assert len(permissions_0.channels) == 1
    var_1 = permissions_0.reload_permissions(none_type_0)
    assert var_1 is True
    var_1.__contains__(permissions_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'privmsg_ratelimit'
    str_1 = '"i1QRQlxz7T~\x0c\x0c'
    str_2 = 'w~\ny <79LB3'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    permissions_0.has_permission(str_0, str_1, str_2)
    var_0 = permissions_0.__contains__(str_1)
    var_1 = var_0.add_member(str_1, str_1, str_2)

def test_case_3():
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    str_0 = 'please enter your twitch auth info the the GUI that will pop-up shortly'
    var_0 = permissions_0.iter_group_permissions(str_0, str_0)
    var_1 = permissions_0.delete_member(str_0, str_0, var_0)
    assert var_1 is False

def test_case_4():
    none_type_0 = None
    str_0 = 'oQ0eo#K'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    var_0 = permissions_0.get_group(none_type_0, str_0)
    str_1 = 'XzWI0d+'
    str_2 = 'a}ae>GC|`M)uCvmS.\t'
    str_3 = 'W%'
    bool_0 = permissions_0.delete_permission(str_2, str_3, str_1)
    assert bool_0 is False
    var_1 = permissions_0.iter_user_permissions(str_0, str_1)

def test_case_5():
    str_0 = '\rrivmsg_ratelimit'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    bool_0 = permissions_0.add_group(str_0, str_0)
    assert bool_0 is True
    assert len(permissions_0.channels) == 1
    str_1 = 'v\t:Q\r>CHsf\tO<ora'
    var_0 = permissions_0.add_member(str_0, str_0, str_1)
    assert var_0 is True
    var_1 = permissions_0.iter_group_members(str_0, str_0)
    var_2 = module_0.generate_permission_files(*var_1)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'privmsg_ratelimit'
    str_1 = 'w~\ny <79LB3'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    bool_0 = permissions_0.delete_group(str_1, str_0)
    assert bool_0 is False
    permissions_0.has_permission(str_0, str_0, str_1)
    str_2 = '}VI'
    bool_1 = permissions_0.add_permission(str_1, str_0, str_2)
    bool_2 = permissions_0.delete_group(str_0, str_0)
    var_0 = module_0.generate_permission_files()
    var_1 = permissions_0.delete_member(str_0, str_1, str_2)

@pytest.mark.xfail(strict=True)
def test_case_7():
    float_0 = 0.3
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    var_0 = permissions_0.reload_permissions(permissions_0)
    assert var_0 is False
    float_0.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_8():
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    none_type_0 = None
    var_0 = permissions_0.reload_permissions(none_type_0)
    assert var_0 is True
    var_0.__contains__(permissions_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'M*4jWJ%k]*\noi{0'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    var_0 = permissions_0.iter_groups(str_0)
    var_1 = module_0.generate_permission_files(*var_0)
    permissions_0.__getitem__(var_0)

def test_case_10():
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300

def test_case_11():
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    str_0 = 'please enter your twitch auth info the the GUI that will pop-up shortly'
    var_0 = permissions_0.iter_group_permissions(str_0, str_0)
    str_1 = "g6\\\x0cT=j'I)?C3FX\nZQ"
    var_1 = permissions_0.add_member(str_0, str_1, var_0)
    assert var_1 is False
    var_2 = permissions_0.delete_member(str_0, str_0, var_0)
    assert var_2 is False

def test_case_12():
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    str_0 = 'x_ybG4'
    bool_0 = permissions_0.add_permission(str_0, str_0, str_0)
    assert bool_0 is False
    iterable_0 = permissions_0.__iter__()
    str_1 = '/{'
    var_0 = permissions_0.iter_user_permissions(permissions_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'privmsg_ratelimit'
    str_1 = '"i1QRQlxz7T~\x0c\x0c'
    str_2 = 'w~\ny <79LB3'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    permissions_0.has_permission(str_0, str_1, str_2)
    iterable_0 = permissions_0.delete_member(str_1, str_1, str_0)
    str_3 = '}VI'
    str_4 = 'Q`g%3Yg{` 6xqu'
    bool_0 = permissions_0.reload_permissions(str_0)
    var_0 = permissions_0.add_member(str_3, str_3, str_4)
    str_5 = 'PASS '
    str_6 = "8PEo!5kQ$<&->.{b'p"
    str_7 = 'A\\hm=-d'
    bool_1 = permissions_0.delete_permission(str_6, str_5, str_7)
    var_1 = module_0.generate_permission_files()
    var_2 = var_0.load_permissions(bool_0, bool_0)

def test_case_14():
    str_0 = '\rrivmsg_ratelimit'
    str_1 = '"i1_RQlxz7~\x0c\x0c'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    bool_0 = permissions_0.add_group(str_0, str_1)
    assert bool_0 is True
    assert len(permissions_0.channels) == 1
    str_2 = 'v\t:Q\r>CHsf\tO<ora'
    var_0 = permissions_0.add_member(str_0, str_0, str_2)
    assert var_0 is True
    var_1 = permissions_0.iter_group_members(str_1, str_0)
    bool_1 = permissions_0.delete_permission(str_0, str_0, str_1)
    assert bool_1 is True
    var_2 = module_0.generate_permission_files(*var_1)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'privmsg_ratelimit'
    str_1 = '"i1_RQlxz7~\x0c\x0c'
    var_0 = module_0.generate_permission_files()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    str_2 = 'w~\ny <79LB3'
    permissions_0 = module_0.Permissions()
    permissions_0.add_group(str_0, str_1)
    str_3 = 'v\t:Q\r>CHsf\tO<ora'
    bool_0 = permissions_0.delete_group(str_3, str_0)
    bool_1 = permissions_0.has_permission(str_0, str_1, str_2)
    str_4 = '}VI'
    str_5 = '{*%BhD'
    str_6 = 'CJ('
    var_1 = permissions_0.add_member(str_4, str_5, str_6)
    bool_2 = permissions_0.add_permission(str_2, str_0, str_1)
    bool_3 = permissions_0.delete_permission(str_0, str_0, str_1)
    bool_4 = permissions_0.delete_group(str_0, str_0)
    var_2 = module_0.generate_permission_files()
    var_3 = permissions_0.reload_permissions()
    var_4 = permissions_0.delete_member(str_0, str_2, str_4)
    var_5 = permissions_0.iter_user_groups(str_0, str_0)
    var_6 = var_5.iter_groups(var_1)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = 'privmsg_ratelimit'
    str_1 = '"i1QRQlxz7T~\x0c\x0c'
    str_2 = 'w~\ny <79LB3'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    permissions_0.add_group(str_0, str_1)
    bool_0 = permissions_0.delete_group(str_1, str_0)
    bool_1 = permissions_0.has_permission(str_0, str_1, str_2)
    str_3 = '}VI'
    str_4 = '{*%BhD'
    bool_2 = permissions_0.add_group(str_0, str_2)
    str_5 = 'CJ('
    var_0 = permissions_0.add_member(str_3, str_4, str_5)
    str_6 = 'PASS '
    bool_3 = permissions_0.delete_permission(str_0, str_0, str_1)
    bool_4 = permissions_0.delete_group(str_0, str_0)
    var_1 = module_0.generate_permission_files()
    var_2 = permissions_0.reload_permissions()
    var_3 = permissions_0.delete_member(str_6, str_2, str_3)
    var_4 = permissions_0.iter_user_groups(str_0, str_0)
    var_5 = var_4.iter_groups(var_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = 'privmsg_ratelimit'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    permissions_0.add_group(str_0, str_0)
    str_1 = 'v\tQ\r>CHs\tO<ora'
    bool_0 = permissions_0.delete_group(str_1, str_0)
    bool_1 = permissions_0.has_permission(str_0, str_0, str_1)
    str_2 = '}VI'
    str_3 = 'CJ('
    var_0 = permissions_0.add_member(str_2, str_1, str_3)
    str_4 = 'PASS '
    bool_2 = permissions_0.add_permission(str_0, str_0, str_2)
    bool_3 = permissions_0.delete_group(str_0, str_0)
    var_1 = module_0.generate_permission_files()
    var_2 = permissions_0.reload_permissions()
    var_3 = permissions_0.delete_member(str_4, str_2, str_2)
    var_4 = permissions_0.iter_user_groups(str_0, str_0)
    var_5 = var_4.iter_groups(var_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = 'privmsg_ratelimit'
    str_1 = '"i1QRQlxz7T~\x0c\x0c'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    permissions_0.add_group(str_0, str_1)
    str_2 = 'v\t:Q\r>CHsf\tO<ora'
    bool_0 = permissions_0.delete_group(str_2, str_0)
    bool_1 = permissions_0.has_permission(str_0, str_1, str_2)
    str_3 = '}VI'
    str_4 = 'CJ('
    var_0 = permissions_0.add_member(str_3, str_2, str_4)
    str_5 = 'PASS '
    bool_2 = permissions_0.add_permission(str_0, str_0, str_1)
    bool_3 = permissions_0.delete_permission(str_0, str_0, str_1)
    var_1 = module_0.generate_permission_files()
    var_2 = permissions_0.reload_permissions()
    var_3 = permissions_0.delete_member(str_5, str_3, str_3)
    var_4 = permissions_0.iter_user_groups(str_0, str_0)
    var_5 = var_4.iter_groups(var_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'privmsg_ratelimit'
    str_1 = '"i1QRQlxz7T~\x0c\x0c'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    permissions_0.add_group(str_0, str_0)
    var_0 = permissions_0.add_member(str_0, str_1, str_0)
    bool_0 = var_0.__contains__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = 'M*4jWJ%k]*\noi{0'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    var_0 = permissions_0.iter_group_members(str_0, str_0)
    var_1 = module_0.generate_permission_files(*var_0)
    var_0.iter_group_permissions(str_0, var_0)

def test_case_21():
    str_0 = 'M*4jWJ%k]*\noi{0'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    var_0 = permissions_0.iter_groups(str_0)
    var_1 = module_0.generate_permission_files(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = '\rrivmsg_ratelimit'
    str_1 = '"i1_RQlxz7~\x0c\x0c'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    bool_0 = permissions_0.has_permission(str_0, str_1, str_0)
    assert bool_0 is False
    assert len(permissions_0.channels) == 1
    str_2 = '+8:3J\x0c~DGbUMY'
    str_3 = '{*%BhD'
    var_0 = permissions_0.add_member(str_3, str_3, str_2)
    assert var_0 is False
    var_1 = permissions_0.iter_group_permissions(str_0, str_2)
    bool_1 = permissions_0.delete_permission(str_0, str_0, str_1)
    assert bool_1 is True
    var_2 = module_0.generate_permission_files(*var_1)
    var_3 = permissions_0.reload_permissions()
    assert var_3 is True
    int_0 = -1874
    int_0.reload_permissions()

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = '\rrivmsg_ratelimit'
    str_1 = '"i1_RQlxz7~\x0c\x0c'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    bool_0 = permissions_0.add_group(str_0, str_1)
    assert bool_0 is True
    assert len(permissions_0.channels) == 1
    str_2 = 'v\t:Q\r>CHsf\tO<ora'
    bool_1 = permissions_0.has_permission(str_0, str_1, str_0)
    assert bool_1 is False
    var_0 = permissions_0.delete_member(permissions_0, str_0, str_2)
    assert var_0 is False
    str_3 = '{*%BhD'
    var_1 = permissions_0.add_member(str_3, str_3, str_1)
    assert var_1 is False
    var_2 = permissions_0.iter_group_permissions(str_0, str_0)
    bool_2 = permissions_0.delete_permission(str_0, str_0, str_1)
    assert bool_2 is True
    var_3 = module_0.generate_permission_files(*var_2)
    var_4 = permissions_0.reload_permissions()
    assert var_4 is True
    var_4.__getitem__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = '\rrivmsg_ratelimit'
    str_1 = '"i1_RQlxz7~\x0c\x0c'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    bool_0 = permissions_0.has_permission(str_0, str_1, str_0)
    assert bool_0 is False
    assert len(permissions_0.channels) == 1
    str_2 = '+8:3J\x0c~DGbUMY'
    var_0 = permissions_0.iter_groups(str_0)
    str_3 = '(#buO&IeC|WlZV'
    var_1 = permissions_0.delete_member(str_0, str_0, str_3)
    assert var_1 is False
    str_4 = 'mpukcK|'
    str_5 = '<option> <option> ect'
    bool_1 = permissions_0.add_permission(str_2, str_4, str_5)
    assert bool_1 is False
    var_2 = permissions_0.delete_member(permissions_0, str_2, str_4)
    assert var_2 is False
    bool_2 = permissions_0.delete_group(str_3, str_5)
    assert bool_2 is False
    bool_3 = permissions_0.delete_permission(str_0, str_0, str_1)
    assert bool_3 is True
    module_0.generate_permission_files(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = '\rrivmsg_ratelimit'
    str_1 = '"i1_RQlxz7~\x0c\x0c'
    permissions_0 = module_0.Permissions()
    assert module_0.permission_defaults == {'admin': {'name': 'admin', 'permissions': ['*'], 'members': ['BOT_OWNER_NAME']}}
    assert len(module_0.perms.channels) == 300
    bool_0 = permissions_0.add_group(str_0, str_1)
    assert bool_0 is True
    assert len(permissions_0.channels) == 1
    str_2 = 'v\t:Q\r>CHsf\tO<ora'
    var_0 = module_0.generate_permission_files()
    bool_1 = permissions_0.has_permission(str_0, str_1, str_0)
    assert bool_1 is False
    var_1 = permissions_0.delete_member(str_0, str_0, str_2)
    assert var_1 is True
    str_3 = 'rpukcK|'
    str_4 = '<option> <option> ect'
    bool_2 = permissions_0.add_permission(str_2, str_3, str_4)
    assert bool_2 is False
    var_2 = permissions_0.delete_member(permissions_0, str_4, str_2)
    assert var_2 is False
    str_5 = '{*%BhD'
    var_3 = permissions_0.iter_group_members(str_1, str_5)
    bool_3 = permissions_0.delete_permission(str_0, str_0, str_1)
    assert bool_3 is True
    var_4 = module_0.generate_permission_files(*var_3)
    var_5 = permissions_0.reload_permissions()
    assert var_5 is True
    var_4.prompt_edit_oauth()