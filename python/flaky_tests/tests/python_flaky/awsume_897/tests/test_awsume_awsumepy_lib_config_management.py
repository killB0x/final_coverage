# Automatically generated by Pynguin.
import pytest
import awsume.awsumepy.lib.config_management as module_0
import awsume.awsumepy.lib.exceptions as module_1
import yaml.parser as module_2

def test_case_0():
    dict_0 = module_0.load_config()
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'

def test_case_1():
    dict_0 = module_0.load_config()
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'

def test_case_2():
    str_0 = "TmM']@(Qj1,?:{sJ="
    var_0 = module_0.handle_config(str_0)
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'

def test_case_3():
    str_0 = "TmM']@(Qb{1,?:{sJ="
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.handle_config(str_0)
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'
    var_1 = module_0.delete_dict_value_parts(dict_0, str_0)
    with pytest.raises(module_1.ConfigOperationException):
        module_0.handle_config(dict_0)

def test_case_4():
    str_0 = 'set'
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.handle_config(list_0)
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "TmM']@(Qb{1,?:{sJ="
    dict_0 = {str_0: str_0}
    var_0 = module_0.handle_config(str_0)
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'
    var_1 = module_0.delete_dict_value_parts(dict_0, str_0)
    module_0.get_value_from_args(str_0)

def test_case_6():
    str_0 = 'heL'
    list_0 = [str_0, str_0]
    var_0 = module_0.get_value_from_args(str_0)
    assert var_0 == 'heL'
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'
    var_1 = module_0.handle_config(list_0)

def test_case_7():
    complex_0 = (-2382.647491+550j)
    var_0 = module_0.write_config(complex_0)
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'

@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = module_0.load_config()
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'
    module_0.update_dict_parts(dict_0, dict_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "TmM']@(Qb{1,?:{sJ="
    module_0.get_dict_parts(str_0, str_0)

def test_case_10():
    str_0 = "TmM']@(Qb{1,?:{sJ="
    dict_0 = {str_0: str_0}
    var_0 = module_0.delete_dict_value_parts(dict_0, str_0)
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'

def test_case_11():
    str_0 = "TmM']@(Qb{1,?:{sJ="
    dict_0 = {str_0: str_0}
    var_0 = module_0.get_dict_parts(dict_0, str_0)
    assert var_0 == "TmM']@(Qb{1,?:{sJ="
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'

def test_case_12():
    str_0 = '(.ns{H'
    dict_0 = {str_0: str_0}
    var_0 = module_2.Parser()
    var_1 = module_0.get_dict_parts(dict_0, str_0)
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '(.ns{H'
    none_type_0 = None
    module_0.update_dict_parts(str_0, str_0, none_type_0)

def test_case_14():
    str_0 = "TmM']@(Qj1,?:{sJ="
    var_0 = module_0.handle_config(str_0)
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "TmM']@(Qb{.1,?:{sJ="
    dict_0 = {str_0: str_0}
    var_0 = module_0.delete_dict_value_parts(dict_0, str_0)
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'
    module_0.update_dict_parts(var_0, str_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    dict_0 = module_0.load_config()
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'
    var_0 = module_0.get_value_from_args(dict_0)
    var_1 = var_0.__str__()
    assert var_1 == "{'colors': True, 'fuzzy-match': False, 'role-duration': 0, 'set': 'set'}"
    dict_1 = module_0.load_config()
    module_0.delete_dict_value_parts(var_1, dict_0)

def test_case_17():
    str_0 = 'list'
    list_0 = [str_0]
    var_0 = module_0.get_value_from_args(str_0)
    assert var_0 == 'list'
    assert module_0.defaults == {'role-duration': 0, 'colors': True, 'fuzzy-match': False, 'set': 'set'}
    assert module_0.CONFIG_MANAGEMENT_HELP == '\nusage: --config operation [operands]\noperations:\n  - help\n  - list\n  - get [config_key]\n  - set [config_key] [config_value]\n'
    with pytest.raises(module_1.EarlyExit):
        module_0.handle_config(list_0)

def test_case_18():
    str_0 = 'list'
    list_0 = [str_0, str_0]
    with pytest.raises(module_1.ConfigOperationException):
        module_0.handle_config(list_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'set'
    list_0 = [str_0]
    module_0.handle_config(list_0)

def test_case_20():
    str_0 = 'Get'
    list_0 = [str_0, str_0]
    with pytest.raises(module_1.EarlyExit):
        module_0.handle_config(list_0)

def test_case_21():
    str_0 = 'Get'
    list_0 = [str_0]
    with pytest.raises(module_1.ConfigOperationException):
        module_0.handle_config(list_0)