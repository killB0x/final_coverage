# Automatically generated by Pynguin.
import pytest
import gwosc._version as module_0
import re as module_1

def test_case_0():
    var_0 = module_0.get_config()
    assert var_0.VCS == 'git'
    assert var_0.style == 'pep440'
    assert var_0.tag_prefix == 'v'
    assert var_0.parentdir_prefix == 'gwosc'
    assert var_0.versionfile_source == 'gwosc/_version.py'
    assert len(module_0.HANDLERS) == 1

def test_case_1():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1

def test_case_2():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    var_1 = var_0.__dir__()
    var_2 = module_0.run_command(var_1, var_1, hide_stderr=var_0)
    var_3 = module_0.get_versions()
    var_4 = module_0.render(var_3, var_3)
    var_5 = module_0.plus_or_dot(var_4)
    assert var_5 == '+'
    with pytest.raises(AssertionError):
        module_0.run_command(var_0, var_3, hide_stderr=var_2)

@pytest.mark.xfail(strict=True)
def test_case_3():
    var_0 = module_0.get_config()
    assert var_0.VCS == 'git'
    assert var_0.style == 'pep440'
    assert var_0.tag_prefix == 'v'
    assert var_0.parentdir_prefix == 'gwosc'
    assert var_0.versionfile_source == 'gwosc/_version.py'
    assert len(module_0.HANDLERS) == 1
    module_0.git_get_keywords(var_0)

def test_case_4():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.render(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'W(h.(5oWxrYag7.t^'
    var_0 = module_0.git_get_keywords(str_0)
    assert len(module_0.HANDLERS) == 1
    var_0.__delattr__(var_0, str_0)

def test_case_6():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == '+'
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_pieces_from_vcs(var_1, var_1, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    not_this_method_0 = module_0.NotThisMethod()
    assert len(module_0.HANDLERS) == 1
    var_0 = module_0.register_vcs_handler(not_this_method_0, not_this_method_0)
    not_this_method_1 = module_0.NotThisMethod()
    bool_0 = False
    var_1 = module_0.register_vcs_handler(not_this_method_1, not_this_method_0)
    var_2 = module_0.git_get_keywords(bool_0)
    module_0.render_git_describe(not_this_method_1)

def test_case_8():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == '+'

def test_case_9():
    bool_0 = False
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(bool_0, bool_0, bool_0)

def test_case_10():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.get_keywords()
    var_2 = module_0.get_versions()
    var_3 = module_0.render(var_2, var_2)
    var_4 = module_0.plus_or_dot(var_2)
    assert var_4 == '+'
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(var_1, var_0, var_4)

def test_case_11():
    var_0 = module_1.purge()
    var_1 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_2 = module_0.render(var_1, var_1)
    var_3 = module_0.plus_or_dot(var_1)
    assert var_3 == '+'
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_pieces_from_vcs(var_3, var_3, var_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_12():
    var_0 = module_0.get_config()
    assert var_0.VCS == 'git'
    assert var_0.style == 'pep440'
    assert var_0.tag_prefix == 'v'
    assert var_0.parentdir_prefix == 'gwosc'
    assert var_0.versionfile_source == 'gwosc/_version.py'
    assert len(module_0.HANDLERS) == 1
    bytes_0 = b"\x0f<\x10\xc5r'\x99\x02\xe4\xa4<\x01M\x1c9\xa8"
    var_1 = module_0.versions_from_parentdir(bytes_0, bytes_0, bytes_0)
    var_2 = var_1.__dir__()
    complex_0 = (-211.008-5071.3j)
    var_1.__iter__(complex_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    var_1 = var_0.__dir__()
    var_2 = module_0.run_command(var_1, var_1, hide_stderr=var_0)
    var_3 = module_0.get_versions()
    var_4 = module_0.render(var_3, var_1)
    var_5 = module_0.plus_or_dot(var_4)
    assert var_5 == '+'
    var_6 = module_0.get_keywords()
    module_0.run_command(var_1, var_6, var_4, var_0)

def test_case_14():
    bytes_0 = b')T\xe7F\x92,\xcd\xd06/'
    with pytest.raises(module_0.NotThisMethod):
        module_0.versions_from_parentdir(bytes_0, bytes_0, bytes_0)

def test_case_15():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    var_1 = var_0.__dir__()
    var_2 = module_0.run_command(var_1, var_1, hide_stderr=var_0)

def test_case_16():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = var_0.__dir__()
    var_2 = module_0.run_command(var_1, var_1, verbose=var_1, hide_stderr=var_0)
    var_3 = module_0.get_versions()
    var_4 = module_0.render(var_3, var_3)
    var_5 = module_0.plus_or_dot(var_4)
    assert var_5 == '+'
    var_6 = module_0.get_keywords()
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_pieces_from_vcs(var_6, var_5, var_5)

def test_case_17():
    var_0 = module_0.get_config()
    assert var_0.VCS == 'git'
    assert var_0.style == 'pep440'
    assert var_0.tag_prefix == 'v'
    assert var_0.parentdir_prefix == 'gwosc'
    assert var_0.versionfile_source == 'gwosc/_version.py'
    assert len(module_0.HANDLERS) == 1
    var_1 = var_0.__dir__()
    var_2 = module_0.run_command(var_1, var_1, verbose=var_1, hide_stderr=var_0)
    var_3 = module_0.get_versions()
    var_4 = module_0.render(var_3, var_3)
    var_5 = module_0.plus_or_dot(var_4)
    assert var_5 == '+'
    var_6 = module_0.get_keywords()
    var_7 = module_1.error(var_1)
    with pytest.raises(AttributeError):
        var_4.__getattr__(var_6, var_7)

def test_case_18():
    var_0 = module_0.get_config()
    assert var_0.VCS == 'git'
    assert var_0.style == 'pep440'
    assert var_0.tag_prefix == 'v'
    assert var_0.parentdir_prefix == 'gwosc'
    assert var_0.versionfile_source == 'gwosc/_version.py'
    assert len(module_0.HANDLERS) == 1
    bytes_0 = b"\x0f<\x10\xc5r'\x99\x02\xe4\xa4<\x01M\x1c9\xa8"
    var_1 = module_0.versions_from_parentdir(bytes_0, bytes_0, bytes_0)
    var_2 = var_1.__dir__()
    with pytest.raises(ValueError):
        module_0.render(var_1, bytes_0)