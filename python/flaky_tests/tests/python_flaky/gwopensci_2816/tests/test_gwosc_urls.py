# Automatically generated by Pynguin.
import pytest
import gwosc.urls as module_0
import enum as module_1
import re as module_2
import builtins as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 2838.11115
    var_0 = module_0.sieve(float_0)
    module_0.match(var_0, start=var_0, duration=float_0)

def test_case_1():
    str_0 = 'pU-i*'
    with pytest.raises(ValueError):
        module_0.match(str_0, start=str_0, end=str_0, version=str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'Return the GPS segment covered by a URL following T050017\n\n    Parameters\n    ---------\n    filename : `str`\n        the path name of a file\n\n    Returns\n    -------\n    segment : `tuple` of `int`\n        the ``[start, stop)`` GPS interval covered by the given URL\n\n    Notes\n    -----\n    `LIGO-T050017 <https://dcc.ligo.org/LIGO-T050017/public>`_ declares\n    a filenaming convention that includes documenting the GPS start integer\n    and integer duration of a file, see that document for more details.\n    '
    var_0 = module_0.sieve(str_0)
    module_0.match(var_0, version=var_0)

def test_case_3():
    dict_0 = {}
    var_0 = module_0.match(dict_0, dict_0, end=dict_0, duration=dict_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '(?06jc]3I>=Vs;?4'
    module_0.match(str_0, str_0, duration=str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'p('
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.sieve(dict_0, **dict_0)
    module_1.auto(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    enum_dict_0 = module_2.purge()
    var_0 = enum_dict_0.__dir__()
    var_1 = module_0.sieve(var_0)
    var_2 = module_0.sieve(var_1, var_0)
    module_0.match(var_2, version=var_2, duration=var_2)

@pytest.mark.xfail(strict=True)
def test_case_7():
    enum_dict_0 = module_1._EnumDict()
    int_0 = -962
    none_type_0 = None
    var_0 = module_3.BaseException(**enum_dict_0)
    var_1 = var_0.__dir__()
    str_0 = 'i%@5mHzi'
    dict_0 = {str_0: none_type_0}
    var_2 = module_0.sieve(var_0, **dict_0)
    module_0.match(var_2, sample_rate=var_0, version=int_0, duration=str_0)

def test_case_8():
    str_0 = 'R1Pvw#Ebh=s'
    with pytest.raises(ValueError):
        module_0.match(str_0, sample_rate=str_0, version=str_0)