# Automatically generated by Pynguin.
import pytest
import poly_decomp.poly_decomp as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b'\xba\xdb\xf7\xb3\x008'
    module_0.polygonRemoveCollinearPoints(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_0.polygonCopy(bool_0, bool_0, bool_0, bool_0)

def test_case_2():
    dict_0 = {}
    var_0 = module_0.polygonSlice(dict_0, dict_0)

def test_case_3():
    tuple_0 = ()
    var_0 = module_0.polygonQuickDecomp(tuple_0, maxlevel=tuple_0, level=tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ' RrcGs$t7qL\n/'
    module_0.isRightOn(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'g RrGs$t7qL\n/'
    module_0.isLeftOn(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    complex_0 = (1709.35+363.33j)
    module_0.sqdist(complex_0, complex_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    module_0.polygonAt(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    module_0.polygonCopy(bool_0, bool_0, bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b'\x15,\xba\xbd\xbdM\xc5C\xbdg\x91q\xd3hq'
    module_0.polygonReverse(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = ' RrGs$t7qL\n/'
    module_0.polygonIsReflex(str_0, str_0)

def test_case_11():
    bool_0 = True
    var_0 = module_0.scalar_eq(bool_0, bool_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    module_0.isRight(none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = ' RrGs$t7qL\n/'
    module_0.polygonRemoveCollinearPoints(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = ' RrcGs$t7qL\n/'
    module_0.polygonSlice(str_0, str_0)

def test_case_15():
    tuple_0 = ()
    var_0 = module_0.polygonRemoveCollinearPoints(tuple_0, tuple_0)
    assert var_0 == 0

@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    module_0.isLeft(none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bytes_0 = b'\x8f\x84\t\xc2'
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.polygonSlice(bytes_0, list_0)

def test_case_18():
    bytes_0 = b'e\xea~\xa6\r\xd2\xd5F\xa3'
    var_0 = module_0.getIntersectionPoint(bytes_0, bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'vWe7>'
    module_0.polygonQuickDecomp(str_0, steinerPoints=str_0, maxlevel=str_0, level=str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b'\xea#\x0bW4\xf1 \xe3K\xe1\x9b'
    module_0.polygonQuickDecomp(bytes_0, bytes_0, level=bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    bytes_0 = b'\xdb\x84\t\xc2'
    module_0.polygonQuickDecomp(bytes_0, steinerPoints=bytes_0, delta=bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    int_0 = -2207
    module_0.polygonQuickDecomp(int_0, int_0, int_0, level=int_0)

def test_case_23():
    bytes_0 = b'\xba\x008'
    var_0 = module_0.lineSegmentsIntersect(bytes_0, bytes_0, bytes_0, bytes_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_24():
    bytes_0 = b'\xdb\x84\t\xc2'
    var_0 = module_0.lineSegmentsIntersect(bytes_0, bytes_0, bytes_0, bytes_0)
    assert var_0 is False
    var_1 = module_0.polygonQuickDecomp(bytes_0, var_0, delta=var_0, maxlevel=var_0)
    assert var_1 is False
    module_0.polygonQuickDecomp(bytes_0, steinerPoints=var_0, delta=var_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    bytes_0 = b'\xcd\xdc\x18\x00Fe\xea&\xd5\x8d\xedD\xa3\x91\xcey\xf6'
    int_0 = -2550
    module_0.getIntersectionPoint(bytes_0, bytes_0, bytes_0, bytes_0, int_0)

def test_case_26():
    bytes_0 = b's\xf4\xf3\x14)\x02**'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.polygonRemoveCollinearPoints(list_0)
    assert var_0 == 2

def test_case_27():
    bytes_0 = b'\x8f\x84\t\xc2'
    bytes_1 = b'\x84\t'
    bytes_2 = b'\x9c\x8f\x84\t\xc2'
    var_0 = module_0.lineSegmentsIntersect(bytes_0, bytes_1, bytes_0, bytes_2)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_28():
    bytes_0 = b'LL\xfb)v\xb6Y\xfb)B;R\xa0\x9c,\xb0\x99'
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.polygonQuickDecomp(list_0, reflexVertices=bytes_0, delta=list_0)
    var_1 = module_0.polygonSlice(list_0, var_0)
    module_0.polygonSlice(list_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_29():
    bytes_0 = b'LL\xfb)v\xb6Y\xfb)B;R\xa0\x9c,\xb0\x99'
    list_0 = [bytes_0]
    var_0 = module_0.polygonQuickDecomp(list_0, reflexVertices=bytes_0, delta=list_0)
    var_1 = module_0.polygonSlice(list_0, var_0)
    module_0.polygonSlice(list_0, var_1)

def test_case_30():
    bytes_0 = b'LL\xfb)v\xb6Y\xfb)B;R\xa0\x9c,\xb0\x99'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.lineInt(list_0, list_0)

def test_case_31():
    bytes_0 = b'LL\xfb)v\xb6Y\xfb)B;R\xa0\x9c,\xb0\x99'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.polygonRemoveCollinearPoints(list_0)
    assert var_0 == 1
    var_1 = module_0.polygonCanSee(list_0, var_0, var_0)
    assert var_1 is False