# Automatically generated by Pynguin.
import pytest
import magic_logger.magic_logger as module_0
import tokenize as module_1
import ast as module_2
import re as module_3
import inspect as module_4

@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = -2503.2
    module_0.MagicLogger(float_0, host=float_0, blacklist=float_0)

def test_case_1():
    var_0 = module_1.maybe()
    magic_logger_0 = module_0.MagicLogger(var_0, var_0)
    assert f'{type(magic_logger_0).__module__}.{type(magic_logger_0).__qualname__}' == 'magic_logger.magic_logger.MagicLogger'
    assert magic_logger_0.filters == []
    assert magic_logger_0.name == '()?'
    assert magic_logger_0.level == 0
    assert magic_logger_0.parent is None
    assert magic_logger_0.propagate is True
    assert f'{type(magic_logger_0.handlers).__module__}.{type(magic_logger_0.handlers).__qualname__}' == 'builtins.list'
    assert len(magic_logger_0.handlers) == 2
    assert magic_logger_0.disabled is False
    assert magic_logger_0.extra is None
    assert magic_logger_0.blacklist == ['self']

def test_case_2():
    none_type_0 = None
    magic_logger_0 = module_0.MagicLogger(none_type_0, host=none_type_0)
    assert f'{type(magic_logger_0).__module__}.{type(magic_logger_0).__qualname__}' == 'magic_logger.magic_logger.MagicLogger'
    assert magic_logger_0.filters == []
    assert magic_logger_0.name is None
    assert magic_logger_0.level == 0
    assert magic_logger_0.parent is None
    assert magic_logger_0.propagate is True
    assert f'{type(magic_logger_0.handlers).__module__}.{type(magic_logger_0.handlers).__qualname__}' == 'builtins.list'
    assert len(magic_logger_0.handlers) == 1
    assert magic_logger_0.disabled is False
    assert magic_logger_0.extra is None
    assert magic_logger_0.blacklist == ['self']

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.MagicLogger(none_type_0, port=none_type_0, blacklist=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    magic_logger_0 = module_0.MagicLogger(none_type_0, blacklist=none_type_0)
    assert f'{type(magic_logger_0).__module__}.{type(magic_logger_0).__qualname__}' == 'magic_logger.magic_logger.MagicLogger'
    assert magic_logger_0.filters == []
    assert magic_logger_0.name is None
    assert magic_logger_0.level == 0
    assert magic_logger_0.parent is None
    assert magic_logger_0.propagate is True
    assert f'{type(magic_logger_0.handlers).__module__}.{type(magic_logger_0.handlers).__qualname__}' == 'builtins.list'
    assert len(magic_logger_0.handlers) == 1
    assert magic_logger_0.disabled is False
    assert magic_logger_0.extra is None
    assert magic_logger_0.blacklist == ['self']
    var_0 = magic_logger_0.exception(magic_logger_0)
    dict_0 = {}
    var_1 = magic_logger_0.update_extra(**dict_0)
    if_0 = module_2.If()
    var_0.__len__()

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    magic_logger_0 = module_0.MagicLogger(none_type_0, blacklist=none_type_0)
    assert f'{type(magic_logger_0).__module__}.{type(magic_logger_0).__qualname__}' == 'magic_logger.magic_logger.MagicLogger'
    assert magic_logger_0.filters == []
    assert magic_logger_0.name is None
    assert magic_logger_0.level == 0
    assert magic_logger_0.parent is None
    assert magic_logger_0.propagate is True
    assert f'{type(magic_logger_0.handlers).__module__}.{type(magic_logger_0.handlers).__qualname__}' == 'builtins.list'
    assert len(magic_logger_0.handlers) == 1
    assert magic_logger_0.disabled is False
    assert magic_logger_0.extra is None
    assert magic_logger_0.blacklist == ['self']
    var_0 = magic_logger_0.exception(magic_logger_0)
    var_1 = magic_logger_0.decorate(level=none_type_0)
    var_2 = magic_logger_0.update_extra()
    dict_0 = {}
    var_3 = magic_logger_0.update_extra(**dict_0)
    var_0.update_extra(**var_1)

def test_case_6():
    none_type_0 = None
    magic_logger_0 = module_0.MagicLogger(none_type_0, blacklist=none_type_0)
    assert f'{type(magic_logger_0).__module__}.{type(magic_logger_0).__qualname__}' == 'magic_logger.magic_logger.MagicLogger'
    assert magic_logger_0.filters == []
    assert magic_logger_0.name is None
    assert magic_logger_0.level == 0
    assert magic_logger_0.parent is None
    assert magic_logger_0.propagate is True
    assert f'{type(magic_logger_0.handlers).__module__}.{type(magic_logger_0.handlers).__qualname__}' == 'builtins.list'
    assert len(magic_logger_0.handlers) == 1
    assert magic_logger_0.disabled is False
    assert magic_logger_0.extra is None
    assert magic_logger_0.blacklist == ['self']

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    magic_logger_0 = module_0.MagicLogger(none_type_0, host=none_type_0, blacklist=none_type_0)
    assert f'{type(magic_logger_0).__module__}.{type(magic_logger_0).__qualname__}' == 'magic_logger.magic_logger.MagicLogger'
    assert magic_logger_0.filters == []
    assert magic_logger_0.name is None
    assert magic_logger_0.level == 0
    assert magic_logger_0.parent is None
    assert magic_logger_0.propagate is True
    assert f'{type(magic_logger_0.handlers).__module__}.{type(magic_logger_0.handlers).__qualname__}' == 'builtins.list'
    assert len(magic_logger_0.handlers) == 1
    assert magic_logger_0.disabled is False
    assert magic_logger_0.extra is None
    assert magic_logger_0.blacklist == ['self']
    list_0 = [magic_logger_0, none_type_0]
    var_0 = magic_logger_0.critical(magic_logger_0, *list_0)
    module_0.MagicLogger(magic_logger_0, extra=magic_logger_0, blacklist=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_3.purge()
    module_0.MagicLogger(var_0, host=var_0, **var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    magic_logger_0 = module_0.MagicLogger(none_type_0, blacklist=none_type_0)
    assert f'{type(magic_logger_0).__module__}.{type(magic_logger_0).__qualname__}' == 'magic_logger.magic_logger.MagicLogger'
    assert magic_logger_0.filters == []
    assert magic_logger_0.name is None
    assert magic_logger_0.level == 0
    assert magic_logger_0.parent is None
    assert magic_logger_0.propagate is True
    assert f'{type(magic_logger_0.handlers).__module__}.{type(magic_logger_0.handlers).__qualname__}' == 'builtins.list'
    assert len(magic_logger_0.handlers) == 1
    assert magic_logger_0.disabled is False
    assert magic_logger_0.extra is None
    assert magic_logger_0.blacklist == ['self']
    var_0 = magic_logger_0.exception(magic_logger_0)
    var_1 = magic_logger_0.decorate(none_type_0, magic_logger_0, none_type_0, display_kwargs=magic_logger_0)
    magic_logger_0.reverse()

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    magic_logger_0 = module_0.MagicLogger(bool_0)
    assert f'{type(magic_logger_0).__module__}.{type(magic_logger_0).__qualname__}' == 'magic_logger.magic_logger.MagicLogger'
    assert magic_logger_0.filters == []
    assert magic_logger_0.name is False
    assert magic_logger_0.level == 0
    assert magic_logger_0.parent is None
    assert magic_logger_0.propagate is True
    assert f'{type(magic_logger_0.handlers).__module__}.{type(magic_logger_0.handlers).__qualname__}' == 'builtins.list'
    assert len(magic_logger_0.handlers) == 1
    assert magic_logger_0.disabled is False
    assert magic_logger_0.extra is None
    assert magic_logger_0.blacklist == ['self']
    var_0 = magic_logger_0.log(bool_0, magic_logger_0, bool_0)
    var_1 = module_4.trace()
    var_1.__copy__()