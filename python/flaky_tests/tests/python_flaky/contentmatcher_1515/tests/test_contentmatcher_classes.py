# Automatically generated by Pynguin.
import pytest
import contentmatcher.classes as module_0

def test_case_0():
    str_0 = '6O-a '
    pattern_0 = module_0.Pattern(str_0)
    assert f'{type(pattern_0).__module__}.{type(pattern_0).__qualname__}' == 'contentmatcher.classes.Pattern'
    float_0 = pattern_0.longest_ordered_chunk_match_ratio(str_0)
    assert float_0 == pytest.approx(1.0, abs=0.01, rel=0.01)

def test_case_1():
    tuple_0 = ()
    with pytest.raises(ValueError):
        module_0.Pattern(tuple_0)

def test_case_2():
    str_0 = '6-~a '
    list_0 = [str_0, str_0]
    pattern_0 = module_0.Pattern(str_0)
    assert f'{type(pattern_0).__module__}.{type(pattern_0).__qualname__}' == 'contentmatcher.classes.Pattern'
    float_0 = pattern_0.fast_match_ratio(list_0)
    pattern_1 = module_0.Pattern(str_0)
    frozenset_0 = pattern_1.intersection(list_0)
    set_0 = {str_0, str_0, str_0}
    set_1 = pattern_0.ordered_chunk_matches(set_0)
    pattern_2 = module_0.Pattern(str_0)
    frozenset_1 = pattern_2.intersection(str_0)
    float_1 = pattern_1.longest_ordered_chunk_match_ratio(frozenset_1)
    assert float_1 == pytest.approx(0.2, abs=0.01, rel=0.01)
    float_2 = pattern_2.longest_ordered_chunk_match_ratio(set_0)
    assert float_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    pattern_3 = module_0.Pattern(list_0)

def test_case_3():
    bytes_0 = b'3\xdeO'
    str_0 = 'oSX\tN1~~v$GC0qo(A46^'
    pattern_0 = module_0.Pattern(str_0)
    assert f'{type(pattern_0).__module__}.{type(pattern_0).__qualname__}' == 'contentmatcher.classes.Pattern'
    set_0 = pattern_0.ordered_chunk_matches(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    bytes_0 = b'\xaf\xd5\xd2\xd16\x18\xea\x171'
    pattern_0 = module_0.Pattern(bytes_0)
    assert f'{type(pattern_0).__module__}.{type(pattern_0).__qualname__}' == 'contentmatcher.classes.Pattern'
    pattern_0.fast_match_ratio(none_type_0)

def test_case_5():
    bytes_0 = b'3\xdeO'
    str_0 = 'oSX\tN1~~v$GC0qo(A46^'
    set_0 = {bytes_0, bytes_0, bytes_0}
    dict_0 = {str_0: set_0}
    pattern_0 = module_0.Pattern(dict_0)
    assert f'{type(pattern_0).__module__}.{type(pattern_0).__qualname__}' == 'contentmatcher.classes.Pattern'
    frozenset_0 = pattern_0.intersection(bytes_0)
    pattern_1 = module_0.Pattern(str_0)
    set_1 = pattern_1.ordered_chunk_matches(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'PLPz1x-FV(=N.f3'
    set_0 = {str_0, str_0, str_0}
    pattern_0 = module_0.Pattern(str_0)
    assert f'{type(pattern_0).__module__}.{type(pattern_0).__qualname__}' == 'contentmatcher.classes.Pattern'
    frozenset_0 = pattern_0.intersection(str_0)
    float_0 = pattern_0.longest_ordered_chunk_match_ratio(set_0)
    assert float_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    float_1 = pattern_0.longest_ordered_chunk_match_ratio(frozenset_0)
    assert float_1 == pytest.approx(0.06666666666666667, abs=0.01, rel=0.01)
    none_type_0 = None
    pattern_0.fast_match_ratio(none_type_0)

def test_case_7():
    bytes_0 = b'3\xdeO'
    str_0 = 'oSX\tN1~~v$GC0qo(A46^'
    set_0 = {bytes_0, bytes_0, bytes_0}
    dict_0 = {str_0: set_0}
    pattern_0 = module_0.Pattern(dict_0)
    assert f'{type(pattern_0).__module__}.{type(pattern_0).__qualname__}' == 'contentmatcher.classes.Pattern'
    frozenset_0 = pattern_0.intersection(bytes_0)
    pattern_1 = module_0.Pattern(str_0)
    set_1 = pattern_1.ordered_chunk_matches(str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '}(Yu8h~YgWV(\tlj1_s`i'
    set_0 = {str_0, str_0, str_0}
    pattern_0 = module_0.Pattern(str_0)
    assert f'{type(pattern_0).__module__}.{type(pattern_0).__qualname__}' == 'contentmatcher.classes.Pattern'
    set_1 = pattern_0.ordered_chunk_matches(set_0)
    pattern_1 = module_0.Pattern(str_0)
    float_0 = pattern_1.longest_ordered_chunk_match_ratio(str_0)
    assert float_0 == pytest.approx(1.0, abs=0.01, rel=0.01)
    module_0.Pattern(float_0)

def test_case_9():
    bytes_0 = b'3\xdeO'
    str_0 = 'oSX\tN1~\t~v$G0qo(A46^'
    set_0 = {bytes_0, bytes_0, bytes_0}
    dict_0 = {str_0: set_0}
    pattern_0 = module_0.Pattern(dict_0)
    assert f'{type(pattern_0).__module__}.{type(pattern_0).__qualname__}' == 'contentmatcher.classes.Pattern'
    frozenset_0 = pattern_0.intersection(bytes_0)
    set_1 = pattern_0.ordered_chunk_matches(frozenset_0)
    set_2 = pattern_0.ordered_chunk_matches(dict_0)
    float_0 = pattern_0.longest_ordered_chunk_match_ratio(set_2)
    assert float_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    float_1 = pattern_0.longest_ordered_chunk_match_ratio(dict_0)
    assert float_1 == pytest.approx(1.0, abs=0.01, rel=0.01)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '6-~a '
    set_0 = {str_0, str_0, str_0}
    pattern_0 = module_0.Pattern(str_0)
    assert f'{type(pattern_0).__module__}.{type(pattern_0).__qualname__}' == 'contentmatcher.classes.Pattern'
    set_1 = pattern_0.ordered_chunk_matches(set_0)
    pattern_1 = module_0.Pattern(str_0)
    float_0 = pattern_1.longest_ordered_chunk_match_ratio(str_0)
    assert float_0 == pytest.approx(1.0, abs=0.01, rel=0.01)
    str_1 = 'R_<&TpGD$/-H'
    frozenset_0 = pattern_0.intersection(str_1)
    set_2 = pattern_0.ordered_chunk_matches(frozenset_0)
    module_0.Pattern(float_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '6-~a '
    pattern_0 = module_0.Pattern(str_0)
    assert f'{type(pattern_0).__module__}.{type(pattern_0).__qualname__}' == 'contentmatcher.classes.Pattern'
    frozenset_0 = pattern_0.intersection(str_0)
    float_0 = pattern_0.longest_ordered_chunk_match_ratio(frozenset_0)
    assert float_0 == pytest.approx(0.2, abs=0.01, rel=0.01)
    none_type_0 = None
    pattern_0.longest_ordered_chunk_match_ratio(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = '6~a 6}'
    set_0 = {str_0, str_0, str_0}
    pattern_0 = module_0.Pattern(str_0)
    assert f'{type(pattern_0).__module__}.{type(pattern_0).__qualname__}' == 'contentmatcher.classes.Pattern'
    set_1 = pattern_0.ordered_chunk_matches(set_0)
    pattern_1 = module_0.Pattern(str_0)
    frozenset_0 = pattern_0.intersection(str_0)
    float_0 = pattern_0.longest_ordered_chunk_match_ratio(frozenset_0)
    assert float_0 == pytest.approx(0.3333333333333333, abs=0.01, rel=0.01)
    pattern_0.fast_match_ratio(float_0)