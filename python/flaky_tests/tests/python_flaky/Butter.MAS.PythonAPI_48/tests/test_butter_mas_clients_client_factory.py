# Automatically generated by Pynguin.
import pytest
import butter.mas.clients.client_factory as module_0
import butter.mas.clients.client_tcp as module_1

def test_case_0():
    client_factory_0 = module_0.ClientFactory()
    var_0 = client_factory_0.getClientClass()
    var_1 = client_factory_0.getClient(client_factory_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'butter.mas.clients.client_http.HttpClient'
    assert f'{type(var_1.ip).__module__}.{type(var_1.ip).__qualname__}' == 'butter.mas.clients.client_factory.ClientFactory'
    assert var_1.port == 5555
    assert var_1.protocol == 'http'

def test_case_1():
    client_factory_0 = module_0.ClientFactory()
    client_factory_1 = module_0.ClientFactory()
    none_type_0 = None
    var_0 = client_factory_0.getClient(client_factory_1, protocol=none_type_0)

def test_case_2():
    client_factory_0 = module_0.ClientFactory()

@pytest.mark.xfail(strict=True)
def test_case_3():
    client_factory_0 = module_0.ClientFactory()
    set_0 = set()
    var_0 = client_factory_0.getClient(set_0, client_factory_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'butter.mas.clients.client_http.HttpClient'
    assert var_0.ip == {*()}
    assert f'{type(var_0.port).__module__}.{type(var_0.port).__qualname__}' == 'butter.mas.clients.client_factory.ClientFactory'
    assert var_0.protocol == 'http'
    var_1 = client_factory_0.getClient(set_0, protocol=set_0)
    var_2 = client_factory_0.getClientClass()
    var_2.setMotorRegister(var_1, var_1, set_0)

def test_case_4():
    client_factory_0 = module_0.ClientFactory()
    var_0 = client_factory_0.getClientClass(client_factory_0)

def test_case_5():
    client_factory_0 = module_0.ClientFactory()
    str_0 = 'tcp'
    var_0 = client_factory_0.getClient(str_0, protocol=str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'butter.mas.clients.client_tcp.TcpClient'
    assert var_0.ip == 'tcp'
    assert var_0.port == 5050
    assert var_0.protocol == 'tcp'
    var_1 = client_factory_0.getClient(client_factory_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'butter.mas.clients.client_http.HttpClient'
    assert f'{type(var_1.ip).__module__}.{type(var_1.ip).__qualname__}' == 'butter.mas.clients.client_factory.ClientFactory'
    assert var_1.port == 5555
    assert var_1.protocol == 'http'
    var_2 = client_factory_0.getClientClass()
    client_factory_1 = module_0.ClientFactory()

@pytest.mark.xfail(strict=True)
def test_case_6():
    client_factory_0 = module_0.ClientFactory()
    client_factory_1 = module_0.ClientFactory()
    var_0 = client_factory_1.getClientClass(client_factory_1)
    var_1 = client_factory_1.getClient(client_factory_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'butter.mas.clients.client_http.HttpClient'
    assert f'{type(var_1.ip).__module__}.{type(var_1.ip).__qualname__}' == 'butter.mas.clients.client_factory.ClientFactory'
    assert var_1.port == 5555
    assert var_1.protocol == 'http'
    var_2 = client_factory_1.getClient(client_factory_1, client_factory_1, client_factory_1)
    str_0 = 'tcp'
    var_3 = client_factory_1.getClient(str_0, protocol=str_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'butter.mas.clients.client_tcp.TcpClient'
    assert var_3.ip == 'tcp'
    assert var_3.port == 5050
    assert var_3.protocol == 'tcp'
    var_4 = module_1.TcpClient(str_0)
    var_5 = client_factory_1.getClient(var_4, var_4)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'butter.mas.clients.client_http.HttpClient'
    assert f'{type(var_5.ip).__module__}.{type(var_5.ip).__qualname__}' == 'butter.mas.clients.client_tcp.TcpClient'
    assert f'{type(var_5.port).__module__}.{type(var_5.port).__qualname__}' == 'butter.mas.clients.client_tcp.TcpClient'
    assert var_5.protocol == 'http'
    var_6 = client_factory_1.getClientClass(str_0)
    var_7 = client_factory_1.getClientClass()
    var_6.getAvailableAnimations()

@pytest.mark.xfail(strict=True)
def test_case_7():
    client_factory_0 = module_0.ClientFactory()
    str_0 = 'udp'
    var_0 = client_factory_0.getClient(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'butter.mas.clients.client_http.HttpClient'
    assert var_0.ip == 'udp'
    assert var_0.port == 5555
    assert var_0.protocol == 'http'
    var_1 = client_factory_0.getClientClass(str_0)
    var_2 = client_factory_0.getClient(str_0, protocol=str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'butter.mas.clients.client_udp.UdpClient'
    assert var_2.ip == 'udp'
    assert var_2.port == 5000
    assert var_2.protocol == 'udp'
    var_1.getClient(var_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    client_factory_0 = module_0.ClientFactory()
    client_factory_1 = module_0.ClientFactory()
    var_0 = client_factory_1.getClientClass(client_factory_1)
    var_1 = client_factory_1.getClient(client_factory_1, client_factory_1, client_factory_1)
    str_0 = 'tcp'
    var_2 = client_factory_1.getClient(str_0, protocol=str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'butter.mas.clients.client_tcp.TcpClient'
    assert var_2.ip == 'tcp'
    assert var_2.port == 5050
    assert var_2.protocol == 'tcp'
    var_3 = client_factory_1.getClient(client_factory_1)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'butter.mas.clients.client_http.HttpClient'
    assert f'{type(var_3.ip).__module__}.{type(var_3.ip).__qualname__}' == 'butter.mas.clients.client_factory.ClientFactory'
    assert var_3.port == 5555
    assert var_3.protocol == 'http'
    var_4 = var_3.getAvailableMotorRegisters(var_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'requests.models.Response'
    assert var_4.status_code == 400
    assert f'{type(var_4.headers).__module__}.{type(var_4.headers).__qualname__}' == 'requests.structures.CaseInsensitiveDict'
    assert len(var_4.headers) == 0
    assert var_4.raw is None
    assert var_4.url is None
    assert var_4.encoding is None
    assert var_4.history == []
    assert var_4.reason is None
    assert f'{type(var_4.cookies).__module__}.{type(var_4.cookies).__qualname__}' == 'requests.cookies.RequestsCookieJar'
    assert len(var_4.cookies) == 0
    assert f'{type(var_4.elapsed).__module__}.{type(var_4.elapsed).__qualname__}' == 'datetime.timedelta'
    assert var_4.request is None
    assert var_4.code == 'expired'
    assert var_4.error_type == 'expired'
    var_5 = client_factory_1.getClient(var_3, var_3)
    var_6 = client_factory_1.getClientClass(str_0)
    var_7 = client_factory_1.getClientClass()
    client_factory_2 = module_0.ClientFactory()
    var_8 = client_factory_0.getClient(var_0, client_factory_1, str_0)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'butter.mas.clients.client_tcp.TcpClient'
    assert var_8.ip is None
    assert f'{type(var_8.port).__module__}.{type(var_8.port).__qualname__}' == 'butter.mas.clients.client_factory.ClientFactory'
    assert var_8.protocol == 'tcp'
    var_9 = var_2.moveMotorToPosition(var_5, client_factory_1, var_1, var_5)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'requests.models.Response'
    assert var_9.status_code == 400
    assert f'{type(var_9.headers).__module__}.{type(var_9.headers).__qualname__}' == 'requests.structures.CaseInsensitiveDict'
    assert len(var_9.headers) == 0
    assert var_9.raw is None
    assert var_9.url is None
    assert var_9.encoding is None
    assert var_9.history == []
    assert var_9.reason is None
    assert f'{type(var_9.cookies).__module__}.{type(var_9.cookies).__qualname__}' == 'requests.cookies.RequestsCookieJar'
    assert len(var_9.cookies) == 0
    assert f'{type(var_9.elapsed).__module__}.{type(var_9.elapsed).__qualname__}' == 'datetime.timedelta'
    assert var_9.request is None
    assert var_9.code == 'expired'
    assert var_9.error_type == 'expired'
    var_5.getClient(var_9, client_factory_2, var_3)

@pytest.mark.xfail(strict=True)
def test_case_9():
    client_factory_0 = module_0.ClientFactory()
    var_0 = client_factory_0.getClientClass()
    str_0 = 'udp'
    var_1 = client_factory_0.getClient(client_factory_0, str_0, str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'butter.mas.clients.client_udp.UdpClient'
    assert f'{type(var_1.ip).__module__}.{type(var_1.ip).__qualname__}' == 'butter.mas.clients.client_factory.ClientFactory'
    assert var_1.port == 'udp'
    assert var_1.protocol == 'udp'
    var_2 = client_factory_0.getClient(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'butter.mas.clients.client_http.HttpClient'
    assert var_2.ip == 'udp'
    assert var_2.port == 5555
    assert var_2.protocol == 'http'
    var_3 = client_factory_0.getClientClass(str_0)
    var_4 = client_factory_0.getClient(str_0, protocol=str_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'butter.mas.clients.client_udp.UdpClient'
    assert var_4.ip == 'udp'
    assert var_4.port == 5000
    assert var_4.protocol == 'udp'
    int_0 = 1490
    int_0.moveMotorToPosition(var_4, int_0)