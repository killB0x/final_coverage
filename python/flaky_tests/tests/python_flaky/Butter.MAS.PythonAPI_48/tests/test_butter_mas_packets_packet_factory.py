# Automatically generated by Pynguin.
import pytest
import butter.mas.packets.packet_factory as module_0
import butter.mas.packets.packet_udp as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    packet_factory_0 = module_0.PacketFactory()
    var_0 = packet_factory_0.getPacketClass()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'abc.ABCMeta'
    var_1 = packet_factory_0.getPacket(var_0, var_0, var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'butter.mas.packets.packet_http.HttpPacket'
    var_2 = packet_factory_0.getPacket(packet_factory_0, packet_factory_0, packet_factory_0, packet_factory_0)
    module_0.PacketFactory(*var_2)

@pytest.mark.xfail(strict=True)
def test_case_1():
    packet_factory_0 = module_0.PacketFactory()
    var_0 = packet_factory_0.getPacket(packet_factory_0, packet_factory_0, packet_factory_0, packet_factory_0)
    str_0 = 'uPl\t<3qs/Ko.'
    var_0.getPacket(packet_factory_0, var_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    packet_factory_0 = module_0.PacketFactory()
    var_0 = packet_factory_0.getPacketClass()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'abc.ABCMeta'
    module_0.PacketFactory(*packet_factory_0)

def test_case_3():
    packet_factory_0 = module_0.PacketFactory()
    packet_factory_1 = module_0.PacketFactory()
    str_0 = 'tcp'
    str_1 = ']'
    dict_0 = {str_0: str_0, str_0: packet_factory_1, str_0: packet_factory_1, str_1: str_0}
    var_0 = packet_factory_1.getPacketClass(str_1)
    var_1 = module_1.UdpPacket(str_1, str_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 1811
    list_0 = [int_0]
    none_type_0 = None
    module_0.PacketFactory(*list_0, **none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    packet_factory_0 = module_0.PacketFactory()
    packet_factory_1 = module_0.PacketFactory()
    str_0 = 'tcp'
    str_1 = ']'
    var_0 = packet_factory_1.getPacketClass(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'abc.ABCMeta'
    var_1 = packet_factory_1.getPacketClass(str_1)
    module_0.PacketFactory(**var_0)

def test_case_6():
    int_0 = -2157
    packet_factory_0 = module_0.PacketFactory()
    var_0 = packet_factory_0.getPacketClass(packet_factory_0)
    packet_factory_1 = module_0.PacketFactory()
    str_0 = 'tcp'
    var_1 = packet_factory_0.getPacketClass(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'abc.ABCMeta'
    var_2 = packet_factory_0.getPacket(packet_factory_0, str_0, int_0, str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'butter.mas.packets.packet_tcp.TcpPacket'
    assert f'{type(var_2.ip).__module__}.{type(var_2.ip).__qualname__}' == 'butter.mas.packets.packet_factory.PacketFactory'
    assert var_2.port == 'tcp'
    assert var_2.query == -2157
    assert var_2.bufferSize == 2048
    none_type_0 = None
    var_3 = packet_factory_1.getPacket(var_1, packet_factory_1, none_type_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'butter.mas.packets.packet_http.HttpPacket'
    assert f'{type(var_3.port).__module__}.{type(var_3.port).__qualname__}' == 'butter.mas.packets.packet_factory.PacketFactory'
    assert var_3.query is None
    var_4 = packet_factory_1.getPacketClass(str_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'abc.ABCMeta'

@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -2151
    packet_factory_0 = module_0.PacketFactory()
    packet_factory_1 = packet_factory_0.getPacketClass()
    assert f'{type(packet_factory_1).__module__}.{type(packet_factory_1).__qualname__}' == 'abc.ABCMeta'
    str_0 = 'udp'
    var_0 = packet_factory_0.getPacketClass(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'abc.ABCMeta'
    var_1 = packet_factory_0.getPacket(packet_factory_0, str_0, int_0, str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'butter.mas.packets.packet_udp.UdpPacket'
    assert f'{type(var_1.ip).__module__}.{type(var_1.ip).__qualname__}' == 'butter.mas.packets.packet_factory.PacketFactory'
    assert var_1.port == 'udp'
    assert var_1.query == -2151
    assert var_1.bufferSize == 2048
    none_type_0 = None
    packet_factory_1.getPacket(var_0, packet_factory_1, none_type_0)