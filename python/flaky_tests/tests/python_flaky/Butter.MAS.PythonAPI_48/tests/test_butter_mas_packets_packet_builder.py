# Automatically generated by Pynguin.
import pytest
import butter.mas.packets.packet_builder as module_0
import butter.mas.packets.packet_factory as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'Nx >'
    list_0 = [str_0, str_0, str_0]
    bytes_0 = b'\xbf"y\xca\x9e\x98\xca.\xa53N\x1a1'
    packet_builder_0 = module_0.PacketBuilder(list_0, bytes_0)
    var_0 = packet_builder_0.addKeyValuePair(bytes_0, bytes_0)
    assert packet_builder_0.keys == {b'\xbf"y\xca\x9e\x98\xca.\xa53N\x1a1': 'b\'\\xbf"y\\xca\\x9e\\x98\\xca.\\xa53N\\x1a1\''}
    assert var_0.keys == {b'\xbf"y\xca\x9e\x98\xca.\xa53N\x1a1': 'b\'\\xbf"y\\xca\\x9e\\x98\\xca.\\xa53N\\x1a1\''}
    var_1 = var_0.addArguments(*list_0)
    assert packet_builder_0.args == ['Nx >', 'Nx >', 'Nx >']
    assert var_0.args == ['Nx >', 'Nx >', 'Nx >']
    assert var_1.args == ['Nx >', 'Nx >', 'Nx >']
    assert var_1.keys == {b'\xbf"y\xca\x9e\x98\xca.\xa53N\x1a1': 'b\'\\xbf"y\\xca\\x9e\\x98\\xca.\\xa53N\\x1a1\''}
    list_1 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.PacketFactory(*list_1)

def test_case_1():
    tuple_0 = ()
    packet_builder_0 = module_0.PacketBuilder(tuple_0, tuple_0)
    var_0 = packet_builder_0.addParameter(tuple_0)
    assert packet_builder_0.params == ['--()']
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'butter.mas.packets.packet_builder.PacketBuilder'
    assert var_0.ip == ()
    assert var_0.port == ()
    assert var_0.cmd is None
    assert var_0.args == []
    assert var_0.params == ['--()']
    assert var_0.keys == {}
    packet_builder_1 = module_0.PacketBuilder(tuple_0, tuple_0, tuple_0)
    var_1 = var_0.addArgument(var_0)
    assert var_1.params == ['--()']
    var_2 = packet_builder_1.addArguments()
    packet_builder_2 = module_0.PacketBuilder(tuple_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 5000
    dict_0 = {}
    set_0 = {int_0, int_0, int_0}
    list_0 = [int_0, set_0, int_0]
    bool_0 = False
    list_1 = [bool_0]
    none_type_0 = None
    packet_builder_0 = module_0.PacketBuilder(int_0, int_0, none_type_0)
    var_0 = packet_builder_0.addParameters(*list_1)
    assert packet_builder_0.params == ['--False']
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'butter.mas.packets.packet_builder.PacketBuilder'
    assert var_0.ip == 5000
    assert var_0.port == 5000
    assert var_0.packet is None
    assert var_0.cmd is None
    assert var_0.args == []
    assert var_0.params == ['--False']
    assert var_0.keys == {}
    var_1 = var_0.addCommand(int_0)
    assert var_1.params == ['--False']
    var_2 = var_1.addArgument(int_0)
    assert var_2.params == ['--False']
    var_3 = var_2.addArguments()
    assert var_3.params == ['--False']
    var_4 = var_3.addArguments(*list_0)
    assert packet_builder_0.args == ['5000', '5000', '{5000}', '5000']
    assert var_0.args == ['5000', '5000', '{5000}', '5000']
    assert var_1.args == ['5000', '5000', '{5000}', '5000']
    assert var_2.args == ['5000', '5000', '{5000}', '5000']
    assert var_3.args == ['5000', '5000', '{5000}', '5000']
    assert var_4.args == ['5000', '5000', '{5000}', '5000']
    assert var_4.params == ['--False']
    var_4.addKeyValuePair(dict_0, int_0)

def test_case_3():
    bytes_0 = b''
    packet_builder_0 = module_0.PacketBuilder(bytes_0, bytes_0, bytes_0)
    var_0 = packet_builder_0.addParameters(*bytes_0)

def test_case_4():
    bool_0 = True
    bool_1 = True
    bool_2 = True
    tuple_0 = (bool_1, bool_2)
    tuple_1 = (tuple_0,)
    dict_0 = {tuple_0: tuple_1, bool_2: tuple_0, bool_1: tuple_0, bool_2: tuple_0}
    packet_builder_0 = module_0.PacketBuilder(tuple_1, dict_0)
    var_0 = packet_builder_0.addKeyValuePair(bool_0, bool_0)
    assert packet_builder_0.keys == {True: 'True'}
    assert var_0.keys == {True: 'True'}

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 2084
    bool_0 = True
    none_type_0 = None
    packet_builder_0 = module_0.PacketBuilder(bool_0, bool_0)
    var_0 = packet_builder_0.addKeyValuePair(int_0, none_type_0)
    assert var_0.keys == {}
    packet_builder_1 = module_0.PacketBuilder(int_0, int_0)
    packet_builder_2 = module_0.PacketBuilder(bool_0, bool_0)
    packet_builder_3 = module_0.PacketBuilder(bool_0, var_0)
    packet_builder_2.addParameters(*int_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    none_type_0 = None
    float_0 = 808.86912
    list_0 = []
    bool_1 = False
    tuple_0 = (float_0, list_0, bool_1)
    bytes_0 = b'\x07\xaa\xc4W'
    list_1 = [bytes_0, bytes_0]
    list_2 = [list_1]
    none_type_1 = None
    packet_builder_0 = module_0.PacketBuilder(none_type_1, none_type_1)
    var_0 = packet_builder_0.addArguments(*list_2)
    assert packet_builder_0.args == ["[b'\\x07\\xaa\\xc4W', b'\\x07\\xaa\\xc4W']"]
    assert var_0.args == ["[b'\\x07\\xaa\\xc4W', b'\\x07\\xaa\\xc4W']"]
    var_1 = var_0.addParameter(tuple_0)
    assert packet_builder_0.params == ['--(808.86912, [], False)']
    assert var_0.params == ['--(808.86912, [], False)']
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'butter.mas.packets.packet_builder.PacketBuilder'
    assert var_1.ip is None
    assert var_1.port is None
    assert var_1.cmd is None
    assert var_1.args == ["[b'\\x07\\xaa\\xc4W', b'\\x07\\xaa\\xc4W']"]
    assert var_1.params == ['--(808.86912, [], False)']
    assert var_1.keys == {}
    var_2 = var_1.addCommand(none_type_0)
    assert var_2.args == ["[b'\\x07\\xaa\\xc4W', b'\\x07\\xaa\\xc4W']"]
    assert var_2.params == ['--(808.86912, [], False)']
    var_3 = var_2.build()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'butter.mas.packets.packet_http.HttpPacket'
    assert var_3.ip is None
    assert var_3.port is None
    assert var_3.query == "cmd/json/None?[b'\\x07\\xaa\\xc4W', b'\\x07\\xaa\\xc4W']&--(808.86912, [], False)"
    var_3.addParameters(*bool_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 3000
    set_0 = {int_0, int_0, int_0, int_0}
    packet_builder_0 = module_0.PacketBuilder(set_0, set_0, int_0)
    var_0 = packet_builder_0.build()
    var_0.addParameters()

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    packet_builder_0 = module_0.PacketBuilder(bool_0, bool_0, bool_0)
    var_0 = packet_builder_0.build()
    none_type_0 = None
    var_1 = packet_builder_0.addParameters()
    var_2 = packet_builder_0.addKeyValuePair(none_type_0, none_type_0)
    assert var_2.keys == {}
    var_3 = packet_builder_0.addParameters()
    assert var_3.keys == {}
    var_4 = packet_builder_0.addArguments()
    assert var_4.keys == {}
    packet_builder_1 = module_0.PacketBuilder(var_2, bool_0)
    var_5 = packet_builder_1.addParameters()
    set_0 = {bool_0, bool_0, var_2}
    var_6 = var_2.addKeyValuePair(bool_0, set_0)
    var_7 = var_2.addCommand(var_4)
    var_8 = var_7.addCommand(var_1)
    packet_builder_0.build()

def test_case_9():
    tuple_0 = ()
    set_0 = set()
    bool_0 = True
    list_0 = [set_0, set_0, bool_0, bool_0]
    bytes_0 = b'J\xda\x92\xac\xb7'
    packet_builder_0 = module_0.PacketBuilder(bytes_0, bytes_0)
    var_0 = packet_builder_0.addArguments()
    var_1 = var_0.addCommand(list_0)
    var_2 = var_1.addArgument(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    float_0 = -806.9276
    packet_builder_0 = module_0.PacketBuilder(float_0, float_0)
    var_0 = packet_builder_0.addArgument(float_0)
    var_1 = var_0.addArguments()
    var_2 = var_1.addKeyValuePair(float_0, float_0)
    assert len(packet_builder_0.keys) == 1
    assert len(var_0.keys) == 1
    assert len(var_1.keys) == 1
    assert len(var_2.keys) == 1
    var_3 = var_2.addParameters()
    assert len(var_3.keys) == 1
    var_4 = var_3.addArguments()
    assert len(var_4.keys) == 1
    var_5 = var_4.addArgument(float_0)
    assert len(var_5.keys) == 1
    packet_builder_1 = module_0.PacketBuilder(float_0, float_0)
    int_0 = -445
    packet_builder_2 = module_0.PacketBuilder(packet_builder_1, packet_builder_1, int_0)
    var_6 = packet_builder_1.addParameter(float_0)
    assert packet_builder_1.params == ['--806.9276']
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'butter.mas.packets.packet_builder.PacketBuilder'
    assert var_6.ip == pytest.approx(-806.9276, abs=0.01, rel=0.01)
    assert var_6.port == pytest.approx(-806.9276, abs=0.01, rel=0.01)
    assert var_6.cmd is None
    assert var_6.args == []
    assert var_6.params == ['--806.9276']
    assert var_6.keys == {}
    var_7 = var_6.addArguments()
    assert var_7.params == ['--806.9276']
    var_8 = packet_builder_1.build()
    var_8.addParameter(var_8)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    list_0 = [bool_0]
    bool_1 = False
    packet_builder_0 = module_0.PacketBuilder(bool_1, bool_1)
    var_0 = packet_builder_0.addParameters(*list_0)
    assert packet_builder_0.params == ['--True']
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'butter.mas.packets.packet_builder.PacketBuilder'
    assert var_0.ip is False
    assert var_0.port is False
    assert var_0.cmd is None
    assert var_0.args == []
    assert var_0.params == ['--True']
    assert var_0.keys == {}
    bytes_0 = b'v\xa6\x9dK'
    int_0 = 400
    packet_builder_1 = module_0.PacketBuilder(int_0, int_0, int_0)
    var_1 = packet_builder_1.addCommand(bytes_0)
    var_2 = packet_builder_1.addParameters()
    var_3 = var_1.addParameters()
    var_3.build()