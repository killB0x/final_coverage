# Automatically generated by Pynguin.
import pytest
import butter.mas.packets.packet_udp as module_0
import butter.mas.utils.general_utils as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 1331.1905
    udp_packet_0 = module_0.UdpPacket(float_0, float_0, float_0)
    assert f'{type(udp_packet_0).__module__}.{type(udp_packet_0).__qualname__}' == 'butter.mas.packets.packet_udp.UdpPacket'
    assert udp_packet_0.ip == pytest.approx(1331.1905, abs=0.01, rel=0.01)
    assert udp_packet_0.port == pytest.approx(1331.1905, abs=0.01, rel=0.01)
    assert udp_packet_0.query == pytest.approx(1331.1905, abs=0.01, rel=0.01)
    assert udp_packet_0.bufferSize == 2048
    udp_packet_0.send()

def test_case_1():
    bool_0 = False
    udp_packet_0 = module_0.UdpPacket(bool_0, bool_0, bool_0)
    assert f'{type(udp_packet_0).__module__}.{type(udp_packet_0).__qualname__}' == 'butter.mas.packets.packet_udp.UdpPacket'
    assert udp_packet_0.ip is False
    assert udp_packet_0.port is False
    assert udp_packet_0.query is False
    assert udp_packet_0.bufferSize == 2048
    var_0 = udp_packet_0.__eq__(bool_0)
    assert var_0 is False
    var_1 = udp_packet_0.__eq__(udp_packet_0)
    assert var_1 is True
    udp_packet_1 = module_0.UdpPacket(bool_0, bool_0, bool_0)
    assert udp_packet_1.bufferSize == 2048
    udp_packet_2 = module_0.UdpPacket(bool_0, udp_packet_1, bool_0)
    assert udp_packet_2.bufferSize == 2048

@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_1.print_error()
    var_0.send()

def test_case_3():
    list_0 = []
    var_0 = module_1.print_error(*list_0)
    udp_packet_0 = module_0.UdpPacket(var_0, list_0, list_0)
    assert f'{type(udp_packet_0).__module__}.{type(udp_packet_0).__qualname__}' == 'butter.mas.packets.packet_udp.UdpPacket'
    assert udp_packet_0.ip is None
    assert udp_packet_0.port == []
    assert udp_packet_0.query == []
    assert udp_packet_0.bufferSize == 2048

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ' Exposes Butter MAS Python API '
    none_type_0 = None
    udp_packet_0 = module_0.UdpPacket(str_0, none_type_0, none_type_0)
    assert f'{type(udp_packet_0).__module__}.{type(udp_packet_0).__qualname__}' == 'butter.mas.packets.packet_udp.UdpPacket'
    assert udp_packet_0.ip == ' Exposes Butter MAS Python API '
    assert udp_packet_0.port is None
    assert udp_packet_0.query is None
    assert udp_packet_0.bufferSize == 2048
    int_0 = -141
    udp_packet_1 = module_0.UdpPacket(int_0, int_0, int_0)
    assert udp_packet_1.ip == -141
    assert udp_packet_1.port == -141
    assert udp_packet_1.query == -141
    assert udp_packet_1.bufferSize == 2048
    var_0 = udp_packet_1.__eq__(udp_packet_0)
    assert var_0 is False
    var_0.send(udp_packet_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    set_0 = set()
    none_type_0 = None
    udp_packet_0 = module_0.UdpPacket(set_0, set_0, none_type_0)
    assert f'{type(udp_packet_0).__module__}.{type(udp_packet_0).__qualname__}' == 'butter.mas.packets.packet_udp.UdpPacket'
    assert udp_packet_0.ip == {*()}
    assert udp_packet_0.port == {*()}
    assert udp_packet_0.query is None
    assert udp_packet_0.bufferSize == 2048
    int_0 = 1
    udp_packet_1 = module_0.UdpPacket(int_0, set_0, int_0)
    assert udp_packet_1.ip == 1
    assert udp_packet_1.port == {*()}
    assert udp_packet_1.query == 1
    assert udp_packet_1.bufferSize == 2048
    udp_packet_2 = module_0.UdpPacket(int_0, int_0, int_0)
    assert udp_packet_2.ip == 1
    assert udp_packet_2.port == 1
    assert udp_packet_2.query == 1
    assert udp_packet_2.bufferSize == 2048
    var_0 = udp_packet_2.__eq__(udp_packet_2)
    assert var_0 is True
    var_1 = udp_packet_2.__eq__(none_type_0)
    assert var_1 is False
    udp_packet_3 = module_0.UdpPacket(var_0, var_1, int_0)
    assert udp_packet_3.ip is True
    assert udp_packet_3.bufferSize == 2048
    udp_packet_4 = module_0.UdpPacket(udp_packet_3, udp_packet_2, udp_packet_3)
    assert udp_packet_4.bufferSize == 2048
    var_2 = var_0.__eq__(udp_packet_4)
    udp_packet_5 = module_0.UdpPacket(udp_packet_4, udp_packet_0, udp_packet_4)
    assert udp_packet_5.bufferSize == 2048
    var_3 = udp_packet_3.__eq__(udp_packet_2)
    udp_packet_5.send()

def test_case_6():
    int_0 = 1170
    str_0 = 'K\x0bhNF}'
    udp_packet_0 = module_0.UdpPacket(str_0, int_0, str_0)
    assert f'{type(udp_packet_0).__module__}.{type(udp_packet_0).__qualname__}' == 'butter.mas.packets.packet_udp.UdpPacket'
    assert udp_packet_0.ip == 'K\x0bhNF}'
    assert udp_packet_0.port == 1170
    assert udp_packet_0.query == 'K\x0bhNF}'
    assert udp_packet_0.bufferSize == 2048
    var_0 = udp_packet_0.send()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'requests.models.Response'
    assert var_0.status_code == 400
    assert f'{type(var_0.headers).__module__}.{type(var_0.headers).__qualname__}' == 'requests.structures.CaseInsensitiveDict'
    assert len(var_0.headers) == 0
    assert var_0.raw is None
    assert var_0.url is None
    assert var_0.encoding is None
    assert var_0.history == []
    assert var_0.reason is None
    assert f'{type(var_0.cookies).__module__}.{type(var_0.cookies).__qualname__}' == 'requests.cookies.RequestsCookieJar'
    assert len(var_0.cookies) == 0
    assert f'{type(var_0.elapsed).__module__}.{type(var_0.elapsed).__qualname__}' == 'datetime.timedelta'
    assert var_0.request is None
    assert var_0.code == 'expired'
    assert var_0.error_type == 'expired'