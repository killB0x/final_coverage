# Automatically generated by Pynguin.
import pytest
import persistent_queue.persistent_queue as module_0
import platform as module_1
import re as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 8
    module_0.PersistentQueue(int_0, int_0, int_0)

def test_case_1():
    bytes_0 = b'\x9f\x8a\xa6\x9cfk\xa6\xc9\xdd\xb3\xc9\xb3\x08\x80'
    persistent_queue_0 = module_0.PersistentQueue(bytes_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 1
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8

@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_1.python_branch()
    module_0.PersistentQueue(var_0, dumps=var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    var_0 = module_1.processor()
    var_0.delete()

def test_case_4():
    var_0 = module_1.release()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8

@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_1.release()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = persistent_queue_0.clear()
    persistent_queue_0.get_nowait()

@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b'\x9f\x8a\xa6\x9cfk\xa6\xc9\xdd\xb3\xc9\xb3\x08\x80'
    persistent_queue_0 = module_0.PersistentQueue(bytes_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 1
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    persistent_queue_0.put_nowait(persistent_queue_0)

def test_case_7():
    var_0 = module_1.release()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 0
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = persistent_queue_0.flush()

def test_case_8():
    bytes_0 = b'\x9f\x8a\xa6\x9cfk\xa6\xc9\xdd\xb3\xc9\xb3\x08\x80'
    persistent_queue_0 = module_0.PersistentQueue(bytes_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 1
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    with pytest.raises(ValueError):
        persistent_queue_0.task_done()

@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = -3146
    module_0.PersistentQueue(int_0, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    var_0 = module_1.release()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 0
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    persistent_queue_0.get_nowait()

@pytest.mark.xfail(strict=True)
def test_case_11():
    var_0 = module_1.release()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 0
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = persistent_queue_0.delete()
    var_0.flush()

@pytest.mark.xfail(strict=True)
def test_case_12():
    var_0 = module_1.release()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 0
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    persistent_queue_0.get_nowait()

def test_case_13():
    var_0 = module_1.python_version()
    persistent_queue_0 = module_0.PersistentQueue(var_0, flush_limit=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = persistent_queue_0.join()
    var_2 = persistent_queue_0.put_nowait(var_1)

@pytest.mark.xfail(strict=True)
def test_case_14():
    var_0 = module_1.release()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 0
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    persistent_queue_0.copy(var_0)

def test_case_15():
    var_0 = module_1.release()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 0
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = persistent_queue_0.peek(timeout=persistent_queue_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    var_0 = module_1.release()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 0
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    persistent_queue_0.peek(persistent_queue_0, items=var_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    var_0 = module_1.release()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 0
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    persistent_queue_0.peek(var_0, persistent_queue_0)

def test_case_18():
    var_0 = module_1.python_version()
    persistent_queue_0 = module_0.PersistentQueue(var_0, flush_limit=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = persistent_queue_0.join()
    var_2 = persistent_queue_0.put_nowait(var_1)
    persistent_queue_0.delete()
    var_3 = persistent_queue_0.peek(persistent_queue_0)
    var_4 = persistent_queue_0.get_nowait()

@pytest.mark.xfail(strict=True)
def test_case_19():
    var_0 = module_1.release()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 0
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = persistent_queue_0.peek(timeout=persistent_queue_0)
    var_2 = persistent_queue_0.empty()
    assert var_2 is True
    var_3 = persistent_queue_0.join()
    var_4 = persistent_queue_0.flush()
    persistent_queue_0.get_nowait()

def test_case_20():
    var_0 = module_1.python_version()
    persistent_queue_0 = module_0.PersistentQueue(var_0, flush_limit=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = persistent_queue_0.qsize()
    var_2 = persistent_queue_0.join()
    var_3 = persistent_queue_0.put_nowait(var_2)
    persistent_queue_0.delete()
    var_4 = persistent_queue_0.get_nowait()

def test_case_21():
    var_0 = module_1.release()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 0
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = persistent_queue_0.join()

def test_case_22():
    var_0 = module_1.release()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 0
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = persistent_queue_0.full()
    assert var_1 is False

def test_case_23():
    var_0 = module_1.version()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = persistent_queue_0.delete()
    assert len(persistent_queue_0) == 1

def test_case_24():
    var_0 = module_1.system()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 8
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = persistent_queue_0.peek(timeout=persistent_queue_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    var_0 = module_1.release()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 0
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    persistent_queue_0.get_nowait()

@pytest.mark.xfail(strict=True)
def test_case_26():
    var_0 = module_1.release()
    persistent_queue_0 = module_0.PersistentQueue(var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert len(persistent_queue_0) == 0
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    bool_0 = False
    var_1 = persistent_queue_0.delete(bool_0)
    var_0.full()

def test_case_27():
    var_0 = module_1.python_version()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    persistent_queue_0.delete()
    var_1 = persistent_queue_0.full()
    var_2 = persistent_queue_0.peek(items=var_1)
    var_3 = var_0.put_nowait(var_2)

def test_case_28():
    var_0 = module_1.python_version()
    persistent_queue_0 = module_0.PersistentQueue(var_0, dumps=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = persistent_queue_0.full()
    assert var_1 is False
    var_2 = persistent_queue_0.task_done(var_1)
    persistent_queue_0.peek()
    var_3 = var_0.__iter__()
    var_4 = var_3.get_nowait()

def test_case_29():
    var_0 = module_1.python_version()
    persistent_queue_0 = module_0.PersistentQueue(var_0, flush_limit=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    bool_0 = True
    persistent_queue_0.peek(var_0, bool_0)

def test_case_30():
    var_0 = module_1.python_version()
    persistent_queue_0 = module_0.PersistentQueue(var_0, flush_limit=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = persistent_queue_0.join()
    persistent_queue_0.get_nowait()

@pytest.mark.xfail(strict=True)
def test_case_31():
    var_0 = module_1.python_version()
    persistent_queue_0 = module_0.PersistentQueue(var_0, flush_limit=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = module_2.findall(var_0, var_0)
    var_2 = persistent_queue_0.put_nowait(var_1)
    persistent_queue_0.peek(persistent_queue_0, var_2)
    assert var_3 == '3.10.6'
    var_4 = persistent_queue_0.put_nowait(persistent_queue_0)

@pytest.mark.xfail(strict=True)
def test_case_32():
    var_0 = module_1.python_version()
    persistent_queue_0 = module_0.PersistentQueue(var_0, flush_limit=var_0)
    assert f'{type(persistent_queue_0).__module__}.{type(persistent_queue_0).__qualname__}' == 'persistent_queue.persistent_queue.PersistentQueue'
    assert module_0.LENGTH_STRUCT == 'I'
    assert module_0.HEADER_STRUCT == 'II'
    assert module_0.START_OFFSET == 8
    var_1 = persistent_queue_0.join()
    var_2 = persistent_queue_0.put_nowait(var_1)
    var_3 = persistent_queue_0.put(var_1)
    persistent_queue_0.peek(persistent_queue_0, var_2)
    assert var_4 == '3.10.6'
    var_5 = persistent_queue_0.task_done()
    var_6 = persistent_queue_0.put_nowait(persistent_queue_0)