# Automatically generated by Pynguin.
import pytest
import skelpy.utils.defaultsubparse as module_0

def test_case_0():
    float_0 = 1477.0
    default_subcommand_arg_parser_0 = module_0.DefaultSubcommandArgParser(usage=float_0, argument_default=float_0)
    var_0 = default_subcommand_arg_parser_0.parse_known_intermixed_args(namespace=float_0)
    var_1 = default_subcommand_arg_parser_0.parse_known_intermixed_args(namespace=var_0)

def test_case_1():
    default_subcommand_arg_parser_0 = module_0.DefaultSubcommandArgParser()

@pytest.mark.xfail(strict=True)
def test_case_2():
    default_subcommand_arg_parser_0 = module_0.DefaultSubcommandArgParser()
    var_0 = default_subcommand_arg_parser_0.set_default_subparser(default_subcommand_arg_parser_0)
    default_subcommand_arg_parser_0.parse_known_args()

def test_case_3():
    default_subcommand_arg_parser_0 = module_0.DefaultSubcommandArgParser()
    var_0 = default_subcommand_arg_parser_0.add_mutually_exclusive_group()
    var_1 = default_subcommand_arg_parser_0.get_args_by_group(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 1476.63801
    default_subcommand_arg_parser_0 = module_0.DefaultSubcommandArgParser(usage=float_0, argument_default=float_0)
    var_0 = default_subcommand_arg_parser_0.__repr__()
    default_subcommand_arg_parser_0.combine_usage(var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = 1476.63801
    default_subcommand_arg_parser_0 = module_0.DefaultSubcommandArgParser(usage=float_0, argument_default=float_0)
    var_0 = default_subcommand_arg_parser_0.set_default_subparser(default_subcommand_arg_parser_0)
    list_0 = [default_subcommand_arg_parser_0]
    var_1 = default_subcommand_arg_parser_0.combine_usage(list_0)
    assert var_1 == ''
    default_subcommand_arg_parser_0.parse_known_intermixed_args(namespace=float_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    default_subcommand_arg_parser_0 = module_0.DefaultSubcommandArgParser()
    list_0 = [default_subcommand_arg_parser_0, default_subcommand_arg_parser_0, default_subcommand_arg_parser_0]
    var_0 = default_subcommand_arg_parser_0.combine_usage(list_0)
    assert var_0 == 'pynguin [-h]\n       pynguin [-h]\n       pynguin [-h]\n\n'
    bool_0 = False
    tuple_0 = (default_subcommand_arg_parser_0, list_0, bool_0, list_0)
    module_0.DefaultSubcommandArgParser(description=default_subcommand_arg_parser_0, epilog=default_subcommand_arg_parser_0, fromfile_prefix_chars=tuple_0, argument_default=list_0, conflict_handler=list_0, add_help=list_0, allow_abbrev=list_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    default_subcommand_arg_parser_0 = module_0.DefaultSubcommandArgParser()
    var_0 = default_subcommand_arg_parser_0.add_subparsers()
    var_1 = default_subcommand_arg_parser_0.set_default_subparser(default_subcommand_arg_parser_0)
    default_subcommand_arg_parser_0.parse_known_args()