# Automatically generated by Pynguin.
import pytest
import skelpy.makers.package as module_0
import enum as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.PackageMaker(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ': '
    package_maker_0 = module_0.PackageMaker(str_0, str_0, str_0, str_0, str_0)
    assert f'{type(package_maker_0).__module__}.{type(package_maker_0).__qualname__}' == 'skelpy.makers.package.PackageMaker'
    assert package_maker_0.projectDir == ': '
    assert package_maker_0.projectName == ': '
    assert package_maker_0.format == ': '
    assert package_maker_0.merge == ': '
    assert package_maker_0.force == ': '
    assert package_maker_0.packageDir == ': /src/: '
    assert module_0.settings == {'packageDir': ': /src/: '}
    var_0 = package_maker_0.generate()

def test_case_2():
    str_0 = ': '
    package_maker_0 = module_0.PackageMaker(str_0, str_0, str_0, str_0, str_0)
    assert f'{type(package_maker_0).__module__}.{type(package_maker_0).__qualname__}' == 'skelpy.makers.package.PackageMaker'
    assert package_maker_0.projectDir == ': '
    assert package_maker_0.projectName == ': '
    assert package_maker_0.format == ': '
    assert package_maker_0.merge == ': '
    assert package_maker_0.force == ': '
    assert package_maker_0.packageDir == ': /src/: '
    assert module_0.settings == {'packageDir': ': /src/: '}

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'src'
    package_maker_0 = module_0.PackageMaker(str_0, str_0, str_0, str_0, str_0)
    assert f'{type(package_maker_0).__module__}.{type(package_maker_0).__qualname__}' == 'skelpy.makers.package.PackageMaker'
    assert package_maker_0.projectDir == 'src'
    assert package_maker_0.projectName == 'src'
    assert package_maker_0.format == 'src'
    assert package_maker_0.merge == 'src'
    assert package_maker_0.force == 'src'
    assert package_maker_0.packageDir == 'src/src/src'
    assert module_0.settings == {'packageDir': 'src/src/src'}
    enum_dict_0 = module_1._EnumDict()
    var_0 = package_maker_0.generate()
    assert var_0 is True
    bool_0 = True
    var_0.__delitem__(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'Check if the given command is available on the system\n\n    Args:\n        cmd (str): command to check\n    Returns:\n        bool: True if available, otherwise False\n    '
    str_1 = ''
    package_maker_0 = module_0.PackageMaker(str_1, str_1, str_1, str_1, str_0)
    assert f'{type(package_maker_0).__module__}.{type(package_maker_0).__qualname__}' == 'skelpy.makers.package.PackageMaker'
    assert package_maker_0.projectDir == ''
    assert package_maker_0.projectName == ''
    assert package_maker_0.format == ''
    assert package_maker_0.merge == ''
    assert package_maker_0.force == 'Check if the given command is available on the system\n\n    Args:\n        cmd (str): command to check\n    Returns:\n        bool: True if available, otherwise False\n    '
    assert package_maker_0.packageDir == 'src/'
    assert module_0.settings == {'packageDir': 'src/'}
    dict_0 = {str_1: str_1, str_1: str_0}
    var_0 = package_maker_0.generate()
    assert var_0 is False
    var_1 = package_maker_0.generate()
    assert var_1 is False
    module_0.PackageMaker(dict_0, str_1, str_1, str_1, str_1)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'basic'
    none_type_0 = None
    module_0.PackageMaker(str_0, none_type_0, str_0, str_0, none_type_0)