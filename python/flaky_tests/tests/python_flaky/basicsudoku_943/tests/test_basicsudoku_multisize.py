# Automatically generated by Pynguin.
import pytest
import basicsudoku.multisize as module_0
import inspect as module_1
import bdb as module_2
import collections as module_3
import pprint as module_4
import unittest.signals as module_5
import pdb as module_6

def test_case_0():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3

def test_case_1():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    with pytest.raises(module_0.SudokuBoardException):
        module_0.SudokuBoard(size=sudoku_board_0, solved=sudoku_board_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    sudoku_board_0.is_complete_group(sudoku_board_0)

def test_case_3():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    var_0 = sudoku_board_0.__str__()
    assert var_0 == '. . . | . . . | . . .\n. . . | . . . | . . .\n. . . | . . . | . . .\n------+-------+------\n. . . | . . . | . . .\n. . . | . . . | . . .\n. . . | . . . | . . .\n------+-------+------\n. . . | . . . | . . .\n. . . | . . . | . . .\n. . . | . . . | . . .'
    var_1 = sudoku_board_0.is_solved()
    assert var_1 is False
    var_2 = module_1.ismethoddescriptor(sudoku_board_0)
    var_3 = module_2.Bdb(var_2)
    with pytest.raises(module_0.SudokuBoardException):
        sudoku_board_0.get_row(var_3)

def test_case_4():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    with pytest.raises(module_0.SudokuBoardException):
        sudoku_board_0.get_column(sudoku_board_0)

def test_case_5():
    str_0 = "R )'KmDwP5Tp@!h]r^p"
    with pytest.raises(module_0.SudokuBoardException):
        module_0.SudokuBoard(str_0, str_0)

def test_case_6():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    var_0 = sudoku_board_0.is_valid_symbol(sudoku_board_0)
    assert var_0 is False

def test_case_7():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    var_0 = sudoku_board_0.is_valid_board()
    assert var_0 is True
    var_1 = sudoku_board_0.get_row(var_0)
    var_2 = sudoku_board_0.is_complete_group(var_1)
    ordered_dict_values_view_0 = module_3._OrderedDictValuesView(var_2)

def test_case_8():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    var_0 = sudoku_board_0.is_valid_board()
    assert var_0 is True

def test_case_9():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    var_0 = sudoku_board_0.is_solved()
    assert var_0 is False

def test_case_10():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    with pytest.raises(module_0.SudokuBoardException):
        sudoku_board_0.__getitem__(sudoku_board_0)

def test_case_11():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    var_0 = module_4.isrecursive(sudoku_board_0)
    assert var_0 is False

def test_case_12():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    with pytest.raises(module_0.SudokuBoardException):
        sudoku_board_0.__setitem__(sudoku_board_0, sudoku_board_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    var_0 = sudoku_board_0.solve()
    sudoku_board_0.is_complete_group(sudoku_board_0)

def test_case_14():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    with pytest.raises(module_0.SudokuBoardException):
        sudoku_board_0.get_subgrid(sudoku_board_0, sudoku_board_0)

def test_case_15():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    var_0 = module_5._InterruptHandler(sudoku_board_0)
    var_1 = module_1.Signature(return_annotation=sudoku_board_0, __validate_parameters__=var_0)
    var_2 = var_1.__repr__()
    assert var_2 == "<Signature () -> SudokuBoard(symbols='.................................................................................')>"
    with pytest.raises(module_0.SudokuBoardException):
        sudoku_board_0.is_valid_group(var_2)

def test_case_16():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    var_0 = sudoku_board_0.is_valid_board()
    assert var_0 is True
    sudoku_board_1 = module_0.SudokuBoard(size=var_0)
    assert sudoku_board_1.size is True
    assert sudoku_board_1.size_sqrt == 1
    with pytest.raises(module_0.SudokuBoardException):
        sudoku_board_1.get_row(var_0)

def test_case_17():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    var_0 = sudoku_board_0.is_valid_board()
    assert var_0 is True
    var_1 = sudoku_board_0.get_row(var_0)
    sudoku_board_1 = module_0.SudokuBoard(size=var_0)
    assert sudoku_board_1.size is True
    assert sudoku_board_1.size_sqrt == 1
    with pytest.raises(module_0.SudokuBoardException):
        sudoku_board_0.get_subgrid(var_0, sudoku_board_0)

def test_case_18():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    var_0 = sudoku_board_0.is_valid_board()
    assert var_0 is True
    var_1 = sudoku_board_0.get_row(var_0)
    var_2 = sudoku_board_0.is_complete_group(var_1)
    var_3 = sudoku_board_0.is_solved()
    assert var_3 is False
    sudoku_board_1 = module_0.SudokuBoard(size=var_3, solved=var_1)
    assert f'{type(sudoku_board_1).__module__}.{type(sudoku_board_1).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_1.size is False
    assert sudoku_board_1.size_sqrt == 0
    assert sudoku_board_1.strict is True
    with pytest.raises(module_0.SudokuBoardException):
        sudoku_board_0.__getitem__(var_1)

def test_case_19():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    var_0 = sudoku_board_0.is_valid_board()
    assert var_0 is True
    var_1 = sudoku_board_0.get_row(var_0)
    var_2 = sudoku_board_0.__str__()
    assert var_2 == '. . . | . . . | . . .\n. . . | . . . | . . .\n. . . | . . . | . . .\n------+-------+------\n. . . | . . . | . . .\n. . . | . . . | . . .\n. . . | . . . | . . .\n------+-------+------\n. . . | . . . | . . .\n. . . | . . . | . . .\n. . . | . . . | . . .'
    var_3 = sudoku_board_0.get_row(var_0)
    with pytest.raises(module_0.SudokuBoardException):
        module_0.SudokuBoard(var_3, solved=sudoku_board_0)

def test_case_20():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    var_0 = sudoku_board_0.is_valid_board()
    assert var_0 is True
    var_1 = sudoku_board_0.is_valid_board()
    assert var_1 is True
    var_2 = sudoku_board_0.get_row(var_1)
    var_3 = sudoku_board_0.is_complete_group(var_2)
    var_4 = sudoku_board_0.__str__()
    assert var_4 == '. . . | . . . | . . .\n. . . | . . . | . . .\n. . . | . . . | . . .\n------+-------+------\n. . . | . . . | . . .\n. . . | . . . | . . .\n. . . | . . . | . . .\n------+-------+------\n. . . | . . . | . . .\n. . . | . . . | . . .\n. . . | . . . | . . .'
    var_5 = sudoku_board_0.is_solved()
    assert var_5 is False
    var_6 = sudoku_board_0.get_symbols()
    assert var_6 == '.................................................................................'
    sudoku_board_1 = module_0.SudokuBoard(size=var_5, solved=var_2)
    assert f'{type(sudoku_board_1).__module__}.{type(sudoku_board_1).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_1.size is False
    assert sudoku_board_1.size_sqrt == 0
    assert sudoku_board_1.strict is True
    with pytest.raises(module_0.SudokuBoardException):
        sudoku_board_1.get_column(var_1)

@pytest.mark.xfail(strict=True)
def test_case_21():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    var_0 = sudoku_board_0.is_valid_board()
    assert var_0 is True
    var_1 = sudoku_board_0.get_row(var_0)
    var_2 = var_1.__setitem__(var_0, var_1)
    sudoku_board_0.is_complete_group(var_1)

def test_case_22():
    sudoku_board_0 = module_0.SudokuBoard()
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    var_0 = sudoku_board_0.__repr__()
    assert var_0 == "SudokuBoard(symbols='.................................................................................')"
    var_1 = sudoku_board_0.is_valid_board()
    assert var_1 is True
    var_2 = sudoku_board_0.get_row(var_1)
    var_3 = sudoku_board_0.is_complete_group(var_2)
    var_4 = sudoku_board_0.__str__()
    assert var_4 == '. . . | . . . | . . .\n. . . | . . . | . . .\n. . . | . . . | . . .\n------+-------+------\n. . . | . . . | . . .\n. . . | . . . | . . .\n. . . | . . . | . . .\n------+-------+------\n. . . | . . . | . . .\n. . . | . . . | . . .\n. . . | . . . | . . .'
    var_5 = sudoku_board_0.is_solved()
    assert var_5 is False
    var_6 = sudoku_board_0.get_symbols()
    assert var_6 == '.................................................................................'
    var_7 = sudoku_board_0.get_row(var_1)
    sudoku_board_1 = module_0.SudokuBoard(size=var_5, solved=var_2)
    assert f'{type(sudoku_board_1).__module__}.{type(sudoku_board_1).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_1.size is False
    assert sudoku_board_1.size_sqrt == 0
    assert sudoku_board_1.strict is True
    var_8 = sudoku_board_1.is_solved()
    with pytest.raises(module_0.SudokuBoardException):
        sudoku_board_0.__setitem__(sudoku_board_0, sudoku_board_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    list_0 = []
    sudoku_board_0 = module_0.SudokuBoard(solved=list_0)
    assert f'{type(sudoku_board_0).__module__}.{type(sudoku_board_0).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_0.size == 9
    assert sudoku_board_0.size_sqrt == 3
    assert sudoku_board_0.strict is True
    assert module_0.b1.size == 9
    assert module_0.b1.size_sqrt == 3
    assert module_0.b2.size == 9
    assert module_0.b2.size_sqrt == 3
    sudoku_board_1 = module_0.SudokuBoard(list_0, list_0, list_0)
    assert f'{type(sudoku_board_1).__module__}.{type(sudoku_board_1).__qualname__}' == 'basicsudoku.multisize.SudokuBoard'
    assert sudoku_board_1.size == 0
    assert sudoku_board_1.size_sqrt == 0
    assert sudoku_board_1.strict == []
    var_0 = sudoku_board_1.__repr__()
    assert var_0 == "SudokuBoard(symbols='')"
    module_6.runcall(*list_0)

def test_case_24():
    str_0 = 'Zu~\rcsD0}8\\GbP!G'
    none_type_0 = None
    with pytest.raises(module_0.SudokuBoardException):
        module_0.SudokuBoard(str_0, strict=none_type_0)

def test_case_25():
    int_0 = -1560
    with pytest.raises(module_0.SudokuBoardException):
        module_0.SudokuBoard(size=int_0)