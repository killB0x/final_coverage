# Automatically generated by Pynguin.
import tramway.tessellation.gwr.graph.exception as module_0
import builtins as module_1

def test_case_0():
    list_0 = []
    node_error_0 = module_0.NodeError(list_0)
    assert node_error_0.node == []

def test_case_1():
    bytes_0 = b'\xfc\xe1\\&\x83'
    list_0 = [bytes_0, bytes_0, bytes_0]
    not_implemented_error_0 = module_1.NotImplementedError(*list_0)
    list_1 = [not_implemented_error_0, list_0, bytes_0]
    abstract_graph_error_0 = module_0.AbstractGraphError(*list_1)
    missing_node_error_0 = module_0.MissingNodeError(bytes_0)
    assert missing_node_error_0.node == b'\xfc\xe1\\&\x83'
    edge_error_0 = module_0.EdgeError(not_implemented_error_0)
    assert f'{type(edge_error_0.edge).__module__}.{type(edge_error_0.edge).__qualname__}' == 'builtins.NotImplementedError'
    var_0 = abstract_graph_error_0.__str__()
    assert var_0 == ':class:`Graph` is an abstract class and cannot be instanciated'

def test_case_2():
    str_0 = 'f~"%~KM,?0&}2%[u|'
    missing_edge_error_0 = module_0.MissingEdgeError(str_0)
    assert missing_edge_error_0.edge == 'f~"%~KM,?0&}2%[u|'
    var_0 = missing_edge_error_0.__str__()
    assert var_0 == 'missing edge: f~"%~KM,?0&}2%[u|'
    missing_edge_error_1 = module_0.MissingEdgeError(var_0)
    assert missing_edge_error_1.edge == 'missing edge: f~"%~KM,?0&}2%[u|'
    graph_error_0 = module_0.GraphError()
    node_attribute_error_0 = module_0.NodeAttributeError(graph_error_0)
    assert f'{type(node_attribute_error_0.attribute).__module__}.{type(node_attribute_error_0.attribute).__qualname__}' == 'tramway.tessellation.gwr.graph.exception.GraphError'
    node_attribute_error_1 = module_0.NodeAttributeError(graph_error_0)
    assert f'{type(node_attribute_error_1.attribute).__module__}.{type(node_attribute_error_1.attribute).__qualname__}' == 'tramway.tessellation.gwr.graph.exception.GraphError'
    missing_node_error_0 = module_0.MissingNodeError(node_attribute_error_0)
    assert f'{type(missing_node_error_0.node).__module__}.{type(missing_node_error_0.node).__qualname__}' == 'tramway.tessellation.gwr.graph.exception.NodeAttributeError'

def test_case_3():
    list_0 = []
    node_attribute_error_0 = module_0.NodeAttributeError(list_0)
    assert node_attribute_error_0.attribute == []
    var_0 = node_attribute_error_0.__str__()
    assert var_0 == 'missing node attribute: []'
    var_1 = var_0.__str__()
    assert var_1 == 'missing node attribute: []'
    missing_node_error_0 = module_0.MissingNodeError(var_1)
    assert missing_node_error_0.node == 'missing node attribute: []'
    var_2 = missing_node_error_0.__str__()
    assert var_2 == 'missing node: missing node attribute: []'
    var_3 = var_2.__str__()
    assert var_3 == 'missing node: missing node attribute: []'
    var_4 = var_3.__str__()
    assert var_4 == 'missing node: missing node attribute: []'

def test_case_4():
    abstract_graph_error_0 = module_0.AbstractGraphError()
    graph_error_0 = module_0.GraphError()
    node_error_0 = module_0.NodeError(graph_error_0)
    assert f'{type(node_error_0.node).__module__}.{type(node_error_0.node).__qualname__}' == 'tramway.tessellation.gwr.graph.exception.GraphError'
    node_attribute_error_0 = module_0.NodeAttributeError(graph_error_0)
    assert f'{type(node_attribute_error_0.attribute).__module__}.{type(node_attribute_error_0.attribute).__qualname__}' == 'tramway.tessellation.gwr.graph.exception.GraphError'

def test_case_5():
    bool_0 = True
    edge_attribute_error_0 = module_0.EdgeAttributeError(bool_0)
    assert edge_attribute_error_0.attribute is True
    var_0 = edge_attribute_error_0.__str__()
    assert var_0 == 'missing edge attribute: True'
    var_1 = var_0.__str__()
    assert var_1 == 'missing edge attribute: True'