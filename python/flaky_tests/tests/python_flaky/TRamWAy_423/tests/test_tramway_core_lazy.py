# Automatically generated by Pynguin.
import pytest
import tramway.core.lazy as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'
    module_0.ro_property_assert(lazy_0, lazy_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'
    set_0 = set()
    var_0 = lazy_0.unload(set_0)
    module_0.ro_property_assert(set_0, lazy_0, property_name=lazy_0)

def test_case_2():
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'

@pytest.mark.xfail(strict=True)
def test_case_3():
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'
    none_type_0 = None
    lazy_0.__assertlazy__(none_type_0, lazy_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'
    set_0 = set()
    var_0 = lazy_0.unload(set_0)
    lazy_0.__lazyassert__(lazy_0, lazy_0, set_0)

def test_case_5():
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'
    var_0 = lazy_0.unload()

def test_case_6():
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'
    set_0 = set()
    var_0 = lazy_0.unload(set_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b'\xde\x00\xfa\xcb\x94J'
    module_0.PermissionError(bytes_0, bytes_0)

def test_case_8():
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'
    set_0 = set()
    var_0 = lazy_0.unload(set_0)
    var_1 = lazy_0.__returnlazy__(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'
    lazy_0.__tolazy__(lazy_0)

def test_case_10():
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'
    set_0 = set()
    var_0 = lazy_0.unload(set_0)
    var_1 = lazy_0.__fromlazy__(set_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b'\xd0\xe6\xb9\xca\x02\xef\x84oz'
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'
    lazy_0.__lazysetter__(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    var_0 = module_0.lightcopy(bool_0)
    var_1 = var_0.__str__()
    var_0.__fromlazy__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'
    set_0 = set()
    var_0 = lazy_0.unload(set_0)
    lazy_0.__assertlazy__(lazy_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'
    lazy_0.__lazyassert__(none_type_0, none_type_0, depth=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'
    none_type_0 = None
    var_0 = lazy_0.__lazyreturn__(none_type_0)
    lazy_0.__assertlazy__(none_type_0, lazy_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'
    var_0 = lazy_0.unload()
    str_0 = 'S--write-only'
    lazy_0.__lazyassert__(none_type_0, name=str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    lazy_0 = module_0.Lazy()
    assert f'{type(lazy_0).__module__}.{type(lazy_0).__qualname__}' == 'tramway.core.lazy.Lazy'
    set_0 = set()
    var_0 = lazy_0.unload(set_0)
    var_1 = lazy_0.unload(set_0)
    var_1.__returnlazy__(set_0, var_1)