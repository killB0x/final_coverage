# Automatically generated by Pynguin.
import pytest
import tramway.core.hdf5.store as module_0
import tramway.core.analyses.lazy as module_1
import tramway.core.analyses.base as module_2
import tramway.core.lazy as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'V7oi.2j8umWWA"Uz'
    module_0.load_rwa(str_0, lazy=str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    module_0.load_rwa(set_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -902.7
    module_0.load_rwa(float_0, float_0)

def test_case_3():
    complex_0 = 1.058959431967313j
    with pytest.raises(TypeError):
        module_0.save_rwa(complex_0, complex_0, force=complex_0, append=complex_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'V7oi.2j8umWWA"Uz'
    module_0.load_rwa(str_0)

def test_case_5():
    str_0 = 'mediumspringgreen'
    analyses_0 = module_1.Analyses()
    var_0 = module_0.save_rwa(str_0, analyses_0, force=str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'NUMvE_OF_TOP_NEIGHBOURS:'
    module_0.load_rwa(str_0)

def test_case_7():
    none_type_0 = None
    analyses_0 = module_1.Analyses()
    with pytest.raises(TypeError):
        module_0.save_rwa(none_type_0, analyses_0, overwrite=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'V7oi.2j8umWWA"Uz'
    module_0.RWAStore(str_0, unload=str_0)
    assert f'{type(r_w_a_store_0).__module__}.{type(r_w_a_store_0).__qualname__}' == 'tramway.core.hdf5.store.RWAStore'
    assert f'{type(module_0.RWAStore.unload).__module__}.{type(module_0.RWAStore.unload).__qualname__}' == 'builtins.member_descriptor'
    var_0 = r_w_a_store_0.poke(r_w_a_store_0, str_0, _stack=r_w_a_store_0, unload=r_w_a_store_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'f{P_`bi~\t\x0b(Oj]'
    module_0.RWAStore(str_0)
    assert f'{type(r_w_a_store_0).__module__}.{type(r_w_a_store_0).__qualname__}' == 'tramway.core.hdf5.store.RWAStore'
    assert f'{type(module_0.RWAStore.unload).__module__}.{type(module_0.RWAStore.unload).__qualname__}' == 'builtins.member_descriptor'
    var_0 = r_w_a_store_0.poke(r_w_a_store_0, r_w_a_store_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'phqTd%lTMvqXIK-Q8,'
    analyses_0 = module_1.Analyses(str_0, str_0)
    module_0.save_rwa(str_0, analyses_0, analyses_0, compress=str_0, append=analyses_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '6T:(X6]Q+'
    var_0 = module_0.load_rwa(str_0, lazy=str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tramway.core.analyses.lazy.Analyses'
    assert len(var_0) == 0
    module_0.save_rwa(str_0, var_0, str_0, overwrite=str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'NUMvE_OF_TOP_NEIGHBOURS:'
    analyses_0 = module_1.Analyses(metadata=str_0)
    module_0.save_rwa(str_0, analyses_0)

def test_case_13():
    str_0 = 'NUMvER_OF_TOP_NEIGHBOURS:'
    none_type_0 = None
    analyses_0 = module_1.Analyses()
    with pytest.raises(TypeError):
        module_0.save_rwa(str_0, analyses_0, compress=none_type_0, append=str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'medium7pringgreen'
    module_0.RWAStore(str_0)
    assert f'{type(r_w_a_store_0).__module__}.{type(r_w_a_store_0).__qualname__}' == 'tramway.core.hdf5.store.RWAStore'
    assert f'{type(module_0.RWAStore.unload).__module__}.{type(module_0.RWAStore.unload).__qualname__}' == 'builtins.member_descriptor'
    var_0 = r_w_a_store_0.special_load(str_0)
    analyses_0 = module_1.Analyses(var_0)
    var_1 = module_0.save_rwa(str_0, analyses_0, append=var_0)
    var_2 = var_0.__delitem__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'mediumsprinZgreen'
    module_0.RWAStore(str_0)
    assert f'{type(r_w_a_store_0).__module__}.{type(r_w_a_store_0).__qualname__}' == 'tramway.core.hdf5.store.RWAStore'
    assert f'{type(module_0.RWAStore.unload).__module__}.{type(module_0.RWAStore.unload).__qualname__}' == 'builtins.member_descriptor'
    var_0 = r_w_a_store_0.hasPythonType(str_0)
    analyses_0 = module_1.Analyses(var_0)
    var_1 = module_0.save_rwa(var_0, analyses_0, str_0, append=var_0, overwrite=var_0)

def test_case_16():
    str_0 = '6T:(X6]Q+'
    analyses_0 = module_1.Analyses(str_0)
    dict_0 = {analyses_0: analyses_0}
    var_0 = module_0.save_rwa(str_0, analyses_0, overwrite=dict_0)
    var_1 = analyses_0.__str__()
    float_0 = -289.428821
    var_2 = module_0.save_rwa(var_1, analyses_0, float_0, overwrite=float_0)
    with pytest.raises(ValueError):
        module_2.append_leaf(str_0, var_0)

def test_case_17():
    str_0 = '6T:(X6]Q+'
    analyses_0 = module_1.Analyses(str_0)
    var_0 = analyses_0.__nonzero__()
    var_1 = analyses_0.__str__()
    var_2 = module_0.load_rwa(str_0, var_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'tramway.core.analyses.lazy.Analyses'
    assert len(var_2) == 0

def test_case_18():
    str_0 = '6T:(X6]Q+'
    lazy_0 = module_3.Lazy()
    analyses_0 = module_1.Analyses(lazy_0)
    dict_0 = {analyses_0: analyses_0}
    var_0 = module_0.save_rwa(str_0, analyses_0, overwrite=dict_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'V7oi.2j8umWWA"Uz'
    module_0.RWAStore(str_0, unload=str_0)
    assert f'{type(r_w_a_store_0).__module__}.{type(r_w_a_store_0).__qualname__}' == 'tramway.core.hdf5.store.RWAStore'
    assert f'{type(module_0.RWAStore.unload).__module__}.{type(module_0.RWAStore.unload).__qualname__}' == 'builtins.member_descriptor'
    none_type_0 = None
    var_0 = r_w_a_store_0.poke(r_w_a_store_0, none_type_0, _stack=r_w_a_store_0, unload=r_w_a_store_0)
    var_1 = r_w_a_store_0.peekStorable(r_w_a_store_0, r_w_a_store_0, str_0)