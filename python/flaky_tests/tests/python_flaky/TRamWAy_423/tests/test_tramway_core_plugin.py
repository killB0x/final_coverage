# Automatically generated by Pynguin.
import pytest
import re as module_0
import tramway.core.plugin as module_1
import enum as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.RegexFlag.TEMPLATE
    module_1.list_plugins(var_0, var_0, var_0, var_0, verbose=var_0)

def test_case_1():
    dict_0 = module_0.purge()
    var_0 = module_1.list_plugins(dict_0, dict_0, dict_0, dict_0, verbose=dict_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -975.18
    module_1.list_plugins(float_0, float_0, float_0, require=float_0)

def test_case_3():
    none_type_0 = None
    plugins_0 = module_1.Plugins(none_type_0, none_type_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_0 = plugins_0.pop(plugins_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = module_0.purge()
    dict_0.__nonzero__()

def test_case_5():
    tuple_0 = ()
    plugins_0 = module_1.Plugins(tuple_0, tuple_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    plugins_0 = module_1.Plugins(none_type_0, none_type_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    plugins_0.__missing__(none_type_0)

def test_case_7():
    float_0 = -975.1827721047379
    none_type_0 = None
    plugins_0 = module_1.Plugins(none_type_0, none_type_0, force=float_0, require=float_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_0 = plugins_0.__setitem__(plugins_0, none_type_0)
    assert len(plugins_0) == 1
    var_1 = plugins_0.pop(float_0, plugins_0)
    var_2 = plugins_0.__repr__()
    assert var_2 == "Plugins{in 'None'}{Plugins{in 'None'}{...}: None}"
    var_3 = module_1.add_arguments(var_2, var_1)
    var_4 = var_1.keys()
    var_5 = plugins_0.__setitem__(var_0, var_4)
    var_6 = module_1.short_options(plugins_0)
    with pytest.raises(TypeError):
        plugins_0.update(var_3)

def test_case_8():
    none_type_0 = None
    var_0 = module_1.list_plugins(none_type_0, none_type_0)
    var_1 = var_0.pop(var_0, var_0)
    var_2 = var_1.__repr__()
    var_3 = var_1.__setitem__(var_2, var_1)
    var_4 = module_1.add_arguments(var_2, var_1)

def test_case_9():
    dict_0 = {}
    var_0 = module_1.add_arguments(dict_0, dict_0)

def test_case_10():
    none_type_0 = None
    plugins_0 = module_1.Plugins(none_type_0, none_type_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_0 = plugins_0.__len__()
    assert var_0 == 0

def test_case_11():
    none_type_0 = None
    plugins_0 = module_1.Plugins(none_type_0, none_type_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_0 = module_1.short_options(plugins_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    var_1 = module_1.add_arguments(dict_0, dict_0, dict_0)
    module_0.search(dict_0, dict_0)

def test_case_13():
    none_type_0 = None
    plugins_0 = module_1.Plugins(none_type_0, none_type_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_0 = plugins_0.__setitem__(none_type_0, none_type_0)
    assert len(plugins_0) == 1

def test_case_14():
    float_0 = -975.18
    none_type_0 = None
    plugins_0 = module_1.Plugins(none_type_0, none_type_0, force=float_0, require=float_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_0 = plugins_0.items()

def test_case_15():
    float_0 = -975.1827721047379
    none_type_0 = None
    plugins_0 = module_1.Plugins(none_type_0, none_type_0, force=float_0, require=float_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_0 = plugins_0.__iter__()

def test_case_16():
    float_0 = -975.1827721047379
    none_type_0 = None
    plugins_0 = module_1.Plugins(none_type_0, none_type_0, force=float_0, require=float_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_0 = plugins_0.get(plugins_0, plugins_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(var_0) == 0

def test_case_17():
    var_0 = module_2._EnumDict()
    var_1 = module_1.short_options(var_0)

def test_case_18():
    none_type_0 = None
    plugins_0 = module_1.Plugins(none_type_0, none_type_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_0 = plugins_0.pop(plugins_0, none_type_0)
    var_1 = plugins_0.__setitem__(none_type_0, none_type_0)
    assert len(plugins_0) == 1

def test_case_19():
    float_0 = -975.1827721047379
    none_type_0 = None
    plugins_0 = module_1.Plugins(none_type_0, none_type_0, force=float_0, require=float_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_0 = module_1.short_options(plugins_0)
    with pytest.raises(TypeError):
        plugins_0.update(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    float_0 = -975.1827721047379
    none_type_0 = None
    plugins_0 = module_1.Plugins(none_type_0, none_type_0, force=float_0, require=float_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    plugins_0.__nonzero__()

@pytest.mark.xfail(strict=True)
def test_case_21():
    float_0 = -975.1827721047379
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.list_plugins(none_type_1, none_type_0)
    var_1 = module_1.list_plugins(none_type_0, float_0, verbose=float_0)
    plugins_0 = module_1.Plugins(none_type_1, none_type_1, force=float_0, require=float_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_2 = plugins_0.pop(float_0, plugins_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(var_2) == 0
    var_3 = plugins_0.__repr__()
    assert var_3 == "Plugins{in 'None'}{}"
    var_4 = plugins_0.__setitem__(var_3, var_2)
    var_5 = var_0.__dir__()
    var_6 = var_2.__repr__()
    assert var_6 == 'Plugins{in \'None\'}{"Plugins{in \'None\'}{}": Plugins{in \'None\'}{...}}'
    var_7 = float_0.__repr__()
    var_8 = module_1.add_arguments(float_0, plugins_0)
    var_8.update(var_8)

def test_case_22():
    float_0 = -975.1827721047379
    none_type_0 = None
    plugins_0 = module_1.Plugins(none_type_0, none_type_0, force=float_0, require=float_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_0 = plugins_0.__setitem__(plugins_0, none_type_0)
    assert len(plugins_0) == 1
    var_1 = plugins_0.pop(float_0, plugins_0)
    var_2 = plugins_0.__repr__()
    assert var_2 == "Plugins{in 'None'}{Plugins{in 'None'}{...}: None}"
    var_3 = module_1.add_arguments(var_2, var_1)
    var_4 = module_1.short_options(plugins_0)
    with pytest.raises(TypeError):
        plugins_0.update(var_1)

def test_case_23():
    none_type_0 = None
    plugins_0 = module_1.Plugins(none_type_0, none_type_0, force=none_type_0, require=none_type_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_0 = plugins_0.__repr__()
    assert var_0 == "Plugins{in 'None'}{}"
    dict_0 = {none_type_0: var_0, plugins_0: var_0, none_type_0: plugins_0, none_type_0: none_type_0}
    var_1 = module_1.short_options(dict_0)

def test_case_24():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.list_plugins(none_type_1, none_type_0)
    plugins_0 = module_1.Plugins(none_type_1, none_type_1, force=var_0, require=var_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_1 = plugins_0.pop(var_0, plugins_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(var_1) == 0
    var_2 = plugins_0.__repr__()
    assert var_2 == "Plugins{in 'None'}{}"
    var_3 = plugins_0.__setitem__(var_2, var_1)
    var_4 = var_2.__dir__()
    var_5 = var_2.__dir__()
    var_6 = module_1.add_arguments(var_2, plugins_0)

def test_case_25():
    none_type_0 = None
    var_0 = module_1.list_plugins(none_type_0, none_type_0)
    plugins_0 = module_1.Plugins(none_type_0, none_type_0, force=var_0, require=var_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_1 = plugins_0.pop(var_0, plugins_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(var_1) == 0
    var_2 = var_0.__repr__()
    assert var_2 == '{}'
    var_3 = plugins_0.__setitem__(var_2, var_1)
    var_4 = module_1.list_plugins(none_type_0, none_type_0, require=var_2)
    var_5 = var_1.__repr__()
    assert var_5 == "Plugins{in 'None'}{'{}': Plugins{in 'None'}{...}}"
    dict_0 = {none_type_0: var_0, plugins_0: var_5, none_type_0: plugins_0, none_type_0: var_1}
    var_6 = module_1.add_arguments(var_2, plugins_0, var_3)
    var_7 = module_1.short_options(dict_0)
    var_8 = plugins_0.__repr__()
    assert var_8 == "Plugins{in 'None'}{'{}': Plugins{in 'None'}{...}}"
    tuple_0 = (var_3,)
    tuple_1 = (tuple_0, var_7, var_8, var_8)
    var_9 = var_0.__setitem__(var_5, tuple_1)
    var_10 = module_1.add_arguments(var_5, var_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    float_0 = -975.1827721047379
    none_type_0 = None
    var_0 = module_1.list_plugins(none_type_0, none_type_0)
    var_1 = var_0.__len__()
    assert var_1 == 0
    var_2 = var_0.__repr__()
    assert var_2 == '{}'
    var_3 = var_0.__setitem__(var_2, var_2)
    var_4 = var_0.__dir__()
    var_5 = module_1.short_options(var_0)
    module_1.add_arguments(float_0, var_0)

def test_case_27():
    float_0 = -975.1827721047379
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.list_plugins(none_type_1, none_type_0)
    none_type_2 = None
    plugins_0 = module_1.Plugins(none_type_1, none_type_2, force=float_0, require=float_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_1 = plugins_0.__setitem__(plugins_0, none_type_0)
    assert len(plugins_0) == 1
    var_2 = plugins_0.pop(float_0, plugins_0)
    var_3 = plugins_0.__repr__()
    assert var_3 == "Plugins{in 'None'}{Plugins{in 'None'}{...}: None}"
    var_4 = module_1.add_arguments(var_3, var_2)
    var_5 = var_4.__repr__()
    var_6 = plugins_0.__setitem__(var_1, var_5)
    var_7 = var_5.__dir__()
    var_8 = var_4.__iter__()
    var_9 = module_1.short_options(plugins_0)
    var_10 = var_2.update(var_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    float_0 = -975.1827721047379
    none_type_0 = None
    var_0 = module_1.list_plugins(none_type_0, none_type_0)
    plugins_0 = module_1.Plugins(none_type_0, none_type_0, force=float_0, require=float_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_1 = plugins_0.pop(float_0, plugins_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(var_1) == 0
    var_2 = var_0.__repr__()
    var_3 = plugins_0.__setitem__(var_2, var_1)
    var_4 = var_0.__dir__()
    var_5 = module_1.short_options(plugins_0)
    var_6 = float_0.__repr__()
    var_7 = module_1.add_arguments(none_type_0, var_1, plugins_0)
    var_0.get(var_5, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    float_0 = -975.1827721047379
    none_type_0 = None
    plugins_0 = module_1.Plugins(none_type_0, none_type_0, force=float_0, require=float_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_0 = none_type_0.__dir__()
    dict_0 = {none_type_0: var_0, plugins_0: var_0, none_type_0: plugins_0, none_type_0: plugins_0}
    var_1 = module_1.short_options(dict_0)
    var_0.update(var_0)

def test_case_30():
    float_0 = -975.1827721047379
    none_type_0 = None
    var_0 = module_1.list_plugins(none_type_0, none_type_0)
    plugins_0 = module_1.Plugins(none_type_0, none_type_0, force=float_0, require=float_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_1 = plugins_0.pop(float_0, plugins_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(var_1) == 0
    var_2 = var_0.__repr__()
    var_3 = plugins_0.__setitem__(var_2, var_1)
    var_4 = var_1.__repr__()
    assert var_4 == "Plugins{in 'None'}{'{}': Plugins{in 'None'}{...}}"
    var_5 = module_1.add_arguments(var_2, plugins_0, var_3)
    var_6 = plugins_0.__repr__()
    assert var_6 == "Plugins{in 'None'}{'{}': Plugins{in 'None'}{...}}"
    tuple_0 = (var_4,)
    tuple_1 = (tuple_0, var_3, var_6, var_6)
    var_7 = var_0.__setitem__(var_4, tuple_1)
    var_8 = module_1.add_arguments(var_4, var_0)
    var_9 = module_1.short_options(var_0)
    var_10 = var_8.__dir__()

def test_case_31():
    none_type_0 = None
    var_0 = module_1.list_plugins(none_type_0, none_type_0)
    plugins_0 = module_1.Plugins(none_type_0, none_type_0, force=var_0, require=var_0)
    assert f'{type(plugins_0).__module__}.{type(plugins_0).__qualname__}' == 'tramway.core.plugin.Plugins'
    assert len(plugins_0) == 0
    assert f'{type(module_1.Plugins.dirname).__module__}.{type(module_1.Plugins.dirname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.force).__module__}.{type(module_1.Plugins.force).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.lookup).__module__}.{type(module_1.Plugins.lookup).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.modules).__module__}.{type(module_1.Plugins.modules).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.package).__module__}.{type(module_1.Plugins.package).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.post_load).__module__}.{type(module_1.Plugins.post_load).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.require).__module__}.{type(module_1.Plugins.require).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_1.Plugins.verbose).__module__}.{type(module_1.Plugins.verbose).__qualname__}' == 'builtins.member_descriptor'
    var_1 = plugins_0.__repr__()
    assert var_1 == "Plugins{in 'None'}{}"
    dict_0 = {none_type_0: var_0, plugins_0: var_1, none_type_0: plugins_0, none_type_0: none_type_0}
    var_2 = module_1.short_options(dict_0)
    tuple_0 = (dict_0, var_2, dict_0, dict_0)
    var_3 = var_0.__setitem__(var_1, tuple_0)
    var_4 = module_1.add_arguments(var_1, var_0)