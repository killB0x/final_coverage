# Automatically generated by Pynguin.
import pytest
import tramway.core.analyses.base as module_0

def test_case_0():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    module_0.format_analyses(analyses_0, analyses_0, metadata=analyses_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b''
    module_0.map_analyses(bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.map_analyses(bool_0, bool_0, bool_0, bool_0, bool_0)

def test_case_4():
    list_0 = []
    with pytest.raises(TypeError):
        module_0.label_paths(list_0, list_0)

def test_case_5():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    with pytest.raises(TypeError):
        module_0.find_artefacts(analyses_0, analyses_0)

def test_case_6():
    list_0 = []
    var_0 = module_0.find_artefacts(list_0, list_0)

def test_case_7():
    int_0 = -700
    with pytest.raises(TypeError):
        module_0.find_artefacts(int_0, int_0, quantifiers=int_0, fullnode=int_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    module_0.format_analyses(analyses_0, format_standalone_root=analyses_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    list_1 = [list_0]
    module_0.append_leaf(list_1, list_1)

def test_case_10():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = module_0.append_leaf(analyses_0, analyses_0)
    var_1 = analyses_0.add(analyses_0, comment=var_0)
    assert len(analyses_0) == 1
    with pytest.raises(TypeError):
        module_0.find_artefacts(var_0, var_0, analyses_0, analyses_0)

def test_case_11():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = module_0.extract_analysis(analyses_0, analyses_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_0) == 0

def test_case_12():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.__nonzero__()
    assert var_0 is False
    var_1 = module_0.coerce_labels_and_metadata(analyses_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_1) == 0

@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b'~-w\xde%T]/_\xa6*\xb5*-(\x18Z\x182'
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    analyses_0.__missing__(bytes_0)

def test_case_14():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.__iter__()

def test_case_15():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = module_0.extract_analysis(analyses_0, analyses_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_0) == 0
    var_1 = analyses_0.__contains__(var_0)
    with pytest.raises(TypeError):
        module_0.find_artefacts(var_0, analyses_0, var_1, return_subtree=var_1)

def test_case_16():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = module_0.coerce_labels_and_metadata(analyses_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = 'ZRfRGkDQ'
    dict_0 = {str_0: str_0}
    comments_view_0 = module_0.CommentsView(dict_0)
    assert f'{type(comments_view_0).__module__}.{type(comments_view_0).__qualname__}' == 'tramway.core.analyses.base.CommentsView'
    comments_view_0.items()

@pytest.mark.xfail(strict=True)
def test_case_18():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = analyses_0.__setitem__(analyses_0, none_type_0)
    assert len(analyses_0) == 1
    var_1 = module_0.format_analyses(analyses_0, metadata=analyses_0)
    analyses_0.add(analyses_0, analyses_0, analyses_0)

def test_case_19():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(analyses_0, raw=analyses_0)
    assert len(analyses_0) == 1

def test_case_20():
    bool_0 = True
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(bool_0, comment=analyses_0, raw=analyses_0)
    assert len(analyses_0) == 1

@pytest.mark.xfail(strict=True)
def test_case_21():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(analyses_0, analyses_0, analyses_0, analyses_0)
    assert len(analyses_0) == 1
    module_0.format_analyses(analyses_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.append_leaf(list_0, list_1)

@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    instances_view_0 = module_0.InstancesView(none_type_0)
    assert f'{type(instances_view_0).__module__}.{type(instances_view_0).__qualname__}' == 'tramway.core.analyses.base.InstancesView'
    instances_view_0.items()

def test_case_24():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    with pytest.raises(TypeError):
        module_0.find_artefacts(analyses_0, analyses_0, analyses_0, analyses_0, return_subtree=analyses_0)

def test_case_25():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    analyses_view_0 = analyses_0.keys()
    var_0 = analyses_0.add(analyses_view_0, raw=analyses_0)
    assert len(analyses_0) == 1
    var_1 = module_0.format_analyses(analyses_0)
    assert var_1 == "<class 'NoneType'>\n\t[0] <class 'dict_keys'>"

@pytest.mark.xfail(strict=True)
def test_case_26():
    list_0 = []
    list_1 = [list_0]
    module_0.find_artefacts(list_1, list_1)

def test_case_27():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.__nonzero__()
    assert var_0 is False
    none_type_0 = None
    var_1 = analyses_0.keys()
    var_2 = analyses_0.add(none_type_0, raw=var_1)
    assert len(analyses_0) == 1
    var_3 = module_0.format_analyses(analyses_0, metadata=analyses_0)
    assert var_3 == "<class 'NoneType'>\n\t[0] <class 'NoneType'>"
    var_4 = module_0.coerce_labels_and_metadata(analyses_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_4) == 1
    with pytest.raises(ValueError):
        module_0.append_leaf(var_1, var_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_28():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.find_artefacts(list_1, list_1, list_1, list_1, list_0)

def test_case_29():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = module_0.format_analyses(analyses_0, metadata=analyses_0)
    assert var_0 == "<Analyses <class 'NoneType'>>"
    var_1 = analyses_0.add(var_0, comment=var_0, raw=var_0)
    assert len(analyses_0) == 1
    with pytest.raises(TypeError):
        module_0.find_artefacts(analyses_0, var_0, fullnode=var_1, return_subtree=analyses_0)

def test_case_30():
    bytes_0 = b'z\x1aK\xdc\xf2`:#\xa3t\xb2[Qm'
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(analyses_0, raw=bytes_0)
    assert len(analyses_0) == 1

def test_case_31():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    comments_view_0 = module_0.CommentsView(analyses_0)
    assert f'{type(comments_view_0).__module__}.{type(comments_view_0).__qualname__}' == 'tramway.core.analyses.base.CommentsView'
    assert len(comments_view_0) == 0
    float_0 = -1932.1514
    var_0 = analyses_0.__setitem__(float_0, comments_view_0)
    assert len(analyses_0) == 1
    assert len(comments_view_0) == 1
    var_1 = analyses_0.add(comments_view_0)
    assert len(analyses_0) == 2
    assert len(comments_view_0) == 2
    var_2 = comments_view_0.__str__()
    var_3 = module_0.coerce_labels_and_metadata(analyses_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_3) == 2
    var_4 = var_3.__str__()
    var_5 = module_0.format_analyses(analyses_0)
    assert var_5 == "<class 'NoneType'>\n\t[-1932] <class 'tramway.core.analyses.base.CommentsView'>\n\t[0] <class 'tramway.core.analyses.base.CommentsView'>"
    with pytest.raises(TypeError):
        module_0.find_artefacts(var_0, var_3, quantifiers=var_2, return_subtree=var_2)

@pytest.mark.xfail(strict=True)
def test_case_32():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = module_0.extract_analysis(analyses_0, analyses_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_0) == 0
    analyses_0.__getitem__(var_0)

def test_case_33():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = module_0.format_analyses(analyses_0)
    assert var_0 == "<Analyses <class 'NoneType'>>"

@pytest.mark.xfail(strict=True)
def test_case_34():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.__setitem__(analyses_0, analyses_0)
    assert len(analyses_0) == 1
    module_0.coerce_labels_and_metadata(analyses_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(analyses_0, analyses_0)
    assert len(analyses_0) == 1
    analyses_0.__delitem__(var_0)

def test_case_36():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(analyses_0, comment=analyses_0, raw=analyses_0)
    assert len(analyses_0) == 1
    var_1 = analyses_0.add(var_0, comment=var_0, raw=var_0)
    assert len(analyses_0) == 2
    var_2 = module_0.coerce_labels_and_metadata(analyses_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_2) == 2

@pytest.mark.xfail(strict=True)
def test_case_37():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.__setitem__(analyses_0, analyses_0)
    assert len(analyses_0) == 1
    var_1 = analyses_0.add(analyses_0, raw=analyses_0)
    assert len(analyses_0) == 2
    module_0.format_analyses(analyses_0)

def test_case_38():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(analyses_0, comment=analyses_0, raw=analyses_0)
    assert len(analyses_0) == 1

@pytest.mark.xfail(strict=True)
def test_case_39():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(analyses_0, comment=analyses_0, raw=analyses_0)
    assert len(analyses_0) == 1
    module_0.extract_analysis(analyses_0, analyses_0)

def test_case_40():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(analyses_0)
    assert len(analyses_0) == 1
    var_1 = module_0.coerce_labels_and_metadata(analyses_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_1) == 1

@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = 'a*]NC.V},Ipav'
    comments_view_0 = module_0.CommentsView(str_0)
    assert f'{type(comments_view_0).__module__}.{type(comments_view_0).__qualname__}' == 'tramway.core.analyses.base.CommentsView'
    comments_view_0.values()

@pytest.mark.xfail(strict=True)
def test_case_42():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(analyses_0, raw=analyses_0)
    assert len(analyses_0) == 1
    module_0.format_analyses(analyses_0)

def test_case_43():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(analyses_0, comment=analyses_0, raw=analyses_0)
    assert len(analyses_0) == 1
    var_1 = module_0.coerce_labels_and_metadata(analyses_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_1) == 1

@pytest.mark.xfail(strict=True)
def test_case_44():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    module_0.format_analyses(analyses_0, node=analyses_0)

def test_case_45():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    instances_view_0 = module_0.InstancesView(analyses_0)
    assert f'{type(instances_view_0).__module__}.{type(instances_view_0).__qualname__}' == 'tramway.core.analyses.base.InstancesView'
    assert len(instances_view_0) == 0
    var_0 = instances_view_0.values()
    var_1 = analyses_0.add(instances_view_0)
    assert len(analyses_0) == 1
    assert len(instances_view_0) == 1
    var_2 = analyses_0.__len__()
    assert var_2 == 1
    var_3 = module_0.coerce_labels_and_metadata(analyses_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_3) == 1
    var_4 = analyses_0.add(var_2, comment=var_2, raw=var_2)
    assert len(analyses_0) == 2
    assert len(instances_view_0) == 2
    assert len(var_3) == 2
    var_5 = instances_view_0.pop(var_2)
    assert len(analyses_0) == 1
    assert len(instances_view_0) == 1
    assert len(var_3) == 1
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_5) == 0
    int_0 = -3472
    var_6 = instances_view_0.__str__()
    var_7 = var_3.add(var_2, var_6, raw=int_0)
    assert len(analyses_0) == 2
    assert len(instances_view_0) == 2
    assert len(var_3) == 2
    float_0 = 395.753
    with pytest.raises(TypeError):
        module_0.find_artefacts(float_0, analyses_0, float_0)

def test_case_46():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    instances_view_0 = module_0.InstancesView(analyses_0)
    assert f'{type(instances_view_0).__module__}.{type(instances_view_0).__qualname__}' == 'tramway.core.analyses.base.InstancesView'
    assert len(instances_view_0) == 0
    var_0 = analyses_0.add(instances_view_0, comment=instances_view_0, raw=instances_view_0)
    assert len(analyses_0) == 1
    assert len(instances_view_0) == 1
    int_0 = -3468
    var_1 = instances_view_0.__str__()
    var_2 = analyses_0.add(analyses_0, var_1, raw=int_0)
    assert len(analyses_0) == 2
    assert len(instances_view_0) == 2
    with pytest.raises(TypeError):
        module_0.find_artefacts(analyses_0, analyses_0, quantifiers=var_0, fullnode=instances_view_0)

def test_case_47():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.__str__()
    var_1 = analyses_0.add(analyses_0, var_0, analyses_0, analyses_0)
    assert len(analyses_0) == 1

@pytest.mark.xfail(strict=True)
def test_case_48():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(analyses_0, comment=analyses_0)
    assert len(analyses_0) == 1
    analyses_0.add(analyses_0, analyses_0)

def test_case_49():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = analyses_0.add(analyses_0, analyses_0, analyses_0)
    assert len(analyses_0) == 1
    var_1 = analyses_0.add(analyses_0, raw=none_type_0)
    assert len(analyses_0) == 2
    var_2 = analyses_0.add(analyses_0)
    assert len(analyses_0) == 3
    with pytest.raises(TypeError):
        module_0.find_artefacts(analyses_0, var_1, quantifiers=var_2)

@pytest.mark.xfail(strict=True)
def test_case_50():
    list_0 = []
    list_1 = [list_0]
    module_0.find_artefacts(list_1, list_1, list_0, fullnode=list_1)

@pytest.mark.xfail(strict=True)
def test_case_51():
    list_0 = []
    list_1 = [list_0]
    comments_view_0 = module_0.CommentsView(list_0)
    assert f'{type(comments_view_0).__module__}.{type(comments_view_0).__qualname__}' == 'tramway.core.analyses.base.CommentsView'
    comments_view_0.__getitem__(list_1)

def test_case_52():
    bytes_0 = b'\xe0\x89'
    list_0 = []
    list_1 = [list_0, bytes_0]
    bool_0 = True
    var_0 = module_0.find_artefacts(bool_0, list_0, bytes_0, list_1)

def test_case_53():
    bytes_0 = b'\xe0\x89'
    list_0 = []
    dict_0 = {}
    var_0 = module_0.find_artefacts(bytes_0, list_0, bytes_0, fullnode=dict_0)
    tuple_0 = (var_0,)
    var_1 = module_0.find_artefacts(tuple_0, var_0, quantifiers=bytes_0)

def test_case_54():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    instances_view_0 = module_0.InstancesView(analyses_0)
    assert f'{type(instances_view_0).__module__}.{type(instances_view_0).__qualname__}' == 'tramway.core.analyses.base.InstancesView'
    assert len(instances_view_0) == 0
    var_0 = analyses_0.add(instances_view_0)
    assert len(analyses_0) == 1
    assert len(instances_view_0) == 1
    var_1 = module_0.format_analyses(analyses_0)
    assert var_1 == "<class 'NoneType'>\n\t[0] <class 'tramway.core.analyses.base.InstancesView'>"
    var_2 = module_0.append_leaf(analyses_0, analyses_0, instances_view_0)

def test_case_55():
    list_0 = []
    dict_0 = {}
    int_0 = 16
    var_0 = module_0.find_artefacts(int_0, list_0, fullnode=dict_0, return_subtree=int_0)

def test_case_56():
    list_0 = []
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(analyses_0)
    assert len(analyses_0) == 1
    list_1 = [list_0, list_0, list_0]
    with pytest.raises(TypeError):
        module_0.find_artefacts(analyses_0, list_1, quantifiers=var_0)

def test_case_57():
    list_0 = []
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    list_1 = [list_0, list_0, list_0]
    with pytest.raises(ValueError):
        module_0.find_artefacts(analyses_0, list_1, return_subtree=list_0)

@pytest.mark.xfail(strict=True)
def test_case_58():
    int_0 = 0
    list_0 = [int_0, int_0]
    module_0.map_analyses(list_0, list_0, int_0, metadata=list_0, depth=list_0)

def test_case_59():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    analyses_view_0 = module_0.AnalysesView(analyses_0)
    assert f'{type(analyses_view_0).__module__}.{type(analyses_view_0).__qualname__}' == 'tramway.core.analyses.base.AnalysesView'
    assert len(analyses_view_0) == 0
    var_0 = analyses_0.add(analyses_view_0, raw=analyses_0)
    assert len(analyses_0) == 1
    assert len(analyses_view_0) == 1
    var_1 = module_0.format_analyses(analyses_0)
    assert var_1 == "<class 'NoneType'>\n\t[0] <class 'tramway.core.analyses.base.AnalysesView'>"

@pytest.mark.xfail(strict=True)
def test_case_60():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.__setitem__(analyses_0, analyses_0)
    assert len(analyses_0) == 1
    module_0.format_analyses(analyses_0)

def test_case_61():
    list_0 = []
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(analyses_0, analyses_0, analyses_0)
    assert len(analyses_0) == 1
    var_1 = analyses_0.add(analyses_0)
    assert len(analyses_0) == 2
    list_1 = [list_0, list_0, var_0, analyses_0, list_0, list_0, analyses_0]
    with pytest.raises(ValueError):
        module_0.find_artefacts(analyses_0, list_1, quantifiers=var_1)

@pytest.mark.xfail(strict=True)
def test_case_62():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.__setitem__(analyses_0, analyses_0)
    assert len(analyses_0) == 1
    module_0.append_leaf(analyses_0, analyses_0, analyses_0)

def test_case_63():
    list_0 = []
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    list_1 = [list_0, list_0, analyses_0, list_0, list_0]
    with pytest.raises(KeyError):
        module_0.find_artefacts(analyses_0, list_1, analyses_0)

@pytest.mark.xfail(strict=True)
def test_case_64():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    str_0 = 'grad_selection_angle'
    tuple_0 = (analyses_0, str_0)
    module_0.extract_analysis(analyses_0, tuple_0)

def test_case_65():
    list_0 = []
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    complex_0 = 1j
    var_0 = analyses_0.add(complex_0)
    assert len(analyses_0) == 1
    list_1 = [list_0, list_0, analyses_0, list_0, list_0]
    with pytest.raises(KeyError):
        module_0.find_artefacts(analyses_0, list_1, analyses_0)

@pytest.mark.xfail(strict=True)
def test_case_66():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    instances_view_0 = module_0.InstancesView(analyses_0)
    assert f'{type(instances_view_0).__module__}.{type(instances_view_0).__qualname__}' == 'tramway.core.analyses.base.InstancesView'
    assert len(instances_view_0) == 0
    var_0 = analyses_0.add(instances_view_0)
    assert len(analyses_0) == 1
    assert len(instances_view_0) == 1
    var_1 = analyses_0.__len__()
    assert var_1 == 1
    var_2 = module_0.coerce_labels_and_metadata(analyses_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_2) == 1
    var_3 = analyses_0.add(var_1, comment=var_1, raw=var_1)
    assert len(analyses_0) == 2
    assert len(instances_view_0) == 2
    assert len(var_2) == 2
    var_4 = var_0.__str__()
    module_0.format_analyses(analyses_0, node=var_3, global_prefix=var_4, metadata=var_0)

@pytest.mark.xfail(strict=True)
def test_case_67():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.__contains__(analyses_0)
    assert var_0 is False
    none_type_0 = None
    var_1 = analyses_0.__iter__()
    instances_view_0 = module_0.InstancesView(none_type_0)
    var_2 = analyses_0.__setitem__(var_1, var_1)
    assert len(analyses_0) == 1
    var_3 = analyses_0.__nonzero__()
    assert var_3 is True
    var_4 = analyses_0.__iter__()
    module_0.format_analyses(analyses_0, node=var_2, metadata=analyses_0)

@pytest.mark.xfail(strict=True)
def test_case_68():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = module_0.extract_analysis(analyses_0, analyses_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_0) == 0
    var_1 = analyses_0.__nonzero__()
    var_2 = analyses_0.__iter__()
    var_3 = analyses_0.add(var_2, raw=var_2)
    assert len(analyses_0) == 1
    var_4 = module_0.format_analyses(analyses_0, metadata=analyses_0)
    assert var_4 == "<class 'NoneType'>\n\t[0] <class 'dict_keyiterator'>"
    bytes_0 = b'\x86\xfe\x9cx<\xee\xb5\xe4\xf9\xc3\xb1y\xa6\x07=`d\xf2\x0f'
    comments_view_0 = module_0.CommentsView(analyses_0)
    assert len(comments_view_0) == 1
    comments_view_0.__getitem__(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_69():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(analyses_0, raw=analyses_0)
    assert len(analyses_0) == 1
    analyses_1 = module_0.Analyses(metadata=analyses_0)
    module_0.coerce_labels_and_metadata(analyses_1)

@pytest.mark.xfail(strict=True)
def test_case_70():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    str_0 = "nW'dTLU[#p]zK-="
    module_0.format_analyses(analyses_0, metadata=str_0)

@pytest.mark.xfail(strict=True)
def test_case_71():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(analyses_0)
    assert len(analyses_0) == 1
    var_1 = analyses_0.__len__()
    assert var_1 == 1
    var_2 = module_0.coerce_labels_and_metadata(analyses_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_2) == 1
    var_3 = analyses_0.add(var_1, comment=var_1, raw=var_1)
    assert len(analyses_0) == 2
    assert len(var_2) == 2
    var_4 = var_3.__str__()
    var_5 = var_2.add(var_0)
    assert len(analyses_0) == 3
    assert len(var_2) == 3
    none_type_0 = None
    var_6 = module_0.CommentsView(analyses_0)
    assert len(var_6) == 3
    var_6.__setitem__(none_type_0, var_2)

def test_case_72():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    instances_view_0 = module_0.InstancesView(analyses_0)
    assert f'{type(instances_view_0).__module__}.{type(instances_view_0).__qualname__}' == 'tramway.core.analyses.base.InstancesView'
    assert len(instances_view_0) == 0
    var_0 = module_0.Analyses(analyses_0, instances_view_0)
    assert len(var_0) == 0
    var_1 = module_0.coerce_labels_and_metadata(analyses_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_1) == 0
    var_2 = analyses_0.add(var_0, comment=var_0, raw=var_0)
    assert len(analyses_0) == 1
    assert len(instances_view_0) == 1
    assert len(var_1) == 1
    int_0 = 5454
    bytes_0 = b'\x01\x9d: l\xe1\x83\x17\xf0'
    var_3 = module_0.format_analyses(analyses_0, format_standalone_root=int_0, metadata=bytes_0)

def test_case_73():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = module_0.format_analyses(analyses_0)
    assert var_0 == "<Analyses <class 'NoneType'>>"
    var_1 = analyses_0.add(var_0)
    assert len(analyses_0) == 1
    var_2 = analyses_0.add(var_0, comment=var_0, raw=var_0)
    assert len(analyses_0) == 2
    var_3 = module_0.format_analyses(analyses_0)
    assert var_3 == '<class \'NoneType\'>\n\t[0] <class \'str\'>\n\t[1] <class \'str\'>\n\t"<Analyses <class \'NoneType\'>>"'
    with pytest.raises(TypeError):
        module_0.label_paths(analyses_0, analyses_0)

def test_case_74():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    float_0 = -1934.0
    var_0 = analyses_0.__setitem__(float_0, analyses_0)
    assert len(analyses_0) == 1
    var_1 = module_0.coerce_labels_and_metadata(analyses_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_1) == 1

@pytest.mark.xfail(strict=True)
def test_case_75():
    str_0 = '\n        Indices of neighbour cells.\n\n        Arguments:\n            i (int): cell index.\n\n        Returns:\n            numpy.ndarray: indices of the neighbour cells of cell *i*.\n        '
    none_type_0 = None
    analyses_0 = module_0.Analyses(metadata=str_0)
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = analyses_0.add(none_type_0, str_0, raw=none_type_0)
    assert len(analyses_0) == 1
    var_0.__len__()

def test_case_76():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    int_0 = -622
    var_0 = analyses_0.add(int_0)
    assert len(analyses_0) == 1
    var_1 = module_0.format_analyses(analyses_0)
    assert var_1 == "<class 'NoneType'>\n\t[0] <class 'int'>"
    var_2 = analyses_0.add(var_1)
    assert len(analyses_0) == 2
    var_3 = module_0.coerce_labels_and_metadata(analyses_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(var_3) == 2
    var_4 = analyses_0.add(var_1, comment=var_1, raw=var_1)
    assert len(analyses_0) == 3
    assert len(var_3) == 3
    var_5 = var_3.__str__()
    var_6 = module_0.format_analyses(analyses_0)
    assert var_6 == '<class \'NoneType\'>\n\t[0] <class \'int\'>\n\t[1] <class \'str\'>\n\t[2] <class \'str\'>\n\t"<class \'NoneType\'>\n\t \t[0] <class \'int\'>"'
    analyses_view_0 = module_0.AnalysesView(var_3)
    assert len(analyses_view_0) == 3
    with pytest.raises(TypeError):
        module_0.label_paths(var_3, var_0)

@pytest.mark.xfail(strict=True)
def test_case_77():
    analyses_0 = module_0.Analyses()
    assert f'{type(analyses_0).__module__}.{type(analyses_0).__qualname__}' == 'tramway.core.analyses.base.Analyses'
    assert len(analyses_0) == 0
    assert f'{type(module_0.Analyses.data).__module__}.{type(module_0.Analyses.data).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.artefact).__module__}.{type(module_0.Analyses.artefact).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.metadata).__module__}.{type(module_0.Analyses.metadata).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.instances).__module__}.{type(module_0.Analyses.instances).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.comments).__module__}.{type(module_0.Analyses.comments).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Analyses.labels).__module__}.{type(module_0.Analyses.labels).__qualname__}' == 'builtins.property'
    var_0 = module_0.format_analyses(analyses_0)
    assert var_0 == "<Analyses <class 'NoneType'>>"
    bytes_0 = b'\xca\x90U\xa5\xc3\xc6\x93\x0e\xd2\x18v'
    var_1 = analyses_0.__setitem__(bytes_0, var_0)
    assert len(analyses_0) == 1
    float_0 = 1e-07
    var_2 = analyses_0.__setitem__(float_0, var_0)
    assert len(analyses_0) == 2
    var_3 = analyses_0.add(var_0)
    assert len(analyses_0) == 3
    var_4 = var_3.__str__()
    module_0.coerce_labels_and_metadata(analyses_0)