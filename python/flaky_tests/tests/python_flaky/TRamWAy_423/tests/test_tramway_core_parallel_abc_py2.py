# Automatically generated by Pynguin.
import pytest
import tramway.core.parallel.abc_py2 as module_0

def test_case_0():
    vehicle_job_step_0 = module_0.VehicleJobStep()

def test_case_1():
    job_step_0 = module_0.JobStep()
    assert f'{type(module_0.JobStep.workspace_set).__module__}.{type(module_0.JobStep.workspace_set).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.JobStep.resource_id).__module__}.{type(module_0.JobStep.resource_id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.JobStep.resources).__module__}.{type(module_0.JobStep.resources).__qualname__}' == 'builtins.property'
    with pytest.raises(NotImplementedError):
        job_step_0.unset_workspace()

def test_case_2():
    bytes_0 = b'x\x99\xf7\xfa\xb6v\xe9\x11'
    extended_workspace_0 = module_0.ExtendedWorkspace()
    with pytest.raises(NotImplementedError):
        extended_workspace_0.update(bytes_0)

def test_case_3():
    workspace_0 = module_0.Workspace()
    with pytest.raises(NotImplementedError):
        workspace_0.__len__()

def test_case_4():
    workspace_0 = module_0.Workspace()
    with pytest.raises(NotImplementedError):
        workspace_0.resources(workspace_0)

def test_case_5():
    workspace_extension_0 = module_0.WorkspaceExtension()
    with pytest.raises(NotImplementedError):
        workspace_extension_0.pop_workspace_update()

def test_case_6():
    workspace_extension_0 = module_0.WorkspaceExtension()
    vehicle_job_step_0 = module_0.VehicleJobStep()
    with pytest.raises(NotImplementedError):
        workspace_extension_0.push_workspace_update(workspace_extension_0)

def test_case_7():
    list_0 = []
    dict_0 = {}
    extended_workspace_0 = module_0.ExtendedWorkspace(**dict_0)
    with pytest.raises(NotImplementedError):
        extended_workspace_0.push_extension_updates(list_0)

def test_case_8():
    dict_0 = {}
    vehicle_job_step_0 = module_0.VehicleJobStep(**dict_0)
    with pytest.raises(NotImplementedError):
        vehicle_job_step_0.pop_updates()

def test_case_9():
    vehicle_job_step_0 = module_0.VehicleJobStep()
    job_step_0 = module_0.JobStep()
    assert f'{type(module_0.JobStep.workspace_set).__module__}.{type(module_0.JobStep.workspace_set).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.JobStep.resource_id).__module__}.{type(module_0.JobStep.resource_id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.JobStep.resources).__module__}.{type(module_0.JobStep.resources).__qualname__}' == 'builtins.property'
    with pytest.raises(NotImplementedError):
        vehicle_job_step_0.push_updates(job_step_0)

def test_case_10():
    dict_0 = {}
    job_step_0 = module_0.JobStep()
    assert f'{type(module_0.JobStep.workspace_set).__module__}.{type(module_0.JobStep.workspace_set).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.JobStep.resource_id).__module__}.{type(module_0.JobStep.resource_id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.JobStep.resources).__module__}.{type(module_0.JobStep.resources).__qualname__}' == 'builtins.property'
    with pytest.raises(NotImplementedError):
        job_step_0.set_workspace(dict_0)

def test_case_11():
    list_0 = []
    extended_workspace_0 = module_0.ExtendedWorkspace(*list_0)
    extended_workspace_1 = module_0.ExtendedWorkspace()
    with pytest.raises(NotImplementedError):
        extended_workspace_1.pop_extension_updates(list_0)

def test_case_12():
    list_0 = []
    vehicle_job_step_0 = module_0.VehicleJobStep(*list_0)
    job_step_0 = module_0.JobStep()
    assert f'{type(module_0.JobStep.workspace_set).__module__}.{type(module_0.JobStep.workspace_set).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.JobStep.resource_id).__module__}.{type(module_0.JobStep.resource_id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.JobStep.resources).__module__}.{type(module_0.JobStep.resources).__qualname__}' == 'builtins.property'
    with pytest.raises(NotImplementedError):
        job_step_0.get_workspace()

def test_case_13():
    dict_0 = {}
    job_step_0 = module_0.JobStep()
    assert f'{type(module_0.JobStep.workspace_set).__module__}.{type(module_0.JobStep.workspace_set).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.JobStep.resource_id).__module__}.{type(module_0.JobStep.resource_id).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.JobStep.resources).__module__}.{type(module_0.JobStep.resources).__qualname__}' == 'builtins.property'
    var_0 = module_0.JobStep()
    with pytest.raises(NotImplementedError):
        var_0.resources(dict_0)