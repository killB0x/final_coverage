# Automatically generated by Pynguin.
import pytest
import readtime as module_0

def test_case_0():
    read_time_parser_0 = module_0.ReadTimeParser()
    assert read_time_parser_0.content_type_supported == ['Article', 'Page', 'Draft']
    assert read_time_parser_0.lang_settings == {'default': {'wpm': 200, 'min_singular': 'minute', 'min_plural': 'minutes', 'sec_singular': 'second', 'sec_plural': 'seconds'}}
    assert module_0.READTIME_PARSER.initialized is True
    assert module_0.READTIME_PARSER.content_type_supported == ['Article', 'Page', 'Draft']
    assert module_0.READTIME_PARSER.lang_settings == {'default': {'wpm': 200, 'min_singular': 'minute', 'min_plural': 'minutes', 'sec_singular': 'second', 'sec_plural': 'seconds'}}
    with pytest.raises(Exception):
        read_time_parser_0.initialize_settings(read_time_parser_0)

def test_case_1():
    read_time_parser_0 = module_0.ReadTimeParser()
    assert read_time_parser_0.content_type_supported == ['Article', 'Page', 'Draft']
    assert read_time_parser_0.lang_settings == {'default': {'wpm': 200, 'min_singular': 'minute', 'min_plural': 'minutes', 'sec_singular': 'second', 'sec_plural': 'seconds'}}
    assert module_0.READTIME_PARSER.initialized is True
    assert module_0.READTIME_PARSER.content_type_supported == ['Article', 'Page', 'Draft']
    assert module_0.READTIME_PARSER.lang_settings == {'default': {'wpm': 200, 'min_singular': 'minute', 'min_plural': 'minutes', 'sec_singular': 'second', 'sec_plural': 'seconds'}}
    bool_0 = False
    var_0 = read_time_parser_0.read_time(bool_0)

def test_case_2():
    bytes_0 = b'\x90V\xacB@\xf64R\xbf\xd0\xf2f \x15Y\xa9j'
    var_0 = module_0.run_read_time(bytes_0)
    assert module_0.READTIME_PARSER.initialized is True
    assert module_0.READTIME_PARSER.content_type_supported == ['Article', 'Page', 'Draft']
    assert module_0.READTIME_PARSER.lang_settings == {'default': {'wpm': 200, 'min_singular': 'minute', 'min_plural': 'minutes', 'sec_singular': 'second', 'sec_plural': 'seconds'}}

def test_case_3():
    bool_0 = False
    module_0.initialize_parser(bool_0)
    assert module_0.READTIME_PARSER.initialized is True
    assert module_0.READTIME_PARSER.content_type_supported == ['Article', 'Page', 'Draft']
    assert module_0.READTIME_PARSER.lang_settings == {'default': {'wpm': 200, 'min_singular': 'minute', 'min_plural': 'minutes', 'sec_singular': 'second', 'sec_plural': 'seconds'}}

def test_case_4():
    bool_0 = True
    var_0 = module_0.initialize_parser(bool_0)
    assert module_0.READTIME_PARSER.initialized is True
    assert module_0.READTIME_PARSER.content_type_supported == ['Article', 'Page', 'Draft']
    assert module_0.READTIME_PARSER.lang_settings == {'default': {'wpm': 200, 'min_singular': 'minute', 'min_plural': 'minutes', 'sec_singular': 'second', 'sec_plural': 'seconds'}}

def test_case_5():
    var_0 = module_0.register()
    assert module_0.READTIME_PARSER.initialized is True
    assert module_0.READTIME_PARSER.content_type_supported == ['Article', 'Page', 'Draft']
    assert module_0.READTIME_PARSER.lang_settings == {'default': {'wpm': 200, 'min_singular': 'minute', 'min_plural': 'minutes', 'sec_singular': 'second', 'sec_plural': 'seconds'}}

def test_case_6():
    none_type_0 = None
    var_0 = module_0.get_class_name(none_type_0)
    assert module_0.READTIME_PARSER.initialized is True
    assert module_0.READTIME_PARSER.content_type_supported == ['Article', 'Page', 'Draft']
    assert module_0.READTIME_PARSER.lang_settings == {'default': {'wpm': 200, 'min_singular': 'minute', 'min_plural': 'minutes', 'sec_singular': 'second', 'sec_plural': 'seconds'}}

@pytest.mark.xfail(strict=True)
def test_case_7():
    read_time_parser_0 = module_0.ReadTimeParser()
    assert read_time_parser_0.content_type_supported == ['Article', 'Page', 'Draft']
    assert read_time_parser_0.lang_settings == {'default': {'wpm': 200, 'min_singular': 'minute', 'min_plural': 'minutes', 'sec_singular': 'second', 'sec_plural': 'seconds'}}
    assert module_0.READTIME_PARSER.initialized is True
    assert module_0.READTIME_PARSER.content_type_supported == ['Article', 'Page', 'Draft']
    assert module_0.READTIME_PARSER.lang_settings == {'default': {'wpm': 200, 'min_singular': 'minute', 'min_plural': 'minutes', 'sec_singular': 'second', 'sec_plural': 'seconds'}}
    var_0 = read_time_parser_0.read_time(read_time_parser_0)
    var_1 = read_time_parser_0.pluralize(var_0, var_0, var_0)
    assert var_1 == 'None None'
    var_0.read_time(var_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    read_time_parser_0 = module_0.ReadTimeParser()
    assert read_time_parser_0.content_type_supported == ['Article', 'Page', 'Draft']
    assert read_time_parser_0.lang_settings == {'default': {'wpm': 200, 'min_singular': 'minute', 'min_plural': 'minutes', 'sec_singular': 'second', 'sec_plural': 'seconds'}}
    assert module_0.READTIME_PARSER.initialized is True
    assert module_0.READTIME_PARSER.content_type_supported == ['Article', 'Page', 'Draft']
    assert module_0.READTIME_PARSER.lang_settings == {'default': {'wpm': 200, 'min_singular': 'minute', 'min_plural': 'minutes', 'sec_singular': 'second', 'sec_plural': 'seconds'}}
    bool_0 = True
    none_type_0 = None
    var_0 = read_time_parser_0.pluralize(bool_0, none_type_0, bool_0)
    assert var_0 == 'True None'
    var_1 = module_0.initialize_parser(var_0)
    var_0.pluralize(read_time_parser_0, bool_0, read_time_parser_0)