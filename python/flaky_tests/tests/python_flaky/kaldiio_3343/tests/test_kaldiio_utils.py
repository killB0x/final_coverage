# Automatically generated by Pynguin.
import pytest
import kaldiio.utils as module_0

def test_case_0():
    multi_file_descriptor_0 = module_0.MultiFileDescriptor()
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ()
    assert multi_file_descriptor_0.init_pos == []
    assert module_0.default_encoding == 'utf-8'

def test_case_1():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_0.my_popen(none_type_0)

def test_case_2():
    str_0 = 'D'
    with pytest.raises(TypeError):
        module_0.my_popen(str_0, str_0)

def test_case_3():
    dict_0 = {}
    var_0 = module_0.my_popen(dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'kaldiio.utils._wrap_close'
    assert module_0.default_encoding == 'utf-8'
    var_1 = var_0.__exit__()

def test_case_4():
    multi_file_descriptor_0 = module_0.MultiFileDescriptor()
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ()
    assert multi_file_descriptor_0.init_pos == []
    assert module_0.default_encoding == 'utf-8'
    var_0 = module_0.open_like_kaldi(multi_file_descriptor_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert var_0.fds == ()
    assert var_0.init_pos == []

def test_case_5():
    dict_0 = {}
    var_0 = module_0.open_or_fd(dict_0, dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_0.gen).__module__}.{type(var_0.gen).__qualname__}' == 'builtins.generator'
    assert var_0.args == ({}, {})
    assert var_0.kwds == {}
    assert module_0.default_encoding == 'utf-8'
    var_1 = var_0.__enter__()

def test_case_6():
    str_0 = '-'
    multi_file_descriptor_0 = module_0.MultiFileDescriptor(*str_0)
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ('-',)
    assert multi_file_descriptor_0.init_pos is None
    assert module_0.default_encoding == 'utf-8'

def test_case_7():
    multi_file_descriptor_0 = module_0.MultiFileDescriptor()
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ()
    assert multi_file_descriptor_0.init_pos == []
    assert module_0.default_encoding == 'utf-8'
    with pytest.raises(NotImplementedError):
        multi_file_descriptor_0.seek(multi_file_descriptor_0)

def test_case_8():
    multi_file_descriptor_0 = module_0.MultiFileDescriptor()
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ()
    assert multi_file_descriptor_0.init_pos == []
    assert module_0.default_encoding == 'utf-8'
    var_0 = multi_file_descriptor_0.tell()
    assert var_0 == 0

def test_case_9():
    bool_0 = False
    var_0 = module_0.seekable(bool_0)
    assert var_0 is False
    assert module_0.default_encoding == 'utf-8'

def test_case_10():
    str_0 = ',n\x0c79)gKb\rm'
    var_0 = module_0.my_popen(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'kaldiio.utils._wrap_close'
    assert module_0.default_encoding == 'utf-8'
    var_1 = var_0.__enter__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'kaldiio.utils._wrap_close'
    var_2 = module_0.open_like_kaldi(var_0, str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'kaldiio.utils._wrap_close'

def test_case_11():
    str_0 = '-'
    wrap_close_0 = module_0._wrap_close(str_0, str_0)
    assert f'{type(wrap_close_0).__module__}.{type(wrap_close_0).__qualname__}' == 'kaldiio.utils._wrap_close'
    assert module_0.default_encoding == 'utf-8'
    var_0 = module_0.open_like_kaldi(wrap_close_0, wrap_close_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'kaldiio.utils._wrap_close'
    with pytest.raises(ValueError):
        module_0.parse_specifier(wrap_close_0)

def test_case_12():
    str_0 = '-'
    var_0 = module_0.my_popen(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'kaldiio.utils._wrap_close'
    assert module_0.default_encoding == 'utf-8'
    var_1 = var_0.__exit__(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '-'
    module_0.open_like_kaldi(str_0)

def test_case_14():
    str_0 = 'ck:?w`7P'
    lazy_loader_0 = module_0.LazyLoader(str_0)
    assert f'{type(lazy_loader_0).__module__}.{type(lazy_loader_0).__qualname__}' == 'kaldiio.utils.LazyLoader'
    assert len(lazy_loader_0) == 0
    assert module_0.default_encoding == 'utf-8'
    with pytest.raises(ValueError):
        module_0.parse_specifier(str_0)

def test_case_15():
    str_0 = 'ck:?w`7P'
    lazy_loader_0 = module_0.LazyLoader(str_0)
    assert f'{type(lazy_loader_0).__module__}.{type(lazy_loader_0).__qualname__}' == 'kaldiio.utils.LazyLoader'
    assert len(lazy_loader_0) == 0
    assert module_0.default_encoding == 'utf-8'
    var_0 = lazy_loader_0.__len__()
    with pytest.raises(ValueError):
        module_0.parse_specifier(str_0)

def test_case_16():
    str_0 = 'h'
    with pytest.raises(ValueError):
        module_0.parse_specifier(str_0)

def test_case_17():
    multi_file_descriptor_0 = module_0.MultiFileDescriptor()
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ()
    assert multi_file_descriptor_0.init_pos == []
    assert module_0.default_encoding == 'utf-8'
    var_0 = module_0.open_like_kaldi(multi_file_descriptor_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert var_0.fds == ()
    assert var_0.init_pos == []
    var_1 = multi_file_descriptor_0.tell()
    assert var_1 == 0
    var_2 = var_0.read()
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.my_popen(none_type_0, buffering=var_2)

def test_case_18():
    bool_0 = False
    multi_file_descriptor_0 = module_0.MultiFileDescriptor()
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ()
    assert multi_file_descriptor_0.init_pos == []
    assert module_0.default_encoding == 'utf-8'
    var_0 = multi_file_descriptor_0.seek(bool_0, bool_0)

def test_case_19():
    str_0 = 'ck:?w`7P'
    lazy_loader_0 = module_0.LazyLoader(str_0)
    assert f'{type(lazy_loader_0).__module__}.{type(lazy_loader_0).__qualname__}' == 'kaldiio.utils.LazyLoader'
    assert len(lazy_loader_0) == 0
    assert module_0.default_encoding == 'utf-8'
    var_0 = lazy_loader_0.__setitem__(str_0, str_0)
    assert len(lazy_loader_0) == 1
    with pytest.raises(ValueError):
        module_0.parse_specifier(str_0)

def test_case_20():
    multi_file_descriptor_0 = module_0.MultiFileDescriptor()
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ()
    assert multi_file_descriptor_0.init_pos == []
    assert module_0.default_encoding == 'utf-8'
    var_0 = multi_file_descriptor_0.read()

def test_case_21():
    str_0 = ',n\x0c )g&b\tm'
    stdstream_wrap_0 = module_0._stdstream_wrap(str_0)
    assert f'{type(stdstream_wrap_0).__module__}.{type(stdstream_wrap_0).__qualname__}' == 'kaldiio.utils._stdstream_wrap'
    assert stdstream_wrap_0.fd == ',n\x0c )g&b\tm'
    assert module_0.default_encoding == 'utf-8'
    var_0 = module_0.seekable(str_0)
    assert var_0 is False
    var_1 = stdstream_wrap_0.close()
    var_2 = module_0.open_like_kaldi(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == '_io.TextIOWrapper'
    assert var_2.mode == 'r'
    with pytest.raises(ValueError):
        module_0.parse_specifier(str_0)

def test_case_22():
    dict_0 = {}
    var_0 = module_0._stdstream_wrap(dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'kaldiio.utils._stdstream_wrap'
    assert var_0.fd == {}
    assert module_0.default_encoding == 'utf-8'
    var_1 = module_0.my_popen(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'kaldiio.utils._wrap_close'
    var_2 = var_1.close()
    assert var_2 == 512

@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    lazy_loader_0 = module_0.LazyLoader(bool_0)
    assert f'{type(lazy_loader_0).__module__}.{type(lazy_loader_0).__qualname__}' == 'kaldiio.utils.LazyLoader'
    assert len(lazy_loader_0) == 0
    assert module_0.default_encoding == 'utf-8'
    var_0 = module_0.open_or_fd(bool_0, dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_0.gen).__module__}.{type(var_0.gen).__qualname__}' == 'builtins.generator'
    assert var_0.args == (False, {False: False})
    assert var_0.kwds == {}
    var_1 = var_0.__enter__()
    assert var_1 is False
    var_2 = module_0.open_like_kaldi(dict_0)
    lazy_loader_1 = module_0.LazyLoader(var_1)
    lazy_loader_1.__delitem__(var_1)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = '-'
    lazy_loader_0 = module_0.LazyLoader(str_0)
    assert f'{type(lazy_loader_0).__module__}.{type(lazy_loader_0).__qualname__}' == 'kaldiio.utils.LazyLoader'
    assert len(lazy_loader_0) == 0
    assert module_0.default_encoding == 'utf-8'
    var_0 = lazy_loader_0.__setitem__(str_0, str_0)
    assert len(lazy_loader_0) == 1
    lazy_loader_0.popitem()

def test_case_25():
    multi_file_descriptor_0 = module_0.MultiFileDescriptor()
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ()
    assert multi_file_descriptor_0.init_pos == []
    assert module_0.default_encoding == 'utf-8'
    var_0 = module_0.open_like_kaldi(multi_file_descriptor_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert var_0.fds == ()
    assert var_0.init_pos == []
    var_1 = multi_file_descriptor_0.tell()
    assert var_1 == 0
    var_2 = var_0.read()
    with pytest.raises(ValueError):
        module_0.my_popen(var_0, buffering=var_1)

def test_case_26():
    multi_file_descriptor_0 = module_0.MultiFileDescriptor()
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ()
    assert multi_file_descriptor_0.init_pos == []
    assert module_0.default_encoding == 'utf-8'
    var_0 = module_0.seekable(multi_file_descriptor_0)
    var_1 = multi_file_descriptor_0.tell()
    assert var_1 == 0
    var_2 = module_0.open_like_kaldi(var_0)
    assert var_2 is True

def test_case_27():
    complex_0 = (-1689.5-3402.655417j)
    float_0 = 2071.60809
    lazy_loader_0 = module_0.LazyLoader(float_0)
    assert f'{type(lazy_loader_0).__module__}.{type(lazy_loader_0).__qualname__}' == 'kaldiio.utils.LazyLoader'
    assert len(lazy_loader_0) == 0
    assert module_0.default_encoding == 'utf-8'
    var_0 = lazy_loader_0.__contains__(complex_0)
    assert var_0 is False

def test_case_28():
    multi_file_descriptor_0 = module_0.MultiFileDescriptor()
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ()
    assert multi_file_descriptor_0.init_pos == []
    assert module_0.default_encoding == 'utf-8'
    list_0 = [multi_file_descriptor_0, multi_file_descriptor_0, multi_file_descriptor_0]
    multi_file_descriptor_1 = module_0.MultiFileDescriptor(*list_0)
    assert f'{type(multi_file_descriptor_1).__module__}.{type(multi_file_descriptor_1).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert f'{type(multi_file_descriptor_1.fds).__module__}.{type(multi_file_descriptor_1.fds).__qualname__}' == 'builtins.tuple'
    assert len(multi_file_descriptor_1.fds) == 3
    assert multi_file_descriptor_1.init_pos == [0, 0, 0]
    with pytest.raises(TypeError):
        module_0.my_popen(list_0, list_0)

def test_case_29():
    multi_file_descriptor_0 = module_0.MultiFileDescriptor()
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ()
    assert multi_file_descriptor_0.init_pos == []
    assert module_0.default_encoding == 'utf-8'
    var_0 = multi_file_descriptor_0.tell()
    assert var_0 == 0
    var_1 = multi_file_descriptor_0.read()
    str_0 = 'UrQ'
    with pytest.raises(NotImplementedError):
        multi_file_descriptor_0.seek(var_0, str_0)

def test_case_30():
    str_0 = 'ck:?w`7P'
    lazy_loader_0 = module_0.LazyLoader(str_0)
    assert f'{type(lazy_loader_0).__module__}.{type(lazy_loader_0).__qualname__}' == 'kaldiio.utils.LazyLoader'
    assert len(lazy_loader_0) == 0
    assert module_0.default_encoding == 'utf-8'
    var_0 = lazy_loader_0.__repr__()
    assert var_0 == 'LazyLoader [0 keys]'
    var_1 = lazy_loader_0.values()
    with pytest.raises(ValueError):
        module_0.parse_specifier(str_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    bool_0 = True
    stdstream_wrap_0 = module_0._stdstream_wrap(bool_0)
    assert f'{type(stdstream_wrap_0).__module__}.{type(stdstream_wrap_0).__qualname__}' == 'kaldiio.utils._stdstream_wrap'
    assert stdstream_wrap_0.fd is True
    assert module_0.default_encoding == 'utf-8'
    module_0.parse_specifier(stdstream_wrap_0)

@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = 'y'
    module_0.open_like_kaldi(str_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    float_0 = 3594.46745
    stdstream_wrap_0 = module_0._stdstream_wrap(float_0)
    assert f'{type(stdstream_wrap_0).__module__}.{type(stdstream_wrap_0).__qualname__}' == 'kaldiio.utils._stdstream_wrap'
    assert stdstream_wrap_0.fd == pytest.approx(3594.46745, abs=0.01, rel=0.01)
    assert module_0.default_encoding == 'utf-8'
    var_0 = stdstream_wrap_0.__enter__()
    var_1 = stdstream_wrap_0.__exit__()
    var_0.__contains__(float_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = ']G pz{}sR\tE\x0cY/g'
    var_0 = module_0.open_or_fd(str_0, str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_0.gen).__module__}.{type(var_0.gen).__qualname__}' == 'builtins.generator'
    assert var_0.args == (']G pz{}sR\tE\x0cY/g', ']G pz{}sR\tE\x0cY/g')
    assert var_0.kwds == {}
    assert module_0.default_encoding == 'utf-8'
    var_0.__enter__()

def test_case_35():
    str_0 = '-('
    multi_file_descriptor_0 = module_0.MultiFileDescriptor(*str_0)
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ('-', '(')
    assert multi_file_descriptor_0.init_pos is None
    assert module_0.default_encoding == 'utf-8'
    with pytest.raises(OSError):
        multi_file_descriptor_0.tell()

def test_case_36():
    str_0 = '1>:H.&-,^Qr='
    with pytest.raises(ValueError):
        module_0.parse_specifier(str_0)

def test_case_37():
    str_0 = ',n\x0c )gKb\rm'
    none_type_0 = None
    var_0 = module_0.open_like_kaldi(none_type_0, str_0)
    assert module_0.default_encoding == 'utf-8'

@pytest.mark.xfail(strict=True)
def test_case_38():
    str_0 = ',3\x0cX9)gKb\rm'
    module_0.open_like_kaldi(str_0, str_0)

def test_case_39():
    str_0 = '-'
    multi_file_descriptor_0 = module_0.MultiFileDescriptor(*str_0)
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ('-',)
    assert multi_file_descriptor_0.init_pos is None
    assert module_0.default_encoding == 'utf-8'
    with pytest.raises(OSError):
        multi_file_descriptor_0.seek(multi_file_descriptor_0)

@pytest.mark.xfail(strict=True)
def test_case_40():
    str_0 = '\t'
    multi_file_descriptor_0 = module_0.MultiFileDescriptor(*str_0)
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ('\t',)
    assert multi_file_descriptor_0.init_pos is None
    assert module_0.default_encoding == 'utf-8'
    multi_file_descriptor_0.read()

def test_case_41():
    bool_0 = True
    var_0 = module_0.seekable(bool_0)
    assert var_0 is False
    assert module_0.default_encoding == 'utf-8'
    multi_file_descriptor_0 = module_0.MultiFileDescriptor()
    assert multi_file_descriptor_0.init_pos == []
    var_1 = multi_file_descriptor_0.seek(var_0, bool_0)

def test_case_42():
    str_0 = ''
    var_0 = module_0.my_popen(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'kaldiio.utils._wrap_close'
    assert module_0.default_encoding == 'utf-8'
    var_1 = var_0.close()
    str_1 = 'cy:?@9(`ebdP'
    with pytest.raises(ValueError):
        module_0.parse_specifier(str_1)

@pytest.mark.xfail(strict=True)
def test_case_43():
    str_0 = '|5oME[*b'
    module_0.open_like_kaldi(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_44():
    str_0 = ',Gn\x0c79)gKb\r/'
    var_0 = module_0.open_or_fd(str_0, str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_0.gen).__module__}.{type(var_0.gen).__qualname__}' == 'builtins.generator'
    assert var_0.args == (',Gn\x0c79)gKb\r/', ',Gn\x0c79)gKb\r/')
    assert var_0.kwds == {}
    assert module_0.default_encoding == 'utf-8'
    var_0.__enter__()

def test_case_45():
    str_0 = ',n\x0c )gKb\rm'
    none_type_0 = None
    var_0 = module_0.open_or_fd(none_type_0, str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_0.gen).__module__}.{type(var_0.gen).__qualname__}' == 'builtins.generator'
    assert var_0.args == (None, ',n\x0c )gKb\rm')
    assert var_0.kwds == {}
    assert module_0.default_encoding == 'utf-8'
    var_1 = var_0.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_46():
    str_0 = '-'
    module_0.open_like_kaldi(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_47():
    str_0 = '-'
    lazy_loader_0 = module_0.LazyLoader(str_0)
    assert f'{type(lazy_loader_0).__module__}.{type(lazy_loader_0).__qualname__}' == 'kaldiio.utils.LazyLoader'
    assert len(lazy_loader_0) == 0
    assert module_0.default_encoding == 'utf-8'
    var_0 = lazy_loader_0.__setitem__(str_0, str_0)
    assert len(lazy_loader_0) == 1
    lazy_loader_0.__getitem__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = '-'
    str_1 = 'w{'
    module_0.open_like_kaldi(str_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_49():
    multi_file_descriptor_0 = module_0.MultiFileDescriptor()
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert multi_file_descriptor_0.fds == ()
    assert multi_file_descriptor_0.init_pos == []
    assert module_0.default_encoding == 'utf-8'
    list_0 = [multi_file_descriptor_0, multi_file_descriptor_0]
    multi_file_descriptor_1 = module_0.MultiFileDescriptor(*list_0)
    assert f'{type(multi_file_descriptor_1).__module__}.{type(multi_file_descriptor_1).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert f'{type(multi_file_descriptor_1.fds).__module__}.{type(multi_file_descriptor_1.fds).__qualname__}' == 'builtins.tuple'
    assert len(multi_file_descriptor_1.fds) == 2
    assert multi_file_descriptor_1.init_pos == [0, 0]
    var_0 = multi_file_descriptor_1.tell()
    assert var_0 == 0
    str_0 = 'w{'
    module_0.open_like_kaldi(str_0)

@pytest.mark.xfail(strict=True)
def test_case_50():
    str_0 = ',n\x0c79)gKb\rm'
    var_0 = module_0.my_popen(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'kaldiio.utils._wrap_close'
    assert module_0.default_encoding == 'utf-8'
    var_1 = var_0.__iter__()
    var_2 = module_0.open_like_kaldi(var_1, str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == '_io.BufferedReader'
    var_3 = var_2.close()
    var_3.seek(var_2)

@pytest.mark.xfail(strict=True)
def test_case_51():
    str_0 = '<87yBKt>pUs]o_~|'
    var_0 = module_0.open_like_kaldi(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'kaldiio.utils._wrap_close'
    assert module_0.default_encoding == 'utf-8'
    module_0.open_like_kaldi(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_52():
    str_0 = '-'
    str_1 = '[cR a4\t'
    module_0.open_like_kaldi(str_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_53():
    str_0 = ',n\x0c )#g&b\tm'
    str_1 = 'w'
    var_0 = module_0.my_popen(str_1, str_1)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'kaldiio.utils._wrap_close'
    assert module_0.default_encoding == 'utf-8'
    module_0.open_like_kaldi(str_0)

def test_case_54():
    str_0 = ',n\x0c )g&b\tm'
    var_0 = module_0.my_popen(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'kaldiio.utils._wrap_close'
    assert module_0.default_encoding == 'utf-8'
    var_1 = var_0.__iter__()
    var_2 = module_0.seekable(str_0)
    assert var_2 is False
    var_3 = module_0.open_or_fd(var_1, str_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_3.gen).__module__}.{type(var_3.gen).__qualname__}' == 'builtins.generator'
    assert f'{type(var_3.args).__module__}.{type(var_3.args).__qualname__}' == 'builtins.tuple'
    assert len(var_3.args) == 2
    assert var_3.kwds == {}
    var_4 = var_3.__enter__()
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == '_io.BufferedReader'
    var_5 = module_0.open_like_kaldi(var_1)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == '_io.TextIOWrapper'
    with pytest.raises(ValueError):
        module_0.parse_specifier(str_0)

def test_case_55():
    str_0 = ',n\x0c )g&b\tm'
    var_0 = module_0.my_popen(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'kaldiio.utils._wrap_close'
    assert module_0.default_encoding == 'utf-8'
    list_0 = [var_0, var_0]
    multi_file_descriptor_0 = module_0.MultiFileDescriptor(*list_0)
    assert f'{type(multi_file_descriptor_0).__module__}.{type(multi_file_descriptor_0).__qualname__}' == 'kaldiio.utils.MultiFileDescriptor'
    assert f'{type(multi_file_descriptor_0.fds).__module__}.{type(multi_file_descriptor_0.fds).__qualname__}' == 'builtins.tuple'
    assert len(multi_file_descriptor_0.fds) == 2
    assert multi_file_descriptor_0.init_pos is None
    var_1 = multi_file_descriptor_0.read()
    assert var_1 == ''