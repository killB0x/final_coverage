# Automatically generated by Pynguin.
import pytest
import pkcs1.primitives as module_0
import re as module_1
import pkcs1.exceptions as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.product()

def test_case_1():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    var_0 = module_0.integer_ceil(regex_flag_0, regex_flag_0)
    assert var_0 == 1
    assert module_0.gmpy is None

@pytest.mark.xfail(strict=True)
def test_case_2():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    var_0 = module_0.integer_byte_size(regex_flag_0)
    assert var_0 == 1
    assert module_0.gmpy is None
    module_0.os2ip(var_0)

def test_case_3():
    none_type_0 = None
    var_0 = module_0.integer_byte_size(none_type_0)
    assert var_0 == 0
    assert module_0.gmpy is None

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    var_0 = module_0.get_nonzero_random_bytes(bool_0)
    assert var_0 == ''
    assert module_0.gmpy is None
    var_1 = module_0.integer_bit_size(bool_0)
    assert var_1 == 1
    module_0.get_nonzero_random_bytes(var_1)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    var_0 = module_0.integer_byte_size(none_type_0)
    assert var_0 == 0
    assert module_0.gmpy is None
    bool_0 = False
    var_1 = module_0.get_nonzero_random_bytes(var_0)
    assert var_1 == ''
    var_2 = module_0.integer_byte_size(bool_0)
    assert var_2 == 1
    var_3 = module_0.i2osp(var_2, bool_0)
    assert var_3 == b'\x01'
    var_4 = module_0.integer_byte_size(bool_0)
    var_5 = module_0.integer_bit_size(var_0)
    assert var_5 == 1
    var_6 = module_0.integer_ceil(bool_0, var_2)
    assert var_6 == 0
    var_7 = module_0.i2osp(var_4, var_4)
    assert var_7 == b'\x01'
    var_8 = module_0.string_xor(var_7, var_7)
    assert var_8 == b'\x00'
    var_9 = module_0.bezout(var_4, bool_0)
    module_1.split(var_7, var_6, var_7, var_3)

@pytest.mark.xfail(strict=True)
def test_case_6():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_0.get_nonzero_random_bytes(regex_flag_0)

def test_case_7():
    bytes_0 = b'z\x84![\x92\xb7\x0f\xfd\xbd\xad\x86F/'
    var_0 = module_0.string_xor(bytes_0, bytes_0)
    assert var_0 == b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    assert module_0.gmpy is None

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '9`C^]/&h}\'Xt57Tji"'
    var_0 = module_0.constant_time_cmp(str_0, str_0)
    assert var_0 is True
    assert module_0.gmpy is None
    none_type_0 = None
    module_0.i2osp(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    var_0 = module_0.integer_byte_size(none_type_0)
    assert var_0 == 0
    assert module_0.gmpy is None
    module_0.os2ip(none_type_0)

def test_case_10():
    bool_0 = False
    var_0 = module_0.integer_byte_size(bool_0)
    assert var_0 == 1
    assert module_0.gmpy is None
    var_1 = module_0.i2osp(var_0, bool_0)
    assert var_1 == b'\x01'
    var_2 = module_0.integer_byte_size(bool_0)
    assert var_2 == 1
    var_3 = module_0.integer_byte_size(var_2)
    assert var_3 == 1
    var_4 = module_0.i2osp(var_2, var_2)
    assert var_4 == b'\x01'
    var_5 = module_0.bezout(var_2, var_3)

@pytest.mark.xfail(strict=True)
def test_case_11():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_0.get_nonzero_random_bytes(regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    var_0 = module_0.integer_byte_size(none_type_0)
    assert var_0 == 0
    assert module_0.gmpy is None
    bool_0 = False
    var_1 = module_0.get_nonzero_random_bytes(var_0)
    assert var_1 == ''
    var_2 = module_0.integer_byte_size(var_0)
    assert var_2 == 1
    var_3 = module_0.integer_byte_size(none_type_0)
    var_4 = module_0.i2osp(var_2, bool_0)
    assert var_4 == b'\x01'
    var_5 = module_0.integer_byte_size(bool_0)
    var_6 = module_0.integer_bit_size(var_0)
    assert var_6 == 1
    var_7 = module_0.integer_ceil(bool_0, var_2)
    assert var_7 == 0
    var_8 = module_1.RegexFlag.LOCALE
    var_9 = module_0.i2osp(var_5, var_5)
    assert var_9 == b'\x01'
    var_10 = module_0.string_xor(var_9, var_9)
    assert var_10 == b'\x00'
    var_11 = module_0.bezout(var_5, var_8)
    var_10.__repr__(var_9)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    var_0 = module_1.RegexFlag.DEBUG
    var_1 = module_0.i2osp(var_0, bool_0)
    assert var_1 == b'\x80'
    assert module_0.gmpy is None
    var_2 = module_0.integer_byte_size(bool_0)
    assert var_2 == 1
    var_3 = module_0.integer_ceil(bool_0, var_0)
    assert var_3 == 1
    var_4 = module_0.integer_byte_size(var_2)
    assert var_4 == 1
    var_5 = module_0.i2osp(var_2, var_2)
    assert var_5 == b'\x01'
    var_6 = module_0.string_xor(var_5, var_5)
    assert var_6 == b'\x00'
    var_7 = module_0.bezout(var_2, var_4)
    module_0.i2osp(var_7, var_2)

def test_case_14():
    bool_0 = False
    var_0 = module_1.RegexFlag.IGNORECASE
    with pytest.raises(module_2.IntegerTooLarge):
        module_0.i2osp(var_0, bool_0)