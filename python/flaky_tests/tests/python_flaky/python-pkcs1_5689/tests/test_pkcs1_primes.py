# Automatically generated by Pynguin.
import pytest
import pkcs1.primes as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.get_prime()

def test_case_1():
    int_0 = 4
    var_0 = module_0.randomized_primality_testing(int_0)
    assert var_0 is False
    assert module_0.PRIME_ALGO == 'miller-rabin'
    assert module_0.DEFAULT_ITERATION == 1000

@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 12
    var_0 = module_0.randomized_primality_testing(int_0)
    assert var_0 is False
    assert module_0.PRIME_ALGO == 'miller-rabin'
    assert module_0.DEFAULT_ITERATION == 1000
    var_1 = var_0.__neg__()
    assert var_1 == 0
    module_0.is_prime(int_0)

def test_case_3():
    bool_0 = False
    var_0 = module_0.randomized_primality_testing(bool_0, k=bool_0)
    assert var_0 is True
    assert module_0.PRIME_ALGO == 'miller-rabin'
    assert module_0.DEFAULT_ITERATION == 1000
    var_1 = var_0.__lshift__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 12
    var_0 = module_0.randomized_primality_testing(int_0)
    assert var_0 is False
    assert module_0.PRIME_ALGO == 'miller-rabin'
    assert module_0.DEFAULT_ITERATION == 1000
    var_1 = var_0.__neg__()
    assert var_1 == 0
    module_0.is_prime(int_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 41
    var_0 = module_0.randomized_primality_testing(int_0)

def test_case_6():
    int_0 = 12
    var_0 = module_0.randomized_primality_testing(int_0)
    assert module_0.PRIME_ALGO == 'miller-rabin'
    assert module_0.DEFAULT_ITERATION == 1000
    var_1 = var_0.__round__()
    assert var_1 == 0
    with pytest.raises(NotImplementedError):
        module_0.is_prime(var_1, var_1, int_0, var_0)

def test_case_7():
    int_0 = 4
    var_0 = module_0.randomized_primality_testing(int_0)
    assert var_0 is False
    assert module_0.PRIME_ALGO == 'miller-rabin'
    assert module_0.DEFAULT_ITERATION == 1000
    var_1 = var_0.__neg__()
    assert var_1 == 0
    with pytest.raises(NotImplementedError):
        module_0.is_prime(var_1, algorithm=int_0)

def test_case_8():
    int_0 = 7
    var_0 = module_0.jacobi_witness(int_0, int_0)
    assert var_0 is False
    assert module_0.PRIME_ALGO == 'miller-rabin'
    assert module_0.DEFAULT_ITERATION == 1000
    with pytest.raises(AssertionError):
        module_0.jacobi(int_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 3523
    var_0 = module_0.jacobi_witness(int_0, int_0)
    assert var_0 is False
    assert module_0.PRIME_ALGO == 'miller-rabin'
    assert module_0.DEFAULT_ITERATION == 1000
    str_0 = 'solovay-strassen'
    module_0.is_prime(str_0, algorithm=str_0)