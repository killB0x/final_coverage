# Automatically generated by Pynguin.
import pytest
import pkcs1.emsa_pss as module_0
import pkcs1.exceptions as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b'\xb8Q\xfd\x13\x1f\xce\x86\x00\x02\xe9\xb0\x8f6\x01W'
    module_0.encode(bytes_0, bytes_0, salt=bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.encode(none_type_0, none_type_0, s_len=none_type_0, rnd=none_type_0)

def test_case_2():
    bytes_0 = b'\xb8Q\xfd\x13\x1f\xce\x86\x00\x02\xe9\xb0\x8f6\x01W'
    bool_0 = True
    var_0 = module_0.verify(bytes_0, bytes_0, bool_0, mgf=bytes_0)
    assert var_0 is False
    with pytest.raises(module_1.EncodingError):
        module_0.encode(bytes_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b'yQ\xfd\x13\x1f\x86\x00\x02\xe9\xb0\x8f6\x01W'
    module_0.verify(bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'\xdc'
    bool_0 = True
    var_0 = module_0.verify(bytes_0, bool_0, bool_0, mgf=bool_0, s_len=bool_0)
    assert var_0 is False
    module_1.SignatureRepresentativeOutOfRange(**var_0)

def test_case_5():
    bytes_0 = b'\xdc'
    bool_0 = False
    with pytest.raises(module_1.EncodingError):
        module_0.encode(bytes_0, bool_0, mgf=bool_0, s_len=bool_0)