# Automatically generated by Pynguin.
import pytest
import pkcs1.keys as module_0
import pkcs1.primitives as module_1
import pkcs1.exceptions as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 524
    module_0.generate_key_pair(int_0, int_0, k=int_0)

def test_case_1():
    none_type_0 = None
    rsa_public_key_0 = module_0.RsaPublicKey(none_type_0, none_type_0)
    assert f'{type(rsa_public_key_0).__module__}.{type(rsa_public_key_0).__qualname__}' == 'pkcs1.keys.RsaPublicKey'
    assert f'{type(module_0.RsaPublicKey.bit_size).__module__}.{type(module_0.RsaPublicKey.bit_size).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPublicKey.byte_size).__module__}.{type(module_0.RsaPublicKey.byte_size).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPublicKey.e).__module__}.{type(module_0.RsaPublicKey.e).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPublicKey.n).__module__}.{type(module_0.RsaPublicKey.n).__qualname__}' == 'builtins.member_descriptor'

@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    rsa_public_key_0 = module_0.RsaPublicKey(dict_0, dict_0)
    assert f'{type(rsa_public_key_0).__module__}.{type(rsa_public_key_0).__qualname__}' == 'pkcs1.keys.RsaPublicKey'
    assert f'{type(module_0.RsaPublicKey.bit_size).__module__}.{type(module_0.RsaPublicKey.bit_size).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPublicKey.byte_size).__module__}.{type(module_0.RsaPublicKey.byte_size).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPublicKey.e).__module__}.{type(module_0.RsaPublicKey.e).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPublicKey.n).__module__}.{type(module_0.RsaPublicKey.n).__qualname__}' == 'builtins.member_descriptor'
    rsa_public_key_0.__repr__()

def test_case_3():
    none_type_0 = None
    rsa_private_key_0 = module_0.RsaPrivateKey(none_type_0, none_type_0)
    assert f'{type(rsa_private_key_0).__module__}.{type(rsa_private_key_0).__qualname__}' == 'pkcs1.keys.RsaPrivateKey'
    assert f'{type(module_0.RsaPrivateKey.bit_size).__module__}.{type(module_0.RsaPrivateKey.bit_size).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPrivateKey.byte_size).__module__}.{type(module_0.RsaPrivateKey.byte_size).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPrivateKey.d).__module__}.{type(module_0.RsaPrivateKey.d).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPrivateKey.n).__module__}.{type(module_0.RsaPrivateKey.n).__qualname__}' == 'builtins.member_descriptor'

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    rsa_private_key_0 = module_0.RsaPrivateKey(bool_0, bool_0)
    assert f'{type(rsa_private_key_0).__module__}.{type(rsa_private_key_0).__qualname__}' == 'pkcs1.keys.RsaPrivateKey'
    assert f'{type(module_0.RsaPrivateKey.bit_size).__module__}.{type(module_0.RsaPrivateKey.bit_size).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPrivateKey.byte_size).__module__}.{type(module_0.RsaPrivateKey.byte_size).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPrivateKey.d).__module__}.{type(module_0.RsaPrivateKey.d).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPrivateKey.n).__module__}.{type(module_0.RsaPrivateKey.n).__qualname__}' == 'builtins.member_descriptor'
    var_0 = rsa_private_key_0.__repr__()
    assert var_0 == '<RsaPrivateKey n: 0 d: 0 bit_size: 1>'
    module_1.product()

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    module_0.generate_key_pair(number=bool_0)

def test_case_6():
    bool_0 = True
    none_type_0 = None
    rsa_public_key_0 = module_0.RsaPublicKey(bool_0, none_type_0)
    assert f'{type(rsa_public_key_0).__module__}.{type(rsa_public_key_0).__qualname__}' == 'pkcs1.keys.RsaPublicKey'
    assert f'{type(module_0.RsaPublicKey.bit_size).__module__}.{type(module_0.RsaPublicKey.bit_size).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPublicKey.byte_size).__module__}.{type(module_0.RsaPublicKey.byte_size).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPublicKey.e).__module__}.{type(module_0.RsaPublicKey.e).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPublicKey.n).__module__}.{type(module_0.RsaPublicKey.n).__qualname__}' == 'builtins.member_descriptor'
    with pytest.raises(module_2.SignatureRepresentativeOutOfRange):
        rsa_public_key_0.rsavp1(bool_0)

def test_case_7():
    bool_0 = False
    none_type_0 = None
    rsa_public_key_0 = module_0.RsaPublicKey(bool_0, none_type_0)
    assert f'{type(rsa_public_key_0).__module__}.{type(rsa_public_key_0).__qualname__}' == 'pkcs1.keys.RsaPublicKey'
    assert f'{type(module_0.RsaPublicKey.bit_size).__module__}.{type(module_0.RsaPublicKey.bit_size).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPublicKey.byte_size).__module__}.{type(module_0.RsaPublicKey.byte_size).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPublicKey.e).__module__}.{type(module_0.RsaPublicKey.e).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPublicKey.n).__module__}.{type(module_0.RsaPublicKey.n).__qualname__}' == 'builtins.member_descriptor'
    with pytest.raises(module_2.MessageRepresentativeOutOfRange):
        rsa_public_key_0.rsaep(bool_0)

def test_case_8():
    bool_0 = True
    rsa_private_key_0 = module_0.RsaPrivateKey(bool_0, bool_0)
    assert f'{type(rsa_private_key_0).__module__}.{type(rsa_private_key_0).__qualname__}' == 'pkcs1.keys.RsaPrivateKey'
    assert f'{type(module_0.RsaPrivateKey.bit_size).__module__}.{type(module_0.RsaPrivateKey.bit_size).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPrivateKey.byte_size).__module__}.{type(module_0.RsaPrivateKey.byte_size).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPrivateKey.d).__module__}.{type(module_0.RsaPrivateKey.d).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.RsaPrivateKey.n).__module__}.{type(module_0.RsaPrivateKey.n).__qualname__}' == 'builtins.member_descriptor'
    with pytest.raises(module_2.CiphertextRepresentativeOutOfRange):
        rsa_private_key_0.rsadp(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b'u\xa6\xf7\x90"9\xc2e\x16\x93X'
    module_0.MultiPrimeRsaPrivateKey(bytes_0, bytes_0, rnd=bytes_0)