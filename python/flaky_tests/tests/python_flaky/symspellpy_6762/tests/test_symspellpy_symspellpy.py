# Automatically generated by Pynguin.
import pytest
import symspellpy.symspellpy as module_0
import re as module_1

def test_case_0():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    sym_spell_0.create_dictionary(sym_spell_0, sym_spell_0)

def test_case_2():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "D'"
    var_0 = sym_spell_0.load_pickle(str_0)
    assert var_0 is True

def test_case_3():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = 'D\x0c'
    var_0 = sym_spell_0.lookup(str_0, str_0, include_unknown=str_0)

def test_case_4():
    int_0 = -1090
    with pytest.raises(ValueError):
        module_0.SymSpell(int_0)

def test_case_5():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    var_0 = sym_spell_0.delete_dictionary_entry(sym_spell_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_6():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "1s\tsn$Nz'aAUow~!o&B"
    sym_spell_0.word_segmentation(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "1\\%n$'a~B"
    sym_spell_0.word_segmentation(str_0, ignore_token=str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "1\\\tsn$N2'aA~\x0bB"
    sym_spell_0.create_dictionary(str_0)
    var_0 = sym_spell_0.save_pickle(str_0)
    var_2 = sym_spell_0.lookup_compound(str_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_9():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    list_0 = []
    sym_spell_0.lookup(list_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "1\\\tsn$N2'aA~\x0bB"
    sym_spell_0.lookup_compound(str_0, sym_spell_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = 'Dd'
    sym_spell_0.load_bigram_dictionary(str_0, sym_spell_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    suggest_item_0 = module_0.SuggestItem(none_type_0, none_type_0, none_type_0)
    assert f'{type(suggest_item_0).__module__}.{type(suggest_item_0).__qualname__}' == 'symspellpy.symspellpy.SuggestItem'
    assert f'{type(module_0.SuggestItem.term).__module__}.{type(module_0.SuggestItem.term).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SuggestItem.distance).__module__}.{type(module_0.SuggestItem.distance).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SuggestItem.count).__module__}.{type(module_0.SuggestItem.count).__qualname__}' == 'builtins.property'
    var_0 = suggest_item_0.__eq__(suggest_item_0)
    assert var_0 is True
    var_0.load_bigram_dictionary(none_type_0, var_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    suggest_item_0 = module_0.SuggestItem(sym_spell_0, sym_spell_0, sym_spell_0)
    assert f'{type(module_0.SuggestItem.term).__module__}.{type(module_0.SuggestItem.term).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SuggestItem.distance).__module__}.{type(module_0.SuggestItem.distance).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SuggestItem.count).__module__}.{type(module_0.SuggestItem.count).__qualname__}' == 'builtins.property'
    suggest_item_0.__lt__(suggest_item_0)

def test_case_14():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    var_0 = sym_spell_0.delete_dictionary_entry(sym_spell_0)
    assert var_0 is False
    var_1 = sym_spell_0.load_bigram_dictionary(var_0, sym_spell_0, var_0, sym_spell_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    none_type_0 = None
    sym_spell_0.save_pickle(sym_spell_0, none_type_0)

def test_case_16():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = '@7^|&pCrH%C4'
    var_0 = sym_spell_0.load_bigram_dictionary(str_0, sym_spell_0, sym_spell_0, sym_spell_0)
    assert var_0 is False
    var_1 = sym_spell_0.lookup_compound(str_0, var_0, str_0)

def test_case_17():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    float_0 = -1512.27396356831
    var_0 = sym_spell_0.create_dictionary_entry(sym_spell_0, float_0)

def test_case_18():
    bool_0 = True
    with pytest.raises(ValueError):
        module_0.SymSpell(prefix_length=bool_0)

def test_case_19():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = 'H/3FhI5En}G^NI7'
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.word_segmentation(str_0, max_segmentation_word_length=var_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'symspellpy.symspellpy.Composition'
    assert len(var_2) == 4
    assert f'{type(module_0.Composition.segmented_string).__module__}.{type(module_0.Composition.segmented_string).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.Composition.corrected_string).__module__}.{type(module_0.Composition.corrected_string).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.Composition.distance_sum).__module__}.{type(module_0.Composition.distance_sum).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.Composition.log_prob_sum).__module__}.{type(module_0.Composition.log_prob_sum).__qualname__}' == '_collections._tuplegetter'

def test_case_20():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "P{9>'']T[F]mkbHp{c}I"
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True

@pytest.mark.xfail(strict=True)
def test_case_21():
    verbosity_0 = module_0.Verbosity.CLOSEST
    suggest_item_0 = module_0.SuggestItem(verbosity_0, verbosity_0, verbosity_0)
    assert f'{type(suggest_item_0).__module__}.{type(suggest_item_0).__qualname__}' == 'symspellpy.symspellpy.SuggestItem'
    assert f'{type(module_0.SuggestItem.term).__module__}.{type(module_0.SuggestItem.term).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SuggestItem.distance).__module__}.{type(module_0.SuggestItem.distance).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SuggestItem.count).__module__}.{type(module_0.SuggestItem.count).__qualname__}' == 'builtins.property'
    var_0 = suggest_item_0.__str__()
    assert var_0 == 'Verbosity.CLOSEST, Verbosity.CLOSEST, Verbosity.CLOSEST'
    var_1 = var_0.__str__()
    assert var_1 == 'Verbosity.CLOSEST, Verbosity.CLOSEST, Verbosity.CLOSEST'
    suggest_item_0.__lt__(suggest_item_0)

def test_case_22():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    float_0 = -1520.6457259346555
    var_0 = sym_spell_0.create_dictionary_entry(sym_spell_0, float_0)
    var_1 = sym_spell_0.load_dictionary(var_0, var_0, sym_spell_0, var_0)
    assert var_1 is False
    var_2 = sym_spell_0.delete_dictionary_entry(var_0)
    assert var_2 is False
    var_3 = sym_spell_0.load_bigram_dictionary(var_2, var_0, float_0, var_0, sym_spell_0)
    assert var_3 is False
    sym_spell_1 = module_0.SymSpell(count_threshold=var_3)
    assert f'{type(sym_spell_1).__module__}.{type(sym_spell_1).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    with pytest.raises(ValueError):
        module_0.SymSpell(prefix_length=var_0)

def test_case_23():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    float_0 = 1251.0963
    var_0 = sym_spell_0.delete_dictionary_entry(sym_spell_0)
    assert var_0 is False
    with pytest.raises(ValueError):
        sym_spell_0.lookup(sym_spell_0, float_0, float_0, float_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "'"
    none_type_0 = None
    sym_spell_0.load_pickle(str_0, none_type_0)

def test_case_25():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    var_0 = sym_spell_0.delete_dictionary_entry(sym_spell_0)
    assert var_0 is False
    var_1 = sym_spell_0.load_dictionary(var_0, var_0, var_0, encoding=sym_spell_0)
    assert var_1 is False

def test_case_26():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = '^L\x0bZn-\x0c@1\t\x0cB;\rq&'
    var_0 = sym_spell_0.lookup(str_0, str_0, include_unknown=str_0, transfer_casing=str_0)

def test_case_27():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = ''
    var_0 = sym_spell_0.lookup(str_0, str_0, include_unknown=str_0)

def test_case_28():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    float_0 = -1511.1
    var_0 = sym_spell_0.create_dictionary_entry(sym_spell_0, float_0)
    set_0 = {float_0, sym_spell_0, sym_spell_0, float_0}
    var_1 = sym_spell_0.load_dictionary(var_0, set_0, sym_spell_0, set_0)
    assert var_1 is False
    str_0 = 'V"^\nH%2tAB0.3'
    var_2 = sym_spell_0.lookup(str_0, sym_spell_0, var_1, set_0)
    var_3 = sym_spell_0.create_dictionary_entry(var_0, var_0)
    var_4 = sym_spell_0.delete_dictionary_entry(var_0)
    assert var_4 is False
    with pytest.raises(ValueError):
        module_0.SymSpell(count_threshold=float_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    list_0 = []
    sym_spell_0.lookup(list_0, list_0, transfer_casing=sym_spell_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    float_0 = -1520.6457259346555
    var_0 = sym_spell_0.create_dictionary_entry(sym_spell_0, float_0)
    list_0 = [float_0]
    suggest_item_0 = module_0.SuggestItem(var_0, float_0, list_0)
    assert f'{type(module_0.SuggestItem.term).__module__}.{type(module_0.SuggestItem.term).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SuggestItem.distance).__module__}.{type(module_0.SuggestItem.distance).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SuggestItem.count).__module__}.{type(module_0.SuggestItem.count).__qualname__}' == 'builtins.property'
    var_1 = sym_spell_0.create_dictionary_entry(float_0, var_0)
    set_0 = {float_0, sym_spell_0, float_0, sym_spell_0}
    suggest_item_1 = module_0.SuggestItem(float_0, set_0, var_1)
    var_2 = suggest_item_1.__eq__(suggest_item_0)
    assert var_2 is False
    var_2.lookup(list_0, var_2, list_0)

def test_case_31():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "P{9>'']T[F]mkbHp{c}I"
    var_0 = sym_spell_0.create_dictionary(str_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_32():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    float_0 = -1516.452683935527
    var_0 = sym_spell_0.create_dictionary_entry(sym_spell_0, float_0)
    str_0 = ''
    var_1 = sym_spell_0.lookup(str_0, sym_spell_0, var_0, var_0)
    var_1.load_bigram_dictionary(float_0, float_0, str_0)

def test_case_33():
    str_0 = ''
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    var_0 = sym_spell_0.lookup_compound(str_0, sym_spell_0, transfer_casing=sym_spell_0)

def test_case_34():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    var_0 = sym_spell_0.delete_dictionary_entry(sym_spell_0)
    assert var_0 is False
    str_0 = '@7^|&pCrH%C4'
    var_1 = sym_spell_0.lookup_compound(str_0, var_0, str_0)

def test_case_35():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    var_0 = sym_spell_0.delete_dictionary_entry(sym_spell_0)
    assert var_0 is False
    str_0 = '@7^|&pCrH%C4'
    var_1 = sym_spell_0.lookup_compound(str_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    str_0 = 'l+Zj,Z|\npd'
    str_1 = '3N~H5Rd/l%`U@}acLQ'
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    sym_spell_0.lookup_compound(str_0, sym_spell_0, str_0, str_1)

def test_case_37():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "1\\%n$'a~B"
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.word_segmentation(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'symspellpy.symspellpy.Composition'
    assert len(var_2) == 4
    assert f'{type(module_0.Composition.segmented_string).__module__}.{type(module_0.Composition.segmented_string).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.Composition.corrected_string).__module__}.{type(module_0.Composition.corrected_string).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.Composition.distance_sum).__module__}.{type(module_0.Composition.distance_sum).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.Composition.log_prob_sum).__module__}.{type(module_0.Composition.log_prob_sum).__qualname__}' == '_collections._tuplegetter'

def test_case_38():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = 'DZ'
    var_0 = sym_spell_0.lookup_compound(str_0, sym_spell_0, sym_spell_0, sym_spell_0)
    var_1 = sym_spell_0.lookup(str_0, sym_spell_0, transfer_casing=str_0)

def test_case_39():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "\\\\\tn$2'`a~B\x0bB"
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True

@pytest.mark.xfail(strict=True)
def test_case_40():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = 'Dd'
    sym_spell_0.load_dictionary(str_0, str_0, sym_spell_0, encoding=str_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "1s\tsn$Nz'VaAow~!o&B"
    var_0 = module_1.split(str_0, str_0)
    sym_spell_0.load_dictionary(str_0, str_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_42():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = 'Dd'
    sym_spell_0.create_dictionary(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_43():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = 'D\x0c'
    sym_spell_0.create_dictionary(str_0)

def test_case_44():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "Da'"
    var_0 = sym_spell_0.load_pickle(str_0, str_0)
    assert var_0 is True

def test_case_45():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = 'Dd'
    var_0 = sym_spell_0.lookup(str_0, str_0, include_unknown=str_0, transfer_casing=str_0)

@pytest.mark.xfail(strict=True)
def test_case_46():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = 'D?'
    sym_spell_0.lookup(str_0, sym_spell_0, ignore_token=sym_spell_0)

def test_case_47():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = 'Dd'
    var_0 = sym_spell_0.lookup(str_0, sym_spell_0, ignore_token=str_0)

def test_case_48():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = 'Dd'
    var_0 = sym_spell_0.lookup(str_0, str_0, include_unknown=sym_spell_0, ignore_token=str_0)

def test_case_49():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = 'Dd'
    var_0 = sym_spell_0.lookup(str_0, str_0, ignore_token=str_0, transfer_casing=sym_spell_0)

def test_case_50():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "\\\\\tn$2'`a~\x0bB"
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.lookup_compound(str_0, var_1, var_1)

def test_case_51():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "1\\\tn$N2'`aA~\x0bB"
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.lookup_compound(str_0, var_1)

def test_case_52():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "1\\%n$'a~B"
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.lookup_compound(str_0, var_1, transfer_casing=var_1)

def test_case_53():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "1s\tsn$Nz'aAUow~!o&B"
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True

def test_case_54():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "'"
    str_1 = "5\tL4S'.`8<"
    var_0 = module_1.split(str_0, str_1)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.lookup(str_0, str_1)

def test_case_55():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "14.\\%n$'RqB"
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.lookup_compound(str_0, var_1, transfer_casing=var_1)

def test_case_56():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "D'"
    str_1 = "\\\\\tn$2'`a~\x0bB"
    var_0 = module_1.split(str_0, str_1)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.lookup_compound(str_0, var_1, var_1)

def test_case_57():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = 'Inexpensive and language independent: only deletes,\n        no transposes + replaces + inserts replaces and inserts are\n        expensive and language dependent\n        '
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.lookup_compound(str_0, var_1)

def test_case_58():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = 'pa3:*WtM9A/{APEN"*'
    str_1 = "\\\\\tn$2'`a~\x0bB"
    var_0 = module_1.split(str_0, str_1)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.lookup_compound(str_0, var_1, var_1)

@pytest.mark.xfail(strict=True)
def test_case_59():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    verbosity_0 = module_0.Verbosity.ALL
    str_0 = "D'"
    var_0 = sym_spell_0.delete_dictionary_entry(str_0)
    assert var_0 is False
    var_1 = sym_spell_0.lookup(str_0, verbosity_0, transfer_casing=sym_spell_0)
    sym_spell_0.load_bigram_dictionary(str_0, sym_spell_0, str_0)

def test_case_60():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "\\\\\tn$2'`aA~\x0bB"
    str_1 = "\\\\\tn$2'`a~\x0bB"
    var_0 = module_1.split(str_0, str_1)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.lookup_compound(str_0, var_1, var_1)

def test_case_61():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "1s\tsn$Nz'aAUow~!o&B"
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.lookup_compound(str_0, var_1, transfer_casing=var_1)

def test_case_62():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "7+bopKtF6ng6'7"
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.lookup_compound(str_0, var_1, transfer_casing=var_1)

def test_case_63():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = 'AFZBGq$R'
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.lookup_compound(str_0, var_1)

def test_case_64():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = ';6+a_mIBZ;k~p:4\x0b/Z!P'
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.lookup_compound(str_0, var_1, transfer_casing=var_1)

@pytest.mark.xfail(strict=True)
def test_case_65():
    bool_0 = False
    sym_spell_0 = module_0.SymSpell(count_threshold=bool_0)
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    sym_spell_0.create_dictionary_entry(sym_spell_0, bool_0)

def test_case_66():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "s\tsn$Nz'aAUow~!&B"
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.lookup_compound(str_0, var_1, transfer_casing=var_1)

def test_case_67():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "1s\tsn$wNz'aAUow~!o&B"
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.lookup_compound(str_0, var_1, var_0)

def test_case_68():
    sym_spell_0 = module_0.SymSpell()
    assert f'{type(sym_spell_0).__module__}.{type(sym_spell_0).__qualname__}' == 'symspellpy.symspellpy.SymSpell'
    assert module_0.SymSpell.data_version == 2
    assert module_0.SymSpell.N == 1024908267229
    assert f'{type(module_0.SymSpell.below_threshold_words).__module__}.{type(module_0.SymSpell.below_threshold_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.bigrams).__module__}.{type(module_0.SymSpell.bigrams).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.deletes).__module__}.{type(module_0.SymSpell.deletes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.replaced_words).__module__}.{type(module_0.SymSpell.replaced_words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.words).__module__}.{type(module_0.SymSpell.words).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SymSpell.word_count).__module__}.{type(module_0.SymSpell.word_count).__qualname__}' == 'builtins.property'
    str_0 = "js\tsn$Pz'a,Uow8~'o&B"
    var_0 = module_1.split(str_0, str_0)
    var_1 = sym_spell_0.create_dictionary(var_0)
    assert var_1 is True
    var_2 = sym_spell_0.word_segmentation(str_0, var_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'symspellpy.symspellpy.Composition'
    assert len(var_2) == 4
    assert f'{type(module_0.Composition.segmented_string).__module__}.{type(module_0.Composition.segmented_string).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.Composition.corrected_string).__module__}.{type(module_0.Composition.corrected_string).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.Composition.distance_sum).__module__}.{type(module_0.Composition.distance_sum).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.Composition.log_prob_sum).__module__}.{type(module_0.Composition.log_prob_sum).__qualname__}' == '_collections._tuplegetter'